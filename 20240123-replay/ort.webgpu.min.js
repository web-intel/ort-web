/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var ha=Object.defineProperty;var Xl=Object.getOwnPropertyDescriptor;var Ql=Object.getOwnPropertyNames;var Jl=Object.prototype.hasOwnProperty;var Z=(e,t)=>()=>(e&&(t=e(e=0)),t);var hr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Yt=(e,t)=>{for(var r in t)ha(e,r,{get:t[r],enumerable:!0})},ed=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Ql(t))!Jl.call(e,n)&&n!==r&&ha(e,n,{get:()=>t[n],enumerable:!(a=Xl(t,n))||a.enumerable});return e};var Wt=e=>ed(ha({},"__esModule",{value:!0}),e);var In,Zt,Xt,An,En=Z(()=>{"use strict";In=new Map,Zt=[],Xt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=In.get(e);if(a===void 0)In.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Zt.indexOf(e);n!==-1&&Zt.splice(n,1);for(let o=0;o<Zt.length;o++)if(In.get(Zt[o]).priority<=r){Zt.splice(o,0,e);return}Zt.push(e)}return}throw new TypeError("not a valid backend")},An=async e=>{let t=e.length===0?Zt:e,r=[];for(let a of t){let n=In.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let o=!!n.initPromise;try{return o||(n.initPromise=n.backend.init(a)),await n.initPromise,n.initialized=!0,n.backend}catch(u){o||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var ci=Z(()=>{"use strict";En()});var pi,mi=Z(()=>{"use strict";pi="1.18.0"});var fi,Qt,ga=Z(()=>{"use strict";mi();fi="warning",Qt={wasm:{},webgl:{},webgpu:{},versions:{common:pi},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);fi=e}},get logLevel(){return fi}};Object.defineProperty(Qt,"logLevel",{enumerable:!0})});var Ie,hi=Z(()=>{"use strict";ga();Ie=Qt});var gi,yi,bi=Z(()=>{"use strict";gi=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",d=t?.norm,i,p;d===void 0||d.mean===void 0?i=[255,255,255,255]:typeof d.mean=="number"?i=[d.mean,d.mean,d.mean,d.mean]:(i=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(i[3]=d.mean[3])),d===void 0||d.bias===void 0?p=[0,0,0,0]:typeof d.bias=="number"?p=[d.bias,d.bias,d.bias,d.bias]:(p=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(p[3]=d.bias[3]));let h=o*n,g=0,y=h,v=h*2,b=-1;u==="RGBA"?(g=0,y=h,v=h*2,b=h*3):u==="RGB"?(g=0,y=h,v=h*2):u==="RBG"&&(g=0,v=h,y=h*2);for(let x=0;x<o;x++)for(let I=0;I<n;I++){let S=(e.data[g++]-p[0])*i[0],_=(e.data[y++]-p[1])*i[1],T=(e.data[v++]-p[2])*i[2],E=b===-1?255:(e.data[b++]-p[3])*i[3];a.fillStyle="rgba("+S+","+_+","+T+","+E+")",a.fillRect(I,x,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},yi=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),a;if(r!=null){let n,o,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],u=e.dims[3]):(n=e.dims[3],o=e.dims[2],u=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",i=t?.norm,p,h;i===void 0||i.mean===void 0?p=[255,255,255,255]:typeof i.mean=="number"?p=[i.mean,i.mean,i.mean,i.mean]:(p=[i.mean[0],i.mean[1],i.mean[2],255],i.mean[3]!==void 0&&(p[3]=i.mean[3])),i===void 0||i.bias===void 0?h=[0,0,0,0]:typeof i.bias=="number"?h=[i.bias,i.bias,i.bias,i.bias]:(h=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(h[3]=i.bias[3]));let g=o*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let y=4,v=0,b=1,x=2,I=3,S=0,_=g,T=g*2,E=-1;d==="RGBA"?(S=0,_=g,T=g*2,E=g*3):d==="RGB"?(S=0,_=g,T=g*2):d==="RBG"&&(S=0,T=g,_=g*2),a=r.createImageData(n,o);for(let z=0;z<o*n;v+=y,b+=y,x+=y,I+=y,z++)a.data[v]=(e.data[S++]-h[0])*p[0],a.data[b]=(e.data[_++]-h[1])*p[1],a.data[x]=(e.data[T++]-h[2])*p[2],a.data[I]=E===-1?255:(e.data[E++]-h[3])*p[3]}else throw new Error("Can not access image data");return a}});var ya,wi,vi,$i,_i,xi=Z(()=>{"use strict";Tn();ya=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},o,u;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",i=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",p=r*a,h=i==="RGBA"?new Float32Array(p*4):new Float32Array(p*3),g=4,y=0,v=1,b=2,x=3,I=0,S=p,_=p*2,T=-1;d==="RGB"&&(g=3,y=0,v=1,b=2,x=-1),i==="RGBA"?T=p*3:i==="RBG"?(I=0,_=p,S=p*2):i==="BGR"&&(_=0,S=p,I=p*2);for(let z=0;z<p;z++,y+=g,b+=g,v+=g,x+=g)h[I++]=(e[y]+u[0])/o[0],h[S++]=(e[v]+u[1])/o[1],h[_++]=(e[b]+u[2])/o[2],T!==-1&&x!==-1&&(h[T++]=(e[x]+u[3])/o[3]);return i==="RGBA"?new rt("float32",h,[1,4,r,a]):new rt("float32",h,[1,3,r,a])},wi=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string",u,d=t??{},i=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},p=h=>h instanceof HTMLCanvasElement||h instanceof OffscreenCanvas?h.getContext("2d"):null;if(r){let h=i();h.width=e.width,h.height=e.height;let g=p(h);if(g!=null){let y=e.height,v=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(y=t.resizedHeight,v=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=y,d.width=v}else d.tensorFormat="RGBA",d.height=y,d.width=v;g.drawImage(e,0,0),u=g.getImageData(0,0,v,y).data}else throw new Error("Can not access image data")}else if(a){let h,g;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(h=t.resizedHeight,g=t.resizedWidth):(h=e.height,g=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=h,d.width=g,t!==void 0){let y=i();y.width=g,y.height=h;let v=p(y);if(v!=null)v.putImageData(e,0,0),u=v.getImageData(0,0,g,h).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let h=i();h.width=e.width,h.height=e.height;let g=p(h);if(g!=null){let y=e.height,v=e.width;return g.drawImage(e,0,0,v,y),u=g.getImageData(0,0,v,y).data,d.height=y,d.width=v,ya(u,d)}else throw new Error("Can not access image data")}else{if(o)return new Promise((h,g)=>{let y=i(),v=p(y);if(!e||!v)return g();let b=new Image;b.crossOrigin="Anonymous",b.src=e,b.onload=()=>{y.width=b.width,y.height=b.height,v.drawImage(b,0,0,y.width,y.height);let x=v.getImageData(0,0,y.width,y.height);d.height=y.height,d.width=y.width,h(ya(x.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return ya(u,d);throw new Error("Input data provided is not supported - aborted tensor creation")},vi=(e,t)=>{let{width:r,height:a,download:n,dispose:o}=t,u=[1,a,r,4];return new rt({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:o})},$i=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:o}=t;return new rt({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:o})},_i=(e,t,r)=>new rt({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var Wr,On,Si,Ci,Ii=Z(()=>{"use strict";Wr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),On=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Si=!1,Ci=()=>{if(!Si){Si=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(Wr.set("int64",BigInt64Array),On.set(BigInt64Array,"int64")),t&&(Wr.set("uint64",BigUint64Array),On.set(BigUint64Array,"uint64"))}}});var Ai,Ei,Ti=Z(()=>{"use strict";Tn();Ai=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},Ei=(e,t)=>{switch(e.location){case"cpu":return new rt(e.type,e.data,t);case"cpu-pinned":return new rt({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new rt({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new rt({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var rt,Tn=Z(()=>{"use strict";bi();xi();Ii();Ti();rt=class{constructor(t,r,a){Ci();let n,o;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,o=t.dims,t.location){case"cpu-pinned":{let d=Wr.get(n);if(!d)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof d))throw new TypeError(`buffer should be of type ${d.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let d,i;if(typeof t=="string")if(n=t,i=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");d=r}else{let p=Wr.get(t);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?d=p.from(r,BigInt):d=p.from(r)}else if(r instanceof p)d=r;else throw new TypeError(`A ${n} tensor's data must be type of ${p}`)}else if(i=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let p=typeof t[0];if(p==="string")n="string",d=t;else if(p==="boolean")n="bool",d=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else{let p=On.get(t.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=p,d=t}if(i===void 0)i=[d.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");o=i,this.cpuData=d,this.dataLocation="cpu"}let u=Ai(o);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=u}static async fromImage(t,r){return wi(t,r)}static fromTexture(t,r){return vi(t,r)}static fromGpuBuffer(t,r){return $i(t,r)}static fromPinnedBuffer(t,r,a){return _i(t,r,a)}toDataURL(t){return gi(this,t)}toImageData(t){return yi(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Ei(this,t)}}});var Ze,kn=Z(()=>{"use strict";Tn();Ze=rt});var Nr,Oi,it,ot,ba=Z(()=>{"use strict";ga();Nr=(e,t)=>{Qt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},Oi=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],a=!1;for(let n=0;n<r.length;n++){if(a&&!r[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(o+=`::${t}`),Nr("CPU",o);return}r[n].includes("TRACE_FUNC")&&(a=!0)}},it=e=>{Qt.wasm.trace&&Oi("BEGIN",e)},ot=e=>{Qt.wasm.trace&&Oi("END",e)}});var Rn,ki=Z(()=>{"use strict";En();kn();ba();Rn=class e{constructor(t){this.handler=t}async run(t,r,a){it();let n={},o={};if(typeof t!="object"||t===null||t instanceof Ze||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Ze)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let p of r){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);n[p]=null}if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,h=Object.getOwnPropertyNames(r);for(let g of this.outputNames)if(h.indexOf(g)!==-1){let y=r[g];(y===null||y instanceof Ze)&&(p=!0,u=!1,n[g]=y)}if(p){if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else o=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of this.inputNames)if(typeof t[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(u)for(let p of this.outputNames)n[p]=null;let d=await this.handler.run(t,n,o),i={};for(let p in d)if(Object.hasOwnProperty.call(d,p)){let h=d[p];h instanceof Ze?i[p]=h:i[p]=new Ze(h.type,h.data,h.dims)}return ot(),i}async release(){return this.handler.dispose()}static async create(t,r,a,n){it();let o,u={};if(typeof t=="string"){if(o=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(o=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let g=t,y=0,v=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(y=r,!Number.isSafeInteger(y))throw new RangeError("'byteOffset' must be an integer.");if(y<0||y>=g.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${g.byteLength}).`);if(v=t.byteLength-y,typeof a=="number"){if(v=a,!Number.isSafeInteger(v))throw new RangeError("'byteLength' must be an integer.");if(v<=0||y+v>g.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${g.byteLength-y}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(g,y,v)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let i=(u.executionProviders||[]).map(g=>typeof g=="string"?g:g.name),h=await(await An(i)).createInferenceSessionHandler(o,u);return ot(),new e(h)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var Ri,Pi=Z(()=>{"use strict";ki();Ri=Rn});var Bi=Z(()=>{"use strict"});var td,Pn,Di=Z(()=>{"use strict";En();kn();td="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Pn=class e{constructor(t,r,a){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=a}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",o=r||{},d=(o.executionProviders||[]).map(p=>typeof p=="string"?p:p.name),i=await An(d);if(i.createTrainingSessionHandler){let p=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,o);return new e(p,!!t.optimizerModel,!!t.evalModel)}else throw new Error(td)}typeNarrowingForRunStep(t,r,a,n,o){let u={},d={};if(typeof a!="object"||a===null||a instanceof Ze||Array.isArray(a))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof Ze)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let p of n){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);u[p]=null}if(typeof o=="object"&&o!==null)d=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,h=Object.getOwnPropertyNames(n);for(let g of r)if(h.indexOf(g)!==-1){let y=n[g];(y===null||y instanceof Ze)&&(p=!0,i=!1,u[g]=y)}if(p){if(typeof o=="object"&&o!==null)d=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else d=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of t)if(typeof a[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(i)for(let p of r)u[p]=null;return[u,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Ze?r[a]=n:r[a]=new Ze(n.type,n.data,n.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,a){let[n,o]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,a),u=await this.handler.runTrainStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(u)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,a){if(this.hasEvalModel){let[n,o]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,a),u=await this.handler.runEvalStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(u)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var Mi,zi=Z(()=>{"use strict";Di();Mi=Pn});var wa={};Yt(wa,{InferenceSession:()=>Ri,TRACE:()=>Nr,TRACE_FUNC_BEGIN:()=>it,TRACE_FUNC_END:()=>ot,Tensor:()=>Ze,TrainingSession:()=>Mi,env:()=>Ie,registerBackend:()=>Xt});var ft=Z(()=>{"use strict";ci();hi();Pi();kn();ba();Bi();zi()});var va={};Yt(va,{createReadStream:()=>Vi,readFile:()=>rd,readFileSync:()=>nd});var rd,nd,Vi,$a=Z(()=>{rd=void 0,nd=void 0,Vi=void 0});var _a={};Yt(_a,{join:()=>ad});var ad,xa=Z(()=>{ad=void 0});var Hi=hr((Ni,Sa)=>{"use strict";var Wi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((s,c)=>{a=s,n=c}),r.mountExternalData=(s,c)=>{(r.gb||(r.gb=new Map)).set(s,c)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(s,c,f,$,A,D,H,K)=>{r.Fb=s,r.vb=c,r.xb=f,r.ob=$,r.wb=A,r.Ra=D,r.yb=H,r.zb=K,c=(Y,j,te)=>(...ce)=>{let ye=dt,O=j?.();ce=Y(...ce);let ne=j?.();return O!==ne&&(Y=ne,te(O),j=te=null),dt!=ye?gn():ce},f=Y=>async(...j)=>{try{if(r.fb)throw Error("Session already started");let te=r.fb={Ab:j[0],errors:[]},ce=await Y(...j);if(r.fb!==te)throw Error("Session mismatch");s.flush();let ye=te.errors;if(0<ye.length){let O=await Promise.all(ye);if(O=O.filter(ne=>ne),0<O.length)throw Error(O.join(`
`))}return ce}finally{r.fb=null}},r._OrtRun=f(c(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=f(c(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=c(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,j,te,ce)=>s.registerBuffer(Y,j,te,ce),r.jsepUnregisterBuffers=Y=>{s.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>s.getBuffer(Y),r.jsepCreateDownloader=(Y,j,te)=>s.createDownloader(Y,j,te),r.jsepOnRunStart=()=>s.onRunStart()};var o=Object.assign({},r),u="./this.program",d=(s,c)=>{throw c},i=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",g="",y,v,b;if(h){var x=($a(),Wt(va)),I=(xa(),Wt(_a));g=p?I.dirname(g)+"/":__dirname+"/",y=(s,c)=>(s=ee(s)?new URL(s):I.normalize(s),x.readFileSync(s,c?void 0:"utf8")),b=s=>(s=y(s,!0),s.buffer||(s=new Uint8Array(s)),s),v=(s,c,f,$=!0)=>{s=ee(s)?new URL(s):I.normalize(s),x.readFile(s,$?void 0:"utf8",(A,D)=>{A?f(A):c($?D.buffer:D)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),d=(s,c)=>{throw process.exitCode=s,c},r.inspect=()=>"[Emscripten Module object]"}else(i||p)&&(p?g=self.location.href:typeof document<"u"&&document.currentScript&&(g=document.currentScript.src),e&&(g=e),g.indexOf("blob:")!==0?g=g.substr(0,g.replace(/[?#].*/,"").lastIndexOf("/")+1):g="",y=s=>{var c=new XMLHttpRequest;return c.open("GET",s,!1),c.send(null),c.responseText},p&&(b=s=>{var c=new XMLHttpRequest;return c.open("GET",s,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),v=(s,c,f)=>{var $=new XMLHttpRequest;$.open("GET",s,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):f()},$.onerror=f,$.send(null)});var S=console.log.bind(console),_=console.error.bind(console);Object.assign(r,o),o=null,typeof WebAssembly!="object"&&Le("no native wasm support detected");var T,E=!1,z,B,V,N,X,R,q,J,re,Ee,Re;function ie(){var s=T.buffer;r.HEAP8=B=new Int8Array(s),r.HEAP16=N=new Int16Array(s),r.HEAPU8=V=new Uint8Array(s),r.HEAPU16=X=new Uint16Array(s),r.HEAP32=R=new Int32Array(s),r.HEAPU32=q=new Uint32Array(s),r.HEAPF32=J=new Float32Array(s),r.HEAPF64=Re=new Float64Array(s),r.HEAP64=re=new BigInt64Array(s),r.HEAPU64=Ee=new BigUint64Array(s)}var Oe=[],Me=[],de=[],ge=0,Ae=null,ke=null;function Le(s){throw s="Aborted("+s+")",_(s),E=!0,z=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),n(s),s}var G=s=>s.startsWith("data:application/octet-stream;base64,"),ee=s=>s.startsWith("file://"),be;if(be="ort-wasm-simd.wasm",!G(be)){var Ct=be;be=r.locateFile?r.locateFile(Ct,g):g+Ct}function Ge(s){if(b)return b(s);throw"both async and sync fetching of the wasm failed"}function lt(s){if(i||p){if(typeof fetch=="function"&&!ee(s))return fetch(s,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+s+"'";return c.arrayBuffer()}).catch(()=>Ge(s));if(v)return new Promise((c,f)=>{v(s,$=>c(new Uint8Array($)),f)})}return Promise.resolve().then(()=>Ge(s))}function yt(s,c,f){return lt(s).then($=>WebAssembly.instantiate($,c)).then($=>$).then(f,$=>{_(`failed to asynchronously prepare wasm: ${$}`),Le($)})}function je(s,c){var f=be;return typeof WebAssembly.instantiateStreaming!="function"||G(f)||ee(f)||h||typeof fetch!="function"?yt(f,s,c):fetch(f,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,s).then(c,function(A){return _(`wasm streaming compile failed: ${A}`),_("falling back to ArrayBuffer instantiation"),yt(f,s,c)}))}var Ne={945136:(s,c,f,$)=>{if(typeof r>"u"||!r.gb)return 1;if(s=Ke(s>>>0),s.startsWith("./")&&(s=s.substring(2)),s=r.gb.get(s),!s)return 2;if(c>>>=0,f>>>=0,c+f>s.byteLength)return 3;try{return V.set(s.subarray(c,c+f),$>>>0>>>0),0}catch{return 4}},945637:s=>r.vb(s),945670:s=>r.xb(s),945702:(s,c,f)=>{r.ob(s,c,f,!0)},945741:(s,c,f)=>{r.ob(s,c,f)},945774:s=>{r.Ra("Abs",s,void 0)},945825:s=>{r.Ra("Neg",s,void 0)},945876:s=>{r.Ra("Floor",s,void 0)},945929:s=>{r.Ra("Ceil",s,void 0)},945981:s=>{r.Ra("Reciprocal",s,void 0)},946039:s=>{r.Ra("Sqrt",s,void 0)},946091:s=>{r.Ra("Exp",s,void 0)},946142:s=>{r.Ra("Erf",s,void 0)},946193:s=>{r.Ra("Sigmoid",s,void 0)},946248:(s,c,f)=>{r.Ra("HardSigmoid",s,{alpha:c,beta:f})},946327:s=>{r.Ra("Log",s,void 0)},946378:s=>{r.Ra("Sin",s,void 0)},946429:s=>{r.Ra("Cos",s,void 0)},946480:s=>{r.Ra("Tan",s,void 0)},946531:s=>{r.Ra("Asin",s,void 0)},946583:s=>{r.Ra("Acos",s,void 0)},946635:s=>{r.Ra("Atan",s,void 0)},946687:s=>{r.Ra("Sinh",s,void 0)},946739:s=>{r.Ra("Cosh",s,void 0)},946791:s=>{r.Ra("Asinh",s,void 0)},946844:s=>{r.Ra("Acosh",s,void 0)},946897:s=>{r.Ra("Atanh",s,void 0)},946950:s=>{r.Ra("Tanh",s,void 0)},947002:s=>{r.Ra("Not",s,void 0)},947053:(s,c,f)=>{r.Ra("Clip",s,{min:c,max:f})},947122:s=>{r.Ra("Clip",s,void 0)},947174:(s,c)=>{r.Ra("Elu",s,{alpha:c})},947232:s=>{r.Ra("Relu",s,void 0)},947284:(s,c)=>{r.Ra("LeakyRelu",s,{alpha:c})},947348:(s,c)=>{r.Ra("ThresholdedRelu",s,{alpha:c})},947418:(s,c)=>{r.Ra("Cast",s,{to:c})},947476:s=>{r.Ra("Add",s,void 0)},947527:s=>{r.Ra("Sub",s,void 0)},947578:s=>{r.Ra("Mul",s,void 0)},947629:s=>{r.Ra("Div",s,void 0)},947680:s=>{r.Ra("Pow",s,void 0)},947731:s=>{r.Ra("Equal",s,void 0)},947784:s=>{r.Ra("Greater",s,void 0)},947839:s=>{r.Ra("GreaterOrEqual",s,void 0)},947901:s=>{r.Ra("Less",s,void 0)},947953:s=>{r.Ra("LessOrEqual",s,void 0)},948012:(s,c,f,$,A)=>{r.Ra("ReduceMean",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},948171:(s,c,f,$,A)=>{r.Ra("ReduceMax",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},948329:(s,c,f,$,A)=>{r.Ra("ReduceMin",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},948487:(s,c,f,$,A)=>{r.Ra("ReduceProd",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},948646:(s,c,f,$,A)=>{r.Ra("ReduceSum",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},948804:(s,c,f,$,A)=>{r.Ra("ReduceL1",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},948961:(s,c,f,$,A)=>{r.Ra("ReduceL2",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},949118:(s,c,f,$,A)=>{r.Ra("ReduceLogSum",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},949279:(s,c,f,$,A)=>{r.Ra("ReduceSumSquare",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},949443:(s,c,f,$,A)=>{r.Ra("ReduceLogSumExp",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},949607:s=>{r.Ra("Where",s,void 0)},949660:(s,c,f)=>{r.Ra("Transpose",s,{perm:c?Array.from(R.subarray(c>>>0,f>>>0)):[]})},949768:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne)=>{r.Ra("ConvTranspose",s,{format:Y?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[A],pads:[D,H],strides:[K],wIsConst:()=>!!B[j>>>0],outputPadding:te?Array.from(R.subarray(te>>>0,ce>>>0)):[],outputShape:ye?Array.from(R.subarray(ye>>>0,O>>>0)):[],activation:Ke(ne)})},950170:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O)=>{r.Ra("ConvTranspose",s,{format:K?"NHWC":"NCHW",autoPad:c,dilations:Array.from(R.subarray(f>>>0,(f>>>0)+2>>>0)),group:$,kernelShape:Array.from(R.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(R.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(R.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:j?Array.from(R.subarray(j>>>0,te>>>0)):[],outputShape:ce?Array.from(R.subarray(ce>>>0,ye>>>0)):[],activation:Ke(O)})},950735:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne)=>{r.Ra("ConvTranspose",s,{format:Y?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[A],pads:[D,H],strides:[K],wIsConst:()=>!!B[j>>>0],outputPadding:te?Array.from(R.subarray(te>>>0,ce>>>0)):[],outputShape:ye?Array.from(R.subarray(ye>>>0,O>>>0)):[],activation:Ke(ne)})},951137:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O)=>{r.Ra("ConvTranspose",s,{format:K?"NHWC":"NCHW",autoPad:c,dilations:Array.from(R.subarray(f>>>0,(f>>>0)+2>>>0)),group:$,kernelShape:Array.from(R.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(R.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(R.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:j?Array.from(R.subarray(j>>>0,te>>>0)):[],outputShape:ce?Array.from(R.subarray(ce>>>0,ye>>>0)):[],activation:Ke(O)})},951702:(s,c)=>{r.Ra("GlobalAveragePool",s,{format:c?"NHWC":"NCHW"})},951793:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne,we)=>{r.Ra("AveragePool",s,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[j,te,ce,ye],strides:[O,ne]})},952077:(s,c)=>{r.Ra("GlobalAveragePool",s,{format:c?"NHWC":"NCHW"})},952168:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne,we)=>{r.Ra("AveragePool",s,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[j,te,ce,ye],strides:[O,ne]})},952452:(s,c)=>{r.Ra("GlobalMaxPool",s,{format:c?"NHWC":"NCHW"})},952539:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne,we)=>{r.Ra("MaxPool",s,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[j,te,ce,ye],strides:[O,ne]})},952819:(s,c)=>{r.Ra("GlobalMaxPool",s,{format:c?"NHWC":"NCHW"})},952906:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne,we)=>{r.Ra("MaxPool",s,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[j,te,ce,ye],strides:[O,ne]})},953186:(s,c,f,$,A)=>{r.Ra("Gemm",s,{alpha:c,beta:f,transA:$,transB:A})},953290:s=>{r.Ra("MatMul",s,void 0)},953344:(s,c,f,$)=>{r.Ra("ArgMax",s,{keepDims:!!c,selectLastIndex:!!f,axis:$})},953452:(s,c,f,$)=>{r.Ra("ArgMin",s,{keepDims:!!c,selectLastIndex:!!f,axis:$})},953560:(s,c)=>{r.Ra("Softmax",s,{axis:c})},953623:(s,c)=>{r.Ra("Concat",s,{axis:c})},953683:(s,c,f,$,A)=>{r.Ra("Split",s,{axis:c,numOutputs:f,splitSizes:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},953823:s=>{r.Ra("Expand",s,void 0)},953877:(s,c)=>{r.Ra("Gather",s,{axis:Number(c)})},953948:(s,c)=>{r.Ra("GatherElements",s,{axis:Number(c)})},954027:(s,c,f,$,A,D,H,K,Y,j,te)=>{r.Ra("Resize",s,{antialias:c,axes:f?Array.from(R.subarray(f>>>0,$>>>0)):[],coordinateTransformMode:Ke(A),cubicCoeffA:D,excludeOutside:H,extrapolationValue:K,keepAspectRatioPolicy:Ke(Y),mode:Ke(j),nearestMode:Ke(te)})},954373:(s,c,f,$,A,D,H)=>{r.Ra("Slice",s,{starts:c?Array.from(R.subarray(c>>>0,f>>>0)):[],ends:$?Array.from(R.subarray($>>>0,A>>>0)):[],axes:D?Array.from(R.subarray(D>>>0,H>>>0)):[]})},954589:s=>{r.Ra("Tile",s,void 0)},954641:(s,c,f)=>{r.Ra("LayerNormalization",s,{axis:Number(c),epsilon:Number(f)})},954748:(s,c,f)=>{r.Ra("InstanceNormalization",s,{epsilon:c,format:f?"NHWC":"NCHW"})},954862:(s,c,f)=>{r.Ra("InstanceNormalization",s,{epsilon:c,format:f?"NHWC":"NCHW"})},954976:s=>{r.Ra("Range",s,void 0)},955029:(s,c)=>{r.Ra("Einsum",s,{equation:Ke(c)})},955110:(s,c,f,$,A)=>{r.Ra("Pad",s,{mode:c,value:f,pads:$?Array.from(R.subarray($>>>0,A>>>0)):[]})},955237:(s,c,f,$,A,D)=>{r.Ra("BatchNormalization",s,{epsilon:c,momentum:f,spatial:!!A,trainingMode:!!$,format:D?"NHWC":"NCHW"})},955406:(s,c,f,$,A,D)=>{r.Ra("BatchNormalization",s,{epsilon:c,momentum:f,spatial:!!A,trainingMode:!!$,format:D?"NHWC":"NCHW"})},955575:(s,c,f)=>{r.Ra("CumSum",s,{exclusive:Number(c),reverse:Number(f)})},955672:(s,c,f,$,A,D,H,K,Y)=>{r.Ra("Attention",s,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:A,doRotary:D,qkvHiddenSizes:H?Array.from(R.subarray(Number(K)>>>0,Number(K)+H>>>0)):[],pastPresentShareBuffer:!!Y})},955944:s=>{r.Ra("Gelu",s,void 0)},955996:(s,c,f,$,A,D)=>{r.Ra("MultiHeadAttention",s,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:A,doRotary:D})},956155:s=>{r.Ra("BiasAdd",s,void 0)},956210:s=>{r.Ra("BiasSplitGelu",s,void 0)},956271:(s,c)=>{r.Ra("SkipLayerNormalization",s,{epsilon:c})},956352:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye)=>{r.Ra("Conv",s,{format:Y?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:$,kernel_shape:[A],pads:D?Array.from(R.subarray(D>>>0,H>>>0)):[],strides:[K],w_is_const:()=>!!B[j>>>0],activation:Ke(te),activation_params:ce?Array.from(J.subarray(ce>>>0,ye>>>0)):[]})},956722:(s,c,f,$,A,D,H,K,Y,j,te,ce,ye,O,ne,we)=>{r.Ra("Conv",s,{format:ce?"NHWC":"NCHW",auto_pad:c,dilations:[f,$],group:A,kernel_shape:[D,H],pads:K?Array.from(R.subarray(K>>>0,Y>>>0)):[],strides:[j,te],w_is_const:()=>!!B[ye>>>0],activation:Ke(O),activation_params:ne?Array.from(J.subarray(ne>>>0,we>>>0)):[]})},957113:s=>{r.yb(s)},957147:(s,c)=>r.zb(s,c,r.fb.Ab,r.fb.errors)};function It(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function Dt(s){this.cb=s-24,this.rb=function(c){q[this.cb+4>>>2>>>0]=c},this.qb=function(c){q[this.cb+8>>>2>>>0]=c},this.kb=function(c,f){this.jb(),this.rb(c),this.qb(f)},this.jb=function(){q[this.cb+16>>>2>>>0]=0}}var At=0,Xr=0,Qr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,xr=(s,c,f)=>{c>>>=0;var $=c+f;for(f=c;s[f]&&!(f>=$);)++f;if(16<f-c&&s.buffer&&Qr)return Qr.decode(s.subarray(c,f));for($="";c<f;){var A=s[c++];if(A&128){var D=s[c++]&63;if((A&224)==192)$+=String.fromCharCode((A&31)<<6|D);else{var H=s[c++]&63;A=(A&240)==224?(A&15)<<12|D<<6|H:(A&7)<<18|D<<12|H<<6|s[c++]&63,65536>A?$+=String.fromCharCode(A):(A-=65536,$+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else $+=String.fromCharCode(A)}return $},Ke=(s,c)=>(s>>>=0)?xr(V,s,c):"",bt=s=>{for(var c=0,f=0;f<s.length;++f){var $=s.charCodeAt(f);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++f):c+=3}return c},zt=(s,c,f,$)=>{if(f>>>=0,!(0<$))return 0;var A=f;$=f+$-1;for(var D=0;D<s.length;++D){var H=s.charCodeAt(D);if(55296<=H&&57343>=H){var K=s.charCodeAt(++D);H=65536+((H&1023)<<10)|K&1023}if(127>=H){if(f>=$)break;c[f++>>>0]=H}else{if(2047>=H){if(f+1>=$)break;c[f++>>>0]=192|H>>6}else{if(65535>=H){if(f+2>=$)break;c[f++>>>0]=224|H>>12}else{if(f+3>=$)break;c[f++>>>0]=240|H>>18,c[f++>>>0]=128|H>>12&63}c[f++>>>0]=128|H>>6&63}c[f++>>>0]=128|H&63}}return c[f>>>0]=0,f-A},tr=s=>{if(s===null)return"null";var c=typeof s;return c==="object"||c==="array"||c==="function"?s.toString():""+s},rr,at=s=>{for(var c="";V[s>>>0];)c+=rr[V[s++>>>0]];return c},wt={},nr={},Jr={},ze;function da(s,c,f={}){var $=c.name;if(!s)throw new ze(`type "${$}" must have a positive integer typeid pointer`);if(nr.hasOwnProperty(s)){if(f.tb)return;throw new ze(`Cannot register type '${$}' twice`)}nr[s]=c,delete Jr[s],wt.hasOwnProperty(s)&&(c=wt[s],delete wt[s],c.forEach(A=>A()))}function Ce(s,c,f={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");da(s,c,f)}var Sr=(s,c,f)=>{switch(c){case 1:return f?$=>B[$>>>0>>>0]:$=>V[$>>>0>>>0];case 2:return f?$=>N[$>>>1>>>0]:$=>X[$>>>1>>>0];case 4:return f?$=>R[$>>>2>>>0]:$=>q[$>>>2>>>0];case 8:return f?$=>re[$>>>3]:$=>Ee[$>>>3];default:throw new TypeError(`invalid integer width (${c}): ${s}`)}};function ar(){this.$a=[void 0],this.nb=[]}var Xe=new ar;function Cr(s){s>>>=0,s>=Xe.cb&&--Xe.get(s).pb===0&&Xe.jb(s)}var Qe=s=>{if(!s)throw new ze("Cannot use deleted val. handle = "+s);return Xe.get(s).value},pt=s=>{switch(s){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Xe.kb({pb:1,value:s})}};function ue(s){return this.fromWireType(R[s>>>2>>>0])}var ir=(s,c)=>{switch(c){case 4:return function(f){return this.fromWireType(J[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(Re[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${s}`)}};function en(s){return this.fromWireType(q[s>>>2>>>0])}var tn=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,rn=(s,c)=>{for(var f=s>>1,$=f+c/2;!(f>=$)&&X[f>>>0];)++f;if(f<<=1,32<f-s&&tn)return tn.decode(V.subarray(s>>>0,f>>>0));for(f="",$=0;!($>=c/2);++$){var A=N[s+2*$>>>1>>>0];if(A==0)break;f+=String.fromCharCode(A)}return f},ca=(s,c,f)=>{if(f??=2147483647,2>f)return 0;f-=2;var $=c;f=f<2*s.length?f/2:s.length;for(var A=0;A<f;++A)N[c>>>1>>>0]=s.charCodeAt(A),c+=2;return N[c>>>1>>>0]=0,c-$},nn=s=>2*s.length,an=(s,c)=>{for(var f=0,$="";!(f>=c/4);){var A=R[s+4*f>>>2>>>0];if(A==0)break;++f,65536<=A?(A-=65536,$+=String.fromCharCode(55296|A>>10,56320|A&1023)):$+=String.fromCharCode(A)}return $},on=(s,c,f)=>{if(c>>>=0,f??=2147483647,4>f)return 0;var $=c;f=$+f-4;for(var A=0;A<s.length;++A){var D=s.charCodeAt(A);if(55296<=D&&57343>=D){var H=s.charCodeAt(++A);D=65536+((D&1023)<<10)|H&1023}if(R[c>>>2>>>0]=D,c+=4,c+4>f)break}return R[c>>>2>>>0]=0,c-$},sn=s=>{for(var c=0,f=0;f<s.length;++f){var $=s.charCodeAt(f);55296<=$&&57343>=$&&++f,c+=4}return c},Lt=(s,c)=>{var f=nr[s];if(f===void 0)throw s=jt(s),f=at(s),ct(s),new ze(c+" has unknown type "+f);return f},Ir=(s,c,f)=>{var $=[];return s=s.toWireType($,f),$.length&&(q[c>>>2>>>0]=pt($)),s},Gt=[],un={},or=s=>{var c=un[s];return c===void 0?at(s):c},Ar=()=>typeof globalThis=="object"?globalThis:Function("return this")(),ln=s=>{var c=Gt.length;return Gt.push(s),c},dn=(s,c)=>{for(var f=Array(s),$=0;$<s;++$)f[$]=Lt(q[c+4*$>>>2>>>0],"parameter "+$);return f},Er=(s,c)=>Object.defineProperty(c,"name",{value:s});function cn(s){var c=Function;if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var f=Er(c.name||"unknownFunctionName",function(){});return f.prototype=c.prototype,f=new f,s=c.apply(f,s),s instanceof Object?s:f}var Mt=s=>s%4===0&&(s%100!==0||s%400===0),Tr=[0,31,60,91,121,152,182,213,244,274,305,335],Or=[0,31,59,90,120,151,181,212,243,273,304,334],kr=s=>{var c=bt(s)+1,f=Je(c);return f&&zt(s,V,f,c),f},sr=[],ur=(s,c)=>{sr.length=0;for(var f;f=V[s++>>>0];){var $=f!=105;$&=f!=112,c+=$&&c%8?4:0,sr.push(f==112?q[c>>>2>>>0]:f==106?re[c>>>3]:f==105?R[c>>>2>>>0]:Re[c>>>3>>>0]),c+=$?8:4}return sr},Ut={},lr=()=>{if(!Et){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},c;for(c in Ut)Ut[c]===void 0?delete s[c]:s[c]=Ut[c];var f=[];for(c in s)f.push(`${c}=${s[c]}`);Et=f}return Et},Et,pn=[null,[],[]],Rr=[31,29,31,30,31,30,31,31,30,31,30,31],Pr=[31,28,31,30,31,30,31,31,30,31,30,31];function mn(s){var c=Array(bt(s)+1);return zt(s,c,0,c.length),c}function Br(s,c,f,$){function A(O,ne,we){for(O=typeof O=="number"?O.toString():O||"";O.length<ne;)O=we[0]+O;return O}function D(O,ne){return A(O,ne,"0")}function H(O,ne){function we(Vr){return 0>Vr?-1:0<Vr?1:0}var $t;return($t=we(O.getFullYear()-ne.getFullYear()))===0&&($t=we(O.getMonth()-ne.getMonth()))===0&&($t=we(O.getDate()-ne.getDate())),$t}function K(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function Y(O){var ne=O.ab;for(O=new Date(new Date(O.bb+1900,0,1).getTime());0<ne;){var we=O.getMonth(),$t=(Mt(O.getFullYear())?Rr:Pr)[we];if(ne>$t-O.getDate())ne-=$t-O.getDate()+1,O.setDate(1),11>we?O.setMonth(we+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ne);break}}return we=new Date(O.getFullYear()+1,0,4),ne=K(new Date(O.getFullYear(),0,4)),we=K(we),0>=H(ne,O)?0>=H(we,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}s>>>=0,c>>>=0,f>>>=0,$>>>=0;var j=q[$+40>>>2>>>0];$={Db:R[$>>>2>>>0],Cb:R[$+4>>>2>>>0],hb:R[$+8>>>2>>>0],mb:R[$+12>>>2>>>0],ib:R[$+16>>>2>>>0],bb:R[$+20>>>2>>>0],Va:R[$+24>>>2>>>0],ab:R[$+28>>>2>>>0],Gb:R[$+32>>>2>>>0],Bb:R[$+36>>>2>>>0],Eb:j?Ke(j):""},f=Ke(f),j={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var te in j)f=f.replace(new RegExp(te,"g"),j[te]);var ce="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ye="January February March April May June July August September October November December".split(" ");j={"%a":O=>ce[O.Va].substring(0,3),"%A":O=>ce[O.Va],"%b":O=>ye[O.ib].substring(0,3),"%B":O=>ye[O.ib],"%C":O=>D((O.bb+1900)/100|0,2),"%d":O=>D(O.mb,2),"%e":O=>A(O.mb,2," "),"%g":O=>Y(O).toString().substring(2),"%G":O=>Y(O),"%H":O=>D(O.hb,2),"%I":O=>(O=O.hb,O==0?O=12:12<O&&(O-=12),D(O,2)),"%j":O=>{for(var ne=0,we=0;we<=O.ib-1;ne+=(Mt(O.bb+1900)?Rr:Pr)[we++]);return D(O.mb+ne,3)},"%m":O=>D(O.ib+1,2),"%M":O=>D(O.Cb,2),"%n":()=>`
`,"%p":O=>0<=O.hb&&12>O.hb?"AM":"PM","%S":O=>D(O.Db,2),"%t":()=>"	","%u":O=>O.Va||7,"%U":O=>D(Math.floor((O.ab+7-O.Va)/7),2),"%V":O=>{var ne=Math.floor((O.ab+7-(O.Va+6)%7)/7);if(2>=(O.Va+371-O.ab-2)%7&&ne++,ne)ne==53&&(we=(O.Va+371-O.ab)%7,we==4||we==3&&Mt(O.bb)||(ne=1));else{ne=52;var we=(O.Va+7-O.ab-1)%7;(we==4||we==5&&Mt(O.bb%400-1))&&ne++}return D(ne,2)},"%w":O=>O.Va,"%W":O=>D(Math.floor((O.ab+7-(O.Va+6)%7)/7),2),"%y":O=>(O.bb+1900).toString().substring(2),"%Y":O=>O.bb+1900,"%z":O=>{O=O.Bb;var ne=0<=O;return O=Math.abs(O)/60,(ne?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Eb,"%%":()=>"%"},f=f.replace(/%%/g,"\0\0");for(te in j)f.includes(te)&&(f=f.replace(new RegExp(te,"g"),j[te]($)));return f=f.replace(/\0\0/g,"%"),te=mn(f),te.length>c?0:(B.set(te,s>>>0),te.length-1)}var Vt=s=>{try{s()}catch(c){Le(c)}};function fn(){var s=oe,c={};for(let[f,$]of Object.entries(s))c[f]=typeof $=="function"?function(){Ft.push(f);try{return $.apply(null,arguments)}finally{E||(Ft.pop(),dt&&mt===1&&Ft.length===0&&(mt=0,Vt($n),typeof Fibers<"u"&&Fibers.Hb()))}}:$;return c}var mt=0,dt=null,dr=0,Ft=[],Dr={},Mr={},hn=0,cr=null,pa=[];function gn(){return new Promise((s,c)=>{cr={resolve:s,reject:c}})}function yn(){var s=Je(65548),c=s+12;q[s>>>2>>>0]=c,q[s+4>>>2>>>0]=c+65536,c=Ft[0];var f=Dr[c];return f===void 0&&(f=hn++,Dr[c]=f,Mr[f]=c),R[s+8>>>2>>>0]=f,s}function bn(s){if(!E){if(mt===0){var c=!1,f=!1;s(($=0)=>{if(!E&&(dr=$,c=!0,f)){mt=2,Vt(()=>_n(dt)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),$=!1;try{var A=(0,oe[Mr[R[dt+8>>>2>>>0]]])()}catch(K){A=K,$=!0}var D=!1;if(!dt){var H=cr;H&&(cr=null,($?H.reject:H.resolve)(A),D=!0)}if($&&!D)throw A}}),f=!0,c||(mt=1,dt=yn(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Vt(()=>mr(dt)))}else mt===2?(mt=0,Vt(xn),ct(dt),dt=null,pa.forEach($=>{if(!E)try{$();try{z=z=$=z,r.onExit?.($),E=!0,d($,new It($))}catch(A){A instanceof It||A=="unwind"||d(1,A)}}catch(A){A instanceof It||A=="unwind"||d(1,A)}})):Le(`invalid state: ${mt}`);return dr}}function ma(s){return bn(c=>{s().then(c)})}for(var wn=Array(256),qt=0;256>qt;++qt)wn[qt]=String.fromCharCode(qt);rr=wn,ze=r.BindingError=class extends Error{constructor(s){super(s),this.name="BindingError"}},r.InternalError=class extends Error{constructor(s){super(s),this.name="InternalError"}},Object.assign(ar.prototype,{get(s){return this.$a[s]},has(s){return this.$a[s]!==void 0},kb(s){var c=this.nb.pop()||this.$a.length;return this.$a[c]=s,c},jb(s){this.$a[s]=void 0,this.nb.push(s)}}),Xe.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),Xe.cb=Xe.$a.length,r.count_emval_handles=()=>{for(var s=0,c=Xe.cb;c<Xe.$a.length;++c)Xe.$a[c]!==void 0&&++s;return s};var pr={ha:function(s,c,f){return ma(async()=>{await r.wb(s,c,f)})},a:function(s,c,f){throw s>>>=0,new Dt(s).kb(c>>>0,f>>>0),At=s,Xr++,At},v:function(){return 0},aa:function(){},N:function(){},P:function(){},ba:function(){return 0},_:function(){},V:function(){},Z:function(){},C:function(){},O:function(){},L:function(){},$:function(){},M:function(){},F:function(s,c,f,$,A){c>>>=0,c=at(c);var D=c.indexOf("u")!=-1;D&&(A=(1n<<64n)-1n),Ce(s>>>0,{name:c,fromWireType:H=>H,toWireType:function(H,K){if(typeof K!="bigint"&&typeof K!="number")throw new TypeError(`Cannot convert "${tr(K)}" to ${this.name}`);if(K<$||K>A)throw new TypeError(`Passing a number "${tr(K)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${$}, ${A}]!`);return K},argPackAdvance:8,readValueFromPointer:Sr(c,f>>>0,!D),eb:null})},fa:function(s,c,f,$){c=at(c>>>0),Ce(s>>>0,{name:c,fromWireType:function(A){return!!A},toWireType:function(A,D){return D?f:$},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(V[A>>>0])},eb:null})},ea:function(s,c){c=at(c>>>0),Ce(s>>>0,{name:c,fromWireType:f=>{var $=Qe(f);return Cr(f),$},toWireType:(f,$)=>pt($),argPackAdvance:8,readValueFromPointer:ue,eb:null})},E:function(s,c,f){c=at(c>>>0),Ce(s>>>0,{name:c,fromWireType:$=>$,toWireType:($,A)=>A,argPackAdvance:8,readValueFromPointer:ir(c,f>>>0),eb:null})},r:function(s,c,f,$,A){if(s>>>=0,f>>>=0,c=at(c>>>0),A===-1&&(A=4294967295),A=K=>K,$===0){var D=32-8*f;A=K=>K<<D>>>D}var H=c.includes("unsigned")?function(K,Y){return Y>>>0}:function(K,Y){return Y};Ce(s,{name:c,fromWireType:A,toWireType:H,argPackAdvance:8,readValueFromPointer:Sr(c,f,$!==0),eb:null})},m:function(s,c,f){function $(D){return new A(B.buffer,q[D+4>>>2>>>0],q[D>>>2>>>0])}var A=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];f=at(f>>>0),Ce(s>>>0,{name:f,fromWireType:$,argPackAdvance:8,readValueFromPointer:$},{tb:!0})},G:function(s,c){c=at(c>>>0);var f=c==="std::string";Ce(s>>>0,{name:c,fromWireType:function($){var A=q[$>>>2>>>0],D=$+4;if(f)for(var H=D,K=0;K<=A;++K){var Y=D+K;if(K==A||V[Y>>>0]==0){if(H=Ke(H,Y-H),j===void 0)var j=H;else j+=String.fromCharCode(0),j+=H;H=Y+1}}else{for(j=Array(A),K=0;K<A;++K)j[K]=String.fromCharCode(V[D+K>>>0]);j=j.join("")}return ct($),j},toWireType:function($,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var D=typeof A=="string";if(!(D||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array))throw new ze("Cannot pass non-string to std::string");var H=f&&D?bt(A):A.length,K=Je(4+H+1),Y=K+4;if(q[K>>>2>>>0]=H,f&&D)zt(A,V,Y,H+1);else if(D)for(D=0;D<H;++D){var j=A.charCodeAt(D);if(255<j)throw ct(Y),new ze("String has UTF-16 code units that do not fit in 8 bits");V[Y+D>>>0]=j}else for(D=0;D<H;++D)V[Y+D>>>0]=A[D];return $!==null&&$.push(ct,K),K},argPackAdvance:8,readValueFromPointer:en,eb($){ct($)}})},x:function(s,c,f){if(c>>>=0,f>>>=0,f=at(f),c===2)var $=rn,A=ca,D=nn,H=()=>X,K=1;else c===4&&($=an,A=on,D=sn,H=()=>q,K=2);Ce(s>>>0,{name:f,fromWireType:Y=>{for(var j=q[Y>>>2>>>0],te=H(),ce,ye=Y+4,O=0;O<=j;++O){var ne=Y+4+O*c;(O==j||te[ne>>>K]==0)&&(ye=$(ye,ne-ye),ce===void 0?ce=ye:(ce+=String.fromCharCode(0),ce+=ye),ye=ne+c)}return ct(Y),ce},toWireType:(Y,j)=>{if(typeof j!="string")throw new ze(`Cannot pass non-string to C++ string type ${f}`);var te=D(j),ce=Je(4+te+c);return q[ce>>>2]=te>>K,A(j,ce+4,te+c),Y!==null&&Y.push(ct,ce),ce},argPackAdvance:8,readValueFromPointer:ue,eb(Y){ct(Y)}})},ga:function(s,c){c=at(c>>>0),Ce(s>>>0,{ub:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},ca:()=>1,p:function(s,c,f){return c>>>=0,f>>>=0,s=Qe(s>>>0),c=Lt(c,"emval::as"),Ir(c,f,s)},z:function(s,c,f,$){return f>>>=0,$>>>=0,s=Gt[s>>>0],c=Qe(c>>>0),s(null,c,f,$)},k:function(s,c,f,$,A){return f>>>=0,$>>>=0,A>>>=0,s=Gt[s>>>0],c=Qe(c>>>0),f=or(f),s(c,c[f],$,A)},b:Cr,y:function(s,c){return c>>>=0,s=Qe(s>>>0),c=Qe(c),s==c},t:function(s){return s>>>=0,s===0?pt(Ar()):(s=or(s),pt(Ar()[s]))},j:function(s,c,f){c=dn(s,c>>>0);var $=c.shift();s--;var A=`return function (obj, func, destructorsRef, args) {
`,D=0,H=[];f===0&&H.push("obj");for(var K=["retType"],Y=[$],j=0;j<s;++j)H.push("arg"+j),K.push("argType"+j),Y.push(c[j]),A+=`  var arg${j} = argType${j}.readValueFromPointer(args${D?"+"+D:""});
`,D+=c[j].argPackAdvance;for(A+=`  var rv = ${f===1?"new func":"func.call"}(${H.join(", ")});
`,j=0;j<s;++j)c[j].deleteObject&&(A+=`  argType${j}.deleteObject(arg${j});
`);return $.ub||(K.push("emval_returnValue"),Y.push(Ir),A+=`  return emval_returnValue(retType, destructorsRef, rv);
`),K.push(A+`};
`),s=cn(K).apply(null,Y),f=`methodCaller<(${c.map(te=>te.name).join(", ")}) => ${$.name}>`,ln(Er(f,s))},q:function(s,c){return c>>>=0,s=Qe(s>>>0),c=Qe(c),pt(s[c])},d:function(s){s>>>=0,4<s&&(Xe.get(s).pb+=1)},s:function(){return pt([])},l:function(s){s=Qe(s>>>0);for(var c=Array(s.length),f=0;f<s.length;f++)c[f]=s[f];return pt(c)},e:function(s){return pt(or(s>>>0))},i:function(){return pt({})},h:function(s){s>>>=0;for(var c=Qe(s);c.length;){var f=c.pop();c.pop()(f)}Cr(s)},g:function(s,c,f){c>>>=0,f>>>=0,s=Qe(s>>>0),c=Qe(c),f=Qe(f),s[c]=f},f:function(s,c){return c>>>=0,s=Lt(s>>>0,"_emval_take_value"),s=s.readValueFromPointer(c),pt(s)},S:function(s,c){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),c>>>=0,s=new Date(1e3*s),R[c>>>2>>>0]=s.getUTCSeconds(),R[c+4>>>2>>>0]=s.getUTCMinutes(),R[c+8>>>2>>>0]=s.getUTCHours(),R[c+12>>>2>>>0]=s.getUTCDate(),R[c+16>>>2>>>0]=s.getUTCMonth(),R[c+20>>>2>>>0]=s.getUTCFullYear()-1900,R[c+24>>>2>>>0]=s.getUTCDay(),R[c+28>>>2>>>0]=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(s,c){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),c>>>=0,s=new Date(1e3*s),R[c>>>2>>>0]=s.getSeconds(),R[c+4>>>2>>>0]=s.getMinutes(),R[c+8>>>2>>>0]=s.getHours(),R[c+12>>>2>>>0]=s.getDate(),R[c+16>>>2>>>0]=s.getMonth(),R[c+20>>>2>>>0]=s.getFullYear()-1900,R[c+24>>>2>>>0]=s.getDay(),R[c+28>>>2>>>0]=(Mt(s.getFullYear())?Tr:Or)[s.getMonth()]+s.getDate()-1|0,R[c+36>>>2>>>0]=-(60*s.getTimezoneOffset());var f=new Date(s.getFullYear(),6,1).getTimezoneOffset(),$=new Date(s.getFullYear(),0,1).getTimezoneOffset();R[c+32>>>2>>>0]=(f!=$&&s.getTimezoneOffset()==Math.min($,f))|0},U:function(s){s>>>=0;var c=new Date(R[s+20>>>2>>>0]+1900,R[s+16>>>2>>>0],R[s+12>>>2>>>0],R[s+8>>>2>>>0],R[s+4>>>2>>>0],R[s>>>2>>>0],0),f=R[s+32>>>2>>>0],$=c.getTimezoneOffset(),A=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(D,A);return 0>f?R[s+32>>>2>>>0]=+(A!=D&&H==$):0<f!=(H==$)&&(A=Math.max(D,A),c.setTime(c.getTime()+6e4*((0<f?H:A)-$))),R[s+24>>>2>>>0]=c.getDay(),R[s+28>>>2>>>0]=(Mt(c.getFullYear())?Tr:Or)[c.getMonth()]+c.getDate()-1|0,R[s>>>2>>>0]=c.getSeconds(),R[s+4>>>2>>>0]=c.getMinutes(),R[s+8>>>2>>>0]=c.getHours(),R[s+12>>>2>>>0]=c.getDate(),R[s+16>>>2>>>0]=c.getMonth(),R[s+20>>>2>>>0]=c.getYear(),s=c.getTime(),isNaN(s)?(R[vt()>>>2>>>0]=61,s=-1):s/=1e3,BigInt(s)},Q:function(){return-52},R:function(){},J:function(s,c,f){function $(Y){return(Y=Y.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Y[1]:"GMT"}f>>>=0;var A=new Date().getFullYear(),D=new Date(A,0,1),H=new Date(A,6,1);A=D.getTimezoneOffset();var K=H.getTimezoneOffset();q[s>>>0>>>2>>>0]=60*Math.max(A,K),R[c>>>0>>>2>>>0]=+(A!=K),s=$(D),c=$(H),s=kr(s),c=kr(c),K<A?(q[f>>>2>>>0]=s,q[f+4>>>2>>>0]=c):(q[f>>>2>>>0]=c,q[f+4>>>2>>>0]=s)},u:()=>{Le("")},c:function(s,c,f){return s>>>=0,c=ur(c>>>0,f>>>0),Ne[s].apply(null,c)},H:function(s,c,f){return s>>>=0,c=ur(c>>>0,f>>>0),Ne[s].apply(null,c)},D:()=>Date.now(),K:function(){return 4294901760},o:()=>performance.now(),I:function(s){s>>>=0;var c=V.length;if(4294901760<s)return!1;for(var f=1;4>=f;f*=2){var $=c*(1+.2/f);$=Math.min($,s+100663296);var A=Math;$=Math.max(s,$);e:{A=(A.min.call(A,4294901760,$+(65536-$%65536)%65536)-T.buffer.byteLength+65535)/65536;try{T.grow(A),ie();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},X:function(s,c){s>>>=0,c>>>=0;var f=0;return lr().forEach(($,A)=>{var D=c+f;for(A=q[s+4*A>>>2>>>0]=D,D=0;D<$.length;++D)B[A++>>>0>>>0]=$.charCodeAt(D);B[A>>>0>>>0]=0,f+=$.length+1}),0},Y:function(s,c){s>>>=0,c>>>=0;var f=lr();q[s>>>2>>>0]=f.length;var $=0;return f.forEach(A=>$+=A.length+1),q[c>>>2>>>0]=$,0},w:()=>52,B:function(){return 52},W:function(){return 70},A:function(s,c,f,$){c>>>=0,f>>>=0,$>>>=0;for(var A=0,D=0;D<f;D++){var H=q[c>>>2>>>0],K=q[c+4>>>2>>>0];c+=8;for(var Y=0;Y<K;Y++){var j=V[H+Y>>>0],te=pn[s];j===0||j===10?((s===1?S:_)(xr(te,0)),te.length=0):te.push(j)}A+=K}return q[$>>>2>>>0]=A,0},da:Br,n:function(s,c,f,$){return Br(s>>>0,c>>>0,f>>>0,$>>>0)}},oe=function(){function s(f){return oe=f.exports,oe=fn(),oe=fa(),T=oe.ia,ie(),Me.unshift(oe.ja),ge--,ge==0&&(Ae!==null&&(clearInterval(Ae),Ae=null),ke&&(f=ke,ke=null,f())),oe}var c={a:pr};if(ge++,r.instantiateWasm)try{return r.instantiateWasm(c,s)}catch(f){_(`Module.instantiateWasm callback failed with error: ${f}`),n(f)}return je(c,function(f){s(f.instance)}).catch(n),{}}();r._OrtInit=(s,c)=>(r._OrtInit=oe.ka)(s,c),r._OrtGetLastError=(s,c)=>(r._OrtGetLastError=oe.la)(s,c),r._OrtCreateSessionOptions=(s,c,f,$,A,D,H,K,Y,j)=>(r._OrtCreateSessionOptions=oe.ma)(s,c,f,$,A,D,H,K,Y,j),r._OrtAppendExecutionProvider=(s,c)=>(r._OrtAppendExecutionProvider=oe.na)(s,c),r._OrtAddFreeDimensionOverride=(s,c,f)=>(r._OrtAddFreeDimensionOverride=oe.oa)(s,c,f),r._OrtAddSessionConfigEntry=(s,c,f)=>(r._OrtAddSessionConfigEntry=oe.pa)(s,c,f),r._OrtReleaseSessionOptions=s=>(r._OrtReleaseSessionOptions=oe.qa)(s),r._OrtCreateSession=(s,c,f)=>(r._OrtCreateSession=oe.ra)(s,c,f),r._OrtReleaseSession=s=>(r._OrtReleaseSession=oe.sa)(s),r._OrtGetInputOutputCount=(s,c,f)=>(r._OrtGetInputOutputCount=oe.ta)(s,c,f),r._OrtGetInputName=(s,c)=>(r._OrtGetInputName=oe.ua)(s,c),r._OrtGetOutputName=(s,c)=>(r._OrtGetOutputName=oe.va)(s,c),r._OrtFree=s=>(r._OrtFree=oe.wa)(s),r._OrtCreateTensor=(s,c,f,$,A,D)=>(r._OrtCreateTensor=oe.xa)(s,c,f,$,A,D),r._OrtGetTensorData=(s,c,f,$,A)=>(r._OrtGetTensorData=oe.ya)(s,c,f,$,A),r._OrtReleaseTensor=s=>(r._OrtReleaseTensor=oe.za)(s),r._OrtCreateRunOptions=(s,c,f,$)=>(r._OrtCreateRunOptions=oe.Aa)(s,c,f,$),r._OrtAddRunConfigEntry=(s,c,f)=>(r._OrtAddRunConfigEntry=oe.Ba)(s,c,f),r._OrtReleaseRunOptions=s=>(r._OrtReleaseRunOptions=oe.Ca)(s),r._OrtCreateBinding=s=>(r._OrtCreateBinding=oe.Da)(s),r._OrtBindInput=(s,c,f)=>(r._OrtBindInput=oe.Ea)(s,c,f),r._OrtBindOutput=(s,c,f,$)=>(r._OrtBindOutput=oe.Fa)(s,c,f,$),r._OrtClearBoundOutputs=s=>(r._OrtClearBoundOutputs=oe.Ga)(s),r._OrtReleaseBinding=s=>(r._OrtReleaseBinding=oe.Ha)(s),r._OrtRunWithBinding=(s,c,f,$,A)=>(r._OrtRunWithBinding=oe.Ia)(s,c,f,$,A),r._OrtRun=(s,c,f,$,A,D,H,K)=>(r._OrtRun=oe.Ja)(s,c,f,$,A,D,H,K),r._OrtEndProfiling=s=>(r._OrtEndProfiling=oe.Ka)(s),r._JsepOutput=(s,c,f)=>(r._JsepOutput=oe.La)(s,c,f),r._JsepGetNodeName=s=>(r._JsepGetNodeName=oe.Ma)(s);var vt=()=>(vt=oe.Na)(),Je=r._malloc=s=>(Je=r._malloc=oe.Oa)(s),ct=r._free=s=>(ct=r._free=oe.Pa)(s),jt=s=>(jt=oe.Qa)(s),zr=()=>(zr=oe.Sa)(),Ur=s=>(Ur=oe.Ta)(s),vn=s=>(vn=oe.Ua)(s),mr=s=>(mr=oe.Wa)(s),$n=()=>($n=oe.Xa)(),_n=s=>(_n=oe.Ya)(s),xn=()=>(xn=oe.Za)();r.___start_em_js=957259,r.___stop_em_js=957420;function fa(){var s=oe;s=Object.assign({},s);var c=$=>()=>$()>>>0,f=$=>A=>$(A)>>>0;return s.Na=c(s.Na),s.Oa=f(s.Oa),s.Qa=f(s.Qa),s.Sa=c(s.Sa),s.Ua=f(s.Ua),s}r.stackAlloc=vn,r.stackSave=zr,r.stackRestore=Ur,r.UTF8ToString=Ke,r.stringToUTF8=(s,c,f)=>zt(s,V,c,f),r.lengthBytesUTF8=bt;var fr;ke=function s(){fr||Sn(),fr||(ke=s)};function Sn(){if(!(0<ge)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var s=r.preRun.shift();Oe.unshift(s)}for(;0<Oe.length;)Oe.shift()(r);if(!(0<ge||fr||(fr=!0,r.calledRun=!0,E))){for(;0<Me.length;)Me.shift()(r);for(a(r);0<de.length;)de.shift()(r)}}}return Sn(),t.ready}})();typeof Ni=="object"&&typeof Sa=="object"?Sa.exports=Wi:typeof define=="function"&&define.amd&&define([],()=>Wi)});var Li=hr(()=>{});var Gi=hr(()=>{});var Fi={};Yt(Fi,{cpus:()=>id});var id,qi=Z(()=>{id=void 0});var Yi=hr((Ki,Ca)=>{"use strict";var ji=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return re.buffer!=Oe.buffer&&Le(),Oe}function a(){return re.buffer!=Oe.buffer&&Le(),Me}function n(){return re.buffer!=Oe.buffer&&Le(),de}function o(){return re.buffer!=Oe.buffer&&Le(),ge}function u(){return re.buffer!=Oe.buffer&&Le(),Ae}function d(){return re.buffer!=Oe.buffer&&Le(),ke}var i=t,p,h;i.ready=new Promise((l,m)=>{p=l,h=m}),i.mountExternalData=(l,m)=>{(i.cb||(i.cb=new Map)).set(l,m)},i.unmountExternalData=()=>{delete i.cb},i.jsepInit=(l,m,w,C,k,M,L,ae,_e,pe,he)=>{i.Pb=l,i.xb=m,i.Bb=w,i.lb=C,i.Ab=k,i.Ea=M,i.Cb=L,i.Eb=ae,i.yb=_e,i.zb=pe,i.Db=he,m=(me,Se,P)=>(...se)=>{let ve=Je,tt=Se?.();se=me(...se);let Kt=Se?.();return tt!==Kt&&(me=Kt,P(tt),Se=P=null),Je!=ve?_n():se},w=me=>async(...Se)=>{try{if(i.Xa)throw Error("Session already started");let P=i.Xa={eb:Se[0],errors:[]},se=await me(...Se);if(i.Xa!==P)throw Error("Session mismatch");l.flush();let ve=P.errors;if(0<ve.length){let tt=await Promise.all(ve);if(tt=tt.filter(Kt=>Kt),0<tt.length)throw Error(tt.join(`
`))}return se}finally{i.Xa=null}},i._OrtRun=w(m(i._OrtRun,()=>i._OrtRun,me=>i._OrtRun=me)),i._OrtRunWithBinding=w(m(i._OrtRunWithBinding,()=>i._OrtRunWithBinding,me=>i._OrtRunWithBinding=me)),i._OrtBindInput=m(i._OrtBindInput,()=>i._OrtBindInput,me=>i._OrtBindInput=me),i.jsepRegisterBuffer=(me,Se,P,se)=>l.registerBuffer(me,Se,P,se),i.jsepGetBuffer=me=>l.getBuffer(me),i.jsepCreateDownloader=(me,Se,P)=>l.createDownloader(me,Se,P),i.jsepOnReleaseSession=me=>{l.onReleaseSession(me)},i.jsepOnRunStart=()=>l.onRunStart()};var g=Object.assign({},i),y="./this.program",v=(l,m)=>{throw m},b=typeof window=="object",x=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S=i.ENVIRONMENT_IS_PTHREAD||!1,_="";function T(l){return i.locateFile?i.locateFile(l,_):_+l}var E,z,B;if(I){var V=($a(),Wt(va)),N=(xa(),Wt(_a));_=x?N.dirname(_)+"/":__dirname+"/",E=(m,w)=>(m=Dt(m)?new URL(m):N.normalize(m),V.readFileSync(m,w?void 0:"utf8")),B=m=>(m=E(m,!0),m.buffer||(m=new Uint8Array(m)),m),z=(m,w,C,k=!0)=>{m=Dt(m)?new URL(m):N.normalize(m),V.readFile(m,k?void 0:"utf8",(M,L)=>{M?C(M):w(k?L.buffer:L)})},!i.thisProgram&&1<process.argv.length&&(y=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),v=(m,w)=>{throw process.exitCode=m,w},i.inspect=()=>"[Emscripten Module object]";let l;try{l=Li()}catch(m){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),m}global.Worker=l.Worker}else(b||x)&&(x?_=self.location.href:typeof document<"u"&&document.currentScript&&(_=document.currentScript.src),typeof e<"u"&&e&&(_=e),_.indexOf("blob:")!==0?_=_.substr(0,_.replace(/[?#].*/,"").lastIndexOf("/")+1):_="",I||(E=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},x&&(B=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),z=(l,m,w)=>{var C=new XMLHttpRequest;C.open("GET",l,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?m(C.response):w()},C.onerror=w,C.send(null)}));I&&typeof performance>"u"&&(global.performance=Gi().performance);var X=console.log.bind(console),R=console.error.bind(console);I&&(X=(...l)=>V.writeSync(1,l.join(" ")+`
`),R=(...l)=>V.writeSync(2,l.join(" ")+`
`));var q=X,J=R;Object.assign(i,g),g=null,typeof WebAssembly!="object"&&Ne("no native wasm support detected");var re,Ee,Re=!1,ie,Oe,Me,de,ge,Ae,ke;function Le(){var l=re.buffer;i.HEAP8=Oe=new Int8Array(l),i.HEAP16=new Int16Array(l),i.HEAPU8=Me=new Uint8Array(l),i.HEAPU16=new Uint16Array(l),i.HEAP32=de=new Int32Array(l),i.HEAPU32=ge=new Uint32Array(l),i.HEAPF32=Ae=new Float32Array(l),i.HEAPF64=ke=new Float64Array(l)}var G=16777216;if(S)re=i.wasmMemory;else if(i.wasmMemory)re=i.wasmMemory;else if(re=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0}),!(re.buffer instanceof SharedArrayBuffer))throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");Le(),G=re.buffer.byteLength;var ee=[],be=[],Ct=[],Ge=0,lt=null,yt=null;function je(){if(Ge--,Ge==0&&(lt!==null&&(clearInterval(lt),lt=null),yt)){var l=yt;yt=null,l()}}function Ne(l){throw l="Aborted("+l+")",J(l),Re=!0,ie=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),h(l),l}var It=l=>l.startsWith("data:application/octet-stream;base64,"),Dt=l=>l.startsWith("file://"),At;At="ort-wasm-simd-threaded.wasm",It(At)||(At=T(At));function Xr(l){if(B)return B(l);throw"both async and sync fetching of the wasm failed"}function Qr(l){if(b||x){if(typeof fetch=="function"&&!Dt(l))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at '"+l+"'";return m.arrayBuffer()}).catch(()=>Xr(l));if(z)return new Promise((m,w)=>{z(l,C=>m(new Uint8Array(C)),w)})}return Promise.resolve().then(()=>Xr(l))}function xr(l,m,w){return Qr(l).then(C=>WebAssembly.instantiate(C,m)).then(C=>C).then(w,C=>{J(`failed to asynchronously prepare wasm: ${C}`),Ne(C)})}function Ke(l,m){var w=At;return typeof WebAssembly.instantiateStreaming!="function"||It(w)||Dt(w)||I||typeof fetch!="function"?xr(w,l,m):fetch(w,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,l).then(m,function(k){return J(`wasm streaming compile failed: ${k}`),J("falling back to ArrayBuffer instantiation"),xr(w,l,m)}))}var bt,zt={1355788:(l,m,w,C)=>{if(typeof i>"u"||!i.cb)return 1;if(l=ze(l>>>0),l.startsWith("./")&&(l=l.substring(2)),l=i.cb.get(l),!l)return 2;if(m>>>=0,w>>>=0,C>>>=0,m+w>l.byteLength)return 3;try{return a().set(l.subarray(m,m+w),C>>>0),0}catch{return 4}},1356289:()=>{i.yb(i.Xa.eb)},1356357:()=>{i.zb(i.Xa.eb)},1356423:()=>{i.Db(i.Xa.eb)},1356485:l=>i.xb(l),1356518:l=>i.Bb(l),1356550:(l,m,w)=>{i.lb(l,m,w,!0)},1356589:(l,m,w)=>{i.lb(l,m,w)},1356622:l=>{i.Ea("Abs",l,void 0)},1356673:l=>{i.Ea("Neg",l,void 0)},1356724:l=>{i.Ea("Floor",l,void 0)},1356777:l=>{i.Ea("Ceil",l,void 0)},1356829:l=>{i.Ea("Reciprocal",l,void 0)},1356887:l=>{i.Ea("Sqrt",l,void 0)},1356939:l=>{i.Ea("Exp",l,void 0)},1356990:l=>{i.Ea("Erf",l,void 0)},1357041:l=>{i.Ea("Sigmoid",l,void 0)},1357096:(l,m,w)=>{i.Ea("HardSigmoid",l,{alpha:m,beta:w})},1357175:l=>{i.Ea("Log",l,void 0)},1357226:l=>{i.Ea("Sin",l,void 0)},1357277:l=>{i.Ea("Cos",l,void 0)},1357328:l=>{i.Ea("Tan",l,void 0)},1357379:l=>{i.Ea("Asin",l,void 0)},1357431:l=>{i.Ea("Acos",l,void 0)},1357483:l=>{i.Ea("Atan",l,void 0)},1357535:l=>{i.Ea("Sinh",l,void 0)},1357587:l=>{i.Ea("Cosh",l,void 0)},1357639:l=>{i.Ea("Asinh",l,void 0)},1357692:l=>{i.Ea("Acosh",l,void 0)},1357745:l=>{i.Ea("Atanh",l,void 0)},1357798:l=>{i.Ea("Tanh",l,void 0)},1357850:l=>{i.Ea("Not",l,void 0)},1357901:(l,m,w)=>{i.Ea("Clip",l,{min:m,max:w})},1357970:l=>{i.Ea("Clip",l,void 0)},1358022:(l,m)=>{i.Ea("Elu",l,{alpha:m})},1358080:l=>{i.Ea("Relu",l,void 0)},1358132:(l,m)=>{i.Ea("LeakyRelu",l,{alpha:m})},1358196:(l,m)=>{i.Ea("ThresholdedRelu",l,{alpha:m})},1358266:(l,m)=>{i.Ea("Cast",l,{to:m})},1358324:l=>{i.Ea("Add",l,void 0)},1358375:l=>{i.Ea("Sub",l,void 0)},1358426:l=>{i.Ea("Mul",l,void 0)},1358477:l=>{i.Ea("Div",l,void 0)},1358528:l=>{i.Ea("Pow",l,void 0)},1358579:l=>{i.Ea("Equal",l,void 0)},1358632:l=>{i.Ea("Greater",l,void 0)},1358687:l=>{i.Ea("GreaterOrEqual",l,void 0)},1358749:l=>{i.Ea("Less",l,void 0)},1358801:l=>{i.Ea("LessOrEqual",l,void 0)},1358860:(l,m,w,C,k)=>{i.Ea("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359019:(l,m,w,C,k)=>{i.Ea("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359177:(l,m,w,C,k)=>{i.Ea("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359335:(l,m,w,C,k)=>{i.Ea("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359494:(l,m,w,C,k)=>{i.Ea("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359652:(l,m,w,C,k)=>{i.Ea("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359809:(l,m,w,C,k)=>{i.Ea("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1359966:(l,m,w,C,k)=>{i.Ea("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1360127:(l,m,w,C,k)=>{i.Ea("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1360291:(l,m,w,C,k)=>{i.Ea("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1360455:l=>{i.Ea("Where",l,void 0)},1360508:(l,m,w)=>{i.Ea("Transpose",l,{perm:m?Array.from(n().subarray(m>>>0,w>>>0)):[]})},1360616:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se)=>{i.Ea("ConvTranspose",l,{format:_e?"NHWC":"NCHW",autoPad:m,dilations:[w],group:C,kernel_shape:[k],pads:[M,L],strides:[ae],wIsConst:()=>!!r()[pe>>>0],outputPadding:he?Array.from(n().subarray(he>>>0,me>>>0)):[],outputShape:Se?Array.from(n().subarray(Se>>>0,P>>>0)):[],activation:ze(se)})},1361018:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P)=>{i.Ea("ConvTranspose",l,{format:ae?"NHWC":"NCHW",autoPad:m,dilations:Array.from(n().subarray(w>>>0,(w>>>0)+2>>>0)),group:C,kernelShape:Array.from(n().subarray(k>>>0,(k>>>0)+2>>>0)),pads:Array.from(n().subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(n().subarray(L>>>0,(L>>>0)+2>>>0)),wIsConst:()=>!!r()[_e>>>0],outputPadding:pe?Array.from(n().subarray(pe>>>0,he>>>0)):[],outputShape:me?Array.from(n().subarray(me>>>0,Se>>>0)):[],activation:ze(P)})},1361583:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se)=>{i.Ea("ConvTranspose",l,{format:_e?"NHWC":"NCHW",autoPad:m,dilations:[w],group:C,kernel_shape:[k],pads:[M,L],strides:[ae],wIsConst:()=>!!r()[pe>>>0],outputPadding:he?Array.from(n().subarray(he>>>0,me>>>0)):[],outputShape:Se?Array.from(n().subarray(Se>>>0,P>>>0)):[],activation:ze(se)})},1361985:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P)=>{i.Ea("ConvTranspose",l,{format:ae?"NHWC":"NCHW",autoPad:m,dilations:Array.from(n().subarray(w>>>0,(w>>>0)+2>>>0)),group:C,kernelShape:Array.from(n().subarray(k>>>0,(k>>>0)+2>>>0)),pads:Array.from(n().subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(n().subarray(L>>>0,(L>>>0)+2>>>0)),wIsConst:()=>!!r()[_e>>>0],outputPadding:pe?Array.from(n().subarray(pe>>>0,he>>>0)):[],outputShape:me?Array.from(n().subarray(me>>>0,Se>>>0)):[],activation:ze(P)})},1362550:(l,m)=>{i.Ea("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},1362641:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se,ve)=>{i.Ea("AveragePool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:C,storage_order:k,dilations:[M,L],kernel_shape:[ae,_e],pads:[pe,he,me,Se],strides:[P,se]})},1362925:(l,m)=>{i.Ea("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},1363016:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se,ve)=>{i.Ea("AveragePool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:C,storage_order:k,dilations:[M,L],kernel_shape:[ae,_e],pads:[pe,he,me,Se],strides:[P,se]})},1363300:(l,m)=>{i.Ea("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},1363387:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se,ve)=>{i.Ea("MaxPool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:C,storage_order:k,dilations:[M,L],kernel_shape:[ae,_e],pads:[pe,he,me,Se],strides:[P,se]})},1363667:(l,m)=>{i.Ea("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},1363754:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se,ve)=>{i.Ea("MaxPool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:C,storage_order:k,dilations:[M,L],kernel_shape:[ae,_e],pads:[pe,he,me,Se],strides:[P,se]})},1364034:(l,m,w,C,k)=>{i.Ea("Gemm",l,{alpha:m,beta:w,transA:C,transB:k})},1364138:l=>{i.Ea("MatMul",l,void 0)},1364192:(l,m,w,C)=>{i.Ea("ArgMax",l,{keepDims:!!m,selectLastIndex:!!w,axis:C})},1364300:(l,m,w,C)=>{i.Ea("ArgMin",l,{keepDims:!!m,selectLastIndex:!!w,axis:C})},1364408:(l,m)=>{i.Ea("Softmax",l,{axis:m})},1364471:(l,m)=>{i.Ea("Concat",l,{axis:m})},1364531:(l,m,w,C,k)=>{i.Ea("Split",l,{axis:m,numOutputs:w,splitSizes:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1364671:l=>{i.Ea("Expand",l,void 0)},1364725:(l,m)=>{i.Ea("Gather",l,{axis:Number(m)})},1364796:(l,m)=>{i.Ea("GatherElements",l,{axis:Number(m)})},1364875:(l,m,w,C,k,M,L,ae,_e,pe,he)=>{i.Ea("Resize",l,{antialias:m,axes:w?Array.from(n().subarray(w>>>0,C>>>0)):[],coordinateTransformMode:ze(k),cubicCoeffA:M,excludeOutside:L,extrapolationValue:ae,keepAspectRatioPolicy:ze(_e),mode:ze(pe),nearestMode:ze(he)})},1365221:(l,m,w,C,k,M,L)=>{i.Ea("Slice",l,{starts:m?Array.from(n().subarray(m>>>0,w>>>0)):[],ends:C?Array.from(n().subarray(C>>>0,k>>>0)):[],axes:M?Array.from(n().subarray(M>>>0,L>>>0)):[]})},1365437:l=>{i.Ea("Tile",l,void 0)},1365489:(l,m,w)=>{i.Ea("LayerNormalization",l,{axis:Number(m),epsilon:Number(w)})},1365596:(l,m,w)=>{i.Ea("InstanceNormalization",l,{epsilon:m,format:w?"NHWC":"NCHW"})},1365710:(l,m,w)=>{i.Ea("InstanceNormalization",l,{epsilon:m,format:w?"NHWC":"NCHW"})},1365824:l=>{i.Ea("Range",l,void 0)},1365877:(l,m)=>{i.Ea("Einsum",l,{equation:ze(m)})},1365958:(l,m,w,C,k)=>{i.Ea("Pad",l,{mode:m,value:w,pads:C?Array.from(n().subarray(C>>>0,k>>>0)):[]})},1366085:(l,m,w,C,k,M)=>{i.Ea("BatchNormalization",l,{epsilon:m,momentum:w,spatial:!!k,trainingMode:!!C,format:M?"NHWC":"NCHW"})},1366254:(l,m,w,C,k,M)=>{i.Ea("BatchNormalization",l,{epsilon:m,momentum:w,spatial:!!k,trainingMode:!!C,format:M?"NHWC":"NCHW"})},1366423:(l,m,w)=>{i.Ea("CumSum",l,{exclusive:Number(m),reverse:Number(w)})},1366520:(l,m,w,C,k,M,L,ae,_e)=>{i.Ea("Attention",l,{numHeads:m,isUnidirectional:w,maskFilterValue:C,scale:k,doRotary:M,qkvHiddenSizes:L?Array.from(n().subarray(Number(ae)>>>0,Number(ae)+L>>>0)):[],pastPresentShareBuffer:!!_e})},1366792:l=>{i.Ea("Gelu",l,void 0)},1366844:(l,m,w,C,k,M)=>{i.Ea("MultiHeadAttention",l,{numHeads:m,isUnidirectional:w,maskFilterValue:C,scale:k,doRotary:M})},1367003:l=>{i.Ea("BiasAdd",l,void 0)},1367058:l=>{i.Ea("BiasSplitGelu",l,void 0)},1367119:(l,m)=>{i.Ea("SkipLayerNormalization",l,{epsilon:m})},1367200:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se)=>{i.Ea("Conv",l,{format:_e?"NHWC":"NCHW",auto_pad:m,dilations:[w],group:C,kernel_shape:[k],pads:M?Array.from(n().subarray(M>>>0,L>>>0)):[],strides:[ae],w_is_const:()=>!!r()[pe>>>0],activation:ze(he),activation_params:me?Array.from(u().subarray(me>>>0,Se>>>0)):[]})},1367570:(l,m,w,C,k,M,L,ae,_e,pe,he,me,Se,P,se,ve)=>{i.Ea("Conv",l,{format:me?"NHWC":"NCHW",auto_pad:m,dilations:[w,C],group:k,kernel_shape:[M,L],pads:ae?Array.from(n().subarray(ae>>>0,_e>>>0)):[],strides:[pe,he],w_is_const:()=>!!r()[Se>>>0],activation:ze(P),activation_params:se?Array.from(u().subarray(se>>>0,ve>>>0)):[]})},1367961:l=>{i.Cb(l)},1367995:(l,m)=>i.Eb(l,m,i.Xa.eb,i.Xa.errors)};function tr(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var rr=l=>{l.terminate(),l.onmessage=()=>{}},at=l=>{ue.Za.length==0&&(Qe(),ue.mb(ue.Za[0]));var m=ue.Za.pop();if(!m)return 6;ue.$a.push(m),ue.Qa[l.Ya]=m,m.Ya=l.Ya;var w={cmd:"run",start_routine:l.Gb,arg:l.ub,pthread_ptr:l.Ya};return I&&m.unref(),m.postMessage(w,l.Mb),0},wt=0,nr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Jr=(l,m,w)=>{m>>>=0;var C=m+w;for(w=m;l[w]&&!(w>=C);)++w;if(16<w-m&&l.buffer&&nr)return nr.decode(l.buffer instanceof SharedArrayBuffer?l.slice(m,w):l.subarray(m,w));for(C="";m<w;){var k=l[m++];if(k&128){var M=l[m++]&63;if((k&224)==192)C+=String.fromCharCode((k&31)<<6|M);else{var L=l[m++]&63;k=(k&240)==224?(k&15)<<12|M<<6|L:(k&7)<<18|M<<12|L<<6|l[m++]&63,65536>k?C+=String.fromCharCode(k):(k-=65536,C+=String.fromCharCode(55296|k>>10,56320|k&1023))}}else C+=String.fromCharCode(k)}return C},ze=(l,m)=>(l>>>=0)?Jr(a(),l,m):"",da=l=>{var m=ne();return l=l(),we(m),l};function Ce(l,m){var w=arguments.length-2,C=arguments;return da(()=>{for(var k=$t(8*w),M=k>>>3,L=0;L<w;L++){var ae=C[2+L];d()[M+L>>>0]=ae}return Y(l,w,k,m)})}function Sr(l){if(S)return Ce(0,1,l);ie=l,0<wt||(ue.Hb(),i.onExit?.(l),Re=!0),v(l,new tr(l))}var ar=l=>{if(ie=l,S)throw en(l),"unwind";Sr(l)},Xe=l=>{l instanceof tr||l=="unwind"||v(1,l)};function Cr(){for(var l=i.numThreads;l--;)Qe();ee.unshift(()=>{Ge++,pt(()=>je())})}function Qe(){var l=T("ort-wasm-simd-threaded.worker.js");l=new Worker(l),ue.Za.push(l)}function pt(l){S?l():Promise.all(ue.Za.map(ue.mb)).then(l)}var ue={Za:[],$a:[],qb:[],Qa:{},ib(){S?(ue.receiveObjectTransfer=ue.Fb,ue.threadInitTLS=ue.pb,ue.setExitStatus=ue.ob):Cr()},ob:l=>ie=l,Qb:["$terminateWorker"],Hb:()=>{for(var l of ue.$a)rr(l);for(l of ue.Za)rr(l);ue.Za=[],ue.$a=[],ue.Qa=[]},nb:l=>{var m=l.Ya;delete ue.Qa[m],ue.Za.push(l),ue.$a.splice(ue.$a.indexOf(l),1),l.Ya=0,j(m)},Fb(){},pb(){ue.qb.forEach(l=>l())},mb:l=>new Promise(m=>{l.onmessage=M=>{M=M.data;var L=M.cmd;if(M.targetThread&&M.targetThread!=A()){var ae=ue.Qa[M.targetThread];ae?ae.postMessage(M,M.transferList):J(`Internal error! Worker sent a message "${L}" to target pthread ${M.targetThread}, but that thread no longer exists!`)}else L==="checkMailbox"?Ut():L==="spawnThread"?at(M):L==="cleanupThread"?ue.nb(ue.Qa[M.thread]):L==="killThread"?(M=M.thread,L=ue.Qa[M],delete ue.Qa[M],rr(L),j(M),ue.$a.splice(ue.$a.indexOf(L),1),L.Ya=0):L==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):L==="loaded"?(l.loaded=!0,I&&!l.Ya&&l.unref(),m(l)):L==="alert"?alert(`Thread ${M.threadId}: ${M.text}`):M.target==="setimmediate"?l.postMessage(M):L==="callHandler"?i[M.handler](...M.args):L&&J(`worker sent an unknown command ${L}`)},l.onerror=M=>{throw J(`worker sent an error! ${M.filename}:${M.lineno}: ${M.message}`),M},I&&(l.on("message",M=>l.onmessage({data:M})),l.on("error",M=>l.onerror(M)));var w=[],C=["onExit"],k;for(k of C)i.hasOwnProperty(k)&&w.push(k);l.postMessage({cmd:"load",handlers:w,urlOrBlob:i.mainScriptUrlOrBlob||e,wasmMemory:re,wasmModule:Ee})})};i.PThread=ue;var ir=l=>{for(;0<l.length;)l.shift()(i)};i.establishStackSpace=()=>{var l=A(),m=o()[l+52>>>2>>>0];l=o()[l+56>>>2>>>0],O(m,m-l),we(m)};function en(l){if(S)return Ce(1,0,l);ar(l)}i.invokeEntryPoint=(l,m)=>{l=Vr.apply(null,[l,m]),0<wt?ue.ob(l):te(l)};function tn(l){this.hb=l-24,this.tb=function(m){o()[this.hb+4>>>2>>>0]=m},this.sb=function(m){o()[this.hb+8>>>2>>>0]=m},this.ib=function(m,w){this.rb(),this.tb(m),this.sb(w)},this.rb=function(){o()[this.hb+16>>>2>>>0]=0}}var rn=0,ca=0;function nn(l,m,w,C){return S?Ce(2,1,l,m,w,C):an(l,m,w,C)}function an(l,m,w,C){if(l>>>=0,m>>>=0,w>>>=0,C>>>=0,typeof SharedArrayBuffer>"u")return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var k=[];return S&&k.length===0?nn(l,m,w,C):(l={Gb:w,Ya:l,ub:C,Mb:k},S?(l.Ob="spawnThread",postMessage(l,k),0):at(l))}function on(l,m,w){return S?Ce(3,1,l,m,w):0}function sn(l,m){if(S)return Ce(4,1,l,m)}var Lt=l=>{for(var m=0,w=0;w<l.length;++w){var C=l.charCodeAt(w);127>=C?m++:2047>=C?m+=2:55296<=C&&57343>=C?(m+=4,++w):m+=3}return m},Ir=(l,m,w,C)=>{if(w>>>=0,!(0<C))return 0;var k=w;C=w+C-1;for(var M=0;M<l.length;++M){var L=l.charCodeAt(M);if(55296<=L&&57343>=L){var ae=l.charCodeAt(++M);L=65536+((L&1023)<<10)|ae&1023}if(127>=L){if(w>=C)break;m[w++>>>0]=L}else{if(2047>=L){if(w+1>=C)break;m[w++>>>0]=192|L>>6}else{if(65535>=L){if(w+2>=C)break;m[w++>>>0]=224|L>>12}else{if(w+3>=C)break;m[w++>>>0]=240|L>>18,m[w++>>>0]=128|L>>12&63}m[w++>>>0]=128|L>>6&63}m[w++>>>0]=128|L&63}}return m[w>>>0]=0,w-k},Gt=(l,m,w)=>Ir(l,a(),m,w);function un(l,m){if(S)return Ce(5,1,l,m)}function or(l,m,w){if(S)return Ce(6,1,l,m,w)}function Ar(l,m,w){return S?Ce(7,1,l,m,w):0}function ln(l,m){if(S)return Ce(8,1,l,m)}function dn(l,m,w){if(S)return Ce(9,1,l,m,w)}function Er(l,m,w,C){if(S)return Ce(10,1,l,m,w,C)}function cn(l,m,w,C){if(S)return Ce(11,1,l,m,w,C)}function Mt(l,m,w,C){if(S)return Ce(12,1,l,m,w,C)}function Tr(l){if(S)return Ce(13,1,l)}function Or(l,m){if(S)return Ce(14,1,l,m)}function kr(l,m,w){if(S)return Ce(15,1,l,m,w)}var sr=()=>{if(!(0<wt))try{S?te(ie):ar(ie)}catch(l){Xe(l)}};function ur(l){l>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),l>>>2,l).value.then(Ut),l+=128,Atomics.store(n(),l>>>2,1))}i.__emscripten_thread_mailbox_await=ur;var Ut=()=>{var l=A();if(l&&(ur(l),!Re))try{ce(),sr()}catch(m){Xe(m)}};i.checkMailbox=Ut;var lr=[],Et=l=>l%4===0&&(l%100!==0||l%400===0),pn=[0,31,60,91,121,152,182,213,244,274,305,335],Rr=[0,31,59,90,120,151,181,212,243,273,304,334];function Pr(l,m,w,C,k,M,L,ae){return S?Ce(16,1,l,m,w,C,k,M,L,ae):-52}function mn(l,m,w,C,k,M,L){if(S)return Ce(17,1,l,m,w,C,k,M,L)}var Br=l=>{var m=Lt(l)+1,w=D(m);return w&&Gt(l,w,m),w},Vt=[],fn=(l,m)=>{Vt.length=0;for(var w;w=a()[l++>>>0];){var C=w!=105;C&=w!=112,m+=C&&m%8?4:0,Vt.push(w==112?o()[m>>>2>>>0]:w==105?n()[m>>>2>>>0]:d()[m>>>3>>>0]),m+=C?8:4}return Vt},mt={},dt=()=>{if(!dr){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:y||"./this.program"},m;for(m in mt)mt[m]===void 0?delete l[m]:l[m]=mt[m];var w=[];for(m in l)w.push(`${m}=${l[m]}`);dr=w}return dr},dr;function Ft(l,m){if(S)return Ce(18,1,l,m);l>>>=0,m>>>=0;var w=0;return dt().forEach((C,k)=>{var M=m+w;for(k=o()[l+4*k>>>2>>>0]=M,M=0;M<C.length;++M)r()[k++>>>0>>>0]=C.charCodeAt(M);r()[k>>>0>>>0]=0,w+=C.length+1}),0}function Dr(l,m){if(S)return Ce(19,1,l,m);l>>>=0,m>>>=0;var w=dt();o()[l>>>2>>>0]=w.length;var C=0;return w.forEach(k=>C+=k.length+1),o()[m>>>2>>>0]=C,0}function Mr(l){return S?Ce(20,1,l):52}function hn(l,m,w,C){return S?Ce(21,1,l,m,w,C):52}function cr(l,m,w,C,k){return S?Ce(22,1,l,m,w,C,k):70}var pa=[null,[],[]];function gn(l,m,w,C){if(S)return Ce(23,1,l,m,w,C);m>>>=0,w>>>=0,C>>>=0;for(var k=0,M=0;M<w;M++){var L=o()[m>>>2>>>0],ae=o()[m+4>>>2>>>0];m+=8;for(var _e=0;_e<ae;_e++){var pe=a()[L+_e>>>0],he=pa[l];pe===0||pe===10?((l===1?q:J)(Jr(he,0)),he.length=0):he.push(pe)}k+=ae}return o()[C>>>2>>>0]=k,0}var yn=[31,29,31,30,31,30,31,31,30,31,30,31],bn=[31,28,31,30,31,30,31,31,30,31,30,31];function ma(l){var m=Array(Lt(l)+1);return Ir(l,m,0,m.length),m}var wn=(l,m)=>{r().set(l,m>>>0)};function qt(l,m,w,C){function k(P,se,ve){for(P=typeof P=="number"?P.toString():P||"";P.length<se;)P=ve[0]+P;return P}function M(P,se){return k(P,se,"0")}function L(P,se){function ve(Kt){return 0>Kt?-1:0<Kt?1:0}var tt;return(tt=ve(P.getFullYear()-se.getFullYear()))===0&&(tt=ve(P.getMonth()-se.getMonth()))===0&&(tt=ve(P.getDate()-se.getDate())),tt}function ae(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function _e(P){var se=P.ab;for(P=new Date(new Date(P.bb+1900,0,1).getTime());0<se;){var ve=P.getMonth(),tt=(Et(P.getFullYear())?yn:bn)[ve];if(se>tt-P.getDate())se-=tt-P.getDate()+1,P.setDate(1),11>ve?P.setMonth(ve+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+se);break}}return ve=new Date(P.getFullYear()+1,0,4),se=ae(new Date(P.getFullYear(),0,4)),ve=ae(ve),0>=L(se,P)?0>=L(ve,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}l>>>=0,m>>>=0,w>>>=0,C>>>=0;var pe=o()[C+40>>>2>>>0];C={Kb:n()[C>>>2>>>0],Jb:n()[C+4>>>2>>>0],fb:n()[C+8>>>2>>>0],kb:n()[C+12>>>2>>>0],gb:n()[C+16>>>2>>>0],bb:n()[C+20>>>2>>>0],Wa:n()[C+24>>>2>>>0],ab:n()[C+28>>>2>>>0],Rb:n()[C+32>>>2>>>0],Ib:n()[C+36>>>2>>>0],Lb:pe?ze(pe):""},w=ze(w),pe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var he in pe)w=w.replace(new RegExp(he,"g"),pe[he]);var me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Se="January February March April May June July August September October November December".split(" ");pe={"%a":P=>me[P.Wa].substring(0,3),"%A":P=>me[P.Wa],"%b":P=>Se[P.gb].substring(0,3),"%B":P=>Se[P.gb],"%C":P=>M((P.bb+1900)/100|0,2),"%d":P=>M(P.kb,2),"%e":P=>k(P.kb,2," "),"%g":P=>_e(P).toString().substring(2),"%G":P=>_e(P),"%H":P=>M(P.fb,2),"%I":P=>(P=P.fb,P==0?P=12:12<P&&(P-=12),M(P,2)),"%j":P=>{for(var se=0,ve=0;ve<=P.gb-1;se+=(Et(P.bb+1900)?yn:bn)[ve++]);return M(P.kb+se,3)},"%m":P=>M(P.gb+1,2),"%M":P=>M(P.Jb,2),"%n":()=>`
`,"%p":P=>0<=P.fb&&12>P.fb?"AM":"PM","%S":P=>M(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>M(Math.floor((P.ab+7-P.Wa)/7),2),"%V":P=>{var se=Math.floor((P.ab+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.ab-2)%7&&se++,se)se==53&&(ve=(P.Wa+371-P.ab)%7,ve==4||ve==3&&Et(P.bb)||(se=1));else{se=52;var ve=(P.Wa+7-P.ab-1)%7;(ve==4||ve==5&&Et(P.bb%400-1))&&se++}return M(se,2)},"%w":P=>P.Wa,"%W":P=>M(Math.floor((P.ab+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.bb+1900).toString().substring(2),"%Y":P=>P.bb+1900,"%z":P=>{P=P.Ib;var se=0<=P;return P=Math.abs(P)/60,(se?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},w=w.replace(/%%/g,"\0\0");for(he in pe)w.includes(he)&&(w=w.replace(new RegExp(he,"g"),pe[he](C)));return w=w.replace(/\0\0/g,"%"),he=ma(w),he.length>m?0:(wn(he,l),he.length-1)}var pr=l=>{try{l()}catch(m){Ne(m)}};function oe(){var l=f,m={};for(let[w,C]of Object.entries(l))m[w]=typeof C=="function"?function(){jt.push(w);try{return C.apply(null,arguments)}finally{Re||(jt.pop(),Je&&vt===1&&jt.length===0&&(vt=0,wt+=1,pr(si),typeof Fibers<"u"&&Fibers.Sb()))}}:C;return m}var vt=0,Je=null,ct=0,jt=[],zr={},Ur={},vn=0,mr=null,$n=[];function _n(){return new Promise((l,m)=>{mr={resolve:l,reject:m}})}function xn(){var l=D(65548),m=l+12;o()[l>>>2>>>0]=m,o()[l+4>>>2>>>0]=m+65536,m=jt[0];var w=zr[m];return w===void 0&&(w=vn++,zr[m]=w,Ur[w]=m),m=w,n()[l+8>>>2>>>0]=m,l}function fa(){var l=n()[Je+8>>>2>>>0];return l=f[Ur[l]],--wt,l()}function fr(l){if(!Re){if(vt===0){var m=!1,w=!1;l((C=0)=>{if(!Re&&(ct=C,m=!0,w)){vt=2,pr(()=>ui(Je)),typeof Browser<"u"&&Browser.jb.wb&&Browser.jb.resume(),C=!1;try{var k=fa()}catch(ae){k=ae,C=!0}var M=!1;if(!Je){var L=mr;L&&(mr=null,(C?L.reject:L.resolve)(k),M=!0)}if(C&&!M)throw k}}),w=!0,m||(vt=1,Je=xn(),typeof Browser<"u"&&Browser.jb.wb&&Browser.jb.pause(),pr(()=>oi(Je)))}else vt===2?(vt=0,pr(li),H(Je),Je=null,$n.forEach(C=>{if(!Re)try{C(),sr()}catch(k){Xe(k)}})):Ne(`invalid state: ${vt}`);return ct}}function Sn(l){return fr(m=>{l().then(m)})}ue.ib();var s=[Sr,en,nn,on,sn,un,or,Ar,ln,dn,Er,cn,Mt,Tr,Or,kr,Pr,mn,Ft,Dr,Mr,hn,cr,gn],c={r:function(l,m,w){return Sn(async()=>{await i.Ab(l,m,w)})},b:function(l,m,w){throw l>>>=0,new tn(l).ib(m>>>0,w>>>0),rn=l,ca++,rn},O:function(l){K(l>>>0,!x,1,!b,131072,!1),ue.pb()},n:function(l){l>>>=0,S?postMessage({cmd:"cleanupThread",thread:l}):ue.nb(ue.Qa[l])},K:an,i:on,U:sn,G:un,I:or,y:Ar,S:ln,M:dn,R:Er,p:cn,H:Mt,E:Tr,T:Or,F:kr,q:()=>1,C:function(l,m){l>>>=0,l==m>>>0?setTimeout(()=>Ut()):S?postMessage({targetThread:l,cmd:"checkMailbox"}):(l=ue.Qa[l])&&l.postMessage({cmd:"checkMailbox"})},L:function(l,m,w,C){m>>>=0,lr.length=w,C=C>>>0>>>3;for(var k=0;k<w;k++)lr[k]=d()[C+k>>>0];return l=0>l?zt[-l-1]:s[l],ue.vb=m,m=l.apply(null,lr),ue.vb=0,m},N:ur,W:function(l){I&&ue.Qa[l>>>0].ref()},u:function(l,m,w){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,w>>>=0,l=new Date(1e3*l),n()[w>>>2>>>0]=l.getUTCSeconds(),n()[w+4>>>2>>>0]=l.getUTCMinutes(),n()[w+8>>>2>>>0]=l.getUTCHours(),n()[w+12>>>2>>>0]=l.getUTCDate(),n()[w+16>>>2>>>0]=l.getUTCMonth(),n()[w+20>>>2>>>0]=l.getUTCFullYear()-1900,n()[w+24>>>2>>>0]=l.getUTCDay(),l=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[w+28>>>2>>>0]=l},v:function(l,m,w){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,w>>>=0,l=new Date(1e3*l),n()[w>>>2>>>0]=l.getSeconds(),n()[w+4>>>2>>>0]=l.getMinutes(),n()[w+8>>>2>>>0]=l.getHours(),n()[w+12>>>2>>>0]=l.getDate(),n()[w+16>>>2>>>0]=l.getMonth(),n()[w+20>>>2>>>0]=l.getFullYear()-1900,n()[w+24>>>2>>>0]=l.getDay(),m=(Et(l.getFullYear())?pn:Rr)[l.getMonth()]+l.getDate()-1|0,n()[w+28>>>2>>>0]=m,n()[w+36>>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var C=new Date(l.getFullYear(),0,1).getTimezoneOffset();l=(m!=C&&l.getTimezoneOffset()==Math.min(C,m))|0,n()[w+32>>>2>>>0]=l},w:function(l){l>>>=0;var m=new Date(n()[l+20>>>2>>>0]+1900,n()[l+16>>>2>>>0],n()[l+12>>>2>>>0],n()[l+8>>>2>>>0],n()[l+4>>>2>>>0],n()[l>>>2>>>0],0),w=n()[l+32>>>2>>>0],C=m.getTimezoneOffset(),k=new Date(m.getFullYear(),6,1).getTimezoneOffset(),M=new Date(m.getFullYear(),0,1).getTimezoneOffset(),L=Math.min(M,k);return 0>w?n()[l+32>>>2>>>0]=+(k!=M&&L==C):0<w!=(L==C)&&(k=Math.max(M,k),m.setTime(m.getTime()+6e4*((0<w?L:k)-C))),n()[l+24>>>2>>>0]=m.getDay(),w=(Et(m.getFullYear())?pn:Rr)[m.getMonth()]+m.getDate()-1|0,n()[l+28>>>2>>>0]=w,n()[l>>>2>>>0]=m.getSeconds(),n()[l+4>>>2>>>0]=m.getMinutes(),n()[l+8>>>2>>>0]=m.getHours(),n()[l+12>>>2>>>0]=m.getDate(),n()[l+16>>>2>>>0]=m.getMonth(),n()[l+20>>>2>>>0]=m.getYear(),l=m.getTime(),isNaN(l)?(n()[$()>>>2>>>0]=61,l=-1):l/=1e3,ye((bt=l,1<=+Math.abs(bt)?0<bt?+Math.floor(bt/4294967296)>>>0:~~+Math.ceil((bt-+(~~bt>>>0))/4294967296)>>>0:0)),l>>>0},s:Pr,t:mn,B:function(l,m,w){function C(pe){return(pe=pe.toTimeString().match(/\(([A-Za-z ]+)\)$/))?pe[1]:"GMT"}l>>>=0,m>>>=0,w>>>=0;var k=new Date().getFullYear(),M=new Date(k,0,1),L=new Date(k,6,1);k=M.getTimezoneOffset();var ae=L.getTimezoneOffset(),_e=Math.max(k,ae);o()[l>>>2>>>0]=60*_e,n()[m>>>2>>>0]=+(k!=ae),l=C(M),m=C(L),l=Br(l),m=Br(m),ae<k?(o()[w>>>2>>>0]=l,o()[w+4>>>2>>>0]=m):(o()[w>>>2>>>0]=m,o()[w+4>>>2>>>0]=l)},e:()=>{Ne("")},c:function(l,m,w){return l>>>=0,m=fn(m>>>0,w>>>0),zt[l].apply(null,m)},k:function(l,m,w){return l>>>=0,m=fn(m>>>0,w>>>0),zt[l].apply(null,m)},o:()=>{},j:()=>Date.now(),V:()=>{throw wt+=1,"unwind"},D:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),h:()=>I?(qi(),Wt(Fi)).cpus().length:navigator.hardwareConcurrency,A:function(l){l>>>=0;var m=a().length;if(l<=m||4294901760<l)return!1;for(var w=1;4>=w;w*=2){var C=m*(1+.2/w);C=Math.min(C,l+100663296);var k=Math;C=Math.max(l,C);e:{k=(k.min.call(k,4294901760,C+(65536-C%65536)%65536)-re.buffer.byteLength+65535)/65536;try{re.grow(k),Le();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},P:Ft,Q:Dr,J:ar,g:Mr,m:hn,x:cr,l:gn,a:re||i.wasmMemory,z:qt,d:function(l,m,w,C){return qt(l>>>0,m>>>0,w>>>0,C>>>0)}},f=function(){function l(w,C){return f=w.exports,f=oe(),f=Zl(),ue.qb.push(f.Da),be.unshift(f.X),Ee=C,je(),f}var m={a:c};if(Ge++,i.instantiateWasm)try{return i.instantiateWasm(m,l)}catch(w){J(`Module.instantiateWasm callback failed with error: ${w}`),h(w)}return Ke(m,function(w){l(w.instance,w.module)}).catch(h),{}}();i._OrtInit=(l,m)=>(i._OrtInit=f.Y)(l,m),i._OrtGetLastError=(l,m)=>(i._OrtGetLastError=f.Z)(l,m),i._OrtCreateSessionOptions=(l,m,w,C,k,M,L,ae,_e,pe)=>(i._OrtCreateSessionOptions=f._)(l,m,w,C,k,M,L,ae,_e,pe),i._OrtAppendExecutionProvider=(l,m)=>(i._OrtAppendExecutionProvider=f.$)(l,m),i._OrtAddFreeDimensionOverride=(l,m,w)=>(i._OrtAddFreeDimensionOverride=f.aa)(l,m,w),i._OrtAddSessionConfigEntry=(l,m,w)=>(i._OrtAddSessionConfigEntry=f.ba)(l,m,w),i._OrtReleaseSessionOptions=l=>(i._OrtReleaseSessionOptions=f.ca)(l),i._OrtCreateSession=(l,m,w)=>(i._OrtCreateSession=f.da)(l,m,w),i._OrtReleaseSession=l=>(i._OrtReleaseSession=f.ea)(l),i._OrtGetInputOutputCount=(l,m,w)=>(i._OrtGetInputOutputCount=f.fa)(l,m,w),i._OrtGetInputName=(l,m)=>(i._OrtGetInputName=f.ga)(l,m),i._OrtGetOutputName=(l,m)=>(i._OrtGetOutputName=f.ha)(l,m),i._OrtFree=l=>(i._OrtFree=f.ia)(l),i._OrtCreateTensor=(l,m,w,C,k,M)=>(i._OrtCreateTensor=f.ja)(l,m,w,C,k,M),i._OrtGetTensorData=(l,m,w,C,k)=>(i._OrtGetTensorData=f.ka)(l,m,w,C,k),i._OrtReleaseTensor=l=>(i._OrtReleaseTensor=f.la)(l),i._OrtCreateRunOptions=(l,m,w,C)=>(i._OrtCreateRunOptions=f.ma)(l,m,w,C),i._OrtAddRunConfigEntry=(l,m,w)=>(i._OrtAddRunConfigEntry=f.na)(l,m,w),i._OrtReleaseRunOptions=l=>(i._OrtReleaseRunOptions=f.oa)(l),i._OrtCreateBinding=l=>(i._OrtCreateBinding=f.pa)(l),i._OrtBindInput=(l,m,w)=>(i._OrtBindInput=f.qa)(l,m,w),i._OrtBindOutput=(l,m,w,C)=>(i._OrtBindOutput=f.ra)(l,m,w,C),i._OrtClearBoundOutputs=l=>(i._OrtClearBoundOutputs=f.sa)(l),i._OrtReleaseBinding=l=>(i._OrtReleaseBinding=f.ta)(l),i._OrtRunWithBinding=(l,m,w,C,k)=>(i._OrtRunWithBinding=f.ua)(l,m,w,C,k),i._OrtRun=(l,m,w,C,k,M,L,ae)=>(i._OrtRun=f.va)(l,m,w,C,k,M,L,ae),i._OrtEndProfiling=l=>(i._OrtEndProfiling=f.wa)(l),i._JsepOutput=(l,m,w)=>(i._JsepOutput=f.xa)(l,m,w),i._JsepGetNodeName=l=>(i._JsepGetNodeName=f.ya)(l);var $=()=>($=f.za)(),A=i._pthread_self=()=>(A=i._pthread_self=f.Aa)(),D=i._malloc=l=>(D=i._malloc=f.Ba)(l),H=i._free=l=>(H=i._free=f.Ca)(l);i.__emscripten_tls_init=()=>(i.__emscripten_tls_init=f.Da)();var K=i.__emscripten_thread_init=(l,m,w,C,k,M)=>(K=i.__emscripten_thread_init=f.Fa)(l,m,w,C,k,M);i.__emscripten_thread_crashed=()=>(i.__emscripten_thread_crashed=f.Ga)();var Y=(l,m,w,C)=>(Y=f.Ha)(l,m,w,C),j=l=>(j=f.Ia)(l),te=i.__emscripten_thread_exit=l=>(te=i.__emscripten_thread_exit=f.Ja)(l),ce=()=>(ce=f.Ka)(),ye=l=>(ye=f.La)(l),O=(l,m)=>(O=f.Ma)(l,m),ne=()=>(ne=f.Na)(),we=l=>(we=f.Oa)(l),$t=l=>($t=f.Pa)(l),Vr=i.dynCall_ii=(l,m)=>(Vr=i.dynCall_ii=f.Ra)(l,m),oi=l=>(oi=f.Sa)(l),si=()=>(si=f.Ta)(),ui=l=>(ui=f.Ua)(l),li=()=>(li=f.Va)();i.___start_em_js=1368107,i.___stop_em_js=1368268;function Zl(){var l=f;l=Object.assign({},l);var m=C=>()=>C()>>>0,w=C=>k=>C(k)>>>0;return l.za=m(l.za),l.Aa=m(l.Aa),l.Ba=w(l.Ba),l.emscripten_main_runtime_thread_id=m(l.emscripten_main_runtime_thread_id),l.Na=m(l.Na),l.Pa=w(l.Pa),l}i.wasmMemory=re,i.stackAlloc=$t,i.stackSave=ne,i.stackRestore=we,i.keepRuntimeAlive=()=>0<wt,i.UTF8ToString=ze,i.stringToUTF8=Gt,i.lengthBytesUTF8=Lt,i.ExitStatus=tr,i.PThread=ue;var Cn;yt=function l(){Cn||di(),Cn||(yt=l)};function di(){if(!(0<Ge))if(S)p(i),S||ir(be),startWorker(i);else{if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)ee.unshift(i.preRun.shift());ir(ee),0<Ge||Cn||(Cn=!0,i.calledRun=!0,Re||(S||ir(be),p(i),S||ir(Ct)))}}return di(),t.ready}})();typeof Ki=="object"&&typeof Ca=="object"?Ca.exports=ji:typeof define=="function"&&define.amd&&define([],()=>ji)});var Zi=hr((Xm,od)=>{od.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\n'});var Qi,sd,Ia,Aa,Bn,Xi,ud,ld,dd,Ji,Ue,gr=Z(()=>{"use strict";Qi=Hi();sd=Yi(),Aa=!1,Bn=!1,Xi=!1,ud=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},ld=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},dd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Ji=async e=>{if(Aa)return Promise.resolve();if(Bn)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Xi)throw new Error("previous call to 'initializeWebAssembly()' failed.");Bn=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=ud(r),o=a&&ld(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,i=dd(o,n),p=typeof u=="object"?u[i]:void 0,h=!1,g=[];if(t>0&&g.push(new Promise(y=>{setTimeout(()=>{h=!0,y()},t)})),g.push(new Promise((y,v)=>{let b=n?sd:Qi,x={locateFile:(I,S)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Zi()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let _=d??S;return i==="ort-wasm-simd.wasm"?_+"ort-wasm-simd.jsep.wasm":i==="ort-wasm-simd-threaded.wasm"?_+"ort-wasm-simd-threaded.jsep.wasm":_+i}return S+I}};if(n)if(x.numThreads=r,typeof Blob>"u")x.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;x.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(x).then(I=>{Bn=!1,Aa=!0,Ia=I,y()},I=>{Bn=!1,Xi=!0,v(I)})})),await Promise.race(g),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Ue=()=>{if(Aa&&Ia)return Ia;throw new Error("WebAssembly is not initialized yet.")}});var Ve,Hr,Pe,Dn=Z(()=>{"use strict";gr();Ve=(e,t)=>{let r=Ue(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},Hr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,o])=>{let u=t?t+n:n;if(typeof o=="object")Hr(o,u+".",r,a);else if(typeof o=="string"||typeof o=="number")a(u,o.toString());else if(typeof o=="boolean")a(u,o?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof o}`)})},Pe=e=>{let t=Ue(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],o=t.HEAPU32[a/4+1],u=o?t.UTF8ToString(o):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var eo,to=Z(()=>{"use strict";gr();Dn();eo=e=>{let t=Ue(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let o=0;return e?.tag!==void 0&&(o=Ve(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,o),r===0&&Pe("Can't create run options."),e?.extra!==void 0&&Hr(e.extra,"",new WeakSet,(u,d)=>{let i=Ve(u,a),p=Ve(d,a);t._OrtAddRunConfigEntry(r,i,p)!==0&&Pe(`Can't set a run config entry: ${u} - ${d}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),o}}});var cd,pd,md,fd,ro,no=Z(()=>{"use strict";gr();Dn();cd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},pd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},md=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},fd=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let d=Ve("deviceType",r),i=Ve(u.deviceType,r);Ue()._OrtAddSessionConfigEntry(e,d,i)!==0&&Pe(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let i=Ve("numThreads",r),p=Ve(d.toString(),r);Ue()._OrtAddSessionConfigEntry(e,i,p)!==0&&Pe(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let d=Ve("powerPreference",r),i=Ve(u.powerPreference,r);Ue()._OrtAddSessionConfigEntry(e,d,i)!==0&&Pe(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let d=Ve("preferredLayout",r),i=Ve(u.preferredLayout,r);Ue()._OrtAddSessionConfigEntry(e,d,i)!==0&&Pe(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}if(u?.graphCaptureEnabled!==void 0){if(typeof u.graphCaptureEnabled!="boolean")throw new Error(`graphCaptureEnabled must be a boolean value: ${u.graphCaptureEnabled}`);let d=Ve("graphCaptureEnabled",r),i=Ve(u.graphCaptureEnabled.toString(),r);Ue()._OrtAddSessionConfigEntry(e,d,i)!==0&&Pe(`Can't set a session config entry: 'graphCaptureEnabled' - ${u.graphCaptureEnabled}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let o=Ve(n,r);Ue()._OrtAppendExecutionProvider(e,o)!==0&&Pe(`Can't append execution provider: ${n}.`)}},ro=e=>{let t=Ue(),r=0,a=[],n=e||{};md(n);try{let o=cd(n.graphOptimizationLevel??"all"),u=pd(n.executionMode??"sequential"),d=typeof n.logId=="string"?Ve(n.logId,a):0,i=n.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log serverity level is not valid: ${i}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?Ve(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(o,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,i,p,h),r===0&&Pe("Can't create session options."),n.executionProviders&&fd(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[g,y]of Object.entries(n.freeDimensionOverrides)){if(typeof g!="string")throw new Error(`free dimension override name must be a string: ${g}`);if(typeof y!="number"||!Number.isInteger(y)||y<0)throw new Error(`free dimension override value must be a non-negative integer: ${y}`);let v=Ve(g,a);t._OrtAddFreeDimensionOverride(r,v,y)!==0&&Pe(`Can't set a free dimension override: ${g} - ${y}.`)}return n.extra!==void 0&&Hr(n.extra,"",new WeakSet,(g,y)=>{let v=Ve(g,a),b=Ve(y,a);t._OrtAddSessionConfigEntry(r,v,b)!==0&&Pe(`Can't set a session config entry: ${g} - ${y}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),o}}});var Ea,st,Lr,Mn,Gr,zn,Ta,We=Z(()=>{"use strict";Ea=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},st=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Lr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Mn=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Gr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},zn=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Ta=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Fr,Oa=Z(()=>{"use strict";Fr=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),a=[];for await(let n of r)a.push(n);return new Uint8Array(Buffer.concat(a))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),a=r?parseInt(r,10):0;if(a<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),o;try{o=new ArrayBuffer(a)}catch(d){if(d instanceof RangeError){let i=Math.ceil(a/65536);o=new WebAssembly.Memory({initial:i,maximum:i}).buffer}else throw d}let u=0;for(;;){let{done:d,value:i}=await n.read();if(d)break;let p=i.byteLength;new Uint8Array(o,u,p).set(i),u+=p}return new Uint8Array(o,0,a)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}});var hd,gd,ao,io,oo,yd,Be,Nt=Z(()=>{"use strict";We();hd=["V","I","W","E","F"],gd=(e,t)=>{console.log(`[${hd[e]},${new Date().toISOString()}]${t}`)},oo=(e,t)=>{ao=e,io=t},yd=(e,t)=>{let r=Gr(e),a=Gr(ao);r>=a&&gd(r,typeof t=="function"?t():t)},Be=(...e)=>{io&&yd(...e)}});var so,uo=Z(()=>{"use strict";We();so=(e,t)=>new(Mn(t))(e)});var yr=Z(()=>{"use strict"});var Un,bd,lo,Ra,ka,mo,fo=Z(()=>{"use strict";Nt();yr();Un=e=>Math.ceil(e/16)*16,bd=1,lo=()=>bd++,Ra=async(e,t,r,a)=>{let n=Un(r),o=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,o,0,n),e.flush(),await o.mapAsync(GPUMapMode.READ);let d=o.getMappedRange();if(a){let i=a();return i.set(new Uint8Array(d,0,r)),i}else return new Uint8Array(d.slice(0,r))}finally{o.destroy()}},ka=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,o=r.byteLength,u=Un(o),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${o}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=i.getMappedRange();new Uint8Array(p).set(new Uint8Array(a,n,o)),i.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(i,0,d.gpuData.buffer,0,u),Be("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(i)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=Un(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,o)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);this.externalBuffers.delete(a)}else n=lo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Be("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=Un(t),n,o=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||u){let i=o?this.freeBuffers:this.freeUniformBuffers,p=i.get(a);p||(p=[],i.set(a,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let d={id:lo(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Be("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Be("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await Ra(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.status===0){for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(a=>{a.destroy()}),this.capturedPendingBuffers.delete(t))}},mo=(...e)=>new ka(...e)});var Pa,fe,qe=Z(()=>{"use strict";Pa=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},fe=e=>new Pa(e)});var Ba,Tt,W,Jt,Vn,Wn,Nn,xe=Z(()=>{"use strict";Ba=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},Tt=class{static calcShape(t,r,a=!1){let n=t.length,o=r.length;if(n===0)return r;if(o===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(a){if(n<2||o<2)return;let i=Ba.calcMatMulShape([t[n-2],t[n-1]],[r[o-2],r[o-1]]);if(i===void 0)return;[d[u-2],d[u-1]]=i}for(let i=a?3:1;i<=u;i++){let p=n-i<0?1:t[n-i],h=o-i<0?1:r[o-i];if(p!==h&&p>1&&h>1)return;d[u-i]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let o=1;o<=a;o++)if(t[a-o]!==1&&t[a-o]!==r[n-o])return!1;return!0}},W=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let o=r;o<a;o++){if(t[o]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[o]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,o)=>n+r[o]+r[o+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Jt=class e{static adjustPoolAttributes(t,r,a,n,o,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=a.length?a.push(r[d+2]):a[d]=r[d+2];for(let d=0;d<a.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<a.length;d++)if(d<o.length){if(o[d]<0)throw new Error("dilations should be greater than or equal to 1")}else o.push(1);for(let d=0;d<a.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<a.length;d++){if(a[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=a[d]||u[d+a.length]>=a[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,o,u,d){if(d){if(o.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let i=0;i<t.length-2;i++)e.adjustPadAndReturnShape(t[i+(u?1:2)],r[i],a[i],n[i],o,i,i+t.length-2,d)}}static computePoolOutputShape(t,r,a,n,o,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let i=[r[0],r[1]];return e.computeShapeHelper(t,r,i,a,n,o,u,d),i}static computeConvOutputShape(t,r,a,n,o,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let i=[t[0],r[0]];return e.computeShapeHelper(!1,t,i,a,n,o,u,d),i}static computeShapeHelper(t,r,a,n,o,u,d,i){if(t)for(let p=0;p<r.length-2;p++)a.push(1);else for(let p=0;p<r.length-2;p++)a.push(e.adjustPadAndReturnShape(r[p+2],n[p],o[p],u[p],d,p,p+r.length-2,i))}static adjustPadAndReturnShape(t,r,a,n,o,u,d,i){let p=a*(n-1)+1;if(i&&i!=="NOTSET")switch(i){case"VALID":return o[u]=0,o[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+n-t;return o[u]=Math.floor(i==="SAME_LOWER"?(g+1)/2:g/2),o[d]=g-o[u],Math.floor((t+g-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+o[u]+o[d]-p)/r+1)}},Vn=class{static getShapeOfGemmResult(t,r,a,n,o){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,d,i;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(i=a[0],p=1):(i=a[1],p=0),a[p]!==d)throw new Error("dimension mismatch");if(u<=0||i<=0||d<=0)throw new Error("invalid shape specified");if(o&&!Tt.isValidBroadcast(o,[u,i]))throw new Error("gemm: invalid bias shape for broadcast");return[u,i,d]}},Wn=-34028234663852886e22,Nn=34028234663852886e22});var wd,Ma,Fe,_t,F,He,et,xt,ut,le,za,U,Q,Hn,Da,ho,br,De,$e=Z(()=>{"use strict";We();xe();wd=64,Ma=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Fe=(e,t=1)=>{let r=Ma(e,t);return typeof r=="string"?r:r[0]},_t=(e,t=1)=>{let r=Ma(e,t);return typeof r=="string"?r:r[1]},F=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:W.computeStrides(e)}],He=e=>e%4===0?4:e%2===0?2:1,et=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,xt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,ut=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,le=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,za=(e,t,r,a,n)=>{let o=typeof r=="number",u=o?r:r.length,d=[...new Array(u).keys()],i=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Ma(t,n),h=typeof p=="string"?p:p[1],g=typeof p=="string"?p:p[0],y={indices:i,value:h,storage:g,tensor:t},v=G=>typeof G=="string"?G:`${G}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},x=o?"uniforms.":"",I=`${x}${e}_shape`,S=`${x}${e}_strides`,_="";for(let G=0;G<u-1;G++)_+=`
    let dim${G} = current / ${le(S,G,u)};
    let rest${G} = current % ${le(S,G,u)};
    indices[${G}] = dim${G};
    current = rest${G};
    `;_+=`indices[${u-1}] = current;`;let T=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${y.indices} {
    var indices: ${y.indices};
    var current = offset;
    ${_}
    return indices;
  }`,E=G=>(b.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),z=[];if(u>=2)for(let G=u-1;G>=0;G--)z.push(`${le(S,G,u)} * (indices[${G}])`);let B=u<2?"":`
  fn i2o_${e}(indices: ${y.indices}) -> u32 {
    return ${z.join("+")};
  }`,V=G=>(b.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),N=(...G)=>u===0?"0u":`${y.indices}(${G.map(v).join(",")})`,X=(G,ee)=>u<2?`${G}`:`${le(G,ee,u)}`,R=(G,ee,be)=>u<2?`${G}=${be};`:`${le(G,ee,u)}=${be};`,q={},J=(G,ee)=>{b.broadcastedIndicesToOffset=!0;let be=`${ee.name}broadcastedIndicesTo${e}Offset`;if(be in q)return`${be}(${G})`;let Ct=[];for(let Ge=u-1;Ge>=0;Ge--){let lt=ee.indicesGet("outputIndices",Ge+ee.rank-u);Ct.push(`${X(S,Ge)} * (${lt} % ${X(I,Ge)})`)}return q[be]=`fn ${be}(outputIndices: ${ee.type.indices}) -> u32 {
             return ${Ct.length>0?Ct.join("+"):"0u"};
           }`,`${be}(${G})`},re=(G,ee)=>(()=>{if(y.storage===y.value)return`${e}[${G}]=${ee};`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${ee}), select(0u, 0xFFFFFFFFu, ${ee} < 0));`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${ee}), 0u);`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ee}));`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),Ee=G=>(()=>{if(y.storage===y.value)return`${e}[${G}]`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`i32(${e}[${G}].x)`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`u32(${e}[${G}].x)`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),Re=u<2?"":`
  fn get_${e}ByIndices(indices: ${y.indices}) -> ${h} {
    return ${Ee(`i2o_${e}(indices)`)};
  }`,ie=u<2?"":(()=>{let G=d.map(be=>`d${be}: u32`).join(", "),ee=d.map(be=>`d${be}`).join(", ");return`
  fn get_${e}(${G}) -> ${h} {
    return get_${e}ByIndices(${N(ee)});
  }`})(),Oe=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let ee=G.map(v).join(",");return u===0?Ee("0u"):u===1?Ee(ee[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${ee})`)},Me=G=>u<2?Ee(G):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${G})`),de=u<2?"":`
  fn set_${e}ByIndices(indices: ${y.indices}, value: ${h}) {
    ${re(`i2o_${e}(indices)`,"value")}
  }`,ge=u<2?"":(()=>{let G=d.map(be=>`d${be}: u32`).join(", "),ee=d.map(be=>`d${be}`).join(", ");return`
  fn set_${e}(${G}, value: ${h}) {
    set_${e}ByIndices(${N(ee)}, value);
  }`})();return{impl:()=>{let G=[],ee=!1;return b.offsetToIndices&&(G.push(T),ee=!0),b.indicesToOffset&&(G.push(B),ee=!0),b.broadcastedIndicesToOffset&&(Object.values(q).forEach(be=>G.push(be)),ee=!0),b.set&&(G.push(ge),ee=!0),b.setByIndices&&(G.push(de),ee=!0),b.get&&(G.push(ie),ee=!0),b.getByIndices&&(G.push(Re),ee=!0),!o&&ee&&G.unshift(`const ${I} = ${y.indices}(${r.join(",")});`,`const ${S} = ${y.indices}(${W.computeStrides(r).join(",")});`),G.join(`
`)},type:y,offsetToIndices:E,indicesToOffset:V,broadcastedIndicesToOffset:J,indices:N,indicesGet:X,indicesSet:R,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let ee=G[u];if(typeof ee!="string")throw new Error("value must be string");let be=G.slice(0,u).map(v).join(",");return u===0?re("0u",ee):u===1?re(be[0],ee):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${be}, ${ee})`)},setByOffset:re,setByIndices:(G,ee)=>u<2?re(G,ee):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${ee});`),get:Oe,getByOffset:Ee,getByIndices:Me,usage:a,name:e,strides:S,shape:I,rank:u}},U=(e,t,r,a=1)=>za(e,t,r,"input",a),Q=(e,t,r,a=1)=>za(e,t,r,"output",a),Hn=(e,t,r,a=1)=>za(e,t,r,"internal",a),Da=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=wd){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=o?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${d}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,a=1){return this.uniforms.push({name:t,type:r,length:a}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${a}>, ${Math.ceil(n/4)}>`);else{let o=n==null||n===1?a:`vec${n}<${a}>`;t.push(`${r}:${o}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},ho=e=>new Da(e),br=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let o=r-1-n,u=e[o]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(o)}return a},De=e=>!0});var vd,go,$d,_d,ht,yo,bo,wr=Z(()=>{"use strict";xe();qe();$e();vd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},go=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,$d=(e,t)=>W.sortBasedOnPerm(e,go(e.length,t)),_d=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let o=0;o<t;++o)n.push(r.indicesSet("a",e[o],`i[${o}]`));return n.push("return a;}"),n.join(`
`)},ht=(e,t)=>{let r=e.dataType,a=e.dims.length,n=go(a,t),o=De(a),u=$d(e.dims,n),d=o?u.length:u,i=o?a:e.dims,p=Q("output",r,d),h=U("a",r,i),g=y=>`
  ${y.registerUniform("output_size","u32").declareVariables(h,p)}

  ${_d(n,a,h,p)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${p.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:o?["rank"]:["dims"]},getRunData:y=>{let v=W.size(u);return{outputs:[{dims:u,dataType:y[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:o?[{type:"uint32",data:v},...F(y[0].dims),...F(u)]:[{type:"uint32",data:v}]}},getShaderSource:g}},yo=(e,t)=>{vd(e.inputs),e.compute(ht(e.inputs[0],t.perm))},bo=e=>fe({perm:e.perm})});var xd,Sd,Cd,Id,Ad,Ed,Td,Od,kd,Rd,Ot,wo,vo,$o,_o,xo,So,Co,Io,Ao,Eo,To=Z(()=>{"use strict";xe();$e();Ln();wr();xd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Sd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Cd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Id={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Ad=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},Ed=(e,t)=>{let r=[],a=e.length;for(let o=0;o<a;o++)t.indexOf(o)===-1&&r.push(e[o]);let n=t.map(o=>e[o]);return[r,n]},Td=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let o=0;o<r;o++)t.indexOf(o)===-1?a.push(e[n++]):a.push(1);return a},Od=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},kd=(e,t)=>{let r=[];if(!Od(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},Rd=(e,t,r,a,n,o,u)=>{let d=r[0].dims,i=W.size(o),p=W.size(u),h=U("_A",r[0].dataType,d),g=Q("output",n,o),y=32,v=`
          var<workgroup> aBestValues : array<${g.type.storage}, ${y}>;
       `;return{name:e,shaderCache:t,getShaderSource:x=>`
        ${x.registerUniform("reduceSize","u32").declareVariables(h,g)}
        ${v}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${x.mainStart(y)}

          let outputIndex = global_idx / ${y};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${g.type.storage}(${Cd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${y}) {
           let candidate = ${g.type.storage}(${h.getByOffset("offset + k")});
           bestValue = ${xd[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${y}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Sd[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${g.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${g.type.storage}(uniforms.reduceSize)`:`${Id[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:o,dataType:n}],dispatchGroup:{x:i},programUniforms:[{type:"uint32",data:p}]})}},Ot=(e,t,r,a)=>{let n=e.inputs.length===1?r:Ua(e.inputs,r),o=n.axes;o.length===0&&!n.noopWithEmptyAxes&&(o=e.inputs[0].dims.map((v,b)=>b));let u=W.normalizeAxes(o,e.inputs[0].dims.length),d=u,i=e.inputs[0],p=kd(d,e.inputs[0].dims.length);p.length>0&&(i=e.compute(ht(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=Ad(d.length,i.dims.length));let[h,g]=Ed(i.dims,d),y=h;n.keepDims&&(y=Td(h,u)),e.compute(Rd(t,{hint:n.cacheKey,inputDependencies:["type"]},[i],a,e.inputs[0].dataType,y,g),{inputs:[i]})},wo=(e,t)=>{Ot(e,"ReduceMeanShared",t,"mean")},vo=(e,t)=>{Ot(e,"ReduceL1Shared",t,"l1")},$o=(e,t)=>{Ot(e,"ReduceL2Shared",t,"l2")},_o=(e,t)=>{Ot(e,"ReduceLogSumExpShared",t,"logSumExp")},xo=(e,t)=>{Ot(e,"ReduceMaxShared",t,"max")},So=(e,t)=>{Ot(e,"ReduceMinShared",t,"min")},Co=(e,t)=>{Ot(e,"ReduceProdShared",t,"prod")},Io=(e,t)=>{Ot(e,"ReduceSumShared",t,"sum")},Ao=(e,t)=>{Ot(e,"ReduceSumSquareShared",t,"sumSquare")},Eo=(e,t)=>{Ot(e,"ReduceLogSumShared",t,"logSum")}});var kt,Pd,Gn,Ua,Rt,Bd,Dd,Md,zd,Ud,Vd,Wd,Nd,Hd,Ld,Pt,Oo,ko,Ro,Po,Bo,Do,Mo,zo,Uo,Vo,Ln=Z(()=>{"use strict";xe();qe();$e();To();kt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Pd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Gn=(e,t,r,a,n,o,u=!1,d=!1)=>{let i=[],p=r[0].dims,h=p.length,g=W.normalizeAxes(n,h),y=!d&&g.length===0;p.forEach((I,S)=>{y||g.indexOf(S)>=0?u&&i.push(1):i.push(I)});let v=i.length,b=W.size(i);return{name:e,shaderCache:t,getShaderSource:I=>{let S=[],_=U("_A",r[0].dataType,h),T=Q("output",o,v),E=a(_,T,g),z=E[2];for(let B=0,V=0;B<h;B++)y||g.indexOf(B)>=0?(u&&V++,z=`for(var j${B}: u32 = 0; j${B} < ${p[B]}; j${B}++) {
                  ${E[2].includes("last_index")?`let last_index = j${B};`:""}
                  ${_.indicesSet("input_indices",B,`j${B}`)}
                  ${z}
                }`):(S.push(`${_.indicesSet("input_indices",B,T.indicesGet("output_indices",V))};`),V++);return`

        ${I.registerUniform("output_size","u32").declareVariables(_,T)}

        ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${_.type.indices};
          let output_indices = ${T.offsetToIndices("global_idx")};

          ${S.join(`
`)}
          ${E[0]}       // init ops for reduce max/min
          ${E[1]}
          ${z}
          ${E[3]}
          ${E.length===4?T.setByOffset("global_idx","value"):E.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:"uint32",data:b},...F(p),...F(i)]})}},Ua=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),fe({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Rt=(e,t,r,a)=>{let n=e.inputs,o=n.length===1?r:Ua(n,r);e.compute(Gn(t,{hint:o.cacheKey,inputDependencies:["rank"]},[n[0]],o.noopWithEmptyAxes&&o.axes.length===0?Pd:a,o.axes,n[0].dataType,o.keepDims,o.noopWithEmptyAxes),{inputs:[0]})},Bd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,"value = log(value);"])},Dd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByIndices("input_indices")});`,""])},Md=(e,t)=>{kt(e.inputs),Rt(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},zd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByIndices("input_indices")});`,"value = log(value);"])},Ud=(e,t)=>{kt(e.inputs),Rt(e,"ReduceMax",t,(a,n,o)=>{let u=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&u.push(a.indicesSet("input_indices",d,0));return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = max(value, ${a.getByIndices("input_indices")});`,""]})},Vd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceMean",t,(a,n,o)=>{let u=1;for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${a.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},Wd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceMin",t,(a,n,o)=>{let u=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = min(value, ${a.getByIndices("input_indices")});`,""]})},Nd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByIndices("input_indices")};`,""])},Hd=(e,t)=>{kt(e.inputs),Rt(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,""])},Ld=(e,t)=>{kt(e.inputs),Rt(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += t * t;`,""])},Pt=(e,t,r)=>{if(t.length===0)return r;let a=1,n=1;for(let o=0;o<t.length;o++)t.indexOf(o)===-1?a*=e[o]:n*=e[o];return n<32&&a>1024},Oo=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vd(e,t):wo(e,t)},ko=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dd(e,t):vo(e,t)},Ro=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):$o(e,t)},Po=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):_o(e,t)},Bo=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ud(e,t):xo(e,t)},Do=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wd(e,t):So(e,t)},Mo=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nd(e,t):Co(e,t)},zo=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Hd(e,t):Io(e,t)},Uo=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ld(e,t):Ao(e,t)},Vo=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):Eo(e,t)}});var Wo,No,Ho,Va,Lo=Z(()=>{"use strict";We();qe();Ln();Wo=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},No=(e,t)=>{Wo(e.inputs);let r=(a,n,o)=>{let u=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Gn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ho=(e,t)=>{Wo(e.inputs);let r=(a,n,o)=>{let u=[];for(let d=0;d<a.rank;d++)(o.indexOf(d)>=0||o.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Gn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Va=e=>fe(e)});var Gd,Fd,qd,jd,Fn,Kd,Go,Wa=Z(()=>{"use strict";We();yr();$e();Gd=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let i=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let g=n.dims[0]/3,y=g,v=y;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let T of t.qkvHiddenSizes)if(T%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");g=t.qkvHiddenSizes[0],y=t.qkvHiddenSizes[1],v=t.qkvHiddenSizes[2]}let b=p;if(g!==y)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==g+y+v)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let x=0;if(u){if(y!==v)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==i)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==y/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(x=u.dims[3])}let I=b+x,S=-1,_=0;if(o)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:i,sequenceLength:p,pastSequenceLength:x,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:S,inputHiddenSize:h,hiddenSize:g,vHiddenSize:v,headSize:Math.floor(g/t.numHeads),vHeadSize:Math.floor(v/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:_,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Fd=(e,t,r,a)=>{let n=He(a),o=64,u=a/n;u<o?o=1:u/8<64&&(o=Math.ceil(u/8));let d=Math.ceil(a/n/o),p=[{type:st(t.dataType),data:1/a},{type:"uint32",data:u},{type:"uint32",data:d}],h=Fe(t.dataType,n),g=y=>{let v=Q("x",t.dataType,t.dims,n),b="thread_max_vector";n===2?b="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(b="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let x=_t(t.dataType),I=[{name:"d_inv",type:x},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;
  ${y.registerUniforms(I).declareVariables(v)}
  ${y.mainStart([o,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${et("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${xt(x,n,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${b};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${et("f32",n,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${xt(x,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${ut("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${et("f32",n,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${xt(x,n,"x[offset + i]")};
        x[offset + i] = ${v.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o};${h};${n}`},getShaderSource:g,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:p})},{inputs:[t],outputs:[]})},qd=(e,t,r,a,n,o)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=o.scale===0?1/Math.sqrt(n.headSize):o.scale,i=He(n.headSize),p=n.headSize/i,h=12,g={x:Math.ceil(n.totalSequenceLength/h),y:Math.ceil(n.sequenceLength/h),z:n.batchSize*n.numHeads},y=st(t.dataType),v=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:p},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.kvSequenceLength},{type:y,data:d}],b=[t,r],x=S=>{let _=U("q",t.dataType,t.dims,i),T=U("key",r.dataType,r.dims,i),E=Q("output",t.dataType,u),z=Fe(t.dataType),B=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:z}];return`
  const beta: ${z} = 1.0;
  const TILE_SIZE = ${h}u;

  var<workgroup> tileQ: array<${_.type.storage}, ${h*h}>;
  var<workgroup> tileK: array<${_.type.storage}, ${h*h}>;
  ${S.registerUniforms(B).declareVariables(_,T,E)}
  ${S.mainStart([h,h,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${et(z,i)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (lm < uniforms.M && ln < uniforms.N) {
      let outputIdx = headOffset + lm * uniforms.N + ln;
      output[outputIdx] = ${ut("value",i)} * uniforms.alpha;
    }
  }`},I=e.compute({name:"AttentionProbs",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:g,programUniforms:v}),getShaderSource:x},{inputs:b,outputs:[-1]})[0];return Fd(e,I,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),I},jd=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],o=12,u={x:Math.ceil(a.vHeadSize/o),y:Math.ceil(a.sequenceLength/o),z:a.batchSize*a.numHeads},d=[{type:"uint32",data:a.sequenceLength},{type:"uint32",data:a.totalSequenceLength},{type:"uint32",data:a.vHeadSize},{type:"uint32",data:a.numHeads},{type:"uint32",data:a.vHiddenSize}],i=p=>{let h=U("probs",t.dataType,t.dims),g=U("v",r.dataType,r.dims),y=Q("output",t.dataType,n),v=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${o}u;
  var<workgroup> tileQ: array<${h.type.value}, ${o*o}>;
  var<workgroup> tileK: array<${h.type.value}, ${o*o}>;
  ${p.registerUniforms(v).declareVariables(h,g,y)}
  ${p.mainStart([o,o,1])}
   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${h.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:d}),getShaderSource:i},{inputs:[t,r],outputs:[0]})[0]},Fn=(e,t,r,a,n,o,u,d,i,p,h)=>{let g=qd(e,t,r,i,p,h);jd(e,g,a,p)},Kd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=t.sequenceLength,n=t.inputHiddenSize,o=t.headSize,u=12,d={x:Math.ceil(t.headSize/u),y:Math.ceil(t.sequenceLength/u),z:t.batchSize*t.numHeads},i=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:"uint32",data:a},{type:"uint32",data:n},{type:"uint32",data:o},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],h=g=>{let y=Q("output_q",i[0].dataType,r),v=Q("output_k",i[0].dataType,r),b=Q("output_v",i[0].dataType,r),x=U("input",i[0].dataType,i[0].dims),I=U("weight",i[1].dataType,i[1].dims),S=U("bias",i[2].dataType,i[2].dims),_=x.type.storage,T=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${u}u;
  var<workgroup> tileInput: array<${_}, ${u*u}>;
  var<workgroup> tileWeightQ: array<${_}, ${u*u}>;
  var<workgroup> tileWeightK: array<${_}, ${u*u}>;
  var<workgroup> tileWeightV: array<${_}, ${u*u}>;
  ${g.registerUniforms(T).declareVariables(x,I,S,y,v,b)}
  ${g.mainStart([u,u,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${_}(0);
    var valueK = ${_}(0);
    var valueV = ${_}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:p}),getShaderSource:h},{inputs:i,outputs:[-1,-1,-1]})},Go=(e,t)=>{let r=Gd(e.inputs,t),[a,n,o]=Kd(e,r);return Fn(e,a,n,o,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Yd,Zd,Xd,Fo,qo=Z(()=>{"use strict";ft();xe();qe();$e();Yd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,o)=>{let u=n.length;if(u!==a.length)throw new Error(`${o}: num dimensions != ${u}`);n.forEach((d,i)=>{if(d!==a[i])throw new Error(`${o}: dim[${i}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Zd=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,o=e[0].dims,u=a?He(o[o.length-1]):1,d=n==="NHWC"&&o.length>1?u:1,i=W.size(o)/u,p=De(o.length)&&a,h=p?o.length:o,g=U("x",e[0].dataType,e[0].dims,u),y=U("scale",e[1].dataType,e[1].dims,d),v=U("bias",e[2].dataType,e[2].dims,d),b=U("inputMean",e[3].dataType,e[3].dims,d),x=U("inputVar",e[4].dataType,e[4].dims,d),I=Q("y",e[0].dataType,h,u),S=()=>{let T="";if(a)T=`let cOffset = ${o.length===1?"0u":n==="NHWC"?`outputIndices[${o.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")T=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{T=`var cIndices = ${y.type.indices}(0);
                       cIndices[0] = outputIndices[${o.length-1}];`;for(let E=1;E<y.rank;E++)T+=`cIndices[${E}] = outputIndices[${E}];`;T+=`let cOffset = ${y.indicesToOffset("cIndices")};`}return T},_=T=>`
  const epsilon = ${r};
  ${T.registerUniform("outputSize","u32").declareVariables(g,y,v,b,x,I)}
  ${T.mainStart()}
  ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};
    ${S()}
    let scale = ${y.getByOffset("cOffset")};
    let bias = ${v.getByOffset("cOffset")};
    let inputMean = ${b.getByOffset("cOffset")};
    let inputVar = ${x.getByOffset("cOffset")};
    let x = ${g.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:_,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p?[{type:"uint32",data:i},...F(o)]:[{type:"uint32",data:i}]})}},Xd=e=>fe(e),Fo=(e,t)=>{let{inputs:r,outputCount:a}=e,n=Xd({...t,outputCount:a});if(Ie.webgpu.validateInputContent&&Yd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Zd(r,n))}});var Qd,Jd,jo,Ko=Z(()=>{"use strict";xe();$e();Qd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Jd=e=>{let t=e[0].dims,r=e[0].dims[2],a=W.size(t)/4,n=e[0].dataType,o=U("input",n,t,4),u=U("bias",n,[r],4),d=U("residual",n,t,4),i=Q("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h=>`
  const channels = ${r}u / 4;
  ${h.declareVariables(o,u,d,i)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${o.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${i.setByOffset("global_idx","value")}
  }`}},jo=e=>{Qd(e.inputs),e.compute(Jd(e.inputs))}});var ec,Te,Yo,Zo,Xo,Qo,Jo,es,ts,rs,ns,tc,as,is,os,ss,qn,us,jn,ls,ds,cs,ps,ms,fs,hs,gs,ys,bs,ws,vs,$s,_s,xs,Ss,Cs,Is,As,Na=Z(()=>{"use strict";We();xe();qe();$e();ec=(e,t,r,a,n,o)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let i=U("inputData",r,[u],4),p=Q("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(i,p)}

  ${o??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${i.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",d)}
  }`},Te=(e,t,r,a,n,o=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>ec(u,W.size(e.dims),e.dataType,o,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:o}],dispatchGroup:{x:Math.ceil(W.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(e.dims)/4)}]})}),Yo=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Zo=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Xo=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},Qo=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},Jo=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},es=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},ts=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},rs=e=>fe(e),ns=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},tc=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Wn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Nn;return fe({min:t,max:r})},as=(e,t)=>{let r=e.inputs.length===1?t:tc(e.inputs),a=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},is=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},os=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},ss=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},qn=e=>fe(e),us=(e,t)=>{let r=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Elu",a=>`elu_vf32(${a})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},jn=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,ls=e=>{let t=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,jn(`vec4<${t}>`,t)))},ds=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},cs=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},ps=e=>{let t=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,jn(`vec4<${t}>`,t)))},ms=(e,t)=>{let r=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"LeakyRelu",a=>`select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},fs=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},hs=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},gs=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ys=e=>{let t=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},bs=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ws=e=>fe(e),vs=(e,t)=>{let r=_t(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"HardSigmoid",a=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${a} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},$s=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},_s=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},xs=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},Ss=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},Cs=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},Is=(e,t)=>{let r=_t(e.inputs[0].dataType);return e.compute(Te(e.inputs[0],"ThresholdedRelu",a=>`select(vec4<${r}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},As=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var nc,ac,Es,Ts=Z(()=>{"use strict";xe();$e();Na();nc=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},ac=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=U("input",e[0].dataType,e[0].dims,4),a=U("bias",e[0].dataType,[e[0].dims[2]],4),n=Q("output",e[0].dataType,t,4),o=W.size(t)/4,u=Fe(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(r,a,n)}

  ${jn(`vec4<${u}>`,u)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Es=e=>{nc(e.inputs),e.compute(ac(e.inputs))}});var ic,oc,Bt,Os,ks,Rs,Ps,Bs,Ds,Ms,zs,Us,Vs,Ws=Z(()=>{"use strict";We();xe();$e();ic=(e,t,r,a,n,o,u,d,i,p,h,g,y)=>{let v,b;typeof d=="string"?v=b=(B,V)=>`${d}((${B}),(${V}))`:typeof d=="function"?v=b=d:(v=d.scalar,b=d.vector);let x=g?t.length:t,I=g?r.length:r,S=g?a.length:a,_=Q("outputData",h,S,4),T=U("aData",i,x,4),E=U("bData",p,I,4),z;if(n)if(o){let B=W.size(t)===1,V=W.size(r)===1,N=t.length>0&&t[t.length-1]%4===0,X=r.length>0&&r[r.length-1]%4===0;B||V?z=_.setByOffset("global_idx",b(B?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"),V?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):z=`
            let outputIndices = ${_.offsetToIndices("global_idx * 4u")};
            let offsetA = ${T.broadcastedIndicesToOffset("outputIndices",_)};
            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",_)};
            ${_.setByOffset("global_idx",b(u||N?T.getByOffset("offsetA / 4u"):`${T.type.value}(${T.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||X?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else z=_.setByOffset("global_idx",b(T.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!o)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let B=(V,N,X="")=>{let R=`aData[indexA${N}][componentA${N}]`,q=`bData[indexB${N}][componentB${N}]`;return`
            let outputIndices${N} = ${_.offsetToIndices(`global_idx * 4u + ${N}u`)};
            let offsetA${N} = ${T.broadcastedIndicesToOffset(`outputIndices${N}`,_)};
            let offsetB${N} = ${E.broadcastedIndicesToOffset(`outputIndices${N}`,_)};
            let indexA${N} = offsetA${N} / 4u;
            let indexB${N} = offsetB${N} / 4u;
            let componentA${N} = offsetA${N} % 4u;
            let componentB${N} = offsetB${N} % 4u;
            ${V}[${N}] = ${X}(${v(R,q)});
          `};h===9?z=`
            var data = vec4<u32>(0);
            ${B("data",0,"u32")}
            ${B("data",1,"u32")}
            ${B("data",2,"u32")}
            ${B("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:z=`
            ${B("outputData[global_idx]",0)}
            ${B("outputData[global_idx]",1)}
            ${B("outputData[global_idx]",2)}
            ${B("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(T,E,_)}

        ${y??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${z}
      }`},oc=(e,t,r,a,n,o,u=r.dataType)=>{let d=!W.areEqual(r.dims,a.dims),i=r.dims,p=W.size(r.dims),h=!1,g=!1,y=[d];if(d){let b=Tt.calcShape(r.dims,a.dims,!1);if(!b)throw new Error("Can't perform binary op on the given tensors");i=b,p=W.size(i);let x=W.size(r.dims)===1,I=W.size(a.dims)===1,S=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,_=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;y.push(x),y.push(I),y.push(S),y.push(_);let T=1;for(let E=1;E<i.length;E++){let z=r.dims[r.dims.length-E]??1,B=a.dims[a.dims.length-E]??1;if(z===B)T*=z;else break}T%4===0?(g=!0,h=!0):(x||I||S||_)&&(h=!0)}else h=!0;y.push(h);let v=De(r.dims.length)&&De(a.dims.length)&&De(i.length);return{name:e,shaderCache:{hint:t+y.map(b=>b.toString()).join("_"),inputDependencies:v?["rank","rank"]:["dims","dims"]},getShaderSource:b=>ic(b,r.dims,a.dims,i,h,d,g,n,r.dataType,a.dataType,u,v,o),getRunData:()=>({outputs:[{dims:i,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:v?[{type:"uint32",data:Math.ceil(W.size(i)/4)},...F(r.dims),...F(a.dims),...F(i)]:[{type:"uint32",data:Math.ceil(W.size(i)/4)}]})}},Bt=(e,t,r,a,n,o)=>{e.compute(oc(t,n??"",e.inputs[0],e.inputs[1],r,a,o))},Os=e=>{Bt(e,"Add",(t,r)=>`${t}+${r}`)},ks=e=>{Bt(e,"Div",(t,r)=>`${t}/${r}`)},Rs=e=>{Bt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Ps=e=>{Bt(e,"Mul",(t,r)=>`${t}*${r}`)},Bs=e=>{let t=U("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Bt(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Ds=e=>{Bt(e,"Sub",(t,r)=>`${t}-${r}`)},Ms=e=>{Bt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},zs=e=>{Bt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Us=e=>{Bt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Vs=e=>{Bt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var uc,lc,dc,cc,Ns,Hs,Ls=Z(()=>{"use strict";xe();qe();$e();uc=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},lc=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,dc=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let o=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(o):n===0?a.push(`if (inputIndex == ${n}u) { ${o} }`):n===r-1?a.push(`else { ${o} }`):a.push(`else if (inputIndex == ${n}) { ${o} }`)}return a.join(`
`)},cc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let E=1;E<e.length;E++){let z=e[E].dims.slice();for(let B=0;B<r.length;B++)if(B===a)n[a]+=z[B];else if(r[B]!==z[B])throw new Error("non concat dimensions must match")}let o=W.size(n),u=new Array(e.length),d=new Array(e.length),i=e[0].dataType,p=0,h=[],g=[],y=[],v=[{type:"uint32",data:o}];for(let E=0;E<e.length;++E)p+=e[E].dims[a],u[E]=p,y.push(De(e[E].dims.length)),g.push(y[E]?e[E].dims.length:e[E].dims),d[E]=U(`input${E}`,i,g[E]),h.push(y[E]?"rank":"dims"),v.push({type:"uint32",data:u[E]});for(let E=0;E<e.length;++E)y[E]&&v.push(...F(e[E].dims));let b=De(n.length);b&&v.push(...F(n));let x=b?n.length:n,I=Q("output",i,x),S=I.indicesGet("indices",a),_=Array.from(Array(u.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),T=E=>`

  ${(()=>{E.registerUniform("outputSize","u32");for(let z=0;z<e.length;z++)E.registerUniform(`sizeInConcatAxis${z}`,"u32");return E.declareVariables(...d,I)})()}

  ${lc(u.length,_)}

  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${I.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${S});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${_});
      ${S} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${dc(d,I)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:v}),getShaderSource:T}},Ns=(e,t)=>{uc(e.inputs),e.compute(cc(e.inputs,t.axis))},Hs=e=>fe({axis:e.axis})});var St,Kn,Ht=Z(()=>{"use strict";xe();St=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Kn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[Wn,Nn];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Ye,Yn,Zn=Z(()=>{"use strict";Ye=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Yn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var Xn,Ha=Z(()=>{"use strict";Xn=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var pc,mc,qr,Gs,fc,jr,hc,Qn,Kr=Z(()=>{"use strict";xe();$e();Ht();Zn();pc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,mc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,qr=(e,t,r="f32",a,n=!1,o=32,u=!1,d=32)=>{let i=t[1]*e[1],p=t[0]*e[0],h=n?i:o,g=n?o:i,y=h/t[0],v=o/t[1];if(!((n&&y===4&&e[1]===4||!n&&(y===3||y===4))&&h%t[0]===0&&o%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${y} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${y} must be 3 or 4.
  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${y}<${r}>, ${h/y}>, ${g}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${o}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${y};
const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${i};

  let numTiles = ${u?`${Math.ceil(d/o)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${v};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${pc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${y===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${mc(n,y)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Gs=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,fc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",jr=(e,t,r="f32",a,n=!1,o=32,u=!1,d=32,i=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],g=n?p:o,y=n?o:p;if(!(y%t[1]===0&&g%t[0]===0&&o%t[1]===0))throw new Error(`tileAHight ${y} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}, tileInner ${o} must be divisible by workgroupSize[1]${t[1]}`);let v=y/t[1],b=g/t[0],x=o/t[1],I=i?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${p};
    let globalColStart = i32(workgroupId.x) * ${h};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${y}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {
          ${Gs(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${p};

let tileRowA = i32(localId.y) * ${v};
let tileColA = i32(localId.x) * ${b};
let tileRowB = i32(localId.y) * ${x};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Gs(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${x}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${fc(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${g}>, ${y}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${o}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(d/o)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${I}
  }
`},hc=(e,t,r,a,n,o=!1)=>{let[u,d,i]=n,[p,h,g,y]=a,v=br(u,i),b=br(d,i),x=Fe(a[0].type.tensor),I=()=>{let T=h.rank,E=p.rank,z=`var aIndices: ${h.type.indices};`;for(let B=T-2-1,V=E-1;B>=0;B--,V--)z+=`
aIndices[${B}] = ${E>1?`batchIndices[${V}]`:"batchIndices"};`;return v.forEach(B=>{z+=`
aIndices[${B}] = 0;`}),z+=`
aIndices[${T-2}] = u32(row);
                   aIndices[${T-1}] = u32(colIn);`,z},S=()=>{let T=g.rank,E=p.rank,z=`var bIndices: ${g.type.indices};`;for(let B=T-2-1,V=E-1;B>=0;B--,V--)z+=`
bIndices[${B}] = ${E>1?`batchIndices[${V}]`:"batchIndices"};`;return b.forEach(B=>{z+=`
bIndices[${B}] = 0;`}),z+=`
bIndices[${T-2}] = u32(row);
                   bIndices[${T-1}] = u32(colIn);`,z};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ye(e,x)} {
      var value = ${Ye(e,x)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${I()}
        value = ${h.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ye(e,x)} {
      var value = ${Ye(e,x)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${S()}
        value = ${g.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ye(e,x)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${o?"bias[colIn]":`${Ye(e,x)}(bias[row])`};`:""}
        ${r}
        ${y.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},Qn=(e,t,r,a,n=!1)=>{let o=e[0].dims,u=e[1].dims,d=o.slice(0,-2),i=u.slice(0,-2),p=a?a.slice(0,-2):r.slice(0,-2),h=De(p.length),g=h?p.length:p,y=Hn("batchDims",e[0].dataType,g,1),v=W.size(p),b=o[o.length-2],x=o[o.length-1],I=u[u.length-1],S=x%4===0&&I%4===0,_=b<=8?[4,1,1]:[4,4,1],T=[8,8,1],E=[Math.ceil(I/T[0]/_[0]),Math.ceil(b/T[1]/_[1]),Math.ceil(v/T[2]/_[2])],z=Fe(e[0].dataType),B=S?4:1,V=[...d,b,x/B],N=De(V.length),X=N?V.length:V,R=[...i,x,I/B],q=De(R.length),J=q?R.length:R,re=[v,b,I/B],Ee=U("a",e[0].dataType,X,B),Re=U("b",e[1].dataType,J,B),ie=Q("result",e[0].dataType,re.length,B),Oe=[Ee,Re],Me=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:x}];h&&Me.push(...F(p)),N&&Me.push(...F(V)),q&&Me.push(...F(R));let de=[];de.push(N?"rank":"dims"),de.push(q?"rank":"dims");let ge=e.length>2,{activationFunction:Ae,applyActivation:ke}=St(t,ie.type.value),Le=hc(B,ge,ke,[y,Ee,Re,ie],[d,i,p],n);if(ge){let ee=n?B:1;Oe.push(U("bias",e[2].dataType,e[2].dims.length,ee)),Me.push(...F(e[2].dims)),de.push("rank")}Me.push(...F(re));let G=ee=>`
  ${ee.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(y).declareVariables(...Oe,ie)}
  ${Ae}
  ${Le}
  ${S?qr(_,T,z,y):jr(_,T,z,y)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${_}${S}${n}`,inputDependencies:de},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Me}),getShaderSource:G}}});var gc,Fs,qs=Z(()=>{"use strict";Nt();$e();Ht();Zn();Ha();Kr();gc=(e,t,r,a,n=!1,o,u=4,d=4,i=4,p="f32")=>{let h=q=>{switch(q){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${q} is not supported.`)}},g=q=>{switch(q){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${q} is not supported.`)}},y=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,v=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",x=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",S=e?"col":"row",_=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${S} / (filterDims[1] * inChannels);
    let WCol = ${S} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${S} % inChannels;
    var resData = ${Ye(u,p)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${x}) {
      ${y}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${h(u)}
    }
    return resData;`,T=e?t&&a?`
    let col = colIn * ${u};
    ${_}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${_}
    }
    return ${Ye(u,p)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${_}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${_}
    }
    return ${Ye(u,p)}(0.0);`,E=`${g(d)}`,z=Ye(i,p),B=e?Ye(u,p):Ye(d,p),V=e?Ye(d,p):Ye(u,p),{activationFunction:N,applyActivation:X}=St(o,z);return`
    ${N}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${B} {
      ${e?T:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${V} {
      ${e?E:T}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${z}) {
      let col = colIn * ${i};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${v}
      ${Yn(n)}
      ${X}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Fs=(e,t,r,a,n,o,u,d)=>{let i=t.format==="NHWC",p=i?e[0].dims[3]:e[0].dims[1],h=r[0],g=i?r[2]:r[3],y=i?r[1]:r[2],v=i?r[3]:r[1],b=i&&(p%4===0||p%3===0)&&v%4===0,x=i?v:g*y,I=i?g*y:v,S=[8,8,1],_=a<=8?[4,1,1]:[4,4,1],T=[Math.ceil(x/S[0]/_[0]),Math.ceil(I/S[1]/_[1]),Math.ceil(h/S[2]/_[2])];Be("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${T}`);let E=b?i&&p%4!==0?3:4:1,z=S[1]*_[1],B=S[0]*_[0],V=Math.max(S[0]*E,S[1]),N=a%z===0,X=n%B===0,R=o%V===0,q=b?[E,4,4]:[1,1,1],J=Fe(e[0].dataType),re=b?4:1,Ee=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:o}],Re=U("x",e[0].dataType,e[0].dims.length,E===3?1:E),ie=U("w",e[1].dataType,e[1].dims.length,re),Oe=[Re,ie];Ee.push(...F(e[0].dims)),Ee.push(...F(e[1].dims));let Me=`
      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${J}>`:J}) {
        result[flatIndex] = ${b?`vec4<${J}>`:J}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${J}>`:J}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);
      }`;if(u){let ge=U("bias",e[2].dataType,e[2].dims.length,re);Oe.push(ge),Ee.push(...F(e[2].dims)),Me+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${J}>`:J} {
          return bias[coords.${i?"w":"y"}${b?"/ 4":""}];
        }`}let de=Q("result",e[0].dataType,r.length,re);return Ee.push(...F(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:Ee}),getShaderSource:ge=>`
        ${Xn("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${ge.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Oe,de)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Me}
        ${gc(i,N,X,R,u,t,q[0],q[1],q[2],J)}
            ${b?qr(_,S,J,void 0,!i,V):jr(_,S,J,void 0,!i,V,!1,void 0,d)}`}}});var La,js,Ks=Z(()=>{"use strict";xe();$e();Ga();Ht();La=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",o=e[0].dims,u=e[1].dims,d=u[0]/t.group,i=t.format==="NHWC",p=Jn(o,u,t.dilations,t.pads,t.strides,i),h=W.size(p),g=Q("output",e[0].dataType,p),{activationFunction:y,applyActivation:v}=St(t,g.type.value),b=U("x",e[0].dataType,o),x=U("w",e[1].dataType,u),I=[b,x];a&&I.push(U("b",e[2].dataType,e[2].dims));let S=_=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${_.declareVariables(...I,g)}

  ${y}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes(h)}

    let outputIndices = ${g.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${i?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${i?1:2}], outputIndices[${i?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${d}u;

    var value: ${g.type.value} = ${g.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${o[i?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${o[i?2:3]}u) {
            continue;
          }

          let xVal = ${i?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${x.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${v}
    ${g.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:S}},js=(e,t,r)=>{let a=e.length>2,n=He(r[3]),o=He(r[2]),u=W.size(r)/n/o,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/n],i=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/n],p=[r[0],r[1],r[2],r[3]/n],h=[{type:"uint32",data:u},{type:"int32",data:t.strides},{type:"int32",data:t.pads},...F(d),...F(i),...F(p)],g=(o-1)*t.strides[1]+i[1],y=v=>{let b=Q("output",e[0].dataType,p.length,n),{activationFunction:x,applyActivation:I}=St(t,b.type.value),S=U("x",e[0].dataType,d.length,n),_=U("w",e[1].dataType,i.length,n),T=[S,_];a&&T.push(U("b",e[2].dataType,e[2].dims,n));let E=a?"value += b[output_channel];":"";return`
  ${v.registerUniform("output_size","u32").registerUniform("strides","i32",2).registerUniform("pads","i32",2).declareVariables(...T,b)}
  ${x}
  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${o}u;
    let col = (index1 % width1) * ${o}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${S.type.value}, ${g}>;
    var values: array<${b.type.value}, ${o}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${i[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${g}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${S.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${S.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${i[1]}; w_width++) {
          let w_val = ${_.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${o}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${o}u; i++) {
      var value = values[i];
      ${E}
      ${I}
      ${b.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.activationCacheKey};${n};${o};${g};${i[0]};${i[1]}`,inputDependencies:a?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h}),getShaderSource:y}}});var Fa,yc,Ys,qa=Z(()=>{"use strict";xe();Kr();$e();Ht();Fa=(e,t,r,a,n=!1)=>{let o=e[0].dims,u=e[1].dims,d=o[o.length-2],i=u[u.length-1],p=o[o.length-1],h=He(i),g=He(p),y=He(d),v=W.size(r)/h/y,b=e.length>2,x=a?a.slice(0,-2):r.slice(0,-2),S=[W.size(x),d,i],_=[{type:"uint32",data:v},{type:"uint32",data:d},{type:"uint32",data:i},{type:"uint32",data:p},...F(x),...F(o),...F(u)];b&&_.push(...F(e[2].dims)),_.push(...F(S));let T=E=>{let z=Hn("batch_dims",e[0].dataType,x.length),B=U("a",e[0].dataType,o.length,g),V=U("b",e[1].dataType,u.length,h),N=Q("output",e[0].dataType,S.length,h),{activationFunction:X,applyActivation:R}=St(t,N.type.value),q=[B,V],J="";if(b){let de=n?h:1;q.push(U("bias",e[2].dataType,e[2].dims.length,de)),J=`${n?`value += bias[col / ${de}];`:`value += ${N.type.value}(bias[row + i]);`}`}let re=o.slice(0,-2),Ee=u.slice(0,-2),Re=br(re,x),ie=br(Ee,x),Oe=(de,ge)=>{let Ae=de.rank,ke=de.name;if(Ae===2)return`var ${ke}_indices = ${de.type.indices}(0u, 0u);`;let Le=z.rank,G=`var ${ke}_indices: ${de.type.indices};`;for(let ee=Ae-2-1,be=Le-1;ee>=0;ee--,be--)G+=`
${ke}_indices[${ee}] = ${Le>1?`batch_indices[${be}]`:"batch_indices"};`;return ge.forEach(ee=>{G+=`
${ke}_indices[${ee}] = 0;`}),G+=`${ke}_indices[${Ae-2}] = 0u;
                     ${ke}_indices[${Ae-1}] = 0u;`,G},Me=()=>{let de=`var a_data: ${B.type.value};`;for(let ge=0;ge<g;ge++)de+=`
              let b_data${ge} = b[(b_offset + (k + ${ge}) * uniforms.N + col) / ${h}];`;for(let ge=0;ge<y;ge++){de+=`a_data = a[(a_offset + (row + ${ge}) * uniforms.K + k) / ${g}];`;for(let Ae=0;Ae<g;Ae++)de+=`
            values[${ge}] = fma(${V.type.value}(a_data${g===1?"":`[${Ae}]`}), b_data${Ae}, values[${ge}]);
`}return de};return`
  ${E.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(z).declareVariables(...q,N)}
  ${X}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    let col = (global_idx % (uniforms.N / ${h})) * ${h};
    var index1 = global_idx / (uniforms.N / ${h});
    let stride1 = uniforms.M / ${y};
    let row = (index1 % stride1) * ${y};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${z.offsetToIndices("batch")};`}
    ${Oe(B,Re)}
    let a_offset = ${B.indicesToOffset("a_indices")};
    ${Oe(V,ie)}
    let b_offset = ${V.indicesToOffset("b_indices")};
    var values: array<${N.type.value}, ${y}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${g}) {
      ${Me()}
    }
    for (var i = 0u; i < ${y}u; i++) {
      var value = values[i];
      ${J}
      ${R}
      let cur_indices = ${N.type.indices}(batch, row + i, col);
      let offset = ${N.indicesToOffset("cur_indices")};
      ${N.setByOffset(`offset / ${h}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${h}_${g}_${y}_${n}`,inputDependencies:b?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:_}),getShaderSource:T}},yc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Ys=e=>{yc(e.inputs);let t=Tt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],a=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&a<8?e.compute(Fa(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(Qn(e.inputs,{activation:"",activationCacheKey:""},t))}});var Jn,ja,bc,Zs,Ka,wc,vc,Ya,Ga=Z(()=>{"use strict";xe();qe();qs();Kr();Ks();Ht();qa();wr();Jn=(e,t,r,a,n,o)=>{let u=e[0],d=e.slice(o?1:2,o?3:4),i=d.length,p=t[0],g=t.slice(2).map((b,x)=>b+(b-1)*(r[x]-1)),v=d.map((b,x)=>b+a[x]+a[x+i]).map((b,x)=>Math.floor((b-g[x]+n[x])/n[x]));return v.splice(0,0,u),v.splice(o?3:1,0,p),v},ja=[2,3,1,0],bc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Zs=(e,t)=>{let r=e.kernelShape.slice();for(let o=2;o<t[1].dims.length;++o)r[o-2]===0&&(r[o-2]=t[1].dims[o]);let a=e.pads.slice();Jt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},Ka=e=>{let t=Kn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,o=e.group,u=e.kernel_shape,d=e.pads,i=e.strides,p=e.w_is_const();return fe({autoPad:a,format:r,dilations:n,group:o,kernelShape:u,pads:d,strides:i,wIsConst:p,...t})},wc=(e,t,r)=>{let a=Zs(r,t),n=r.format==="NHWC";if(r.group!==1){if(n&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let B=Jn(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),V=e.kernelCustomData.wT??e.compute(ht(t[1],ja),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=V);let N=[t[0],V];t.length===3&&N.push(t[2]),e.compute(js(N,a,B),{inputs:N})}else e.compute(La(t,a));return}let o=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],i=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],g=Jn(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),y=g[n?1:2],v=g[n?2:3],b=g[n?3:1],x=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(x||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let B=g[0],V,N,X,R=[];if(n){let re=e.kernelCustomData.wT??e.compute(ht(t[1],ja),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=re),x){let Ee=u*d*i;V=t[0].reshape([1,B,Ee]),N=re.reshape([1,Ee,b]),X=[1,B,b]}else V=t[0].reshape([B,u*d,i]),N=re.reshape([1,i,b]),X=[B,y*v,b];R.push(V),R.push(N)}else V=t[0].reshape([B,i,u*d]),N=t[1].reshape([1,b,i]),X=[B,b,y*v],R.push(N),R.push(V);o&&R.push(t[2]);let q=X[2],J=R[0].dims[R[0].dims.length-1];q<8&&J<8?e.compute(Fa(R,a,g,X,n),{inputs:R}):e.compute(Qn(R,a,g,X,n),{inputs:R});return}let I=!0,S=e.kernelCustomData.wT??e.compute(ht(t[1],ja),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=S);let _=[t[0],S];o&&_.push(t[2]);let T=n?y*v:b,E=n?b:y*v,z=p*h*i;e.compute(Fs(_,a,g,T,E,z,o,I),{inputs:_})},vc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),i=Zs({...t,pads:n,strides:o,dilations:u,kernelShape:d},a);e.compute(La(a,i,p=>r?[p[0],p[2],p[3]]:[]))},Ya=(e,t)=>{bc(e.inputs,t),e.inputs[0].dims.length===3?vc(e,t):wc(e,e.inputs,t)}});var $c,Xs,Qs=Z(()=>{"use strict";Nt();$e();Ht();Zn();Ha();Kr();$c=(e,t=!1,r,a=4)=>{let n=Ye(a,"f32"),o=_=>{switch(_){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${_} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,i=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",g=e?"col":"row",y=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${h} / outWidth;
      let outCol = ${h} % outWidth;

      let WRow = ${g} / (filterDims[1] * inChannels);
      let WCol = ${g} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${i}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${g} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,v=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${y}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${y}
      }
      return ${n}(0.0);`,b=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${o(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:x,applyActivation:I}=St(r,n);return`
      ${x}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?v:b}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:v}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${Yn(t)}
      ${I}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},Xs=(e,t,r,a,n,o,u,d)=>{let i=t.format==="NHWC",p=i?e[0].dims[3]:e[0].dims[1],h=r[0],g=i?r[2]:r[3],y=i?r[1]:r[2],v=i?r[3]:r[1],b=i?p%4===0&&v%4===0:g%4===0&&v%4===0,x=i?v:g*y,I=i?g*y:v,S=b?[8,8,1]:[x<=4||I<=4?4:16,x>4&&I<=4?4:16,1],_=b?[4,4,1]:[x<=4?1:4,x>4&&I<=4?1:4,1],T=[Math.ceil(x/S[0]/_[0]),Math.ceil(I/S[1]/_[1]),Math.ceil(h/S[2]/_[2])];Be("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${T}`);let E=b?4:1,z=Math.max(S[0]*E,S[1]),B=b?4:1,V=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:o}],N=U("x",e[0].dataType,e[0].dims.length,B),X=U("w",e[1].dataType,e[1].dims.length,1),R=Q("result",e[0].dataType,r.length,B),q=[N,X];V.push(...F(e[0].dims)),V.push(...F(e[1].dims));let J="";if(u){let re=U("bias",e[2].dataType,e[2].dims.length,B);q.push(re),V.push(...F(e[2].dims)),J+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {
          return bias[coords.${i?"w":"y"}${b?"/ 4":""}];
        }`}return V.push(...F(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:V}),getShaderSource:re=>`
        ${Xn("uniforms.result_strides")}
        ${re.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...q,R)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[i?1:2]}, ${t.kernelShape[i?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[i?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[i?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${o};
        ${J}
        ${$c(i,u,t,E)}
        ${b?qr(_,S,"f32",void 0,!i,z):jr(_,S,"f32",void 0,!i,z,!1,void 0,d)}`}}});var _c,Za,Js=Z(()=>{"use strict";Nt();xe();$e();_c=(e,t,r,a,n,o,u=!1,d)=>{let i=r.format==="NHWC",p=i?1:2,h=i?2:3,g=i?3:1,y=W.size(a),v=u?2:1,b=r.group,x=t[1].dims,I=x[0]/b,S=x[1],_=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {
    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);
  }`;n&&(_+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {
      return bias[coords.${i?"w":"y"}${u?"/ 4":""}];
    }`);let T=u?4:1,E=U("W",t[1].dataType,t[1].dims,T),z=U("Dy",t[0].dataType,t[0].dims,T),B=[z,E];n&&B.push(U("bias",t[2].dataType,[a[g]],T));let V=Q("result",t[0].dataType,a,T),N=`{
        let batch: u32 = ${o?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${o?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${o?"global_id.y":"workgroup_id.y"} * ${v};
        let d1: u32 = ${o?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${d}>, ${v}>;
        for (var i = 0; i < ${v}; i++) {
          dotProd[i] = vec4<${d}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);
            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${z.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${d}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${z.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${g}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${z.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${d}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${z.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${d}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${v}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${d}>(0.0)`};
          ${V.set("batch","r","c + i","d1","value")};
        }
      }`,X=`
          let outputIndices = ${V.offsetToIndices("global_idx")};
          let batch = ${V.indicesGet("outputIndices",0)};
          let d1 = ${V.indicesGet("outputIndices",g)};
          let r = ${V.indicesGet("outputIndices",p)};
          let c = ${V.indicesGet("outputIndices",h)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${S};
          let wOutChannel = d1 - groupId * ${S};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${d}(0.0);
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${I};
              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {
                let xValue = ${i?z.get("batch","idyR","idyC","inputChannel"):z.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${d}(0.0)`};
          ${V.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...B,V)}
  ${_}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[i?1:2]}, ${r.kernelShape[i?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[i?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[i?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(y)};
  ${u?N:X}}`},Za=(e,t,r)=>{let a=e.length>2,n=t.outputShape,o=W.size(n),u=[Math.ceil(o/64),1,1];Be("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=Fe(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:i=>_c(i,e,t,n,a,u[1]===1&&u[2]===1,!1,d)}}});var xc,Sc,Cc,eu,tu,Ic,Ac,Ec,Tc,ru,nu=Z(()=>{"use strict";qe();Qs();Js();Ht();wr();xc=(e,t,r,a,n,o)=>(e-1)*t+r+(a-1)*n+1-o,Sc=(e,t,r,a,n)=>{let o=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=o,r[n]=e-o):t==="SAME_LOWER"&&(r[a]=e-o,r[n]=o)},Cc=(e,t,r,a,n,o,u,d,i,p)=>{let h=e.length-2,g=p.length===0;if(i.length===0)for(let b=0;b<h;++b)i.push(0);let y=e[0],v=t[d?3:1]*n;for(let b=0,x=e.length-h-(d?1:0);b<h;++b,++x){let I=e[x],S=g?I*u[b]:p[b],_=xc(I,u[b],o[b],t[x],r[b],S);Sc(_,a,o,b,b+h),g&&p.push(u[b]*(I-1)+i[b]+(t[x]-1)*r[b]+1-o[b]-o[b+h])}p.splice(0,0,y),p.splice(d?3:1,0,v)},eu=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((y,v)=>y*v,1)===0){r.length=0;for(let y=2;y<t[1].dims.length;++y)r.push(t[1].dims[y])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),o=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,i=e.dilations.slice();if(i.reduce((y,v)=>y+v,0)===0){let y=t[0].dims.length-2;i=new Array(y).fill(1)}let p=e.strides.slice();if(p.reduce((y,v)=>y+v,0)===0){let y=t[0].dims.length-2;p=new Array(y).fill(1)}Cc(d,r,i,e.autoPad,e.group,n,p,a,u,o);let h=Object.assign({},e),g=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),o.join(","),i.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:o,dilations:i,strides:p,cacheKey:g}),h},tu=e=>{let t=Kn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,o=e.group,u=e.kernelShape,d=e.pads,i=e.strides,p=e.wIsConst(),h=e.outputPadding,g=e.outputShape;return fe({autoPad:a,format:r,dilations:n,group:o,kernelShape:u,outputPadding:h,outputShape:g,pads:d,strides:i,wIsConst:p,...t})},Ic=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let o=e[0].dims.length-2;if(t.dilations.reduce((h,g)=>h+g,0)>0&&t.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(t.strides.reduce((h,g)=>h+g,0)>0&&t.strides.length!==o)throw new Error(`strides should be ${o}D`);if(t.pads.reduce((h,g)=>h+g,0)>0&&t.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(t.outputPadding.length!==o&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${o}D`);if(t.kernelShape.reduce((h,g)=>h+g,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Ac=[2,3,1,0],Ec=(e,t,r)=>{let a=eu(r,t),n=r.format==="NHWC",o=a.outputShape,u=o[n?3:1],d=t[0].dims[n?3:1];if(a.group!==1||u===1&&d===1){e.compute(Za(t,a));return}let i=o[n?1:2],p=o[n?2:3],h=t[1].dims[2],g=t[1].dims[3],y=n?i*p:u,v=n?u:i*p,b=h*g*d,x=!0,I=e.kernelCustomData.wT??e.compute(ht(t[1],Ac),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let S=[t[0],I],_=t.length===3;_&&(!n&&t[2].dims.length===1?S.push(t[2].reshape([t[2].dims[0],1,1])):S.push(t[2])),e.compute(Xs(S,a,o,y,v,b,_,x),{inputs:S})},Tc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let o=t.dilations;(o.length===0||o[0]===0)&&(o=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),o=[1].concat(o),n=[1].concat(n);let i=eu({...t,pads:d,strides:u,dilations:o,kernelShape:n},a);e.compute(Za(a,i,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},ru=(e,t)=>{Ic(e.inputs,t),e.inputs[0].dims.length===3?Tc(e,t):Ec(e,e.inputs,t)}});var Oc,au,iu,ou=Z(()=>{"use strict";We();xe();qe();$e();Oc=(e,t,r,a)=>{let n=W.size(t),o=t.length,u=U("input",e,o),d=Q("output",e,o),i=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=W.normalizeAxis(i,o),h=g=>{let y=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,v=le("uniforms.input_shape","uniforms.axis",o),b=a.reverse?y+(a.exclusive?" + 1":""):"0",x=a.reverse?v:y+(a.exclusive?"":" + 1");return`
                ${g.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,d)}
                ${g.mainStart()}
                  ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${b};
                  let last : i32 = ${x};
                  for (var i : i32 = first; i < last; i++) {
                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${u.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:a.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:p},...F(t),...F(t)]}),getShaderSource:h}},au=(e,t)=>{let r=e.inputs[0].dims,a=e.inputs[0].dataType,n=e.inputs[1];e.compute(Oc(a,r,n,t),{inputs:[0]})},iu=e=>{let t=e.exclusive===1,r=e.reverse===1;return fe({exclusive:t,reverse:r})}});var Xa,ea,su,kc,Rc,Qa,Ja,uu,Pc,lu,du,cu=Z(()=>{"use strict";xe();qe();$e();Xa="[a-zA-Z]|\\.\\.\\.",ea="("+Xa+")+",su="^"+ea+"$",kc="("+ea+",)*"+ea,Rc="^"+kc+"$",Qa=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},Ja=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Rc)))throw new Error("Invalid LHS term");if(a.split(",").forEach((d,i)=>{let p=t[i].dims.slice();if(!d.match(RegExp(su)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,i);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,i])=>i.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(ea)))throw new Error("Invalid RHS");n.match(RegExp(Xa,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(d);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let o=a.length,u=!1,d=[],i=0;if(!t.match(RegExp(su))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Xa,"g")),h=new Qa(n);return p?.forEach((g,y)=>{if(g==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let v=o-p.length+1;if(v<0)throw new Error("Ellipsis out of bounds");if(d=a.slice(i,i+v),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<d.length;b++){let x=String.fromCharCode("0".charCodeAt(0)+b);h.addSymbol(x,y+b),this.addSymbol(x,a[i++],n)}}else h.addSymbol(g,y+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,a[i++],n)}),h}},uu=e=>e+"_max",Pc=(e,t,r,a,n)=>{let u=t.map((v,b)=>e[b]?v.length:v).map((v,b)=>U(`input${b}`,r,v)),d=W.size(n),i=De(n.length),p=i?n.length:n,h=Q("output",r,p),g=[...a.symbolToInfo.keys()].filter(v=>!a.rhs.symbolToIndices.has(v)),y=v=>{let b=[],x="var prod = 1.0;",I="var sum = 0.0;",S="sum += prod;",_=[],T=[],E=[],z=[],B=a.symbolToInfo.size===a.rhs.symbolToIndices.size;a.symbolToInfo.forEach((N,X)=>{if(a.rhs.symbolToIndices.has(X)){let R=a.rhs.symbolToIndices.get(X)?.[0];R!==void 0&&a.lhs.forEach((q,J)=>{if(N.inputIndices.includes(J)){let re=q.symbolToIndices.get(X);if(re===void 0)throw new Error("Invalid symbol error");re.forEach(Ee=>{b.push(`${u[J].indicesSet(`input${J}Indices`,Ee,h.indicesGet("outputIndices",R))}`)})}})}else a.lhs.forEach((R,q)=>{if(N.inputIndices.includes(q)){let J=R.symbolToIndices.get(X);if(J===void 0)throw new Error("Invalid symbol error");J.forEach(re=>{_.push(`${u[q].indicesSet(`input${q}Indices`,re,`${X}`)}`)}),z.push(`prod *= ${u[q].getByIndices(`input${q}Indices`)};`)}}),T.push(`for(var ${X}: u32 = 0; ${X} < uniforms.${uu(X)}; ${X}++) {`),E.push("}")});let V=B?[...b,`let sum = ${u.map((N,X)=>N.getByIndices(`input${X}Indices`)).join(" * ")};`]:[...b,I,...T,..._,x,...z,S,...E];return`
            ${v.registerUniforms(g.map(N=>({name:`${uu(N)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,h)}

            ${v.mainStart()}
            ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${h.offsetToIndices("global_idx")};
            ${u.map((N,X)=>`var input${X}Indices: ${u[X].type.indices};`).join(`
`)}
            ${V.join(`
`)};
            ${h.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:a.equation,inputDependencies:e.map(v=>v?"rank":"dims")},getRunData:()=>{let v=g.filter(x=>a.symbolToInfo.has(x)).map(x=>({type:"uint32",data:a.symbolToInfo.get(x)?.dimValue||0}));v.push({type:"uint32",data:d});let b=t.filter((x,I)=>e[I]).map((x,I)=>[...F(x)]).reduce((x,I)=>x.concat(I),v);return i&&b.push(...F(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:b}},getShaderSource:y}},lu=(e,t)=>{let r=new Ja(e.inputs,t.equation),a=e.inputs.map((u,d)=>De(u.dims.length)),n=r.outputDims,o=e.inputs.map((u,d)=>u.dims);e.compute(Pc(a,o,e.inputs[0].dataType,r,n))},du=e=>{let t=e.equation.replace(/\s+/g,"");return fe({equation:t})}});var Bc,pu,Dc,Mc,mu,fu=Z(()=>{"use strict";We();xe();$e();Bc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},pu=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Dc=(e,t)=>e.length>t.length?pu(e,t):pu(t,e),Mc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Dc(t,r),n=e[0].dataType,o=n===9?4:1,u=Math.ceil(W.size(a)/o),d=De(t.length),i=De(a.length),p=g=>{let y=d?t.length:t,v=i?a.length:a,b=U("input",n,y,o),x=Q("output",n,v,o),I;if(n===9){let S=(_,T,E="")=>`
          let outputIndices${T} = ${x.offsetToIndices(`outputOffset + ${T}u`)};
          let offset${T} = ${b.broadcastedIndicesToOffset(`outputIndices${T}`,x)};
          let index${T} = offset${T} / 4u;
          let component${T} = offset${T} % 4u;
          ${_}[${T}] = ${E}(${b.getByOffset(`index${T}`)}[component${T}]);
        `;I=`
        let outputOffset = global_idx * ${o};
        var data = vec4<u32>(0);
        ${S("data",0,"u32")}
        ${S("data",1,"u32")}
        ${S("data",2,"u32")}
        ${S("data",3,"u32")}
        ${x.setByOffset("global_idx","data")}
      }`}else I=`
        let outputIndices = ${x.offsetToIndices("global_idx")};
        let inputOffset = ${b.broadcastedIndicesToOffset("outputIndices",x)};
        ${x.setByOffset("global_idx",b.getByOffset("inputOffset"))}
      }`;return`
    ${g.registerUniform("vec_size","u32").declareVariables(b,x)}
    ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${I}`},h=[{type:"uint32",data:u}];return d&&h.push(...F(t)),i&&h.push(...F(a)),{name:"Expand",shaderCache:{hint:`${a.length}`,inputDependencies:[d?"rank":"dims"]},getShaderSource:p,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h})}},mu=e=>{Bc(e.inputs),e.compute(Mc(e.inputs),{inputs:[0]})}});var zc,Uc,hu,gu,yu=Z(()=>{"use strict";We();xe();qe();$e();zc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Uc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,o=W.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(o,1,...a);let d=r[o],i=e[0].dataType===9?4:1,p=Math.ceil(W.size(u)/i),h=De(e[0].dims.length),g=h?e[0].dims.length:e[0].dims,y=De(e[1].dims.length),v=y?e[1].dims.length:e[1].dims,b=De(u.length),x=b?u.length:u,I=[{type:"uint32",data:p},{type:"int32",data:d},{type:"uint32",data:o}];h&&I.push(...F(e[0].dims)),y&&I.push(...F(e[1].dims)),b&&I.push(...F(u));let S=[];S.push(h?"rank":"dims"),S.push(y?"rank":"dims");let _=T=>{let E=U("data",e[0].dataType,g,i),z=U("inputIndices",e[1].dataType,v),B=Q("output",e[0].dataType,x,i),V=X=>{let R=a.length,q=`var indicesIndices${X}  = ${z.type.indices}(0);`;for(let J=0;J<R;J++)q+=`${R>1?`indicesIndices${X}[${J}]`:`indicesIndices${X}`} = ${u.length>1?`outputIndices${X}[uniforms.axis + ${J}]`:`outputIndices${X}`};`;q+=`
          var idx${X} = ${z.getByIndices(`indicesIndices${X}`)};
          if (idx${X} < 0) {
            idx${X} = idx${X} + uniforms.axisDimLimit;
          }
          var dataIndices${X} = ${E.type.indices}(0);
        `;for(let J=0,re=0;J<n;J++)J===o?(q+=`${n>1?`dataIndices${X}[${J}]`:`dataIndices${X}`} = u32(idx${X});`,re+=R):(q+=`${n>1?`dataIndices${X}[${J}]`:`dataIndices${X}`} = ${u.length>1?`outputIndices${X}[${re}]`:`outputIndices${X}`};`,re++);return q},N;if(e[0].dataType===9){let X=(R,q,J="")=>`
          let outputIndices${q} = ${B.offsetToIndices(`outputOffset + ${q}u`)};
          ${V(q)};
          let offset${q} = ${E.indicesToOffset(`dataIndices${q}`)};
          let index${q} = offset${q} / 4u;
          let component${q} = offset${q} % 4u;
          ${R}[${q}] = ${J}(${E.getByOffset(`index${q}`)}[component${q}]);
        `;N=`
        let outputOffset = global_idx * ${i};
        var value = vec4<u32>(0);
        ${X("value",0,"u32")}
        ${X("value",1,"u32")}
        ${X("value",2,"u32")}
        ${X("value",3,"u32")}
        ${B.setByOffset("global_idx","value")}
      `}else N=`
      let outputIndices = ${B.offsetToIndices("global_idx")};
      ${V("")};
      let value = ${E.getByIndices("dataIndices")};
      ${B.setByOffset("global_idx","value")};
      `;return`
      ${T.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,z,B)}
      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${N}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:S},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:I}),getShaderSource:_}},hu=e=>fe({axis:e.axis}),gu=(e,t)=>{let r=e.inputs;zc(r),e.compute(Uc(e.inputs,t))}});var Vc,Wc,bu,wu,vu=Z(()=>{"use strict";xe();qe();$e();Vc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Wc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,o=e[1].dims,u=e[1].dataType,d=W.normalizeAxis(t.axis,n),i=r[d],p=o.slice(0),h=W.size(p),g=U("input",a,n),y=U("indicesInput",u,o.length),v=Q("output",a,p.length),b=[{type:"uint32",data:h},{type:"int32",data:i},{type:"uint32",data:d}];return b.push(...F(r)),b.push(...F(o)),b.push(...F(p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:b}),getShaderSource:S=>`
      ${S.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(g,y,v)}
      ${S.mainStart()}
      ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${v.offsetToIndices("global_idx")};

      var idx = ${y.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${g.type.indices}(outputIndices);
      ${g.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${g.getByIndices("inputIndices")};

      ${v.setByOffset("global_idx","value")};
  }`}},bu=e=>fe({axis:e.axis}),wu=(e,t)=>{let r=e.inputs;Vc(r),e.compute(Wc(e.inputs,t))}});var Nc,Hc,$u,_u,xu=Z(()=>{"use strict";xe();$e();Nc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Hc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,o,u]=Vn.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),d=[n,o];if(!d)throw new Error("Can't use gemm on the given tensors");let i=W.size(d),p=[{type:"uint32",data:i},{type:"uint32",data:n},{type:"uint32",data:o},{type:"uint32",data:u},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],h=["type","type"];e.length===3&&(p.push(...F(e[2].dims)),h.push("rank")),p.push(...F(d));let g=y=>{let v="";t.transA&&t.transB?v="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?v="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?v="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(v="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let b=t.alpha===1?"":"value *= uniforms.alpha;",x=U("a",e[0].dataType,e[0].dims),I=U("b",e[1].dataType,e[1].dims),S=x.type.value,_=null,T=[x,I];e.length===3&&(_=U("c",e[2].dataType,e[2].dims.length),T.push(_));let E=Q("output",e[0].dataType,d.length);T.push(E);let z=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${y.registerUniforms(z).declareVariables(...T)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${S}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${v}
    }

    ${b}
    ${(()=>_!=null?`let cOffset = ${_.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += ${S}(uniforms.beta) * ${_.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:g}},$u=e=>{let t=e.transA,r=e.transB,a=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:a,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},_u=(e,t)=>{Nc(e.inputs),e.compute(Hc(e.inputs,t))}});var Lc,Gc,Fc,Su,Cu=Z(()=>{"use strict";We();xe();$e();Lc=(e,t)=>{let r=e[0].dims,a=r,n=2,o=W.sizeToDimension(r,n),u=W.sizeFromDimension(r,n),d=He(u),i=u/d,p=[r[0],r[1],i],h=["rank","type","type"],g=[{type:"uint32",data:u},{type:"uint32",data:i}];g.push(...F(p),...F(p));let y=v=>{let b=U("x",e[0].dataType,p.length,d),x=U("scale",e[1].dataType,e[1].dims),I=U("bias",e[2].dataType,e[2].dims),S=Q("output",e[0].dataType,p.length,d),_=[b,x,I,S],T=b.type.value,E=d===1?"f32":`vec${d}<f32>`,z=64,B=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${E}, ${z}>;
  const workgroupSize = ${z}u;
  ${v.registerUniforms(B).declareVariables(..._)}
  ${v.mainStart(z)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${E}(${b.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${ut("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${E}(${b.get("batch","channel","h")}) - ${E}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${ut("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${x.getByOffset("channel")});
    let channelShift = f32(${I.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${b.get("batch","channel","h")} * ${T}(${E}(channelScale)) + ${T}(${E}(channelShift));
      ${S.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:o},programUniforms:g}),getShaderSource:y}},Gc=(e,t,r,a,n,o,u,d)=>{let i=He(u),p=64,h=i===1?"vec2f":`mat2x${i}f`,g=i===1?"f32":`vec${i}f`,y=(B,V)=>`${h}(${B}, ${V})`,v=n*u/i,b=Math.ceil(o/p),x=["type"],I=[{type:"uint32",data:b},{type:"uint32",data:o},{type:"uint32",data:Math.floor(u/i)},{type:"uint32",data:Math.floor(o*u/i)}],S=B=>{let V=U("input",t.dataType,t.dims,i);return`
  ${B.declareVariables(V)}
  @group(0) @binding(1) var<storage, read_write> output : array<${h}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${B.mainStart(p)}
    let currentImageNumber = global_idx / ${p} / uniforms.C;
    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;
    let wgId = global_idx % ${p};
    let wgOffset = wgId * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${et("f32",i)};
    var squaredSum = ${et("f32",i)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${g}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${y("sum","squaredSum")};
  }`},_=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${i}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:[n,u,p,2],dataType:1}],dispatchGroup:{x:n*u/i},programUniforms:I}),getShaderSource:S},{inputs:[t],outputs:[-1]})[0],T=[{type:"uint32",data:v},{type:"uint32",data:o},{type:"uint32",data:Math.floor(u/i)},{type:"uint32",data:Math.floor(p*u/i)}],E=["type","type","type"],z=B=>{let V=U("scale",r.dataType,r.dims,i),N=U("bias",a.dataType,a.dims,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${h}>;
  @group(0) @binding(1) var<storage, read> scale : array<${V.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${N.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${h}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${et("f32",i)};
    var squaredSum = ${et("f32",i)};
    for (var i: u32 = 0; i < ${p}; i++) {
        let value = input[offset + i + currentChannelNumber * ${p}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${g}(scale[currentChannelNumber]);
    let channelShift = ${g}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${y("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${i};${d}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:T}),getShaderSource:z},{inputs:[_,r,a],outputs:[-1]})[0]},Fc=(e,t,r)=>{let a=t[0].dims,n=a,o=a[0],u=a[a.length-1],d=W.sizeFromDimension(a,1)/u,i=He(u),p=W.size(n)/i,h=[{type:"uint32",data:d},{type:"uint32",data:Math.floor(u/i)}],g=["type","type"],y=Gc(e,t[0],t[1],t[2],o,d,u,r.epsilon),v=b=>{let x=Fe(t[0].dataType),I=i===1?"vec2f":`mat2x${i}f`,S=i===1?x:`vec${i}<${x}>`,_=U("input",t[0].dataType,t[0].dims,i),T=Q("output",t[0].dataType,n,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${_.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${I}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${b.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${S}(scale[0]), ${S}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${i}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:v},{inputs:[t[0],y]})},Su=(e,t)=>{t.format==="NHWC"?Fc(e,e.inputs,t):e.compute(Lc(e.inputs,t))}});var qc,jc,Iu,Au=Z(()=>{"use strict";We();xe();$e();qc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},jc=(e,t,r)=>{let a=e[0].dims,n=e[1],o=e[2],u=a,d=W.normalizeAxis(t.axis,a.length),i=W.sizeToDimension(a,d),p=W.sizeFromDimension(a,d),h=W.size(n.dims),g=o?W.size(o.dims):0;if(h!==p||o&&g!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${h} and bias size of ${g}`);let y=[];for(let E=0;E<a.length;++E)E<d?y.push(a[E]):y.push(1);let v=He(p),b=["type","type"],x=[{type:"uint32",data:i},{type:"float32",data:p},{type:"uint32",data:Math.floor(p/v)},{type:"float32",data:t.epsilon}];o&&b.push("type");let I=r>1,S=r>2,_=E=>{let z=Fe(e[0].dataType),B=[U("x",e[0].dataType,e[0].dims,v),U("scale",n.dataType,n.dims,v)];o&&B.push(U("bias",o.dataType,o.dims,v)),B.push(Q("output",e[0].dataType,u,v)),I&&B.push(Q("mean_data_output",1,y)),S&&B.push(Q("inv_std_output",1,y));let V=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${E.registerUniforms(V).declareVariables(...B)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var meanVector = ${et("f32",v)};
    var meanSquareVector = ${et("f32",v)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${xt(z,v,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${ut("meanVector",v)} / uniforms.norm_size;
    let invStdDev =
        inverseSqrt(${ut("meanSquareVector",v)} / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${xt(z,v,"x[j + offset]")};
      let f32scale = ${xt(z,v,"scale[j]")};
      output[j + offset] = ${B[0].type.value}((f32input - mean) * invStdDev * f32scale
        ${o?`+ ${xt(z,v,"bias[j]")}`:""}
      );
    }

    ${I?"mean_data_output[global_idx] = mean":""};
    ${S?"inv_std_output[global_idx] = invStdDev":""};
  }`},T=[{dims:u,dataType:e[0].dataType}];return I&&T.push({dims:y,dataType:1}),S&&T.push({dims:y,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${v};${r}`,inputDependencies:b},getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(i/64)},programUniforms:x}),getShaderSource:_}},Iu=(e,t)=>{qc(e.inputs),e.compute(jc(e.inputs,t,e.outputCount))}});var Kc,Tu,Eu,Yc,ei,Ou,ku=Z(()=>{"use strict";xe();qe();yr();Wa();$e();wr();Kc=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],u=e[4],d=e[5],i=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,g=r.dims[0],y=r.dims[1],v=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=y,x=0,I=0,S=Math.floor(v/t.numHeads);if(i&&p){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(p.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');x=i.dims[2],I=i.dims[2]}else if(i||p)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let _;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');_=2,b=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==S)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');_=5,b=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==S)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');_=0,b=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');_=3}if(o){if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let T=0;if(u){T=8;let N=u.dims;throw N.length===1?N[0]===g?T=1:N[0]===3*g+2&&(T=3):N.length===2&&N[0]===g&&N[1]===b&&(T=5),T===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let E=!1,z=v;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(b!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');z=n.dims[2]}else{if(b!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');z=n.dims[1]*n.dims[3],E=!0}}let B=x+b,V=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(i)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:g,sequenceLength:y,pastSequenceLength:x,kvSequenceLength:b,totalSequenceLength:B,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:v,vHiddenSize:z,headSize:S,vHeadSize:Math.floor(z/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:T,scale:t.scale,broadcastResPosBias:V,passPastInKv:E,qkvFormat:_}},Tu=e=>fe({...e}),Eu=fe({perm:[0,2,1,3]}),Yc=(e,t,r,a,n,o,u)=>{let d=[a,n,o],i=W.size(d),p=[{type:"uint32",data:i},{type:"uint32",data:u},{type:"uint32",data:o}],h=g=>{let y=Q("qkv_with_bias",t.dataType,d),v=U("qkv",t.dataType,d),b=U("bias",r.dataType,d),x=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${g.registerUniforms(x).declareVariables(v,b,y)}
  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},ei=(e,t,r,a,n,o,u,d)=>{let i=o;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return i=Yc(e,o,u,t,a,r*n,d),i=i.reshape([t,a,r,n]),e.compute(ht(i,Eu.perm),{inputs:[i],outputs:[-1]})[0]}else return o.dims.length===3&&(i=o.reshape([t,a,r,n])),e.compute(ht(i,Eu.perm),{inputs:[i],outputs:[-1]})[0]},Ou=(e,t)=>{let r=Kc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=ei(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return Fn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let o=ei(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=ei(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Fn(e,n,o,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Zc,Xc,Qc,Jc,ep,tp,rp,np,Ru,Pu=Z(()=>{"use strict";We();xe();$e();Zc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Xc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
            k = i32(${e.indicesGet("indices",n)}) - ${le("uniforms.pads",n,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${le("uniforms.x_shape",n,t)})) {
              break;
            }
            offset += k * i32(${le("uniforms.x_strides",n,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${a}
            value = x[offset];
          }
      `},Qc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${le("uniforms.pads",n,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${le("uniforms.x_shape",n,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${le("uniforms.x_shape",n,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${le("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},Jc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${le("uniforms.pads",n,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${le("uniforms.x_shape",n,t)})) {
                  k = i32(${le("uniforms.x_shape",n,t)}) - 1;
                }
                offset += k * i32(${le("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},ep=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${le("uniforms.pads",n,r)};
                if (k < 0)  {
                  k += i32(${le("uniforms.x_shape",n,t)}]);
                }
                if (k >= i32(${le("uniforms.x_shape",n,t)})) {
                  k -= i32(${le("uniforms.x_shape",n,t)});
                }
                offset += k * i32(${le("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},tp=(e,t,r)=>{switch(r.mode){case 0:return Xc(e,t,r.pads.length);case 1:return Qc(e,t,r.pads.length);case 2:return Jc(e,t,r.pads.length);case 3:return ep(e,t,r.pads.length);default:throw new Error("Invalid mode")}},rp=(e,t)=>{let r=W.padShape(e[0].dims.slice(),t.pads),a=e[0].dims,o=[{type:"uint32",data:W.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let i=st(e[0].dataType);o.push({type:i,data:t.value})}o.push(...F(e[0].dims),...F(r));let u=["rank"],d=i=>{let p=Q("output",e[0].dataType,r.length),h=U("x",e[0].dataType,a.length),g=h.type.value,y=tp(p,a.length,t),v=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&v.push({name:"constant_value",type:g}),`
            ${i.registerUniforms(v).declareVariables(h,p)}
            ${i.mainStart()}
            ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${g}(0);
            ${y}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(W.size(r)/64)},programUniforms:o}),getShaderSource:d}},np=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,o=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let i=0;i<d.length;i++)o[Number(d[i])]=Number(r[i]),o[Number(d[i])+n]=Number(r[i+d.length])}else r.forEach((d,i)=>o[Number(i)]=Number(d));let u=[];return o.forEach(d=>u.push(d)),{mode:t.mode,value:a,pads:u}}else return t},Ru=(e,t)=>{Zc(e.inputs);let r=np(e.inputs,t);e.compute(rp(e.inputs,r),{inputs:[0]})}});var ta,Bu,Du,Mu,zu,ap,ip,Uu,Vu,Wu,Nu,Hu,Lu,Gu,Fu,qu,ju,Ku,Yu,Zu=Z(()=>{"use strict";ft();xe();$e();ta=e=>{if(Ie.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Bu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let o=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),i=o?t.dilations.slice():[],p=t.pads.slice();Jt.adjustPoolAttributes(r,n,u,d,i,p);let h=Jt.computePoolOutputShape(r,n,d,i,u,p,t.autoPad),g=Object.assign({},t);o?Object.assign(g,{kernelShape:u,strides:d,pads:p,dilations:i,cacheKey:t.cacheKey}):Object.assign(g,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let y=h.slice();return y.push(y.splice(1,1)[0]),[g,a?y:h]},Du=(e,t)=>{let r=t.format==="NHWC",a=W.size(e),n=W.size(t.kernelShape),o=[{type:"uint32",data:a},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],i=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],g=!!(p+h);o.push({type:"uint32",data:d},{type:"uint32",data:i},{type:"uint32",data:p},{type:"uint32",data:h}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let y=!1;if(t.kernelShape.length===2){let v=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],x=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];y=!!(x+I),o.push({type:"uint32",data:v},{type:"uint32",data:b},{type:"uint32",data:x},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[o,u,!0,g,y]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=W.computeStrides(t.kernelShape);o.push({type:"uint32",data:d},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let i=t.pads.reduce((p,h)=>p+h);return[o,u,!!i,!1,!1]}},Mu=(e,t,r,a,n,o,u,d,i,p,h,g)=>{let y=n.format==="NHWC",v=t.type.value,b=Q("output",t.type.tensor,a);if(n.kernelShape.length<=2){let x="",I="",S="",_=r-(y?2:1);if(h?x=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${_}] < 0 || xIndices[${_}]
                      >= uniforms.x_shape[${_}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`:x=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`,n.kernelShape.length===2){let E=r-(y?3:2);g?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,S=`
              }
            `}return`
            ${e.registerUniforms(i).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var value = ${v}(${d});
              var pad = 0;
              ${I}
              ${x}
              ${S}
              ${u}

              output[global_idx] = value;
            }`}else{if(y)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let x=n.kernelShape.length,I=n.pads.length,S="";return p?S=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${o}
              }`:S=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${o}
            `,`
            ${e.registerUniforms(i).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var offsets: array<u32, ${x}>;

              var value = ${v}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${x-1}u; j++) {
                  offsets[j] = offset / ${le("uniforms.kernelStrides","j",x)};
                  offset -= offsets[j] * ${le("uniforms.kernelStrides","j",x)};
                }
                offsets[${x-1}] = offset;

                isPad = false;
                for (var j = ${r-x}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${le("uniforms.strides",`j - ${r-x}u`,x)}
                    + offsets[j - ${r-x}u] - ${le("uniforms.pads","j - 2u",I)};
                  ${S}
              }
              ${u}

              output[global_idx] = value;
            }`}},zu=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,ap=e=>`${zu(e)};${e.countIncludePad}`,ip=e=>`${zu(e)};${e.storageOrder};${e.dilations}`,Uu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Vu=(e,t,r,a)=>{let[n,o]=Bu(t,a,r),u=U("x",t.dataType,t.dims.length),d=u.type.value,i="value += x_val;",p="";n.countIncludePad?p+=`value /= ${d}(uniforms.kernelSize);`:p+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[h,g,y,v,b]=Du(o,n);h.push(...F(t.dims),...F(o));let x=["rank"];return{name:e,shaderCache:{hint:`${a.cacheKey};${y};${v};${b}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(o)/64)},programUniforms:h}),getShaderSource:I=>Mu(I,u,t.dims.length,o.length,n,i,p,0,g,y,v,b)}},Wu=e=>{let t=e.count_include_pad!==0,r=Uu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let a={countIncludePad:t,...r,cacheKey:""};return{...a,cacheKey:ap(a)}},Nu=(e,t)=>{ta(e.inputs),e.compute(Vu("AveragePool",e.inputs[0],!1,t))},Hu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Lu=e=>{let t=e.format;return{format:t,...Hu,cacheKey:t}},Gu=(e,t)=>{ta(e.inputs),e.compute(Vu("GlobalAveragePool",e.inputs[0],!0,t))},Fu=(e,t,r,a)=>{let[n,o]=Bu(t,a,r),u=`
      value = max(x_val, value);
    `,d="",i=U("x",t.dataType,t.dims.length),p=["rank"],[h,g,y,v,b]=Du(o,n);return h.push(...F(t.dims),...F(o)),{name:e,shaderCache:{hint:`${a.cacheKey};${y};${v};${b}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(o)/64)},programUniforms:h}),getShaderSource:x=>Mu(x,i,t.dims.length,o.length,n,u,d,-1e5,g,y,v,b)}},qu=(e,t)=>{ta(e.inputs),e.compute(Fu("MaxPool",e.inputs[0],!1,t))},ju=e=>{let t=e.storage_order,r=e.dilations,a=Uu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...a,cacheKey:""};return{...n,cacheKey:ip(n)}},Ku=e=>{let t=e.format;return{format:t,...Hu,cacheKey:t}},Yu=(e,t)=>{ta(e.inputs),e.compute(Fu("GlobalMaxPool",e.inputs[0],!0,t))}});var sp,up,Xu,Qu=Z(()=>{"use strict";ft();We();$e();sp=(e,t,r)=>{let a=e===t,n=e<t&&r<0,o=e>t&&r>0;if(a||n||o)throw new Error("Range these inputs' contents are invalid.")},up=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),o=[n],u=n,d=st(a),i=[{type:"uint32",data:u},{type:d,data:e},{type:d,data:r},...F(o)],p=h=>{let g=Q("output",a,o.length),y=g.type.value,v=[{name:"outputSize",type:"u32"},{name:"start",type:y},{name:"delta",type:y}];return`
        ${h.registerUniforms(v).declareVariables(g)}
        ${h.mainStart()}
        ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${y}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${a}`},getShaderSource:p,getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:i})}},Xu=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Ie.webgpu.validateInputContent&&sp(t,r,a),e.compute(up(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var lp,dp,cp,pp,mp,fp,hp,gp,yp,bp,wp,Ju,vp,$p,_p,xp,Sp,el,tl,rl=Z(()=>{"use strict";xe();qe();$e();lp=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},dp=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,o)=>a[n]=e[o]),a},cp=(e,t,r,a,n,o)=>{let[u,d,i]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>o.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>a.push(h)),a.length!==0&&a.length!==p&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");lp(a,t),t.axes.length>0&&dp(a,t.axes,p).forEach((h,g)=>a[g]=h)}if(i>0&&e.length>i&&(e[i].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},pp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",mp=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",fp=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((o,u)=>{a[o]=n[u],a[u+r]=n[t.length+u]}),a):n},hp=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(o=>n.push(o)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((o,u)=>n[o]=r[u])}else r.forEach(o=>n.push(o));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((o,u)=>Math.round(o*t[u]))}return n},gp=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(o=>t[o]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(o=>t[o]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(o=>t[o]=a),r.axes.forEach(o=>n[o]=Math.round(e[o]*t[o]))):(t.fill(a,0,t.length),n.forEach((o,u)=>n[u]=Math.round(o*t[u]))),n},yp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${le("uniforms.scales","i",a)};
        var roi_low = ${le("uniforms.roi","i",n)};
        var roi_hi = ${le("uniforms.roi",`i + ${t.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${le("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${le("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,bp=(e,t,r,a,n,o,u)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${a.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${le("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${le("uniforms.roi","i",o)};
          var roi_hi = ${le("uniforms.roi",`i + ${r.length}`,o)};
          var input_shape_i = ${le("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${le("uniforms.output_shape","i",a.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${u} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,wp=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${le("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Ju=(e,t,r,a)=>e.rank>a?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",vp=(e,t,r,a,n)=>{let[u,d,i,p]=r.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${r[i]} - 1))`)};
      ${Ju(e,p,u,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${h} = originalIndices[${d}];
      var col:${h} = originalIndices[${i}];
      ${a?`if (row < 0 || row > (${r[d]} - 1) || col < 0 || col > (${r[i]} - 1)) {
        return ${n};
      }`:""};
      row = max(0, min(row, ${r[d]} - 1));
      col = max(0, min(col, ${r[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${p}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${u}])`:"0"};
      var x11: ${h} = getInputValue(batch, channel, row1, col1);
      var x12: ${h} = getInputValue(batch, channel, row1, col2);
      var x21: ${h} = getInputValue(batch, channel, row2, col1);
      var x22: ${h} = getInputValue(batch, channel, row2, col2);
      var dx1: ${h} = abs(row - ${h}(row1));
      var dx2: ${h} = abs(${h}(row2) - row);
      var dy1: ${h} = abs(col - ${h}(col1));
      var dy2: ${h} = abs(${h}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},$p=(e,t,r,a,n,o,u,d,i,p)=>{let h=r.length===2,g=!0,[y,v]=h?[0,1]:g?[2,3]:[1,2],b=e.type.value,x=I=>{let S=I===y?"row":"col";return`
      fn ${S}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${b} {
        var output_index = ${t.indicesGet("output_indices",I)};
        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[I]},
        ${a[I]}, ${r[I]}, ${o[I]}, ${o[I]} + ${r.length});
        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {
          return ${i};
        }
        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${S}: ${b} = originalIdx + ${b}(i);
          if (${S} < 0 || ${S} >= ${r[I]}) {
            ${(()=>p?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${i};`:`${S} = max(0, min(${S}, ${r[I]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",I,`u32(${S})`)};
          data[i + 1] = ${I===y?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${x(y)};
    ${x(v)};
  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {
    var absS = abs(s);
    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${b} = 1.0 - absS;
    var twoMinusAbsS: ${b} = 2.0 - absS;
    var onePlusAbsS: ${b} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {
    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${b} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},_p=(e,t,r,a,n)=>{let[u,d,i,p,h]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(depth, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(height, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(width, ${r[p]} - 1))`)};
      ${Ju(e,h,u,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${g} = originalIndices[${d}];
      var height:${g} = originalIndices[${i}];
      var width:${g} = originalIndices[${p}];
      ${a?`if (depth < 0 || depth > (${r[d]} - 1) || height < 0 || height > (${r[i]} - 1) || width < 0 || (width > ${r[p]} - 1)) {
      return ${n};
        }`:""};

    depth = max(0, min(depth, ${r[d]} - 1));
      height = max(0, min(height, ${r[i]} - 1));
      width = max(0, min(width, ${r[p]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${h}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${u}])`:"0"};

      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${g} = abs(depth - ${g}(depth1));
      var dx2: ${g} = abs(${g}(depth2) - depth);
      var dy1: ${g} = abs(height - ${g}(height1));
      var dy2: ${g} = abs(${g}(height2) - height);
      var dz1: ${g} = abs(width - ${g}(width1));
      var dz2: ${g} = abs(${g}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},xp=(e,t,r,a,n,o)=>{let u=e.dims,d=fp(o,t.axes,u.length),i=hp(u,a,n,t.axes),p=a.slice();a.length===0&&(p=u.map((_,T)=>_===0?1:i[T]/_),t.keepAspectRatioPolicy!=="stretch"&&(i=gp(u,p,t)));let h=Q("output",e.dataType,i.length),g=U("input",e.dataType,u.length),y=W.size(i),v=u.length===i.length&&u.every((_,T)=>_===i[T]),b=t.coordinateTransformMode==="tf_crop_and_resize",x=t.extrapolationValue,I=g.type.value,S=_=>`
      ${v?"":`
      ${pp(t.coordinateTransformMode,I)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${wp(g,u)};
              ${mp(t.nearestMode,r,I)};
              ${bp(g,h,u,i,p.length,d.length,b)};
              `;case"linear":return`
              ${yp(h,u,i,p.length,d.length)};
              ${(()=>{if(u.length===2||u.length===4)return`${vp(g,h,u,b,x)}`;if(u.length===3||u.length===5)return`${_p(g,h,u,b,x)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(u.length===2||u.length===4)return`${$p(g,h,u,i,p,d,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${_.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",d.length).declareVariables(g,h)}
      ${_.mainStart()}
        ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${v?"output[global_idx] = input[global_idx];":`
        let output_indices = ${h.offsetToIndices("global_idx")};
        var input_indices: ${g.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${g.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${u.length===2||u.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${d.length>0?d:""}|${v}|${u}`,inputDependencies:["rank"]},getShaderSource:S,getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:[{type:"uint32",data:y},{type:"float32",data:p},{type:"float32",data:d},...F(u),...F(i)]})}},Sp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},el=(e,t)=>{let r=[],a=[],n=[],o=Sp(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");cp(e.inputs,t,o,r,a,n),e.compute(xp(e.inputs[0],t,o,r,a,n),{inputs:[0]})},tl=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,o=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,i=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return fe({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:o,extrapolationValue:u,keepAspectRatioPolicy:d,mode:i,nearestMode:p})}});var Cp,Ip,nl,al,il=Z(()=>{"use strict";We();xe();qe();$e();Cp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==o)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Ip=(e,t,r,a)=>{let n=e[0].dims,o=W.size(n),u=n,d=o,i=n.slice(-1)[0],p=a?n.slice(0,-1).concat(1):[],h=e.length>3,g=e.length>4,y=a&&r>1,v=a&&r>2,b=r>3,x=He(i),I=[U("x",e[0].dataType,e[0].dims,x),U("skip",e[1].dataType,e[1].dims,x),U("gamma",e[2].dataType,e[2].dims,x)];h&&I.push(U("beta",e[3].dataType,e[3].dims,x)),g&&I.push(U("bias",e[4].dataType,e[4].dims,x)),I.push(Q("output",e[0].dataType,u,x)),y&&I.push(Q("meanOutput",1,p)),v&&I.push(Q("invStdOutput",1,p)),b&&I.push(Q("inputSkipBiasSum",e[0].dataType,u,x));let S=Fe(e[0].dataType),_=E=>`
      const hiddenSize: f32 = ${i};
      const hiddenSizeVectorized: u32 = ${i/x};
      const epsilon: f32 = ${t.epsilon};

      ${E.declareVariables(...I)}

      ${E.mainStart()}
        ${E.guardAgainstOutOfBoundsWorkgroupSizes(d/i)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${et("f32",x)};
        var squareSum = ${et("f32",x)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${g?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${b?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${xt(S,x,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${ut("sum",x)} / hiddenSize;
        let invStdDev = inverseSqrt(${ut("squareSum",x)} / hiddenSize - mean * mean + epsilon);
        ${y?"meanOutput[global_idx] = mean;":""}
        ${v?"invStdOutput[global_idx] = invStdDev;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${S}(mean)) * ${S}(invStdDev) * gamma[i]
           + ${h?"beta[i]":"0.0"};
        }
      }`,T=[{dims:u,dataType:e[0].dataType}];return r>1&&T.push({dims:p,dataType:1}),r>2&&T.push({dims:p,dataType:1}),r>3&&T.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:_,getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(d/i/64)}})}},nl=(e,t)=>{Cp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(Ip(e.inputs,t,e.outputCount,!1),{outputs:a})},al=e=>{let t=e.epsilon;return fe({epsilon:t})}});var Ap,ra,Ep,ol,Tp,Op,sl,ul,ll=Z(()=>{"use strict";We();xe();qe();$e();Ap=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},ra=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Ep=(e,t)=>{if(e.length>1){let r=ra(e,1),a=ra(e,2),n=ra(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),fe({starts:r,ends:a,axes:n})}else return t},ol=(e,t,r,a,n)=>{let o=e;return e<0&&(o+=r[a[t]]),n[t]<0?Math.max(0,Math.min(o,r[a[t]]-1)):Math.max(0,Math.min(o,r[a[t]]))},Tp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${le("uniforms.input_shape","i",r.length)};
            let steps_i = ${le("uniforms.steps","i",r.length)};
            let signs_i = ${le("uniforms.signs","i",r.length)};
            let starts_i = ${le("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Op=(e,t)=>{let r=e[0].dims,a=W.size(r),n=t.axes.length>0?W.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],o=ra(e,4);o.forEach(S=>S!==0||(()=>{throw new Error("step cannot be 0")})),o.length===0&&(o=Array(n.length).fill(1));let u=t.starts.map((S,_)=>ol(S,_,r,n,o)),d=t.ends.map((S,_)=>ol(S,_,r,n,o));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let S=0;S<r.length;++S)n.includes(S)||(u.splice(S,0,0),d.splice(S,0,r[S]),o.splice(S,0,1));let i=o.map(S=>Math.sign(S));o.forEach((S,_,T)=>{if(S<0){let E=(d[_]-u[_])/S,z=u[_],B=z+E*o[_];u[_]=B,d[_]=z,T[_]=-S}});let p=r.slice(0);n.forEach((S,_)=>{p[S]=Math.ceil((d[S]-u[S])/o[S])});let h={dims:p,dataType:e[0].dataType},g=Q("output",e[0].dataType,p.length),y=U("input",e[0].dataType,e[0].dims.length),v=W.size(p),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:i.length},{name:"steps",type:"u32",length:o.length}],x=[{type:"uint32",data:v},{type:"uint32",data:u},{type:"int32",data:i},{type:"uint32",data:o},...F(e[0].dims),...F(p)],I=S=>`
      ${S.registerUniforms(b).declareVariables(y,g)}
        ${Tp(y,g,r)}
        ${S.mainStart()}
          ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${g.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${g.setByOffset("global_idx",y.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${i.length}_${u.length}_${o.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:x})}},sl=(e,t)=>{Ap(e.inputs,t);let r=Ep(e.inputs,t);e.compute(Op(e.inputs,r),{inputs:[0]})},ul=e=>{let t=e.starts,r=e.ends,a=e.axes;return fe({starts:t,ends:r,axes:a})}});var kp,Rp,dl,cl,pl=Z(()=>{"use strict";xe();qe();$e();kp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Rp=(e,t)=>{let r=e.dims,a=W.size(r),n=64,o=t.axis;if(o<0&&(o=r.length+o),o<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[o],d=a/u,i=He(u),p=u/i,h=(I,S)=>S===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:S===2?`max(${I}.x, ${I}.y)`:S===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,g=U("x",e.dataType,e.dims,i),y=Q("result",e.dataType,e.dims,i),v=g.type.value,b=Fe(e.dataType)==="f32"?`var threadMax = ${v}(-3.402823e+38f);`:`var threadMax = ${v}(-65504.0h);`,x=I=>`
      var<workgroup> rowMaxShared : ${v};
      var<workgroup> rowSumShared : ${v};
      var<workgroup> threadShared : array<${v}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${v} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${v}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${I.registerUniform("packedCols","i32").declareVariables(g,y)}
      ${I.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${b}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${v}(${h("threadShared[0]",i)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${v}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${v}(${ut("threadShared[0]",i)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${i}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:x}},dl=(e,t)=>{kp(e.inputs),e.compute(Rp(e.inputs[0],t))},cl=e=>fe({axis:e.axis})});var Pp,Bp,Dp,Mp,zp,ml,fl,hl=Z(()=>{"use strict";xe();qe();$e();Pp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Bp=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),fe({numOutputs:a,axis:t.axis,splitSizes:r})},Dp=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${le("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Mp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (output_number == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${a}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},zp=(e,t)=>{let r=e[0].dims,a=W.size(r),n=e[0].dataType,o=W.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),d=U("input",n,r),i=new Array(t.numOutputs),p=[],h=[],g=0,y=[{type:"uint32",data:a}];for(let b=0;b<t.numOutputs;b++){g+=t.splitSizes[b],i[b]=g;let x=r.slice();x[t.axis]=t.splitSizes[b],h.push(x),u[b]=Q(`output${b}`,n,x),p.push({dims:h[b],dataType:e[0].dataType})}y.push({type:"uint32",data:i}),y.push(...F(r)),h.forEach(b=>y.push(...F(b)));let v=b=>`
  ${b.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",i.length).declareVariables(d,...u)}
  ${Dp(i.length)}
  ${Mp(u)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",o)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${le("uniforms.size_in_split_axis","output_number - 1u",i.length)};
      ${d.indicesSet("indices",o,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:v,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:y})}},ml=(e,t)=>{Pp(e.inputs);let r=e.inputs.length===1?t:Bp(e.inputs,t);e.compute(zp(e.inputs,r),{inputs:[0]})},fl=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return fe({axis:t,numOutputs:a,splitSizes:r})}});var gl,Up,Vp,Wp,yl,bl=Z(()=>{"use strict";We();xe();$e();gl=e=>Array.from(e.getBigInt64Array(),Number),Up=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(gl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Vp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Wp=e=>{let t=e[0].dims,r=gl(e[1]),a=Vp(t,r),n=W.size(a),o=e[0].dataType,u=U("input",o,t.length),d=Q("output",o,a.length),i=p=>`
      const inputShape = ${u.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(u,d)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${u.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...F(e[0].dims),...F(a)]}),getShaderSource:i}},yl=e=>{Up(e.inputs),e.compute(Wp(e.inputs),{inputs:[0]})}});var Np,Hp,wl,vl=Z(()=>{"use strict";We();xe();$e();Np=(e,t,r,a,n)=>{let o=Q("output_data",n,r.length,4),u=U("a_data",t[1].dataType,t[1].dims.length,4),d=U("b_data",t[2].dataType,t[2].dims.length,4),i=U("c_data",t[0].dataType,t[0].dims.length,4),p,h=(g,y,v)=>`select(${y}, ${g}, ${v})`;if(!a)p=o.setByOffset("global_idx",h(u.getByOffset("global_idx"),d.getByOffset("global_idx"),i.getByOffset("global_idx")));else{let g=(y,v,b="")=>{let x=`a_data[index_a${v}][component_a${v}]`,I=`b_data[index_b${v}][component_b${v}]`,S=`bool(c_data[index_c${v}] & ${4278190080>>>(3-v)*8}u)`;return`
            let output_indices${v} = ${o.offsetToIndices(`global_idx * 4u + ${v}u`)};
            let offset_a${v} = ${u.broadcastedIndicesToOffset(`output_indices${v}`,o)};
            let offset_b${v} = ${d.broadcastedIndicesToOffset(`output_indices${v}`,o)};
            let offset_c${v} = ${i.broadcastedIndicesToOffset(`output_indices${v}`,o)};
            let index_a${v} = offset_a${v} / 4u;
            let index_b${v} = offset_b${v} / 4u;
            let index_c${v} = offset_c${v} / 4u;
            let component_a${v} = offset_a${v} % 4u;
            let component_b${v} = offset_b${v} % 4u;
            ${y}[${v}] = ${b}(${h(x,I,S)});
          `};n===9?p=`
            var data = vec4<u32>(0);
            ${g("data",0,"u32")}
            ${g("data",1,"u32")}
            ${g("data",2,"u32")}
            ${g("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`
            ${g("output_data[global_idx]",0)}
            ${g("output_data[global_idx]",1)}
            ${g("output_data[global_idx]",2)}
            ${g("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(i,u,d,o)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${p}
      }`},Hp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,o=!(W.areEqual(t,r)&&W.areEqual(r,a)),u=t,d=W.size(t);if(o){let p=Tt.calcShape(Tt.calcShape(t,r,!1),a,!1);if(!p)throw new Error("Can't perform where op on the given tensors");u=p,d=W.size(u)}let i=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>Np(p,e,u,o,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:"uint32",data:i},...F(a),...F(t),...F(r),...F(u)]})}},wl=e=>{e.compute(Hp(e.inputs))}});var $l,_l=Z(()=>{"use strict";Lo();Wa();qo();Ko();Ts();Ws();Ls();Ga();nu();ou();cu();fu();yu();vu();xu();Cu();Au();qa();ku();Pu();Zu();Qu();Ln();rl();il();ll();pl();hl();bl();wr();Na();vl();$l=new Map([["Abs",[Yo]],["Acos",[Zo]],["Acosh",[Xo]],["Add",[Os]],["ArgMax",[Ho,Va]],["ArgMin",[No,Va]],["Asin",[Qo]],["Asinh",[Jo]],["Atan",[es]],["Atanh",[ts]],["Attention",[Go]],["AveragePool",[Nu,Wu]],["BatchNormalization",[Fo]],["BiasAdd",[jo]],["BiasSplitGelu",[Es]],["Cast",[ns,rs]],["Ceil",[is]],["Clip",[as]],["Concat",[Ns,Hs]],["Conv",[Ya,Ka]],["ConvTranspose",[ru,tu]],["Cos",[os]],["Cosh",[ss]],["CumSum",[au,iu]],["Div",[ks]],["Einsum",[lu,du]],["Elu",[us,qn]],["Equal",[Rs]],["Erf",[ls]],["Exp",[ds]],["Expand",[mu]],["Floor",[cs]],["FusedConv",[Ya,Ka]],["Gather",[gu,hu]],["GatherElements",[wu,bu]],["Gelu",[ps]],["Gemm",[_u,$u]],["GlobalAveragePool",[Gu,Lu]],["GlobalMaxPool",[Yu,Ku]],["Greater",[Ms]],["GreaterOrEqual",[Us]],["HardSigmoid",[vs,ws]],["InstanceNormalization",[Su]],["LayerNormalization",[Iu]],["LeakyRelu",[ms,qn]],["Less",[zs]],["LessOrEqual",[Vs]],["Log",[As]],["MatMul",[Ys]],["MaxPool",[qu,ju]],["Mul",[Ps]],["MultiHeadAttention",[Ou,Tu]],["Neg",[hs]],["Not",[fs]],["Pad",[Ru]],["Pow",[Bs]],["Range",[Xu]],["Reciprocal",[gs]],["ReduceMin",[Do]],["ReduceMean",[Oo]],["ReduceMax",[Bo]],["ReduceSum",[zo]],["ReduceProd",[Mo]],["ReduceL1",[ko]],["ReduceL2",[Ro]],["ReduceLogSum",[Vo]],["ReduceLogSumExp",[Po]],["ReduceSumSquare",[Uo]],["Relu",[ys]],["Resize",[el,tl]],["Sigmoid",[bs]],["Sin",[$s]],["Sinh",[_s]],["Slice",[sl,ul]],["SkipLayerNormalization",[nl,al]],["Split",[ml,fl]],["Sqrt",[xs]],["Softmax",[dl,cl]],["Sub",[Ds]],["Tan",[Ss]],["Tanh",[Cs]],["ThresholdedRelu",[Is,qn]],["Tile",[yl]],["Transpose",[yo,bo]],["Where",[wl]]])});var na,xl=Z(()=>{"use strict";ft();Nt();$e();yr();na=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,o){it(t.programInfo.name);let u=this.backend.device,d=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let i=[];for(let h of r)i.push({binding:i.length,resource:{buffer:h.buffer}});for(let h of a)i.push({binding:i.length,resource:{buffer:h.buffer}});o&&i.push({binding:i.length,resource:o});let p=u.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:i,label:t.programInfo.name});if(this.backend.status===1){let h={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:p,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(h)}d.setPipeline(t.computePipeline),d.setBindGroup(0,p),d.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),ot(t.programInfo.name)}dispose(){}build(t,r){it(t.name);let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let o=ho(r),u=t.getShaderSource(o),d=`${n.join(`
`)}
${o.additionalImplementations}
${u}`,i=a.createShaderModule({code:d,label:t.name});Be("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=a.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:t.name});return ot(t.name),{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=o&&a<=o&&n<=o)return[r,a,n];let u=r*a*n,d=Math.ceil(Math.sqrt(u));if(d>o){if(d=Math.ceil(Math.cbrt(u)),d>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Lp,Gp,aa,Sl=Z(()=>{"use strict";ft();We();Nt();uo();fo();_l();xl();yr();Lp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let o=e[a].dims.length;r.push(`${n};${o}`);break}case"dims":{let o=e[a].dims.join(",");r.push(`${n};${o}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Gp=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Lp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},aa=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.status=0;this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("chromium-experimental-timestamp-query-inside-passes")?a.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=mo(this),this.programManager=new na(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,oo(t.logLevel,!!t.debug),this.device.onuncapturederror=o=>{o.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${o.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder(),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE}))),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;it(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),a=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let o=a[n],u=o.kernelId,d=this.kernels.get(u),i=d.kernelType,p=d.kernelName,h=o.programName,g=o.inputTensorViews,y=o.outputTensorViews,v=r[n*2],b=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=v);let x=Number(v-this.queryTimeBase),I=Number(b-this.queryTimeBase);if(!Number.isSafeInteger(x)||!Number.isSafeInteger(I))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:g.map(S=>({dims:S.dims,dataType:st(S.dataType)})),outputsMetadata:y.map(S=>({dims:S.dims,dataType:st(S.dataType)})),kernelId:u,kernelType:i,kernelName:p,programName:h,startTime:x,endTime:I});else{let S="";g.forEach((T,E)=>{S+=`input[${E}]: [${T.dims}] | ${st(T.dataType)}, `});let _="";y.forEach((T,E)=>{_+=`output[${E}]: [${T.dims}] | ${st(T.dataType)}, `}),console.log(`[profiling] kernel "${u}|${i}|${p}|${h}" ${S}${_}execution time: ${I-x} ns`)}Nr("GPU",`${h}::${v}::${b}`)}t.unmap(),this.pendingQueries.delete(t)}),ot()}run(t,r,a,n,o){it(t.name);let u=[];for(let _=0;_<r.length;++_){let T=this.gpuDataManager.get(r[_].data);if(!T)throw new Error(`no GPU data for input: ${r[_].data}`);u[_]=T}let{outputs:d,dispatchGroup:i,programUniforms:p}=t.getRunData(r),h=a.length===0?d.map((_,T)=>T):a;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let g=[],y=[];for(let _=0;_<d.length;++_){if(!Number.isInteger(h[_])||h[_]<-3||h[_]>=d.length)throw new Error(`Invalid output index: ${h[_]}`);if(h[_]===-3)continue;let T=h[_]===-1,E=h[_]===-2,z=T||E?o(d[_].dataType,d[_].dims):n(h[_],d[_].dataType,d[_].dims),B=this.gpuDataManager.get(z.data);if(!B)throw new Error(`no GPU data for output: ${z.data}`);if(T&&this.temporaryData.push(B),E){let V=this.kernelPersistentData.get(this.currentKernelId);V||(V=[],this.kernelPersistentData.set(this.currentKernelId,V)),V.push(B)}g.push(z),y.push(B)}let v;if(p){let _=0,T=[];p.forEach(V=>{let N=typeof V.data=="number"?[V.data]:V.data;if(N.length===0)return;let X=N.length<=2?N.length*4:16;_=Math.ceil(_/X)*X,T.push(_),_+=N.length>4?Math.ceil(N.length/4)*16:N.length*4});let E=16;_=Math.ceil(_/E)*E;let z=new ArrayBuffer(_);p.forEach((V,N)=>{let X=T[N],R=typeof V.data=="number"?[V.data]:V.data;V.type==="int32"?new Int32Array(z,X,R.length).set(R):V.type==="uint32"?new Uint32Array(z,X,R.length).set(R):new Float32Array(z,X,R.length).set(R)});let B=this.gpuDataManager.create(_,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(B.buffer,0,z,0,_),this.gpuDataManager.release(B.id),v={offset:0,size:_,buffer:B.buffer}}let b=this.programManager.normalizeDispatchGroupSize(i),x=b[1]===1&&b[2]===1,I=Gp(t,r,x),S=this.programManager.getArtifact(I);if(S||(S=this.programManager.build(t,b),this.programManager.setArtifact(I,S),Be("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Be("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.queryType!=="none"||this.status===1){let _={kernelId:this.currentKernelId,programName:S.programInfo.name,inputTensorViews:r,outputTensorViews:g};this.pendingKernels.push(_),this.capturedPendingKernels.get(this.currentSessionId).push(_)}return this.programManager.run(S,u,y,b,v),ot(t.name),g}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let o=$l.get(t);if(!o)throw new Error(`kernel not implemented: ${t}`);let u={kernelType:t,kernelName:n,kernelEntry:o[0],attributes:[o[1],a]};this.kernels.set(r,u)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let o=n.kernelType,u=n.kernelName,d=n.kernelEntry,i=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Be("info",()=>`[WebGPU] Start to run kernel "[${o}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,i[1]),0}catch(h){return a.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${u}" failed. ${h}`)),1}finally{p&&a.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${o}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let o=this.sessionExternalDataMapping.get(t);o||(o=new Map,this.sessionExternalDataMapping.set(t,o));let u=o.get(r),d=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return o.set(r,[d,a]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await Ra(this,t,r);return so(n.buffer,a)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"))}captureBegin(t){Be("info",()=>`captureBegin ${t}`),this.currentSessionId=t;let r=this.capturedCommandList.get(t),a=this.capturedPendingKernels.get(t);r||(r=[],this.capturedCommandList.set(t,r),a=[],this.capturedPendingKernels.set(t,a)),this.status=1}captureEnd(t){Be("info",()=>`captureEnd ${t}`),this.flush(),this.currentSessionId=null,this.status=0}replay(t){Be("info",()=>`replay ${t}`),this.currentSessionId=t,this.status=2;let r=this.capturedCommandList.get(t),a=this.capturedPendingKernels.get(t),n=r.length;this.pendingKernels=[];for(let o=0;o<n;o++){let u=this.getComputePassEncoder(),d=r[o];this.writeTimestamp(this.pendingDispatchNumber*2),u.setPipeline(d.computePipeline),u.setBindGroup(0,d.bindGroup),u.dispatchWorkgroups(...d.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(a[o]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.status=0}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(){this.setQueryType()}}});var Cl={};Yt(Cl,{init:()=>Fp});var Yr,ti,Fp,Il=Z(()=>{"use strict";We();Sl();Nt();xe();Yr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(W.size(t)!==W.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},ti=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,o=a>>>2;this.opKernelContext=n[o++];let u=n[o++];this.outputCount=n[o++],this.customDataOffset=n[o++],this.customDataSize=n[o++];let d=[];for(let i=0;i<u;i++){let p=n[o++],h=n[o++],g=n[o++],y=[];for(let v=0;v<g;v++)y.push(n[o++]);d.push(new Yr(t,p,h,y))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],o=(d,i,p)=>new Yr(this.module,i,this.output(d,p),p),u=(d,i)=>{let p=Lr(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*W.size(i);return new Yr(this.module,d,this.backend.gpuDataManager.create(h).id,i)};return this.backend.run(t,a,n,o,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),o=n>>2;this.module.HEAPU32[o++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[o++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Fp=async(e,t,r)=>{let a=e.jsepInit;if(!a)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new aa;await n.initialize(t,r),a(n,o=>n.alloc(o),o=>n.free(o),(o,u,d,i=!1)=>{if(i)Be("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${o}, dst=${u}, size=${d}`),n.memcpy(o,u);else{Be("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${o}, gpuDataId=${u}, size=${d}`);let p=e.HEAPU8.subarray(o>>>0,(o>>>0)+d);n.upload(u,p)}},async(o,u,d)=>{Be("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${u}, size=${d}`),await n.download(o,()=>e.HEAPU8.subarray(u>>>0,(u>>>0)+d))},(o,u,d)=>n.createKernel(o,u,d,e.UTF8ToString(e._JsepGetNodeName(u))),o=>n.releaseKernel(o),(o,u,d,i)=>{Be("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${o}, contextDataOffset=${u}`);let p=new ti(e,n,u);return n.computeKernel(o,p,i)},o=>n.captureBegin(o),o=>n.captureEnd(o),o=>n.replay(o))}});var El,qp,Tl,Ol,vr,jp,ri,kl,Rl,Al,Pl,Bl,Dl,Ml=Z(()=>{"use strict";to();no();We();gr();Dn();Oa();qp=(e,t)=>{Ue()._OrtInit(e,t)!==0&&Pe("Can't initialize onnxruntime.")},Tl=async e=>{qp(e.wasm.numThreads,Gr(e.logLevel))},Ol=async(e,t)=>{if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let a=(Il(),Wt(Cl)).init;await a(Ue(),e,r)}El=t},vr=new Map,jp=e=>{let t=Ue(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Pe("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},ri=e=>{let t=Ue(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},kl=async(e,t)=>{let r,a,n=Ue();Array.isArray(e)?[r,a]=e:e.buffer===n.HEAPU8.buffer?[r,a]=[e.byteOffset,e.byteLength]:[r,a]=ri(e);let o=0,u=0,d=0,i=[],p=[],h=[];try{if([u,i]=ro(t),t?.externalData&&n.mountExternalData){let _=[];for(let T of t.externalData){let E=typeof T=="string"?T:T.path;_.push(Fr(typeof T=="string"?T:T.data).then(z=>{n.mountExternalData(E,z)}))}await Promise.all(_)}o=n._OrtCreateSession(r,a,u),o===0&&Pe("Can't create a session.");let[g,y]=jp(o),v=!1;if(El==="webgpu"){let _=t?.executionProviders;for(let T of _)if((typeof T=="string"?T:T.name)==="webgpu"){let z=T;v=z.graphCaptureEnabled===void 0?!1:z.graphCaptureEnabled}}let b=[],x=[],I=[];for(let _=0;_<g;_++){let T=n._OrtGetInputName(o,_);T===0&&Pe("Can't get an input name."),p.push(T),b.push(n.UTF8ToString(T))}for(let _=0;_<y;_++){let T=n._OrtGetOutputName(o,_);T===0&&Pe("Can't get an output name."),h.push(T);let E=n.UTF8ToString(T);x.push(E);{if(v){I.push("gpu-buffer");continue}let z=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[E]??"cpu";if(z!=="cpu"&&z!=="cpu-pinned"&&z!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${z}.`);I.push(z)}}let S=null;return I.some(_=>_==="gpu-buffer")&&(d=n._OrtCreateBinding(o),d===0&&Pe("Can't create IO binding."),S={handle:d,outputPreferredLocations:I,outputPreferredLocationsEncoded:I.map(_=>Ta(_))}),vr.set(o,[o,p,h,S,v,!1]),[o,b,x]}catch(g){throw p.forEach(y=>n._OrtFree(y)),h.forEach(y=>n._OrtFree(y)),d!==0&&n._OrtReleaseBinding(d),o!==0&&n._OrtReleaseSession(o),g}finally{n._free(r),u!==0&&n._OrtReleaseSessionOptions(u),i.forEach(g=>n._free(g)),n.unmountExternalData?.()}},Rl=e=>{let t=Ue(),r=vr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,o,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepOnReleaseSession?.(e),n.forEach(d=>t._OrtFree(d)),o.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(a),vr.delete(e)},Al=(e,t,r,a,n,o=!1)=>{if(!e){t.push(0);return}let u=Ue(),d=e[0],i=e[1],p=e[3],h,g;if(d==="string"&&p==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o&&p!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when graphCaptureEnabled is true.`);if(p==="gpu-buffer"){let b=e[2].gpuBuffer,x=Lr(Ea(d));g=i.reduce((I,S)=>I*S,1)*x,h=u.jsepRegisterBuffer(a,n,b,g)}else{let b=e[2];if(Array.isArray(b)){g=4*b.length,h=u._malloc(g),r.push(h);let x=h/4;for(let I=0;I<b.length;I++){if(typeof b[I]!="string")throw new TypeError(`tensor data at index ${I} is not a string`);u.HEAPU32[x++]=Ve(b[I],r)}}else g=b.byteLength,h=u._malloc(g),r.push(h),u.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,g),h)}let y=u.stackSave(),v=u.stackAlloc(4*i.length);try{let b=v/4;i.forEach(I=>u.HEAP32[b++]=I);let x=u._OrtCreateTensor(Ea(d),h,g,v,i.length,Ta(p));x===0&&Pe(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(x)}finally{u.stackRestore(y)}},Pl=async(e,t,r,a,n,o)=>{let u=Ue(),d=vr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let i=d[0],p=d[1],h=d[2],g=d[3],y=d[4],v=d[5],b=t.length,x=a.length,I=0,S=[],_=[],T=[],E=[],z=u.stackSave(),B=u.stackAlloc(b*4),V=u.stackAlloc(b*4),N=u.stackAlloc(x*4),X=u.stackAlloc(x*4);try{[I,S]=eo(o);for(let ie=0;ie<b;ie++)Al(r[ie],_,E,e,t[ie],y);for(let ie=0;ie<x;ie++)Al(n[ie],T,E,e,b+a[ie],y);let R=B/4,q=V/4,J=N/4,re=X/4;for(let ie=0;ie<b;ie++)u.HEAPU32[R++]=_[ie],u.HEAPU32[q++]=p[t[ie]];for(let ie=0;ie<x;ie++)u.HEAPU32[J++]=T[ie],u.HEAPU32[re++]=h[a[ie]];if(g&&(!y||y&&!v)){let{handle:ie,outputPreferredLocations:Oe,outputPreferredLocationsEncoded:Me}=g;if(p.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model's input count (${p.length}).`);for(let de=0;de<b;de++){let ge=t[de];await u._OrtBindInput(ie,p[ge],_[de])!==0&&Pe(`Can't bind input[${de}] for session=${e}.`)}for(let de=0;de<x;de++){let ge=a[de];n[de]?.[3]?u._OrtBindOutput(ie,h[ge],T[de],0)!==0&&Pe(`Can't bind pre-allocated output[${de}] for session=${e}.`):u._OrtBindOutput(ie,h[ge],0,Me[ge])!==0&&Pe(`Can't bind output[${de}] to ${Oe[de]} for session=${e}.`)}vr.set(e,[i,p,h,g,y,!0])}u.jsepOnRunStart?.();let Ee;g?Ee=await u._OrtRunWithBinding(i,g.handle,x,N,I):Ee=await u._OrtRun(i,V,B,b,X,x,N,I),Ee!==0&&Pe("failed to call OrtRun().");let Re=[];for(let ie=0;ie<x;ie++){let Oe=u.HEAPU32[N/4+ie];if(Oe===T[ie]){Re.push(n[ie]);continue}let Me=u.stackSave(),de=u.stackAlloc(4*4),ge=!1,Ae,ke=0;try{u._OrtGetTensorData(Oe,de,de+4,de+8,de+12)!==0&&Pe(`Can't access output tensor data on index ${ie}.`);let G=de/4,ee=u.HEAPU32[G++];ke=u.HEAPU32[G++];let be=u.HEAPU32[G++],Ct=u.HEAPU32[G++],Ge=[];for(let je=0;je<Ct;je++)Ge.push(u.HEAPU32[be/4+je]);u._OrtFree(be);let lt=Ge.reduce((je,Ne)=>je*Ne,1);Ae=st(ee);let yt=g?.outputPreferredLocations[a[ie]];if(Ae==="string"){if(yt==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let je=[],Ne=ke/4;for(let It=0;It<lt;It++){let Dt=u.HEAPU32[Ne++],At=It===lt-1?void 0:u.HEAPU32[Ne]-Dt;je.push(u.UTF8ToString(Dt,At))}Re.push([Ae,Ge,je,"cpu"])}else if(yt==="gpu-buffer"&&lt>0){let je=u.jsepGetBuffer(ke),Ne=Lr(ee);if(Ne===void 0||!zn(Ae))throw new Error(`Unsupported data type: ${Ae}`);ge=!0,Re.push([Ae,Ge,{gpuBuffer:je,download:u.jsepCreateDownloader(je,lt*Ne,Ae),dispose:()=>{u._OrtReleaseTensor(Oe)}},"gpu-buffer"])}else{let je=Mn(Ae),Ne=new je(lt);new Uint8Array(Ne.buffer,Ne.byteOffset,Ne.byteLength).set(u.HEAPU8.subarray(ke,ke+Ne.byteLength)),Re.push([Ae,Ge,Ne,"cpu"])}}finally{u.stackRestore(Me),Ae==="string"&&ke&&u._free(ke),ge||u._OrtReleaseTensor(Oe)}}return g&&!y&&u._OrtClearBoundOutputs(g.handle),Re}finally{u.stackRestore(z),_.forEach(R=>u._OrtReleaseTensor(R)),T.forEach(R=>u._OrtReleaseTensor(R)),E.forEach(R=>u._free(R)),I!==0&&u._OrtReleaseRunOptions(I),S.forEach(R=>u._free(R))}},Bl=e=>{let t=Ue(),r=vr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Pe("Can't get an profile file name."),t._OrtFree(n)},Dl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var zl=hr((zw,Yp)=>{Yp.exports='/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var Ln=Object.defineProperty;var Yu=Object.getOwnPropertyDescriptor;var Zu=Object.getOwnPropertyNames;var Qu=Object.prototype.hasOwnProperty;var X=(e,t)=>()=>(e&&(t=e(e=0)),t);var Er=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),pn=(e,t)=>{for(var r in t)Ln(e,r,{get:t[r],enumerable:!0})},Xu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Zu(t))!Qu.call(e,n)&&n!==r&&Ln(e,n,{get:()=>t[n],enumerable:!(o=Yu(t,n))||o.enumerable});return e};var ar=e=>Xu(Ln({},"__esModule",{value:!0}),e);var Fn={};pn(Fn,{createReadStream:()=>Mo,readFile:()=>Ju,readFileSync:()=>ed});var Ju,ed,Mo,jn=X(()=>{Ju=void 0,ed=void 0,Mo=void 0});var qn={};pn(qn,{join:()=>td});var td,Kn=X(()=>{td=void 0});var Vo=Er((Uo,Yn)=>{"use strict";var zo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((i,c)=>{o=i,n=c}),r.mountExternalData=(i,c)=>{(r.gb||(r.gb=new Map)).set(i,c)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(i,c,m,w,A,D,H,K)=>{r.Fb=i,r.vb=c,r.xb=m,r.ob=w,r.wb=A,r.Ra=D,r.yb=H,r.zb=K,c=(Y,q,te)=>(...ce)=>{let ye=at,O=q?.();ce=Y(...ce);let ne=q?.();return O!==ne&&(Y=ne,te(O),q=te=null),at!=ye?tn():ce},m=Y=>async(...q)=>{try{if(r.fb)throw Error("Session already started");let te=r.fb={Ab:q[0],errors:[]},ce=await Y(...q);if(r.fb!==te)throw Error("Session mismatch");i.flush();let ye=te.errors;if(0<ye.length){let O=await Promise.all(ye);if(O=O.filter(ne=>ne),0<O.length)throw Error(O.join(`\n`))}return ce}finally{r.fb=null}},r._OrtRun=m(c(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=m(c(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=c(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,q,te,ce)=>i.registerBuffer(Y,q,te,ce),r.jsepUnregisterBuffers=Y=>{i.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>i.getBuffer(Y),r.jsepCreateDownloader=(Y,q,te)=>i.createDownloader(Y,q,te),r.jsepOnRunStart=()=>i.onRunStart()};var u=Object.assign({},r),d="./this.program",l=(i,c)=>{throw c},a=typeof window=="object",f=typeof importScripts=="function",g=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",v,$,b;if(g){var C=(jn(),ar(Fn)),I=(Kn(),ar(qn));y=f?I.dirname(y)+"/":__dirname+"/",v=(i,c)=>(i=ee(i)?new URL(i):I.normalize(i),C.readFileSync(i,c?void 0:"utf8")),b=i=>(i=v(i,!0),i.buffer||(i=new Uint8Array(i)),i),$=(i,c,m,w=!0)=>{i=ee(i)?new URL(i):I.normalize(i),C.readFile(i,w?void 0:"utf8",(A,D)=>{A?m(A):c(w?D.buffer:D)})},!r.thisProgram&&1<process.argv.length&&(d=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),l=(i,c)=>{throw process.exitCode=i,c},r.inspect=()=>"[Emscripten Module object]"}else(a||f)&&(f?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",v=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},f&&(b=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),$=(i,c,m)=>{var w=new XMLHttpRequest;w.open("GET",i,!0),w.responseType="arraybuffer",w.onload=()=>{w.status==200||w.status==0&&w.response?c(w.response):m()},w.onerror=m,w.send(null)});var _=console.log.bind(console),S=console.error.bind(console);Object.assign(r,u),u=null,typeof WebAssembly!="object"&&He("no native wasm support detected");var E,T=!1,z,B,V,W,Z,R,j,J,re,Ae,Pe;function ae(){var i=E.buffer;r.HEAP8=B=new Int8Array(i),r.HEAP16=W=new Int16Array(i),r.HEAPU8=V=new Uint8Array(i),r.HEAPU16=Z=new Uint16Array(i),r.HEAP32=R=new Int32Array(i),r.HEAPU32=j=new Uint32Array(i),r.HEAPF32=J=new Float32Array(i),r.HEAPF64=Pe=new Float64Array(i),r.HEAP64=re=new BigInt64Array(i),r.HEAPU64=Ae=new BigUint64Array(i)}var Ee=[],De=[],le=[],ge=0,Ie=null,Oe=null;function He(i){throw i="Aborted("+i+")",S(i),T=!0,z=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),n(i),i}var L=i=>i.startsWith("data:application/octet-stream;base64,"),ee=i=>i.startsWith("file://"),be;if(be="ort-wasm-simd.wasm",!L(be)){var bt=be;be=r.locateFile?r.locateFile(bt,y):y+bt}function Ge(i){if(b)return b(i);throw"both async and sync fetching of the wasm failed"}function ot(i){if(a||f){if(typeof fetch=="function"&&!ee(i))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>Ge(i));if($)return new Promise((c,m)=>{$(i,w=>c(new Uint8Array(w)),m)})}return Promise.resolve().then(()=>Ge(i))}function lt(i,c,m){return ot(i).then(w=>WebAssembly.instantiate(w,c)).then(w=>w).then(m,w=>{S(`failed to asynchronously prepare wasm: ${w}`),He(w)})}function je(i,c){var m=be;return typeof WebAssembly.instantiateStreaming!="function"||L(m)||ee(m)||g||typeof fetch!="function"?lt(m,i,c):fetch(m,{credentials:"same-origin"}).then(w=>WebAssembly.instantiateStreaming(w,i).then(c,function(A){return S(`wasm streaming compile failed: ${A}`),S("falling back to ArrayBuffer instantiation"),lt(m,i,c)}))}var Ve={945136:(i,c,m,w)=>{if(typeof r>"u"||!r.gb)return 1;if(i=qe(i>>>0),i.startsWith("./")&&(i=i.substring(2)),i=r.gb.get(i),!i)return 2;if(c>>>=0,m>>>=0,c+m>i.byteLength)return 3;try{return V.set(i.subarray(c,c+m),w>>>0>>>0),0}catch{return 4}},945637:i=>r.vb(i),945670:i=>r.xb(i),945702:(i,c,m)=>{r.ob(i,c,m,!0)},945741:(i,c,m)=>{r.ob(i,c,m)},945774:i=>{r.Ra("Abs",i,void 0)},945825:i=>{r.Ra("Neg",i,void 0)},945876:i=>{r.Ra("Floor",i,void 0)},945929:i=>{r.Ra("Ceil",i,void 0)},945981:i=>{r.Ra("Reciprocal",i,void 0)},946039:i=>{r.Ra("Sqrt",i,void 0)},946091:i=>{r.Ra("Exp",i,void 0)},946142:i=>{r.Ra("Erf",i,void 0)},946193:i=>{r.Ra("Sigmoid",i,void 0)},946248:(i,c,m)=>{r.Ra("HardSigmoid",i,{alpha:c,beta:m})},946327:i=>{r.Ra("Log",i,void 0)},946378:i=>{r.Ra("Sin",i,void 0)},946429:i=>{r.Ra("Cos",i,void 0)},946480:i=>{r.Ra("Tan",i,void 0)},946531:i=>{r.Ra("Asin",i,void 0)},946583:i=>{r.Ra("Acos",i,void 0)},946635:i=>{r.Ra("Atan",i,void 0)},946687:i=>{r.Ra("Sinh",i,void 0)},946739:i=>{r.Ra("Cosh",i,void 0)},946791:i=>{r.Ra("Asinh",i,void 0)},946844:i=>{r.Ra("Acosh",i,void 0)},946897:i=>{r.Ra("Atanh",i,void 0)},946950:i=>{r.Ra("Tanh",i,void 0)},947002:i=>{r.Ra("Not",i,void 0)},947053:(i,c,m)=>{r.Ra("Clip",i,{min:c,max:m})},947122:i=>{r.Ra("Clip",i,void 0)},947174:(i,c)=>{r.Ra("Elu",i,{alpha:c})},947232:i=>{r.Ra("Relu",i,void 0)},947284:(i,c)=>{r.Ra("LeakyRelu",i,{alpha:c})},947348:(i,c)=>{r.Ra("ThresholdedRelu",i,{alpha:c})},947418:(i,c)=>{r.Ra("Cast",i,{to:c})},947476:i=>{r.Ra("Add",i,void 0)},947527:i=>{r.Ra("Sub",i,void 0)},947578:i=>{r.Ra("Mul",i,void 0)},947629:i=>{r.Ra("Div",i,void 0)},947680:i=>{r.Ra("Pow",i,void 0)},947731:i=>{r.Ra("Equal",i,void 0)},947784:i=>{r.Ra("Greater",i,void 0)},947839:i=>{r.Ra("GreaterOrEqual",i,void 0)},947901:i=>{r.Ra("Less",i,void 0)},947953:i=>{r.Ra("LessOrEqual",i,void 0)},948012:(i,c,m,w,A)=>{r.Ra("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},948171:(i,c,m,w,A)=>{r.Ra("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},948329:(i,c,m,w,A)=>{r.Ra("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},948487:(i,c,m,w,A)=>{r.Ra("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},948646:(i,c,m,w,A)=>{r.Ra("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},948804:(i,c,m,w,A)=>{r.Ra("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},948961:(i,c,m,w,A)=>{r.Ra("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},949118:(i,c,m,w,A)=>{r.Ra("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},949279:(i,c,m,w,A)=>{r.Ra("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},949443:(i,c,m,w,A)=>{r.Ra("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!m,axes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},949607:i=>{r.Ra("Where",i,void 0)},949660:(i,c,m)=>{r.Ra("Transpose",i,{perm:c?Array.from(R.subarray(c>>>0,m>>>0)):[]})},949768:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne)=>{r.Ra("ConvTranspose",i,{format:Y?"NHWC":"NCHW",autoPad:c,dilations:[m],group:w,kernel_shape:[A],pads:[D,H],strides:[K],wIsConst:()=>!!B[q>>>0],outputPadding:te?Array.from(R.subarray(te>>>0,ce>>>0)):[],outputShape:ye?Array.from(R.subarray(ye>>>0,O>>>0)):[],activation:qe(ne)})},950170:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O)=>{r.Ra("ConvTranspose",i,{format:K?"NHWC":"NCHW",autoPad:c,dilations:Array.from(R.subarray(m>>>0,(m>>>0)+2>>>0)),group:w,kernelShape:Array.from(R.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(R.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(R.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:q?Array.from(R.subarray(q>>>0,te>>>0)):[],outputShape:ce?Array.from(R.subarray(ce>>>0,ye>>>0)):[],activation:qe(O)})},950735:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne)=>{r.Ra("ConvTranspose",i,{format:Y?"NHWC":"NCHW",autoPad:c,dilations:[m],group:w,kernel_shape:[A],pads:[D,H],strides:[K],wIsConst:()=>!!B[q>>>0],outputPadding:te?Array.from(R.subarray(te>>>0,ce>>>0)):[],outputShape:ye?Array.from(R.subarray(ye>>>0,O>>>0)):[],activation:qe(ne)})},951137:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O)=>{r.Ra("ConvTranspose",i,{format:K?"NHWC":"NCHW",autoPad:c,dilations:Array.from(R.subarray(m>>>0,(m>>>0)+2>>>0)),group:w,kernelShape:Array.from(R.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(R.subarray(D>>>0,(D>>>0)+4>>>0)),strides:Array.from(R.subarray(H>>>0,(H>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:q?Array.from(R.subarray(q>>>0,te>>>0)):[],outputShape:ce?Array.from(R.subarray(ce>>>0,ye>>>0)):[],activation:qe(O)})},951702:(i,c)=>{r.Ra("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},951793:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne,we)=>{r.Ra("AveragePool",i,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:m,count_include_pad:w,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[q,te,ce,ye],strides:[O,ne]})},952077:(i,c)=>{r.Ra("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},952168:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne,we)=>{r.Ra("AveragePool",i,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:m,count_include_pad:w,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[q,te,ce,ye],strides:[O,ne]})},952452:(i,c)=>{r.Ra("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},952539:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne,we)=>{r.Ra("MaxPool",i,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:m,count_include_pad:w,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[q,te,ce,ye],strides:[O,ne]})},952819:(i,c)=>{r.Ra("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},952906:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne,we)=>{r.Ra("MaxPool",i,{format:we?"NHWC":"NCHW",auto_pad:c,ceil_mode:m,count_include_pad:w,storage_order:A,dilations:[D,H],kernel_shape:[K,Y],pads:[q,te,ce,ye],strides:[O,ne]})},953186:(i,c,m,w,A)=>{r.Ra("Gemm",i,{alpha:c,beta:m,transA:w,transB:A})},953290:i=>{r.Ra("MatMul",i,void 0)},953344:(i,c,m,w)=>{r.Ra("ArgMax",i,{keepDims:!!c,selectLastIndex:!!m,axis:w})},953452:(i,c,m,w)=>{r.Ra("ArgMin",i,{keepDims:!!c,selectLastIndex:!!m,axis:w})},953560:(i,c)=>{r.Ra("Softmax",i,{axis:c})},953623:(i,c)=>{r.Ra("Concat",i,{axis:c})},953683:(i,c,m,w,A)=>{r.Ra("Split",i,{axis:c,numOutputs:m,splitSizes:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},953823:i=>{r.Ra("Expand",i,void 0)},953877:(i,c)=>{r.Ra("Gather",i,{axis:Number(c)})},953948:(i,c)=>{r.Ra("GatherElements",i,{axis:Number(c)})},954027:(i,c,m,w,A,D,H,K,Y,q,te)=>{r.Ra("Resize",i,{antialias:c,axes:m?Array.from(R.subarray(m>>>0,w>>>0)):[],coordinateTransformMode:qe(A),cubicCoeffA:D,excludeOutside:H,extrapolationValue:K,keepAspectRatioPolicy:qe(Y),mode:qe(q),nearestMode:qe(te)})},954373:(i,c,m,w,A,D,H)=>{r.Ra("Slice",i,{starts:c?Array.from(R.subarray(c>>>0,m>>>0)):[],ends:w?Array.from(R.subarray(w>>>0,A>>>0)):[],axes:D?Array.from(R.subarray(D>>>0,H>>>0)):[]})},954589:i=>{r.Ra("Tile",i,void 0)},954641:(i,c,m)=>{r.Ra("LayerNormalization",i,{axis:Number(c),epsilon:Number(m)})},954748:(i,c,m)=>{r.Ra("InstanceNormalization",i,{epsilon:c,format:m?"NHWC":"NCHW"})},954862:(i,c,m)=>{r.Ra("InstanceNormalization",i,{epsilon:c,format:m?"NHWC":"NCHW"})},954976:i=>{r.Ra("Range",i,void 0)},955029:(i,c)=>{r.Ra("Einsum",i,{equation:qe(c)})},955110:(i,c,m,w,A)=>{r.Ra("Pad",i,{mode:c,value:m,pads:w?Array.from(R.subarray(w>>>0,A>>>0)):[]})},955237:(i,c,m,w,A,D)=>{r.Ra("BatchNormalization",i,{epsilon:c,momentum:m,spatial:!!A,trainingMode:!!w,format:D?"NHWC":"NCHW"})},955406:(i,c,m,w,A,D)=>{r.Ra("BatchNormalization",i,{epsilon:c,momentum:m,spatial:!!A,trainingMode:!!w,format:D?"NHWC":"NCHW"})},955575:(i,c,m)=>{r.Ra("CumSum",i,{exclusive:Number(c),reverse:Number(m)})},955672:(i,c,m,w,A,D,H,K,Y)=>{r.Ra("Attention",i,{numHeads:c,isUnidirectional:m,maskFilterValue:w,scale:A,doRotary:D,qkvHiddenSizes:H?Array.from(R.subarray(Number(K)>>>0,Number(K)+H>>>0)):[],pastPresentShareBuffer:!!Y})},955944:i=>{r.Ra("Gelu",i,void 0)},955996:(i,c,m,w,A,D)=>{r.Ra("MultiHeadAttention",i,{numHeads:c,isUnidirectional:m,maskFilterValue:w,scale:A,doRotary:D})},956155:i=>{r.Ra("BiasAdd",i,void 0)},956210:i=>{r.Ra("BiasSplitGelu",i,void 0)},956271:(i,c)=>{r.Ra("SkipLayerNormalization",i,{epsilon:c})},956352:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye)=>{r.Ra("Conv",i,{format:Y?"NHWC":"NCHW",auto_pad:c,dilations:[m],group:w,kernel_shape:[A],pads:D?Array.from(R.subarray(D>>>0,H>>>0)):[],strides:[K],w_is_const:()=>!!B[q>>>0],activation:qe(te),activation_params:ce?Array.from(J.subarray(ce>>>0,ye>>>0)):[]})},956722:(i,c,m,w,A,D,H,K,Y,q,te,ce,ye,O,ne,we)=>{r.Ra("Conv",i,{format:ce?"NHWC":"NCHW",auto_pad:c,dilations:[m,w],group:A,kernel_shape:[D,H],pads:K?Array.from(R.subarray(K>>>0,Y>>>0)):[],strides:[q,te],w_is_const:()=>!!B[ye>>>0],activation:qe(O),activation_params:ne?Array.from(J.subarray(ne>>>0,we>>>0)):[]})},957113:i=>{r.yb(i)},957147:(i,c)=>r.zb(i,c,r.fb.Ab,r.fb.errors)};function wt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Tt(i){this.cb=i-24,this.rb=function(c){j[this.cb+4>>>2>>>0]=c},this.qb=function(c){j[this.cb+8>>>2>>>0]=c},this.kb=function(c,m){this.jb(),this.rb(c),this.qb(m)},this.jb=function(){j[this.cb+16>>>2>>>0]=0}}var vt=0,zr=0,Ur=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,pr=(i,c,m)=>{c>>>=0;var w=c+m;for(m=c;i[m]&&!(m>=w);)++m;if(16<m-c&&i.buffer&&Ur)return Ur.decode(i.subarray(c,m));for(w="";c<m;){var A=i[c++];if(A&128){var D=i[c++]&63;if((A&224)==192)w+=String.fromCharCode((A&31)<<6|D);else{var H=i[c++]&63;A=(A&240)==224?(A&15)<<12|D<<6|H:(A&7)<<18|D<<12|H<<6|i[c++]&63,65536>A?w+=String.fromCharCode(A):(A-=65536,w+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else w+=String.fromCharCode(A)}return w},qe=(i,c)=>(i>>>=0)?pr(V,i,c):"",ct=i=>{for(var c=0,m=0;m<i.length;++m){var w=i.charCodeAt(m);127>=w?c++:2047>=w?c+=2:55296<=w&&57343>=w?(c+=4,++m):c+=3}return c},Ot=(i,c,m,w)=>{if(m>>>=0,!(0<w))return 0;var A=m;w=m+w-1;for(var D=0;D<i.length;++D){var H=i.charCodeAt(D);if(55296<=H&&57343>=H){var K=i.charCodeAt(++D);H=65536+((H&1023)<<10)|K&1023}if(127>=H){if(m>=w)break;c[m++>>>0]=H}else{if(2047>=H){if(m+1>=w)break;c[m++>>>0]=192|H>>6}else{if(65535>=H){if(m+2>=w)break;c[m++>>>0]=224|H>>12}else{if(m+3>=w)break;c[m++>>>0]=240|H>>18,c[m++>>>0]=128|H>>12&63}c[m++>>>0]=128|H>>6&63}c[m++>>>0]=128|H&63}}return c[m>>>0]=0,m-A},Ft=i=>{if(i===null)return"null";var c=typeof i;return c==="object"||c==="array"||c==="function"?i.toString():""+i},jt,tt=i=>{for(var c="";V[i>>>0];)c+=jt[V[i++>>>0]];return c},pt={},qt={},Vr={},Me;function Vn(i,c,m={}){var w=c.name;if(!i)throw new Me(`type "${w}" must have a positive integer typeid pointer`);if(qt.hasOwnProperty(i)){if(m.tb)return;throw new Me(`Cannot register type \'${w}\' twice`)}qt[i]=c,delete Vr[i],pt.hasOwnProperty(i)&&(c=pt[i],delete pt[i],c.forEach(A=>A()))}function Ce(i,c,m={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");Vn(i,c,m)}var mr=(i,c,m)=>{switch(c){case 1:return m?w=>B[w>>>0>>>0]:w=>V[w>>>0>>>0];case 2:return m?w=>W[w>>>1>>>0]:w=>Z[w>>>1>>>0];case 4:return m?w=>R[w>>>2>>>0]:w=>j[w>>>2>>>0];case 8:return m?w=>re[w>>>3]:w=>Ae[w>>>3];default:throw new TypeError(`invalid integer width (${c}): ${i}`)}};function Kt(){this.$a=[void 0],this.nb=[]}var Ye=new Kt;function fr(i){i>>>=0,i>=Ye.cb&&--Ye.get(i).pb===0&&Ye.jb(i)}var Ze=i=>{if(!i)throw new Me("Cannot use deleted val. handle = "+i);return Ye.get(i).value},st=i=>{switch(i){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Ye.kb({pb:1,value:i})}};function ue(i){return this.fromWireType(R[i>>>2>>>0])}var Yt=(i,c)=>{switch(c){case 4:return function(m){return this.fromWireType(J[m>>>2>>>0])};case 8:return function(m){return this.fromWireType(Pe[m>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${i}`)}};function Nr(i){return this.fromWireType(j[i>>>2>>>0])}var Wr=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Hr=(i,c)=>{for(var m=i>>1,w=m+c/2;!(m>=w)&&Z[m>>>0];)++m;if(m<<=1,32<m-i&&Wr)return Wr.decode(V.subarray(i>>>0,m>>>0));for(m="",w=0;!(w>=c/2);++w){var A=W[i+2*w>>>1>>>0];if(A==0)break;m+=String.fromCharCode(A)}return m},Nn=(i,c,m)=>{if(m??=2147483647,2>m)return 0;m-=2;var w=c;m=m<2*i.length?m/2:i.length;for(var A=0;A<m;++A)W[c>>>1>>>0]=i.charCodeAt(A),c+=2;return W[c>>>1>>>0]=0,c-w},Gr=i=>2*i.length,Lr=(i,c)=>{for(var m=0,w="";!(m>=c/4);){var A=R[i+4*m>>>2>>>0];if(A==0)break;++m,65536<=A?(A-=65536,w+=String.fromCharCode(55296|A>>10,56320|A&1023)):w+=String.fromCharCode(A)}return w},Fr=(i,c,m)=>{if(c>>>=0,m??=2147483647,4>m)return 0;var w=c;m=w+m-4;for(var A=0;A<i.length;++A){var D=i.charCodeAt(A);if(55296<=D&&57343>=D){var H=i.charCodeAt(++A);D=65536+((D&1023)<<10)|H&1023}if(R[c>>>2>>>0]=D,c+=4,c+4>m)break}return R[c>>>2>>>0]=0,c-w},jr=i=>{for(var c=0,m=0;m<i.length;++m){var w=i.charCodeAt(m);55296<=w&&57343>=w&&++m,c+=4}return c},Dt=(i,c)=>{var m=qt[i];if(m===void 0)throw i=Vt(i),m=tt(i),it(i),new Me(c+" has unknown type "+m);return m},hr=(i,c,m)=>{var w=[];return i=i.toWireType(w,m),w.length&&(j[c>>>2>>>0]=st(w)),i},Mt=[],qr={},Zt=i=>{var c=qr[i];return c===void 0?tt(i):c},gr=()=>typeof globalThis=="object"?globalThis:Function("return this")(),Kr=i=>{var c=Mt.length;return Mt.push(i),c},Yr=(i,c)=>{for(var m=Array(i),w=0;w<i;++w)m[w]=Dt(j[c+4*w>>>2>>>0],"parameter "+w);return m},yr=(i,c)=>Object.defineProperty(c,"name",{value:i});function Zr(i){var c=Function;if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var m=yr(c.name||"unknownFunctionName",function(){});return m.prototype=c.prototype,m=new m,i=c.apply(m,i),i instanceof Object?i:m}var Et=i=>i%4===0&&(i%100!==0||i%400===0),br=[0,31,60,91,121,152,182,213,244,274,305,335],wr=[0,31,59,90,120,151,181,212,243,273,304,334],vr=i=>{var c=ct(i)+1,m=Qe(c);return m&&Ot(i,V,m,c),m},Qt=[],Xt=(i,c)=>{Qt.length=0;for(var m;m=V[i++>>>0];){var w=m!=105;w&=m!=112,c+=w&&c%8?4:0,Qt.push(m==112?j[c>>>2>>>0]:m==106?re[c>>>3]:m==105?R[c>>>2>>>0]:Pe[c>>>3>>>0]),c+=w?8:4}return Qt},Pt={},Jt=()=>{if(!$t){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:d||"./this.program"},c;for(c in Pt)Pt[c]===void 0?delete i[c]:i[c]=Pt[c];var m=[];for(c in i)m.push(`${c}=${i[c]}`);$t=m}return $t},$t,Qr=[null,[],[]],$r=[31,29,31,30,31,30,31,31,30,31,30,31],Sr=[31,28,31,30,31,30,31,31,30,31,30,31];function Xr(i){var c=Array(ct(i)+1);return Ot(i,c,0,c.length),c}function xr(i,c,m,w){function A(O,ne,we){for(O=typeof O=="number"?O.toString():O||"";O.length<ne;)O=we[0]+O;return O}function D(O,ne){return A(O,ne,"0")}function H(O,ne){function we(Tr){return 0>Tr?-1:0<Tr?1:0}var ft;return(ft=we(O.getFullYear()-ne.getFullYear()))===0&&(ft=we(O.getMonth()-ne.getMonth()))===0&&(ft=we(O.getDate()-ne.getDate())),ft}function K(O){switch(O.getDay()){case 0:return new Date(O.getFullYear()-1,11,29);case 1:return O;case 2:return new Date(O.getFullYear(),0,3);case 3:return new Date(O.getFullYear(),0,2);case 4:return new Date(O.getFullYear(),0,1);case 5:return new Date(O.getFullYear()-1,11,31);case 6:return new Date(O.getFullYear()-1,11,30)}}function Y(O){var ne=O.ab;for(O=new Date(new Date(O.bb+1900,0,1).getTime());0<ne;){var we=O.getMonth(),ft=(Et(O.getFullYear())?$r:Sr)[we];if(ne>ft-O.getDate())ne-=ft-O.getDate()+1,O.setDate(1),11>we?O.setMonth(we+1):(O.setMonth(0),O.setFullYear(O.getFullYear()+1));else{O.setDate(O.getDate()+ne);break}}return we=new Date(O.getFullYear()+1,0,4),ne=K(new Date(O.getFullYear(),0,4)),we=K(we),0>=H(ne,O)?0>=H(we,O)?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}i>>>=0,c>>>=0,m>>>=0,w>>>=0;var q=j[w+40>>>2>>>0];w={Db:R[w>>>2>>>0],Cb:R[w+4>>>2>>>0],hb:R[w+8>>>2>>>0],mb:R[w+12>>>2>>>0],ib:R[w+16>>>2>>>0],bb:R[w+20>>>2>>>0],Va:R[w+24>>>2>>>0],ab:R[w+28>>>2>>>0],Gb:R[w+32>>>2>>>0],Bb:R[w+36>>>2>>>0],Eb:q?qe(q):""},m=qe(m),q={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var te in q)m=m.replace(new RegExp(te,"g"),q[te]);var ce="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ye="January February March April May June July August September October November December".split(" ");q={"%a":O=>ce[O.Va].substring(0,3),"%A":O=>ce[O.Va],"%b":O=>ye[O.ib].substring(0,3),"%B":O=>ye[O.ib],"%C":O=>D((O.bb+1900)/100|0,2),"%d":O=>D(O.mb,2),"%e":O=>A(O.mb,2," "),"%g":O=>Y(O).toString().substring(2),"%G":O=>Y(O),"%H":O=>D(O.hb,2),"%I":O=>(O=O.hb,O==0?O=12:12<O&&(O-=12),D(O,2)),"%j":O=>{for(var ne=0,we=0;we<=O.ib-1;ne+=(Et(O.bb+1900)?$r:Sr)[we++]);return D(O.mb+ne,3)},"%m":O=>D(O.ib+1,2),"%M":O=>D(O.Cb,2),"%n":()=>`\n`,"%p":O=>0<=O.hb&&12>O.hb?"AM":"PM","%S":O=>D(O.Db,2),"%t":()=>"	","%u":O=>O.Va||7,"%U":O=>D(Math.floor((O.ab+7-O.Va)/7),2),"%V":O=>{var ne=Math.floor((O.ab+7-(O.Va+6)%7)/7);if(2>=(O.Va+371-O.ab-2)%7&&ne++,ne)ne==53&&(we=(O.Va+371-O.ab)%7,we==4||we==3&&Et(O.bb)||(ne=1));else{ne=52;var we=(O.Va+7-O.ab-1)%7;(we==4||we==5&&Et(O.bb%400-1))&&ne++}return D(ne,2)},"%w":O=>O.Va,"%W":O=>D(Math.floor((O.ab+7-(O.Va+6)%7)/7),2),"%y":O=>(O.bb+1900).toString().substring(2),"%Y":O=>O.bb+1900,"%z":O=>{O=O.Bb;var ne=0<=O;return O=Math.abs(O)/60,(ne?"+":"-")+("0000"+(O/60*100+O%60)).slice(-4)},"%Z":O=>O.Eb,"%%":()=>"%"},m=m.replace(/%%/g,"\\0\\0");for(te in q)m.includes(te)&&(m=m.replace(new RegExp(te,"g"),q[te](w)));return m=m.replace(/\\0\\0/g,"%"),te=Xr(m),te.length>c?0:(B.set(te,i>>>0),te.length-1)}var Rt=i=>{try{i()}catch(c){He(c)}};function Jr(){var i=ie,c={};for(let[m,w]of Object.entries(i))c[m]=typeof w=="function"?function(){zt.push(m);try{return w.apply(null,arguments)}finally{T||(zt.pop(),at&&ut===1&&zt.length===0&&(ut=0,Rt(sn),typeof Fibers<"u"&&Fibers.Hb()))}}:w;return c}var ut=0,at=null,er=0,zt=[],_r={},Cr={},en=0,tr=null,Wn=[];function tn(){return new Promise((i,c)=>{tr={resolve:i,reject:c}})}function rn(){var i=Qe(65548),c=i+12;j[i>>>2>>>0]=c,j[i+4>>>2>>>0]=c+65536,c=zt[0];var m=_r[c];return m===void 0&&(m=en++,_r[c]=m,Cr[m]=c),R[i+8>>>2>>>0]=m,i}function nn(i){if(!T){if(ut===0){var c=!1,m=!1;i((w=0)=>{if(!T&&(er=w,c=!0,m)){ut=2,Rt(()=>un(at)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),w=!1;try{var A=(0,ie[Cr[R[at+8>>>2>>>0]]])()}catch(K){A=K,w=!0}var D=!1;if(!at){var H=tr;H&&(tr=null,(w?H.reject:H.resolve)(A),D=!0)}if(w&&!D)throw A}}),m=!0,c||(ut=1,at=rn(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Rt(()=>nr(at)))}else ut===2?(ut=0,Rt(dn),it(at),at=null,Wn.forEach(w=>{if(!T)try{w();try{z=z=w=z,r.onExit?.(w),T=!0,l(w,new wt(w))}catch(A){A instanceof wt||A=="unwind"||l(1,A)}}catch(A){A instanceof wt||A=="unwind"||l(1,A)}})):He(`invalid state: ${ut}`);return er}}function Hn(i){return nn(c=>{i().then(c)})}for(var on=Array(256),Ut=0;256>Ut;++Ut)on[Ut]=String.fromCharCode(Ut);jt=on,Me=r.BindingError=class extends Error{constructor(i){super(i),this.name="BindingError"}},r.InternalError=class extends Error{constructor(i){super(i),this.name="InternalError"}},Object.assign(Kt.prototype,{get(i){return this.$a[i]},has(i){return this.$a[i]!==void 0},kb(i){var c=this.nb.pop()||this.$a.length;return this.$a[c]=i,c},jb(i){this.$a[i]=void 0,this.nb.push(i)}}),Ye.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),Ye.cb=Ye.$a.length,r.count_emval_handles=()=>{for(var i=0,c=Ye.cb;c<Ye.$a.length;++c)Ye.$a[c]!==void 0&&++i;return i};var rr={ha:function(i,c,m){return Hn(async()=>{await r.wb(i,c,m)})},a:function(i,c,m){throw i>>>=0,new Tt(i).kb(c>>>0,m>>>0),vt=i,zr++,vt},v:function(){return 0},aa:function(){},N:function(){},P:function(){},ba:function(){return 0},_:function(){},V:function(){},Z:function(){},C:function(){},O:function(){},L:function(){},$:function(){},M:function(){},F:function(i,c,m,w,A){c>>>=0,c=tt(c);var D=c.indexOf("u")!=-1;D&&(A=(1n<<64n)-1n),Ce(i>>>0,{name:c,fromWireType:H=>H,toWireType:function(H,K){if(typeof K!="bigint"&&typeof K!="number")throw new TypeError(`Cannot convert "${Ft(K)}" to ${this.name}`);if(K<w||K>A)throw new TypeError(`Passing a number "${Ft(K)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${w}, ${A}]!`);return K},argPackAdvance:8,readValueFromPointer:mr(c,m>>>0,!D),eb:null})},fa:function(i,c,m,w){c=tt(c>>>0),Ce(i>>>0,{name:c,fromWireType:function(A){return!!A},toWireType:function(A,D){return D?m:w},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(V[A>>>0])},eb:null})},ea:function(i,c){c=tt(c>>>0),Ce(i>>>0,{name:c,fromWireType:m=>{var w=Ze(m);return fr(m),w},toWireType:(m,w)=>st(w),argPackAdvance:8,readValueFromPointer:ue,eb:null})},E:function(i,c,m){c=tt(c>>>0),Ce(i>>>0,{name:c,fromWireType:w=>w,toWireType:(w,A)=>A,argPackAdvance:8,readValueFromPointer:Yt(c,m>>>0),eb:null})},r:function(i,c,m,w,A){if(i>>>=0,m>>>=0,c=tt(c>>>0),A===-1&&(A=4294967295),A=K=>K,w===0){var D=32-8*m;A=K=>K<<D>>>D}var H=c.includes("unsigned")?function(K,Y){return Y>>>0}:function(K,Y){return Y};Ce(i,{name:c,fromWireType:A,toWireType:H,argPackAdvance:8,readValueFromPointer:mr(c,m,w!==0),eb:null})},m:function(i,c,m){function w(D){return new A(B.buffer,j[D+4>>>2>>>0],j[D>>>2>>>0])}var A=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];m=tt(m>>>0),Ce(i>>>0,{name:m,fromWireType:w,argPackAdvance:8,readValueFromPointer:w},{tb:!0})},G:function(i,c){c=tt(c>>>0);var m=c==="std::string";Ce(i>>>0,{name:c,fromWireType:function(w){var A=j[w>>>2>>>0],D=w+4;if(m)for(var H=D,K=0;K<=A;++K){var Y=D+K;if(K==A||V[Y>>>0]==0){if(H=qe(H,Y-H),q===void 0)var q=H;else q+=String.fromCharCode(0),q+=H;H=Y+1}}else{for(q=Array(A),K=0;K<A;++K)q[K]=String.fromCharCode(V[D+K>>>0]);q=q.join("")}return it(w),q},toWireType:function(w,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var D=typeof A=="string";if(!(D||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array))throw new Me("Cannot pass non-string to std::string");var H=m&&D?ct(A):A.length,K=Qe(4+H+1),Y=K+4;if(j[K>>>2>>>0]=H,m&&D)Ot(A,V,Y,H+1);else if(D)for(D=0;D<H;++D){var q=A.charCodeAt(D);if(255<q)throw it(Y),new Me("String has UTF-16 code units that do not fit in 8 bits");V[Y+D>>>0]=q}else for(D=0;D<H;++D)V[Y+D>>>0]=A[D];return w!==null&&w.push(it,K),K},argPackAdvance:8,readValueFromPointer:Nr,eb(w){it(w)}})},x:function(i,c,m){if(c>>>=0,m>>>=0,m=tt(m),c===2)var w=Hr,A=Nn,D=Gr,H=()=>Z,K=1;else c===4&&(w=Lr,A=Fr,D=jr,H=()=>j,K=2);Ce(i>>>0,{name:m,fromWireType:Y=>{for(var q=j[Y>>>2>>>0],te=H(),ce,ye=Y+4,O=0;O<=q;++O){var ne=Y+4+O*c;(O==q||te[ne>>>K]==0)&&(ye=w(ye,ne-ye),ce===void 0?ce=ye:(ce+=String.fromCharCode(0),ce+=ye),ye=ne+c)}return it(Y),ce},toWireType:(Y,q)=>{if(typeof q!="string")throw new Me(`Cannot pass non-string to C++ string type ${m}`);var te=D(q),ce=Qe(4+te+c);return j[ce>>>2]=te>>K,A(q,ce+4,te+c),Y!==null&&Y.push(it,ce),ce},argPackAdvance:8,readValueFromPointer:ue,eb(Y){it(Y)}})},ga:function(i,c){c=tt(c>>>0),Ce(i>>>0,{ub:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},ca:()=>1,p:function(i,c,m){return c>>>=0,m>>>=0,i=Ze(i>>>0),c=Dt(c,"emval::as"),hr(c,m,i)},z:function(i,c,m,w){return m>>>=0,w>>>=0,i=Mt[i>>>0],c=Ze(c>>>0),i(null,c,m,w)},k:function(i,c,m,w,A){return m>>>=0,w>>>=0,A>>>=0,i=Mt[i>>>0],c=Ze(c>>>0),m=Zt(m),i(c,c[m],w,A)},b:fr,y:function(i,c){return c>>>=0,i=Ze(i>>>0),c=Ze(c),i==c},t:function(i){return i>>>=0,i===0?st(gr()):(i=Zt(i),st(gr()[i]))},j:function(i,c,m){c=Yr(i,c>>>0);var w=c.shift();i--;var A=`return function (obj, func, destructorsRef, args) {\n`,D=0,H=[];m===0&&H.push("obj");for(var K=["retType"],Y=[w],q=0;q<i;++q)H.push("arg"+q),K.push("argType"+q),Y.push(c[q]),A+=`  var arg${q} = argType${q}.readValueFromPointer(args${D?"+"+D:""});\n`,D+=c[q].argPackAdvance;for(A+=`  var rv = ${m===1?"new func":"func.call"}(${H.join(", ")});\n`,q=0;q<i;++q)c[q].deleteObject&&(A+=`  argType${q}.deleteObject(arg${q});\n`);return w.ub||(K.push("emval_returnValue"),Y.push(hr),A+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),K.push(A+`};\n`),i=Zr(K).apply(null,Y),m=`methodCaller<(${c.map(te=>te.name).join(", ")}) => ${w.name}>`,Kr(yr(m,i))},q:function(i,c){return c>>>=0,i=Ze(i>>>0),c=Ze(c),st(i[c])},d:function(i){i>>>=0,4<i&&(Ye.get(i).pb+=1)},s:function(){return st([])},l:function(i){i=Ze(i>>>0);for(var c=Array(i.length),m=0;m<i.length;m++)c[m]=i[m];return st(c)},e:function(i){return st(Zt(i>>>0))},i:function(){return st({})},h:function(i){i>>>=0;for(var c=Ze(i);c.length;){var m=c.pop();c.pop()(m)}fr(i)},g:function(i,c,m){c>>>=0,m>>>=0,i=Ze(i>>>0),c=Ze(c),m=Ze(m),i[c]=m},f:function(i,c){return c>>>=0,i=Dt(i>>>0,"_emval_take_value"),i=i.readValueFromPointer(c),st(i)},S:function(i,c){i=-9007199254740992>i||9007199254740992<i?NaN:Number(i),c>>>=0,i=new Date(1e3*i),R[c>>>2>>>0]=i.getUTCSeconds(),R[c+4>>>2>>>0]=i.getUTCMinutes(),R[c+8>>>2>>>0]=i.getUTCHours(),R[c+12>>>2>>>0]=i.getUTCDate(),R[c+16>>>2>>>0]=i.getUTCMonth(),R[c+20>>>2>>>0]=i.getUTCFullYear()-1900,R[c+24>>>2>>>0]=i.getUTCDay(),R[c+28>>>2>>>0]=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},T:function(i,c){i=-9007199254740992>i||9007199254740992<i?NaN:Number(i),c>>>=0,i=new Date(1e3*i),R[c>>>2>>>0]=i.getSeconds(),R[c+4>>>2>>>0]=i.getMinutes(),R[c+8>>>2>>>0]=i.getHours(),R[c+12>>>2>>>0]=i.getDate(),R[c+16>>>2>>>0]=i.getMonth(),R[c+20>>>2>>>0]=i.getFullYear()-1900,R[c+24>>>2>>>0]=i.getDay(),R[c+28>>>2>>>0]=(Et(i.getFullYear())?br:wr)[i.getMonth()]+i.getDate()-1|0,R[c+36>>>2>>>0]=-(60*i.getTimezoneOffset());var m=new Date(i.getFullYear(),6,1).getTimezoneOffset(),w=new Date(i.getFullYear(),0,1).getTimezoneOffset();R[c+32>>>2>>>0]=(m!=w&&i.getTimezoneOffset()==Math.min(w,m))|0},U:function(i){i>>>=0;var c=new Date(R[i+20>>>2>>>0]+1900,R[i+16>>>2>>>0],R[i+12>>>2>>>0],R[i+8>>>2>>>0],R[i+4>>>2>>>0],R[i>>>2>>>0],0),m=R[i+32>>>2>>>0],w=c.getTimezoneOffset(),A=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(D,A);return 0>m?R[i+32>>>2>>>0]=+(A!=D&&H==w):0<m!=(H==w)&&(A=Math.max(D,A),c.setTime(c.getTime()+6e4*((0<m?H:A)-w))),R[i+24>>>2>>>0]=c.getDay(),R[i+28>>>2>>>0]=(Et(c.getFullYear())?br:wr)[c.getMonth()]+c.getDate()-1|0,R[i>>>2>>>0]=c.getSeconds(),R[i+4>>>2>>>0]=c.getMinutes(),R[i+8>>>2>>>0]=c.getHours(),R[i+12>>>2>>>0]=c.getDate(),R[i+16>>>2>>>0]=c.getMonth(),R[i+20>>>2>>>0]=c.getYear(),i=c.getTime(),isNaN(i)?(R[mt()>>>2>>>0]=61,i=-1):i/=1e3,BigInt(i)},Q:function(){return-52},R:function(){},J:function(i,c,m){function w(Y){return(Y=Y.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Y[1]:"GMT"}m>>>=0;var A=new Date().getFullYear(),D=new Date(A,0,1),H=new Date(A,6,1);A=D.getTimezoneOffset();var K=H.getTimezoneOffset();j[i>>>0>>>2>>>0]=60*Math.max(A,K),R[c>>>0>>>2>>>0]=+(A!=K),i=w(D),c=w(H),i=vr(i),c=vr(c),K<A?(j[m>>>2>>>0]=i,j[m+4>>>2>>>0]=c):(j[m>>>2>>>0]=c,j[m+4>>>2>>>0]=i)},u:()=>{He("")},c:function(i,c,m){return i>>>=0,c=Xt(c>>>0,m>>>0),Ve[i].apply(null,c)},H:function(i,c,m){return i>>>=0,c=Xt(c>>>0,m>>>0),Ve[i].apply(null,c)},D:()=>Date.now(),K:function(){return 4294901760},o:()=>performance.now(),I:function(i){i>>>=0;var c=V.length;if(4294901760<i)return!1;for(var m=1;4>=m;m*=2){var w=c*(1+.2/m);w=Math.min(w,i+100663296);var A=Math;w=Math.max(i,w);e:{A=(A.min.call(A,4294901760,w+(65536-w%65536)%65536)-E.buffer.byteLength+65535)/65536;try{E.grow(A),ae();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},X:function(i,c){i>>>=0,c>>>=0;var m=0;return Jt().forEach((w,A)=>{var D=c+m;for(A=j[i+4*A>>>2>>>0]=D,D=0;D<w.length;++D)B[A++>>>0>>>0]=w.charCodeAt(D);B[A>>>0>>>0]=0,m+=w.length+1}),0},Y:function(i,c){i>>>=0,c>>>=0;var m=Jt();j[i>>>2>>>0]=m.length;var w=0;return m.forEach(A=>w+=A.length+1),j[c>>>2>>>0]=w,0},w:()=>52,B:function(){return 52},W:function(){return 70},A:function(i,c,m,w){c>>>=0,m>>>=0,w>>>=0;for(var A=0,D=0;D<m;D++){var H=j[c>>>2>>>0],K=j[c+4>>>2>>>0];c+=8;for(var Y=0;Y<K;Y++){var q=V[H+Y>>>0],te=Qr[i];q===0||q===10?((i===1?_:S)(pr(te,0)),te.length=0):te.push(q)}A+=K}return j[w>>>2>>>0]=A,0},da:xr,n:function(i,c,m,w){return xr(i>>>0,c>>>0,m>>>0,w>>>0)}},ie=function(){function i(m){return ie=m.exports,ie=Jr(),ie=Gn(),E=ie.ia,ae(),De.unshift(ie.ja),ge--,ge==0&&(Ie!==null&&(clearInterval(Ie),Ie=null),Oe&&(m=Oe,Oe=null,m())),ie}var c={a:rr};if(ge++,r.instantiateWasm)try{return r.instantiateWasm(c,i)}catch(m){S(`Module.instantiateWasm callback failed with error: ${m}`),n(m)}return je(c,function(m){i(m.instance)}).catch(n),{}}();r._OrtInit=(i,c)=>(r._OrtInit=ie.ka)(i,c),r._OrtGetLastError=(i,c)=>(r._OrtGetLastError=ie.la)(i,c),r._OrtCreateSessionOptions=(i,c,m,w,A,D,H,K,Y,q)=>(r._OrtCreateSessionOptions=ie.ma)(i,c,m,w,A,D,H,K,Y,q),r._OrtAppendExecutionProvider=(i,c)=>(r._OrtAppendExecutionProvider=ie.na)(i,c),r._OrtAddFreeDimensionOverride=(i,c,m)=>(r._OrtAddFreeDimensionOverride=ie.oa)(i,c,m),r._OrtAddSessionConfigEntry=(i,c,m)=>(r._OrtAddSessionConfigEntry=ie.pa)(i,c,m),r._OrtReleaseSessionOptions=i=>(r._OrtReleaseSessionOptions=ie.qa)(i),r._OrtCreateSession=(i,c,m)=>(r._OrtCreateSession=ie.ra)(i,c,m),r._OrtReleaseSession=i=>(r._OrtReleaseSession=ie.sa)(i),r._OrtGetInputOutputCount=(i,c,m)=>(r._OrtGetInputOutputCount=ie.ta)(i,c,m),r._OrtGetInputName=(i,c)=>(r._OrtGetInputName=ie.ua)(i,c),r._OrtGetOutputName=(i,c)=>(r._OrtGetOutputName=ie.va)(i,c),r._OrtFree=i=>(r._OrtFree=ie.wa)(i),r._OrtCreateTensor=(i,c,m,w,A,D)=>(r._OrtCreateTensor=ie.xa)(i,c,m,w,A,D),r._OrtGetTensorData=(i,c,m,w,A)=>(r._OrtGetTensorData=ie.ya)(i,c,m,w,A),r._OrtReleaseTensor=i=>(r._OrtReleaseTensor=ie.za)(i),r._OrtCreateRunOptions=(i,c,m,w)=>(r._OrtCreateRunOptions=ie.Aa)(i,c,m,w),r._OrtAddRunConfigEntry=(i,c,m)=>(r._OrtAddRunConfigEntry=ie.Ba)(i,c,m),r._OrtReleaseRunOptions=i=>(r._OrtReleaseRunOptions=ie.Ca)(i),r._OrtCreateBinding=i=>(r._OrtCreateBinding=ie.Da)(i),r._OrtBindInput=(i,c,m)=>(r._OrtBindInput=ie.Ea)(i,c,m),r._OrtBindOutput=(i,c,m,w)=>(r._OrtBindOutput=ie.Fa)(i,c,m,w),r._OrtClearBoundOutputs=i=>(r._OrtClearBoundOutputs=ie.Ga)(i),r._OrtReleaseBinding=i=>(r._OrtReleaseBinding=ie.Ha)(i),r._OrtRunWithBinding=(i,c,m,w,A)=>(r._OrtRunWithBinding=ie.Ia)(i,c,m,w,A),r._OrtRun=(i,c,m,w,A,D,H,K)=>(r._OrtRun=ie.Ja)(i,c,m,w,A,D,H,K),r._OrtEndProfiling=i=>(r._OrtEndProfiling=ie.Ka)(i),r._JsepOutput=(i,c,m)=>(r._JsepOutput=ie.La)(i,c,m),r._JsepGetNodeName=i=>(r._JsepGetNodeName=ie.Ma)(i);var mt=()=>(mt=ie.Na)(),Qe=r._malloc=i=>(Qe=r._malloc=ie.Oa)(i),it=r._free=i=>(it=r._free=ie.Pa)(i),Vt=i=>(Vt=ie.Qa)(i),Ir=()=>(Ir=ie.Sa)(),Ar=i=>(Ar=ie.Ta)(i),an=i=>(an=ie.Ua)(i),nr=i=>(nr=ie.Wa)(i),sn=()=>(sn=ie.Xa)(),un=i=>(un=ie.Ya)(i),dn=()=>(dn=ie.Za)();r.___start_em_js=957259,r.___stop_em_js=957420;function Gn(){var i=ie;i=Object.assign({},i);var c=w=>()=>w()>>>0,m=w=>A=>w(A)>>>0;return i.Na=c(i.Na),i.Oa=m(i.Oa),i.Qa=m(i.Qa),i.Sa=c(i.Sa),i.Ua=m(i.Ua),i}r.stackAlloc=an,r.stackSave=Ir,r.stackRestore=Ar,r.UTF8ToString=qe,r.stringToUTF8=(i,c,m)=>Ot(i,V,c,m),r.lengthBytesUTF8=ct;var or;Oe=function i(){or||ln(),or||(Oe=i)};function ln(){if(!(0<ge)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var i=r.preRun.shift();Ee.unshift(i)}for(;0<Ee.length;)Ee.shift()(r);if(!(0<ge||or||(or=!0,r.calledRun=!0,T))){for(;0<De.length;)De.shift()(r);for(o(r);0<le.length;)le.shift()(r)}}}return ln(),t.ready}})();typeof Uo=="object"&&typeof Yn=="object"?Yn.exports=zo:typeof define=="function"&&define.amd&&define([],()=>zo)});var No=Er(()=>{});var Wo=Er(()=>{});var Ho={};pn(Ho,{cpus:()=>rd});var rd,Go=X(()=>{rd=void 0});var jo=Er((Fo,Zn)=>{"use strict";var Lo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return re.buffer!=Ee.buffer&&He(),Ee}function o(){return re.buffer!=Ee.buffer&&He(),De}function n(){return re.buffer!=Ee.buffer&&He(),le}function u(){return re.buffer!=Ee.buffer&&He(),ge}function d(){return re.buffer!=Ee.buffer&&He(),Ie}function l(){return re.buffer!=Ee.buffer&&He(),Oe}var a=t,f,g;a.ready=new Promise((s,p)=>{f=s,g=p}),a.mountExternalData=(s,p)=>{(a.cb||(a.cb=new Map)).set(s,p)},a.unmountExternalData=()=>{delete a.cb},a.jsepInit=(s,p,h,x,P,M,G,oe,Se,pe,he)=>{a.Pb=s,a.xb=p,a.Bb=h,a.lb=x,a.Ab=P,a.Ea=M,a.Cb=G,a.Eb=oe,a.yb=Se,a.zb=pe,a.Db=he,p=(me,_e,k)=>(...se)=>{let ve=Qe,Je=_e?.();se=me(...se);let Nt=_e?.();return Je!==Nt&&(me=Nt,k(Je),_e=k=null),Qe!=ve?un():se},h=me=>async(..._e)=>{try{if(a.Xa)throw Error("Session already started");let k=a.Xa={eb:_e[0],errors:[]},se=await me(..._e);if(a.Xa!==k)throw Error("Session mismatch");s.flush();let ve=k.errors;if(0<ve.length){let Je=await Promise.all(ve);if(Je=Je.filter(Nt=>Nt),0<Je.length)throw Error(Je.join(`\n`))}return se}finally{a.Xa=null}},a._OrtRun=h(p(a._OrtRun,()=>a._OrtRun,me=>a._OrtRun=me)),a._OrtRunWithBinding=h(p(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,me=>a._OrtRunWithBinding=me)),a._OrtBindInput=p(a._OrtBindInput,()=>a._OrtBindInput,me=>a._OrtBindInput=me),a.jsepRegisterBuffer=(me,_e,k,se)=>s.registerBuffer(me,_e,k,se),a.jsepGetBuffer=me=>s.getBuffer(me),a.jsepCreateDownloader=(me,_e,k)=>s.createDownloader(me,_e,k),a.jsepOnReleaseSession=me=>{s.onReleaseSession(me)},a.jsepOnRunStart=()=>s.onRunStart()};var y=Object.assign({},a),v="./this.program",$=(s,p)=>{throw p},b=typeof window=="object",C=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",_=a.ENVIRONMENT_IS_PTHREAD||!1,S="";function E(s){return a.locateFile?a.locateFile(s,S):S+s}var T,z,B;if(I){var V=(jn(),ar(Fn)),W=(Kn(),ar(qn));S=C?W.dirname(S)+"/":__dirname+"/",T=(p,h)=>(p=Tt(p)?new URL(p):W.normalize(p),V.readFileSync(p,h?void 0:"utf8")),B=p=>(p=T(p,!0),p.buffer||(p=new Uint8Array(p)),p),z=(p,h,x,P=!0)=>{p=Tt(p)?new URL(p):W.normalize(p),V.readFile(p,P?void 0:"utf8",(M,G)=>{M?x(M):h(P?G.buffer:G)})},!a.thisProgram&&1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),$=(p,h)=>{throw process.exitCode=p,h},a.inspect=()=>"[Emscripten Module object]";let s;try{s=No()}catch(p){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),p}global.Worker=s.Worker}else(b||C)&&(C?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),typeof e<"u"&&e&&(S=e),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",I||(T=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.send(null),p.responseText},C&&(B=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),z=(s,p,h)=>{var x=new XMLHttpRequest;x.open("GET",s,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?p(x.response):h()},x.onerror=h,x.send(null)}));I&&typeof performance>"u"&&(global.performance=Wo().performance);var Z=console.log.bind(console),R=console.error.bind(console);I&&(Z=(...s)=>V.writeSync(1,s.join(" ")+`\n`),R=(...s)=>V.writeSync(2,s.join(" ")+`\n`));var j=Z,J=R;Object.assign(a,y),y=null,typeof WebAssembly!="object"&&Ve("no native wasm support detected");var re,Ae,Pe=!1,ae,Ee,De,le,ge,Ie,Oe;function He(){var s=re.buffer;a.HEAP8=Ee=new Int8Array(s),a.HEAP16=new Int16Array(s),a.HEAPU8=De=new Uint8Array(s),a.HEAPU16=new Uint16Array(s),a.HEAP32=le=new Int32Array(s),a.HEAPU32=ge=new Uint32Array(s),a.HEAPF32=Ie=new Float32Array(s),a.HEAPF64=Oe=new Float64Array(s)}var L=16777216;if(_)re=a.wasmMemory;else if(a.wasmMemory)re=a.wasmMemory;else if(re=new WebAssembly.Memory({initial:L/65536,maximum:65536,shared:!0}),!(re.buffer instanceof SharedArrayBuffer))throw J("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&J("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");He(),L=re.buffer.byteLength;var ee=[],be=[],bt=[],Ge=0,ot=null,lt=null;function je(){if(Ge--,Ge==0&&(ot!==null&&(clearInterval(ot),ot=null),lt)){var s=lt;lt=null,s()}}function Ve(s){throw s="Aborted("+s+")",J(s),Pe=!0,ae=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),g(s),s}var wt=s=>s.startsWith("data:application/octet-stream;base64,"),Tt=s=>s.startsWith("file://"),vt;vt="ort-wasm-simd-threaded.wasm",wt(vt)||(vt=E(vt));function zr(s){if(B)return B(s);throw"both async and sync fetching of the wasm failed"}function Ur(s){if(b||C){if(typeof fetch=="function"&&!Tt(s))return fetch(s,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at \'"+s+"\'";return p.arrayBuffer()}).catch(()=>zr(s));if(z)return new Promise((p,h)=>{z(s,x=>p(new Uint8Array(x)),h)})}return Promise.resolve().then(()=>zr(s))}function pr(s,p,h){return Ur(s).then(x=>WebAssembly.instantiate(x,p)).then(x=>x).then(h,x=>{J(`failed to asynchronously prepare wasm: ${x}`),Ve(x)})}function qe(s,p){var h=vt;return typeof WebAssembly.instantiateStreaming!="function"||wt(h)||Tt(h)||I||typeof fetch!="function"?pr(h,s,p):fetch(h,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,s).then(p,function(P){return J(`wasm streaming compile failed: ${P}`),J("falling back to ArrayBuffer instantiation"),pr(h,s,p)}))}var ct,Ot={1355788:(s,p,h,x)=>{if(typeof a>"u"||!a.cb)return 1;if(s=Me(s>>>0),s.startsWith("./")&&(s=s.substring(2)),s=a.cb.get(s),!s)return 2;if(p>>>=0,h>>>=0,x>>>=0,p+h>s.byteLength)return 3;try{return o().set(s.subarray(p,p+h),x>>>0),0}catch{return 4}},1356289:()=>{a.yb(a.Xa.eb)},1356357:()=>{a.zb(a.Xa.eb)},1356423:()=>{a.Db(a.Xa.eb)},1356485:s=>a.xb(s),1356518:s=>a.Bb(s),1356550:(s,p,h)=>{a.lb(s,p,h,!0)},1356589:(s,p,h)=>{a.lb(s,p,h)},1356622:s=>{a.Ea("Abs",s,void 0)},1356673:s=>{a.Ea("Neg",s,void 0)},1356724:s=>{a.Ea("Floor",s,void 0)},1356777:s=>{a.Ea("Ceil",s,void 0)},1356829:s=>{a.Ea("Reciprocal",s,void 0)},1356887:s=>{a.Ea("Sqrt",s,void 0)},1356939:s=>{a.Ea("Exp",s,void 0)},1356990:s=>{a.Ea("Erf",s,void 0)},1357041:s=>{a.Ea("Sigmoid",s,void 0)},1357096:(s,p,h)=>{a.Ea("HardSigmoid",s,{alpha:p,beta:h})},1357175:s=>{a.Ea("Log",s,void 0)},1357226:s=>{a.Ea("Sin",s,void 0)},1357277:s=>{a.Ea("Cos",s,void 0)},1357328:s=>{a.Ea("Tan",s,void 0)},1357379:s=>{a.Ea("Asin",s,void 0)},1357431:s=>{a.Ea("Acos",s,void 0)},1357483:s=>{a.Ea("Atan",s,void 0)},1357535:s=>{a.Ea("Sinh",s,void 0)},1357587:s=>{a.Ea("Cosh",s,void 0)},1357639:s=>{a.Ea("Asinh",s,void 0)},1357692:s=>{a.Ea("Acosh",s,void 0)},1357745:s=>{a.Ea("Atanh",s,void 0)},1357798:s=>{a.Ea("Tanh",s,void 0)},1357850:s=>{a.Ea("Not",s,void 0)},1357901:(s,p,h)=>{a.Ea("Clip",s,{min:p,max:h})},1357970:s=>{a.Ea("Clip",s,void 0)},1358022:(s,p)=>{a.Ea("Elu",s,{alpha:p})},1358080:s=>{a.Ea("Relu",s,void 0)},1358132:(s,p)=>{a.Ea("LeakyRelu",s,{alpha:p})},1358196:(s,p)=>{a.Ea("ThresholdedRelu",s,{alpha:p})},1358266:(s,p)=>{a.Ea("Cast",s,{to:p})},1358324:s=>{a.Ea("Add",s,void 0)},1358375:s=>{a.Ea("Sub",s,void 0)},1358426:s=>{a.Ea("Mul",s,void 0)},1358477:s=>{a.Ea("Div",s,void 0)},1358528:s=>{a.Ea("Pow",s,void 0)},1358579:s=>{a.Ea("Equal",s,void 0)},1358632:s=>{a.Ea("Greater",s,void 0)},1358687:s=>{a.Ea("GreaterOrEqual",s,void 0)},1358749:s=>{a.Ea("Less",s,void 0)},1358801:s=>{a.Ea("LessOrEqual",s,void 0)},1358860:(s,p,h,x,P)=>{a.Ea("ReduceMean",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359019:(s,p,h,x,P)=>{a.Ea("ReduceMax",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359177:(s,p,h,x,P)=>{a.Ea("ReduceMin",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359335:(s,p,h,x,P)=>{a.Ea("ReduceProd",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359494:(s,p,h,x,P)=>{a.Ea("ReduceSum",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359652:(s,p,h,x,P)=>{a.Ea("ReduceL1",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359809:(s,p,h,x,P)=>{a.Ea("ReduceL2",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1359966:(s,p,h,x,P)=>{a.Ea("ReduceLogSum",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1360127:(s,p,h,x,P)=>{a.Ea("ReduceSumSquare",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1360291:(s,p,h,x,P)=>{a.Ea("ReduceLogSumExp",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1360455:s=>{a.Ea("Where",s,void 0)},1360508:(s,p,h)=>{a.Ea("Transpose",s,{perm:p?Array.from(n().subarray(p>>>0,h>>>0)):[]})},1360616:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se)=>{a.Ea("ConvTranspose",s,{format:Se?"NHWC":"NCHW",autoPad:p,dilations:[h],group:x,kernel_shape:[P],pads:[M,G],strides:[oe],wIsConst:()=>!!r()[pe>>>0],outputPadding:he?Array.from(n().subarray(he>>>0,me>>>0)):[],outputShape:_e?Array.from(n().subarray(_e>>>0,k>>>0)):[],activation:Me(se)})},1361018:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k)=>{a.Ea("ConvTranspose",s,{format:oe?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(h>>>0,(h>>>0)+2>>>0)),group:x,kernelShape:Array.from(n().subarray(P>>>0,(P>>>0)+2>>>0)),pads:Array.from(n().subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(n().subarray(G>>>0,(G>>>0)+2>>>0)),wIsConst:()=>!!r()[Se>>>0],outputPadding:pe?Array.from(n().subarray(pe>>>0,he>>>0)):[],outputShape:me?Array.from(n().subarray(me>>>0,_e>>>0)):[],activation:Me(k)})},1361583:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se)=>{a.Ea("ConvTranspose",s,{format:Se?"NHWC":"NCHW",autoPad:p,dilations:[h],group:x,kernel_shape:[P],pads:[M,G],strides:[oe],wIsConst:()=>!!r()[pe>>>0],outputPadding:he?Array.from(n().subarray(he>>>0,me>>>0)):[],outputShape:_e?Array.from(n().subarray(_e>>>0,k>>>0)):[],activation:Me(se)})},1361985:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k)=>{a.Ea("ConvTranspose",s,{format:oe?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(h>>>0,(h>>>0)+2>>>0)),group:x,kernelShape:Array.from(n().subarray(P>>>0,(P>>>0)+2>>>0)),pads:Array.from(n().subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(n().subarray(G>>>0,(G>>>0)+2>>>0)),wIsConst:()=>!!r()[Se>>>0],outputPadding:pe?Array.from(n().subarray(pe>>>0,he>>>0)):[],outputShape:me?Array.from(n().subarray(me>>>0,_e>>>0)):[],activation:Me(k)})},1362550:(s,p)=>{a.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},1362641:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se,ve)=>{a.Ea("AveragePool",s,{format:ve?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:x,storage_order:P,dilations:[M,G],kernel_shape:[oe,Se],pads:[pe,he,me,_e],strides:[k,se]})},1362925:(s,p)=>{a.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},1363016:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se,ve)=>{a.Ea("AveragePool",s,{format:ve?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:x,storage_order:P,dilations:[M,G],kernel_shape:[oe,Se],pads:[pe,he,me,_e],strides:[k,se]})},1363300:(s,p)=>{a.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},1363387:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se,ve)=>{a.Ea("MaxPool",s,{format:ve?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:x,storage_order:P,dilations:[M,G],kernel_shape:[oe,Se],pads:[pe,he,me,_e],strides:[k,se]})},1363667:(s,p)=>{a.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},1363754:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se,ve)=>{a.Ea("MaxPool",s,{format:ve?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:x,storage_order:P,dilations:[M,G],kernel_shape:[oe,Se],pads:[pe,he,me,_e],strides:[k,se]})},1364034:(s,p,h,x,P)=>{a.Ea("Gemm",s,{alpha:p,beta:h,transA:x,transB:P})},1364138:s=>{a.Ea("MatMul",s,void 0)},1364192:(s,p,h,x)=>{a.Ea("ArgMax",s,{keepDims:!!p,selectLastIndex:!!h,axis:x})},1364300:(s,p,h,x)=>{a.Ea("ArgMin",s,{keepDims:!!p,selectLastIndex:!!h,axis:x})},1364408:(s,p)=>{a.Ea("Softmax",s,{axis:p})},1364471:(s,p)=>{a.Ea("Concat",s,{axis:p})},1364531:(s,p,h,x,P)=>{a.Ea("Split",s,{axis:p,numOutputs:h,splitSizes:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1364671:s=>{a.Ea("Expand",s,void 0)},1364725:(s,p)=>{a.Ea("Gather",s,{axis:Number(p)})},1364796:(s,p)=>{a.Ea("GatherElements",s,{axis:Number(p)})},1364875:(s,p,h,x,P,M,G,oe,Se,pe,he)=>{a.Ea("Resize",s,{antialias:p,axes:h?Array.from(n().subarray(h>>>0,x>>>0)):[],coordinateTransformMode:Me(P),cubicCoeffA:M,excludeOutside:G,extrapolationValue:oe,keepAspectRatioPolicy:Me(Se),mode:Me(pe),nearestMode:Me(he)})},1365221:(s,p,h,x,P,M,G)=>{a.Ea("Slice",s,{starts:p?Array.from(n().subarray(p>>>0,h>>>0)):[],ends:x?Array.from(n().subarray(x>>>0,P>>>0)):[],axes:M?Array.from(n().subarray(M>>>0,G>>>0)):[]})},1365437:s=>{a.Ea("Tile",s,void 0)},1365489:(s,p,h)=>{a.Ea("LayerNormalization",s,{axis:Number(p),epsilon:Number(h)})},1365596:(s,p,h)=>{a.Ea("InstanceNormalization",s,{epsilon:p,format:h?"NHWC":"NCHW"})},1365710:(s,p,h)=>{a.Ea("InstanceNormalization",s,{epsilon:p,format:h?"NHWC":"NCHW"})},1365824:s=>{a.Ea("Range",s,void 0)},1365877:(s,p)=>{a.Ea("Einsum",s,{equation:Me(p)})},1365958:(s,p,h,x,P)=>{a.Ea("Pad",s,{mode:p,value:h,pads:x?Array.from(n().subarray(x>>>0,P>>>0)):[]})},1366085:(s,p,h,x,P,M)=>{a.Ea("BatchNormalization",s,{epsilon:p,momentum:h,spatial:!!P,trainingMode:!!x,format:M?"NHWC":"NCHW"})},1366254:(s,p,h,x,P,M)=>{a.Ea("BatchNormalization",s,{epsilon:p,momentum:h,spatial:!!P,trainingMode:!!x,format:M?"NHWC":"NCHW"})},1366423:(s,p,h)=>{a.Ea("CumSum",s,{exclusive:Number(p),reverse:Number(h)})},1366520:(s,p,h,x,P,M,G,oe,Se)=>{a.Ea("Attention",s,{numHeads:p,isUnidirectional:h,maskFilterValue:x,scale:P,doRotary:M,qkvHiddenSizes:G?Array.from(n().subarray(Number(oe)>>>0,Number(oe)+G>>>0)):[],pastPresentShareBuffer:!!Se})},1366792:s=>{a.Ea("Gelu",s,void 0)},1366844:(s,p,h,x,P,M)=>{a.Ea("MultiHeadAttention",s,{numHeads:p,isUnidirectional:h,maskFilterValue:x,scale:P,doRotary:M})},1367003:s=>{a.Ea("BiasAdd",s,void 0)},1367058:s=>{a.Ea("BiasSplitGelu",s,void 0)},1367119:(s,p)=>{a.Ea("SkipLayerNormalization",s,{epsilon:p})},1367200:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e)=>{a.Ea("Conv",s,{format:Se?"NHWC":"NCHW",auto_pad:p,dilations:[h],group:x,kernel_shape:[P],pads:M?Array.from(n().subarray(M>>>0,G>>>0)):[],strides:[oe],w_is_const:()=>!!r()[pe>>>0],activation:Me(he),activation_params:me?Array.from(d().subarray(me>>>0,_e>>>0)):[]})},1367570:(s,p,h,x,P,M,G,oe,Se,pe,he,me,_e,k,se,ve)=>{a.Ea("Conv",s,{format:me?"NHWC":"NCHW",auto_pad:p,dilations:[h,x],group:P,kernel_shape:[M,G],pads:oe?Array.from(n().subarray(oe>>>0,Se>>>0)):[],strides:[pe,he],w_is_const:()=>!!r()[_e>>>0],activation:Me(k),activation_params:se?Array.from(d().subarray(se>>>0,ve>>>0)):[]})},1367961:s=>{a.Cb(s)},1367995:(s,p)=>a.Eb(s,p,a.Xa.eb,a.Xa.errors)};function Ft(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}var jt=s=>{s.terminate(),s.onmessage=()=>{}},tt=s=>{ue.Za.length==0&&(Ze(),ue.mb(ue.Za[0]));var p=ue.Za.pop();if(!p)return 6;ue.$a.push(p),ue.Qa[s.Ya]=p,p.Ya=s.Ya;var h={cmd:"run",start_routine:s.Gb,arg:s.ub,pthread_ptr:s.Ya};return I&&p.unref(),p.postMessage(h,s.Mb),0},pt=0,qt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Vr=(s,p,h)=>{p>>>=0;var x=p+h;for(h=p;s[h]&&!(h>=x);)++h;if(16<h-p&&s.buffer&&qt)return qt.decode(s.buffer instanceof SharedArrayBuffer?s.slice(p,h):s.subarray(p,h));for(x="";p<h;){var P=s[p++];if(P&128){var M=s[p++]&63;if((P&224)==192)x+=String.fromCharCode((P&31)<<6|M);else{var G=s[p++]&63;P=(P&240)==224?(P&15)<<12|M<<6|G:(P&7)<<18|M<<12|G<<6|s[p++]&63,65536>P?x+=String.fromCharCode(P):(P-=65536,x+=String.fromCharCode(55296|P>>10,56320|P&1023))}}else x+=String.fromCharCode(P)}return x},Me=(s,p)=>(s>>>=0)?Vr(o(),s,p):"",Vn=s=>{var p=ne();return s=s(),we(p),s};function Ce(s,p){var h=arguments.length-2,x=arguments;return Vn(()=>{for(var P=ft(8*h),M=P>>>3,G=0;G<h;G++){var oe=x[2+G];l()[M+G>>>0]=oe}return Y(s,h,P,p)})}function mr(s){if(_)return Ce(0,1,s);ae=s,0<pt||(ue.Hb(),a.onExit?.(s),Pe=!0),$(s,new Ft(s))}var Kt=s=>{if(ae=s,_)throw Nr(s),"unwind";mr(s)},Ye=s=>{s instanceof Ft||s=="unwind"||$(1,s)};function fr(){for(var s=a.numThreads;s--;)Ze();ee.unshift(()=>{Ge++,st(()=>je())})}function Ze(){var s=E("ort-wasm-simd-threaded.worker.js");s=new Worker(s),ue.Za.push(s)}function st(s){_?s():Promise.all(ue.Za.map(ue.mb)).then(s)}var ue={Za:[],$a:[],qb:[],Qa:{},ib(){_?(ue.receiveObjectTransfer=ue.Fb,ue.threadInitTLS=ue.pb,ue.setExitStatus=ue.ob):fr()},ob:s=>ae=s,Qb:["$terminateWorker"],Hb:()=>{for(var s of ue.$a)jt(s);for(s of ue.Za)jt(s);ue.Za=[],ue.$a=[],ue.Qa=[]},nb:s=>{var p=s.Ya;delete ue.Qa[p],ue.Za.push(s),ue.$a.splice(ue.$a.indexOf(s),1),s.Ya=0,q(p)},Fb(){},pb(){ue.qb.forEach(s=>s())},mb:s=>new Promise(p=>{s.onmessage=M=>{M=M.data;var G=M.cmd;if(M.targetThread&&M.targetThread!=A()){var oe=ue.Qa[M.targetThread];oe?oe.postMessage(M,M.transferList):J(`Internal error! Worker sent a message "${G}" to target pthread ${M.targetThread}, but that thread no longer exists!`)}else G==="checkMailbox"?Pt():G==="spawnThread"?tt(M):G==="cleanupThread"?ue.nb(ue.Qa[M.thread]):G==="killThread"?(M=M.thread,G=ue.Qa[M],delete ue.Qa[M],jt(G),q(M),ue.$a.splice(ue.$a.indexOf(G),1),G.Ya=0):G==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):G==="loaded"?(s.loaded=!0,I&&!s.Ya&&s.unref(),p(s)):G==="alert"?alert(`Thread ${M.threadId}: ${M.text}`):M.target==="setimmediate"?s.postMessage(M):G==="callHandler"?a[M.handler](...M.args):G&&J(`worker sent an unknown command ${G}`)},s.onerror=M=>{throw J(`worker sent an error! ${M.filename}:${M.lineno}: ${M.message}`),M},I&&(s.on("message",M=>s.onmessage({data:M})),s.on("error",M=>s.onerror(M)));var h=[],x=["onExit"],P;for(P of x)a.hasOwnProperty(P)&&h.push(P);s.postMessage({cmd:"load",handlers:h,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:re,wasmModule:Ae})})};a.PThread=ue;var Yt=s=>{for(;0<s.length;)s.shift()(a)};a.establishStackSpace=()=>{var s=A(),p=u()[s+52>>>2>>>0];s=u()[s+56>>>2>>>0],O(p,p-s),we(p)};function Nr(s){if(_)return Ce(1,0,s);Kt(s)}a.invokeEntryPoint=(s,p)=>{s=Tr.apply(null,[s,p]),0<pt?ue.ob(s):te(s)};function Wr(s){this.hb=s-24,this.tb=function(p){u()[this.hb+4>>>2>>>0]=p},this.sb=function(p){u()[this.hb+8>>>2>>>0]=p},this.ib=function(p,h){this.rb(),this.tb(p),this.sb(h)},this.rb=function(){u()[this.hb+16>>>2>>>0]=0}}var Hr=0,Nn=0;function Gr(s,p,h,x){return _?Ce(2,1,s,p,h,x):Lr(s,p,h,x)}function Lr(s,p,h,x){if(s>>>=0,p>>>=0,h>>>=0,x>>>=0,typeof SharedArrayBuffer>"u")return J("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var P=[];return _&&P.length===0?Gr(s,p,h,x):(s={Gb:h,Ya:s,ub:x,Mb:P},_?(s.Ob="spawnThread",postMessage(s,P),0):tt(s))}function Fr(s,p,h){return _?Ce(3,1,s,p,h):0}function jr(s,p){if(_)return Ce(4,1,s,p)}var Dt=s=>{for(var p=0,h=0;h<s.length;++h){var x=s.charCodeAt(h);127>=x?p++:2047>=x?p+=2:55296<=x&&57343>=x?(p+=4,++h):p+=3}return p},hr=(s,p,h,x)=>{if(h>>>=0,!(0<x))return 0;var P=h;x=h+x-1;for(var M=0;M<s.length;++M){var G=s.charCodeAt(M);if(55296<=G&&57343>=G){var oe=s.charCodeAt(++M);G=65536+((G&1023)<<10)|oe&1023}if(127>=G){if(h>=x)break;p[h++>>>0]=G}else{if(2047>=G){if(h+1>=x)break;p[h++>>>0]=192|G>>6}else{if(65535>=G){if(h+2>=x)break;p[h++>>>0]=224|G>>12}else{if(h+3>=x)break;p[h++>>>0]=240|G>>18,p[h++>>>0]=128|G>>12&63}p[h++>>>0]=128|G>>6&63}p[h++>>>0]=128|G&63}}return p[h>>>0]=0,h-P},Mt=(s,p,h)=>hr(s,o(),p,h);function qr(s,p){if(_)return Ce(5,1,s,p)}function Zt(s,p,h){if(_)return Ce(6,1,s,p,h)}function gr(s,p,h){return _?Ce(7,1,s,p,h):0}function Kr(s,p){if(_)return Ce(8,1,s,p)}function Yr(s,p,h){if(_)return Ce(9,1,s,p,h)}function yr(s,p,h,x){if(_)return Ce(10,1,s,p,h,x)}function Zr(s,p,h,x){if(_)return Ce(11,1,s,p,h,x)}function Et(s,p,h,x){if(_)return Ce(12,1,s,p,h,x)}function br(s){if(_)return Ce(13,1,s)}function wr(s,p){if(_)return Ce(14,1,s,p)}function vr(s,p,h){if(_)return Ce(15,1,s,p,h)}var Qt=()=>{if(!(0<pt))try{_?te(ae):Kt(ae)}catch(s){Ye(s)}};function Xt(s){s>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),s>>>2,s).value.then(Pt),s+=128,Atomics.store(n(),s>>>2,1))}a.__emscripten_thread_mailbox_await=Xt;var Pt=()=>{var s=A();if(s&&(Xt(s),!Pe))try{ce(),Qt()}catch(p){Ye(p)}};a.checkMailbox=Pt;var Jt=[],$t=s=>s%4===0&&(s%100!==0||s%400===0),Qr=[0,31,60,91,121,152,182,213,244,274,305,335],$r=[0,31,59,90,120,151,181,212,243,273,304,334];function Sr(s,p,h,x,P,M,G,oe){return _?Ce(16,1,s,p,h,x,P,M,G,oe):-52}function Xr(s,p,h,x,P,M,G){if(_)return Ce(17,1,s,p,h,x,P,M,G)}var xr=s=>{var p=Dt(s)+1,h=D(p);return h&&Mt(s,h,p),h},Rt=[],Jr=(s,p)=>{Rt.length=0;for(var h;h=o()[s++>>>0];){var x=h!=105;x&=h!=112,p+=x&&p%8?4:0,Rt.push(h==112?u()[p>>>2>>>0]:h==105?n()[p>>>2>>>0]:l()[p>>>3>>>0]),p+=x?8:4}return Rt},ut={},at=()=>{if(!er){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:v||"./this.program"},p;for(p in ut)ut[p]===void 0?delete s[p]:s[p]=ut[p];var h=[];for(p in s)h.push(`${p}=${s[p]}`);er=h}return er},er;function zt(s,p){if(_)return Ce(18,1,s,p);s>>>=0,p>>>=0;var h=0;return at().forEach((x,P)=>{var M=p+h;for(P=u()[s+4*P>>>2>>>0]=M,M=0;M<x.length;++M)r()[P++>>>0>>>0]=x.charCodeAt(M);r()[P>>>0>>>0]=0,h+=x.length+1}),0}function _r(s,p){if(_)return Ce(19,1,s,p);s>>>=0,p>>>=0;var h=at();u()[s>>>2>>>0]=h.length;var x=0;return h.forEach(P=>x+=P.length+1),u()[p>>>2>>>0]=x,0}function Cr(s){return _?Ce(20,1,s):52}function en(s,p,h,x){return _?Ce(21,1,s,p,h,x):52}function tr(s,p,h,x,P){return _?Ce(22,1,s,p,h,x,P):70}var Wn=[null,[],[]];function tn(s,p,h,x){if(_)return Ce(23,1,s,p,h,x);p>>>=0,h>>>=0,x>>>=0;for(var P=0,M=0;M<h;M++){var G=u()[p>>>2>>>0],oe=u()[p+4>>>2>>>0];p+=8;for(var Se=0;Se<oe;Se++){var pe=o()[G+Se>>>0],he=Wn[s];pe===0||pe===10?((s===1?j:J)(Vr(he,0)),he.length=0):he.push(pe)}P+=oe}return u()[x>>>2>>>0]=P,0}var rn=[31,29,31,30,31,30,31,31,30,31,30,31],nn=[31,28,31,30,31,30,31,31,30,31,30,31];function Hn(s){var p=Array(Dt(s)+1);return hr(s,p,0,p.length),p}var on=(s,p)=>{r().set(s,p>>>0)};function Ut(s,p,h,x){function P(k,se,ve){for(k=typeof k=="number"?k.toString():k||"";k.length<se;)k=ve[0]+k;return k}function M(k,se){return P(k,se,"0")}function G(k,se){function ve(Nt){return 0>Nt?-1:0<Nt?1:0}var Je;return(Je=ve(k.getFullYear()-se.getFullYear()))===0&&(Je=ve(k.getMonth()-se.getMonth()))===0&&(Je=ve(k.getDate()-se.getDate())),Je}function oe(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function Se(k){var se=k.ab;for(k=new Date(new Date(k.bb+1900,0,1).getTime());0<se;){var ve=k.getMonth(),Je=($t(k.getFullYear())?rn:nn)[ve];if(se>Je-k.getDate())se-=Je-k.getDate()+1,k.setDate(1),11>ve?k.setMonth(ve+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+se);break}}return ve=new Date(k.getFullYear()+1,0,4),se=oe(new Date(k.getFullYear(),0,4)),ve=oe(ve),0>=G(se,k)?0>=G(ve,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}s>>>=0,p>>>=0,h>>>=0,x>>>=0;var pe=u()[x+40>>>2>>>0];x={Kb:n()[x>>>2>>>0],Jb:n()[x+4>>>2>>>0],fb:n()[x+8>>>2>>>0],kb:n()[x+12>>>2>>>0],gb:n()[x+16>>>2>>>0],bb:n()[x+20>>>2>>>0],Wa:n()[x+24>>>2>>>0],ab:n()[x+28>>>2>>>0],Rb:n()[x+32>>>2>>>0],Ib:n()[x+36>>>2>>>0],Lb:pe?Me(pe):""},h=Me(h),pe={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var he in pe)h=h.replace(new RegExp(he,"g"),pe[he]);var me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),_e="January February March April May June July August September October November December".split(" ");pe={"%a":k=>me[k.Wa].substring(0,3),"%A":k=>me[k.Wa],"%b":k=>_e[k.gb].substring(0,3),"%B":k=>_e[k.gb],"%C":k=>M((k.bb+1900)/100|0,2),"%d":k=>M(k.kb,2),"%e":k=>P(k.kb,2," "),"%g":k=>Se(k).toString().substring(2),"%G":k=>Se(k),"%H":k=>M(k.fb,2),"%I":k=>(k=k.fb,k==0?k=12:12<k&&(k-=12),M(k,2)),"%j":k=>{for(var se=0,ve=0;ve<=k.gb-1;se+=($t(k.bb+1900)?rn:nn)[ve++]);return M(k.kb+se,3)},"%m":k=>M(k.gb+1,2),"%M":k=>M(k.Jb,2),"%n":()=>`\n`,"%p":k=>0<=k.fb&&12>k.fb?"AM":"PM","%S":k=>M(k.Kb,2),"%t":()=>"	","%u":k=>k.Wa||7,"%U":k=>M(Math.floor((k.ab+7-k.Wa)/7),2),"%V":k=>{var se=Math.floor((k.ab+7-(k.Wa+6)%7)/7);if(2>=(k.Wa+371-k.ab-2)%7&&se++,se)se==53&&(ve=(k.Wa+371-k.ab)%7,ve==4||ve==3&&$t(k.bb)||(se=1));else{se=52;var ve=(k.Wa+7-k.ab-1)%7;(ve==4||ve==5&&$t(k.bb%400-1))&&se++}return M(se,2)},"%w":k=>k.Wa,"%W":k=>M(Math.floor((k.ab+7-(k.Wa+6)%7)/7),2),"%y":k=>(k.bb+1900).toString().substring(2),"%Y":k=>k.bb+1900,"%z":k=>{k=k.Ib;var se=0<=k;return k=Math.abs(k)/60,(se?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Lb,"%%":()=>"%"},h=h.replace(/%%/g,"\\0\\0");for(he in pe)h.includes(he)&&(h=h.replace(new RegExp(he,"g"),pe[he](x)));return h=h.replace(/\\0\\0/g,"%"),he=Hn(h),he.length>p?0:(on(he,s),he.length-1)}var rr=s=>{try{s()}catch(p){Ve(p)}};function ie(){var s=m,p={};for(let[h,x]of Object.entries(s))p[h]=typeof x=="function"?function(){Vt.push(h);try{return x.apply(null,arguments)}finally{Pe||(Vt.pop(),Qe&&mt===1&&Vt.length===0&&(mt=0,pt+=1,rr(Ro),typeof Fibers<"u"&&Fibers.Sb()))}}:x;return p}var mt=0,Qe=null,it=0,Vt=[],Ir={},Ar={},an=0,nr=null,sn=[];function un(){return new Promise((s,p)=>{nr={resolve:s,reject:p}})}function dn(){var s=D(65548),p=s+12;u()[s>>>2>>>0]=p,u()[s+4>>>2>>>0]=p+65536,p=Vt[0];var h=Ir[p];return h===void 0&&(h=an++,Ir[p]=h,Ar[h]=p),p=h,n()[s+8>>>2>>>0]=p,s}function Gn(){var s=n()[Qe+8>>>2>>>0];return s=m[Ar[s]],--pt,s()}function or(s){if(!Pe){if(mt===0){var p=!1,h=!1;s((x=0)=>{if(!Pe&&(it=x,p=!0,h)){mt=2,rr(()=>ko(Qe)),typeof Browser<"u"&&Browser.jb.wb&&Browser.jb.resume(),x=!1;try{var P=Gn()}catch(oe){P=oe,x=!0}var M=!1;if(!Qe){var G=nr;G&&(nr=null,(x?G.reject:G.resolve)(P),M=!0)}if(x&&!M)throw P}}),h=!0,p||(mt=1,Qe=dn(),typeof Browser<"u"&&Browser.jb.wb&&Browser.jb.pause(),rr(()=>Po(Qe)))}else mt===2?(mt=0,rr(Bo),H(Qe),Qe=null,sn.forEach(x=>{if(!Pe)try{x(),Qt()}catch(P){Ye(P)}})):Ve(`invalid state: ${mt}`);return it}}function ln(s){return or(p=>{s().then(p)})}ue.ib();var i=[mr,Nr,Gr,Fr,jr,qr,Zt,gr,Kr,Yr,yr,Zr,Et,br,wr,vr,Sr,Xr,zt,_r,Cr,en,tr,tn],c={r:function(s,p,h){return ln(async()=>{await a.Ab(s,p,h)})},b:function(s,p,h){throw s>>>=0,new Wr(s).ib(p>>>0,h>>>0),Hr=s,Nn++,Hr},O:function(s){K(s>>>0,!C,1,!b,131072,!1),ue.pb()},n:function(s){s>>>=0,_?postMessage({cmd:"cleanupThread",thread:s}):ue.nb(ue.Qa[s])},K:Lr,i:Fr,U:jr,G:qr,I:Zt,y:gr,S:Kr,M:Yr,R:yr,p:Zr,H:Et,E:br,T:wr,F:vr,q:()=>1,C:function(s,p){s>>>=0,s==p>>>0?setTimeout(()=>Pt()):_?postMessage({targetThread:s,cmd:"checkMailbox"}):(s=ue.Qa[s])&&s.postMessage({cmd:"checkMailbox"})},L:function(s,p,h,x){p>>>=0,Jt.length=h,x=x>>>0>>>3;for(var P=0;P<h;P++)Jt[P]=l()[x+P>>>0];return s=0>s?Ot[-s-1]:i[s],ue.vb=p,p=s.apply(null,Jt),ue.vb=0,p},N:Xt,W:function(s){I&&ue.Qa[s>>>0].ref()},u:function(s,p,h){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,h>>>=0,s=new Date(1e3*s),n()[h>>>2>>>0]=s.getUTCSeconds(),n()[h+4>>>2>>>0]=s.getUTCMinutes(),n()[h+8>>>2>>>0]=s.getUTCHours(),n()[h+12>>>2>>>0]=s.getUTCDate(),n()[h+16>>>2>>>0]=s.getUTCMonth(),n()[h+20>>>2>>>0]=s.getUTCFullYear()-1900,n()[h+24>>>2>>>0]=s.getUTCDay(),s=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[h+28>>>2>>>0]=s},v:function(s,p,h){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,h>>>=0,s=new Date(1e3*s),n()[h>>>2>>>0]=s.getSeconds(),n()[h+4>>>2>>>0]=s.getMinutes(),n()[h+8>>>2>>>0]=s.getHours(),n()[h+12>>>2>>>0]=s.getDate(),n()[h+16>>>2>>>0]=s.getMonth(),n()[h+20>>>2>>>0]=s.getFullYear()-1900,n()[h+24>>>2>>>0]=s.getDay(),p=($t(s.getFullYear())?Qr:$r)[s.getMonth()]+s.getDate()-1|0,n()[h+28>>>2>>>0]=p,n()[h+36>>>2>>>0]=-(60*s.getTimezoneOffset()),p=new Date(s.getFullYear(),6,1).getTimezoneOffset();var x=new Date(s.getFullYear(),0,1).getTimezoneOffset();s=(p!=x&&s.getTimezoneOffset()==Math.min(x,p))|0,n()[h+32>>>2>>>0]=s},w:function(s){s>>>=0;var p=new Date(n()[s+20>>>2>>>0]+1900,n()[s+16>>>2>>>0],n()[s+12>>>2>>>0],n()[s+8>>>2>>>0],n()[s+4>>>2>>>0],n()[s>>>2>>>0],0),h=n()[s+32>>>2>>>0],x=p.getTimezoneOffset(),P=new Date(p.getFullYear(),6,1).getTimezoneOffset(),M=new Date(p.getFullYear(),0,1).getTimezoneOffset(),G=Math.min(M,P);return 0>h?n()[s+32>>>2>>>0]=+(P!=M&&G==x):0<h!=(G==x)&&(P=Math.max(M,P),p.setTime(p.getTime()+6e4*((0<h?G:P)-x))),n()[s+24>>>2>>>0]=p.getDay(),h=($t(p.getFullYear())?Qr:$r)[p.getMonth()]+p.getDate()-1|0,n()[s+28>>>2>>>0]=h,n()[s>>>2>>>0]=p.getSeconds(),n()[s+4>>>2>>>0]=p.getMinutes(),n()[s+8>>>2>>>0]=p.getHours(),n()[s+12>>>2>>>0]=p.getDate(),n()[s+16>>>2>>>0]=p.getMonth(),n()[s+20>>>2>>>0]=p.getYear(),s=p.getTime(),isNaN(s)?(n()[w()>>>2>>>0]=61,s=-1):s/=1e3,ye((ct=s,1<=+Math.abs(ct)?0<ct?+Math.floor(ct/4294967296)>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)),s>>>0},s:Sr,t:Xr,B:function(s,p,h){function x(pe){return(pe=pe.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?pe[1]:"GMT"}s>>>=0,p>>>=0,h>>>=0;var P=new Date().getFullYear(),M=new Date(P,0,1),G=new Date(P,6,1);P=M.getTimezoneOffset();var oe=G.getTimezoneOffset(),Se=Math.max(P,oe);u()[s>>>2>>>0]=60*Se,n()[p>>>2>>>0]=+(P!=oe),s=x(M),p=x(G),s=xr(s),p=xr(p),oe<P?(u()[h>>>2>>>0]=s,u()[h+4>>>2>>>0]=p):(u()[h>>>2>>>0]=p,u()[h+4>>>2>>>0]=s)},e:()=>{Ve("")},c:function(s,p,h){return s>>>=0,p=Jr(p>>>0,h>>>0),Ot[s].apply(null,p)},k:function(s,p,h){return s>>>=0,p=Jr(p>>>0,h>>>0),Ot[s].apply(null,p)},o:()=>{},j:()=>Date.now(),V:()=>{throw pt+=1,"unwind"},D:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),h:()=>I?(Go(),ar(Ho)).cpus().length:navigator.hardwareConcurrency,A:function(s){s>>>=0;var p=o().length;if(s<=p||4294901760<s)return!1;for(var h=1;4>=h;h*=2){var x=p*(1+.2/h);x=Math.min(x,s+100663296);var P=Math;x=Math.max(s,x);e:{P=(P.min.call(P,4294901760,x+(65536-x%65536)%65536)-re.buffer.byteLength+65535)/65536;try{re.grow(P),He();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},P:zt,Q:_r,J:Kt,g:Cr,m:en,x:tr,l:tn,a:re||a.wasmMemory,z:Ut,d:function(s,p,h,x){return Ut(s>>>0,p>>>0,h>>>0,x>>>0)}},m=function(){function s(h,x){return m=h.exports,m=ie(),m=Ku(),ue.qb.push(m.Da),be.unshift(m.X),Ae=x,je(),m}var p={a:c};if(Ge++,a.instantiateWasm)try{return a.instantiateWasm(p,s)}catch(h){J(`Module.instantiateWasm callback failed with error: ${h}`),g(h)}return qe(p,function(h){s(h.instance,h.module)}).catch(g),{}}();a._OrtInit=(s,p)=>(a._OrtInit=m.Y)(s,p),a._OrtGetLastError=(s,p)=>(a._OrtGetLastError=m.Z)(s,p),a._OrtCreateSessionOptions=(s,p,h,x,P,M,G,oe,Se,pe)=>(a._OrtCreateSessionOptions=m._)(s,p,h,x,P,M,G,oe,Se,pe),a._OrtAppendExecutionProvider=(s,p)=>(a._OrtAppendExecutionProvider=m.$)(s,p),a._OrtAddFreeDimensionOverride=(s,p,h)=>(a._OrtAddFreeDimensionOverride=m.aa)(s,p,h),a._OrtAddSessionConfigEntry=(s,p,h)=>(a._OrtAddSessionConfigEntry=m.ba)(s,p,h),a._OrtReleaseSessionOptions=s=>(a._OrtReleaseSessionOptions=m.ca)(s),a._OrtCreateSession=(s,p,h)=>(a._OrtCreateSession=m.da)(s,p,h),a._OrtReleaseSession=s=>(a._OrtReleaseSession=m.ea)(s),a._OrtGetInputOutputCount=(s,p,h)=>(a._OrtGetInputOutputCount=m.fa)(s,p,h),a._OrtGetInputName=(s,p)=>(a._OrtGetInputName=m.ga)(s,p),a._OrtGetOutputName=(s,p)=>(a._OrtGetOutputName=m.ha)(s,p),a._OrtFree=s=>(a._OrtFree=m.ia)(s),a._OrtCreateTensor=(s,p,h,x,P,M)=>(a._OrtCreateTensor=m.ja)(s,p,h,x,P,M),a._OrtGetTensorData=(s,p,h,x,P)=>(a._OrtGetTensorData=m.ka)(s,p,h,x,P),a._OrtReleaseTensor=s=>(a._OrtReleaseTensor=m.la)(s),a._OrtCreateRunOptions=(s,p,h,x)=>(a._OrtCreateRunOptions=m.ma)(s,p,h,x),a._OrtAddRunConfigEntry=(s,p,h)=>(a._OrtAddRunConfigEntry=m.na)(s,p,h),a._OrtReleaseRunOptions=s=>(a._OrtReleaseRunOptions=m.oa)(s),a._OrtCreateBinding=s=>(a._OrtCreateBinding=m.pa)(s),a._OrtBindInput=(s,p,h)=>(a._OrtBindInput=m.qa)(s,p,h),a._OrtBindOutput=(s,p,h,x)=>(a._OrtBindOutput=m.ra)(s,p,h,x),a._OrtClearBoundOutputs=s=>(a._OrtClearBoundOutputs=m.sa)(s),a._OrtReleaseBinding=s=>(a._OrtReleaseBinding=m.ta)(s),a._OrtRunWithBinding=(s,p,h,x,P)=>(a._OrtRunWithBinding=m.ua)(s,p,h,x,P),a._OrtRun=(s,p,h,x,P,M,G,oe)=>(a._OrtRun=m.va)(s,p,h,x,P,M,G,oe),a._OrtEndProfiling=s=>(a._OrtEndProfiling=m.wa)(s),a._JsepOutput=(s,p,h)=>(a._JsepOutput=m.xa)(s,p,h),a._JsepGetNodeName=s=>(a._JsepGetNodeName=m.ya)(s);var w=()=>(w=m.za)(),A=a._pthread_self=()=>(A=a._pthread_self=m.Aa)(),D=a._malloc=s=>(D=a._malloc=m.Ba)(s),H=a._free=s=>(H=a._free=m.Ca)(s);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=m.Da)();var K=a.__emscripten_thread_init=(s,p,h,x,P,M)=>(K=a.__emscripten_thread_init=m.Fa)(s,p,h,x,P,M);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=m.Ga)();var Y=(s,p,h,x)=>(Y=m.Ha)(s,p,h,x),q=s=>(q=m.Ia)(s),te=a.__emscripten_thread_exit=s=>(te=a.__emscripten_thread_exit=m.Ja)(s),ce=()=>(ce=m.Ka)(),ye=s=>(ye=m.La)(s),O=(s,p)=>(O=m.Ma)(s,p),ne=()=>(ne=m.Na)(),we=s=>(we=m.Oa)(s),ft=s=>(ft=m.Pa)(s),Tr=a.dynCall_ii=(s,p)=>(Tr=a.dynCall_ii=m.Ra)(s,p),Po=s=>(Po=m.Sa)(s),Ro=()=>(Ro=m.Ta)(),ko=s=>(ko=m.Ua)(s),Bo=()=>(Bo=m.Va)();a.___start_em_js=1368107,a.___stop_em_js=1368268;function Ku(){var s=m;s=Object.assign({},s);var p=x=>()=>x()>>>0,h=x=>P=>x(P)>>>0;return s.za=p(s.za),s.Aa=p(s.Aa),s.Ba=h(s.Ba),s.emscripten_main_runtime_thread_id=p(s.emscripten_main_runtime_thread_id),s.Na=p(s.Na),s.Pa=h(s.Pa),s}a.wasmMemory=re,a.stackAlloc=ft,a.stackSave=ne,a.stackRestore=we,a.keepRuntimeAlive=()=>0<pt,a.UTF8ToString=Me,a.stringToUTF8=Mt,a.lengthBytesUTF8=Dt,a.ExitStatus=Ft,a.PThread=ue;var cn;lt=function s(){cn||Do(),cn||(lt=s)};function Do(){if(!(0<Ge))if(_)f(a),_||Yt(be),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)ee.unshift(a.preRun.shift());Yt(ee),0<Ge||cn||(cn=!0,a.calledRun=!0,Pe||(_||Yt(be),f(a),_||Yt(bt)))}}return Do(),t.ready}})();typeof Fo=="object"&&typeof Zn=="object"?Zn.exports=Lo:typeof define=="function"&&define.amd&&define([],()=>Lo)});var qo=Er((ep,nd)=>{nd.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\\n\'});var Jn,rt,Pr,fn,Rr,Jo,eo,Ne=X(()=>{"use strict";Jn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},rt=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Pr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],fn=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Rr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Jo=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",eo=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var hn=X(()=>{"use strict"});var ta=X(()=>{"use strict";hn()});var ra,na=X(()=>{"use strict";ra="1.18.0"});var oa,Wt,to=X(()=>{"use strict";na();oa="warning",Wt={wasm:{},webgl:{},webgpu:{},versions:{common:ra},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);oa=e}},get logLevel(){return oa}};Object.defineProperty(Wt,"logLevel",{enumerable:!0})});var ir,aa=X(()=>{"use strict";to();ir=Wt});var ia=X(()=>{"use strict"});var sa=X(()=>{"use strict";gn()});var da=X(()=>{"use strict"});var la=X(()=>{"use strict";gn()});var gn=X(()=>{"use strict";ia();sa();da();la()});var yn=X(()=>{"use strict";gn()});var ro,ca,Ht,Gt,no=X(()=>{"use strict";to();ro=(e,t)=>{Wt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},ca=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let n=0;n<r.length;n++){if(o&&!r[n].includes("TRACE_FUNC")){let u=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(u+=`::${t}`),ro("CPU",u);return}r[n].includes("TRACE_FUNC")&&(o=!0)}},Ht=e=>{Wt.wasm.trace&&ca("BEGIN",e)},Gt=e=>{Wt.wasm.trace&&ca("END",e)}});var pa=X(()=>{"use strict";hn();yn();no()});var ma=X(()=>{"use strict";pa()});var fa=X(()=>{"use strict"});var ha=X(()=>{"use strict";hn();yn()});var ga=X(()=>{"use strict";ha()});var sr=X(()=>{"use strict";ta();aa();ma();yn();no();fa();ga()});var fd,hd,ya,ba,wa,gd,ke,kt=X(()=>{"use strict";Ne();fd=["V","I","W","E","F"],hd=(e,t)=>{console.log(`[${fd[e]},${new Date().toISOString()}]${t}`)},wa=(e,t)=>{ya=e,ba=t},gd=(e,t)=>{let r=Rr(e),o=Rr(ya);r>=o&&hd(r,typeof t=="function"?t():t)},ke=(...e)=>{ba&&gd(...e)}});var va,$a=X(()=>{"use strict";Ne();va=(e,t)=>new(fn(t))(e)});var ur=X(()=>{"use strict"});var bn,yd,Sa,ao,oo,Ca,Ia=X(()=>{"use strict";kt();ur();bn=e=>Math.ceil(e/16)*16,yd=1,Sa=()=>yd++,ao=async(e,t,r,o)=>{let n=bn(r),u=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let d=e.getCommandEncoder();e.endComputePass(),d.copyBufferToBuffer(t,0,u,0,n),e.flush(),await u.mapAsync(GPUMapMode.READ);let l=u.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(l,0,r)),a}else return new Uint8Array(l.slice(0,r))}finally{u.destroy()}},oo=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,u=r.byteLength,d=bn(u),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==u)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${u}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:d,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),f=a.getMappedRange();new Uint8Array(f).set(new Uint8Array(o,n,u)),a.unmap();let g=this.backend.getCommandEncoder();this.backend.endComputePass(),g.copyBufferToBuffer(a,0,l.gpuData.buffer,0,d),ke("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let u=bn(o.originalSize),d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,u)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return ke("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);this.externalBuffers.delete(o)}else n=Sa();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),ke("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),ke("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=bn(t),n,u=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,d=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(u||d){let a=u?this.freeBuffers:this.freeUniformBuffers,f=a.get(o);f||(f=[],a.set(o,f)),f.length>0?n=f.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let l={id:Sa(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),ke("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return ke("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await ao(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.status===0){for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(o=>{o.destroy()}),this.capturedPendingBuffers.delete(t))}},Ca=(...e)=>new oo(...e)});var io,fe,Fe=X(()=>{"use strict";io=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},fe=e=>new io(e)});var so,St,N,Lt,wn,vn,$n,xe=X(()=>{"use strict";so=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},St=class{static calcShape(t,r,o=!1){let n=t.length,u=r.length;if(n===0)return r;if(u===0)return t;let d=Math.max(t.length,r.length),l=new Array(d);if(o){if(n<2||u<2)return;let a=so.calcMatMulShape([t[n-2],t[n-1]],[r[u-2],r[u-1]]);if(a===void 0)return;[l[d-2],l[d-1]]=a}for(let a=o?3:1;a<=d;a++){let f=n-a<0?1:t[n-a],g=u-a<0?1:r[u-a];if(f!==g&&f>1&&g>1)return;l[d-a]=Math.max(f,g)}return l}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let u=1;u<=o;u++)if(t[o-u]!==1&&t[o-u]!==r[n-u])return!1;return!0}},N=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let u=r;u<o;u++){if(t[u]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[u]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,u)=>n+r[u]+r[u+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Lt=class e{static adjustPoolAttributes(t,r,o,n,u,d){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=o.length?o.push(r[l+2]):o[l]=r[l+2];for(let l=0;l<o.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<o.length;l++)if(l<u.length){if(u[l]<0)throw new Error("dilations should be greater than or equal to 1")}else u.push(1);for(let l=0;l<o.length*2;l++)if(l<d.length){if(d[l]<0)throw new Error("pad should be greater than or equal to 1")}else d.push(0);for(let l=0;l<o.length;l++){if(o[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(d[l]>=o[l]||d[l+o.length]>=o[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,u,d,l){if(l){if(u.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(d?1:2)],r[a],o[a],n[a],u,a,a+t.length-2,l)}}static computePoolOutputShape(t,r,o,n,u,d,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,u,d,l),a}static computeConvOutputShape(t,r,o,n,u,d,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,u,d,l),a}static computeShapeHelper(t,r,o,n,u,d,l,a){if(t)for(let f=0;f<r.length-2;f++)o.push(1);else for(let f=0;f<r.length-2;f++)o.push(e.adjustPadAndReturnShape(r[f+2],n[f],u[f],d[f],l,f,f+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,u,d,l,a){let f=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return u[d]=0,u[l]=0,Math.floor((t-f)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+n-t;return u[d]=Math.floor(a==="SAME_LOWER"?(y+1)/2:y/2),u[l]=y-u[d],Math.floor((t+y-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+u[d]+u[l]-f)/r+1)}},wn=class{static getShapeOfGemmResult(t,r,o,n,u){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let d,l,a;r?(d=t[1],l=t[0]):(d=t[0],l=t[1]);let f=-1;if(n?(a=o[0],f=1):(a=o[1],f=0),o[f]!==l)throw new Error("dimension mismatch");if(d<=0||a<=0||l<=0)throw new Error("invalid shape specified");if(u&&!St.isValidBroadcast(u,[d,a]))throw new Error("gemm: invalid bias shape for broadcast");return[d,a,l]}},vn=-34028234663852886e22,$n=34028234663852886e22});var bd,lo,Le,ht,F,We,Xe,gt,nt,de,co,U,Q,Sn,uo,Aa,dr,Be,$e=X(()=>{"use strict";Ne();xe();bd=64,lo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Le=(e,t=1)=>{let r=lo(e,t);return typeof r=="string"?r:r[0]},ht=(e,t=1)=>{let r=lo(e,t);return typeof r=="string"?r:r[1]},F=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:N.computeStrides(e)}],We=e=>e%4===0?4:e%2===0?2:1,Xe=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,gt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,nt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,de=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,co=(e,t,r,o,n)=>{let u=typeof r=="number",d=u?r:r.length,l=[...new Array(d).keys()],a=d<2?"u32":d<=4?`vec${d}<u32>`:`array<u32, ${d}>`,f=lo(t,n),g=typeof f=="string"?f:f[1],y=typeof f=="string"?f:f[0],v={indices:a,value:g,storage:y,tensor:t},$=L=>typeof L=="string"?L:`${L}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},C=u?"uniforms.":"",I=`${C}${e}_shape`,_=`${C}${e}_strides`,S="";for(let L=0;L<d-1;L++)S+=`\n    let dim${L} = current / ${de(_,L,d)};\n    let rest${L} = current % ${de(_,L,d)};\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;S+=`indices[${d-1}] = current;`;let E=d<2?"":`\n  fn o2i_${e}(offset: u32) -> ${v.indices} {\n    var indices: ${v.indices};\n    var current = offset;\n    ${S}\n    return indices;\n  }`,T=L=>(b.offsetToIndices=!0,d<2?L:`o2i_${e}(${L})`),z=[];if(d>=2)for(let L=d-1;L>=0;L--)z.push(`${de(_,L,d)} * (indices[${L}])`);let B=d<2?"":`\n  fn i2o_${e}(indices: ${v.indices}) -> u32 {\n    return ${z.join("+")};\n  }`,V=L=>(b.indicesToOffset=!0,d<2?L:`i2o_${e}(${L})`),W=(...L)=>d===0?"0u":`${v.indices}(${L.map($).join(",")})`,Z=(L,ee)=>d<2?`${L}`:`${de(L,ee,d)}`,R=(L,ee,be)=>d<2?`${L}=${be};`:`${de(L,ee,d)}=${be};`,j={},J=(L,ee)=>{b.broadcastedIndicesToOffset=!0;let be=`${ee.name}broadcastedIndicesTo${e}Offset`;if(be in j)return`${be}(${L})`;let bt=[];for(let Ge=d-1;Ge>=0;Ge--){let ot=ee.indicesGet("outputIndices",Ge+ee.rank-d);bt.push(`${Z(_,Ge)} * (${ot} % ${Z(I,Ge)})`)}return j[be]=`fn ${be}(outputIndices: ${ee.type.indices}) -> u32 {\n             return ${bt.length>0?bt.join("+"):"0u"};\n           }`,`${be}(${L})`},re=(L,ee)=>(()=>{if(v.storage===v.value)return`${e}[${L}]=${ee};`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${ee}), select(0u, 0xFFFFFFFFu, ${ee} < 0));`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${ee}), 0u);`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ee}));`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),Ae=L=>(()=>{if(v.storage===v.value)return`${e}[${L}]`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`i32(${e}[${L}].x)`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`u32(${e}[${L}].x)`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),Pe=d<2?"":`\n  fn get_${e}ByIndices(indices: ${v.indices}) -> ${g} {\n    return ${Ae(`i2o_${e}(indices)`)};\n  }`,ae=d<2?"":(()=>{let L=l.map(be=>`d${be}: u32`).join(", "),ee=l.map(be=>`d${be}`).join(", ");return`\n  fn get_${e}(${L}) -> ${g} {\n    return get_${e}ByIndices(${W(ee)});\n  }`})(),Ee=(...L)=>{if(L.length!==d)throw new Error(`indices length must be ${d}`);let ee=L.map($).join(",");return d===0?Ae("0u"):d===1?Ae(ee[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${ee})`)},De=L=>d<2?Ae(L):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${L})`),le=d<2?"":`\n  fn set_${e}ByIndices(indices: ${v.indices}, value: ${g}) {\n    ${re(`i2o_${e}(indices)`,"value")}\n  }`,ge=d<2?"":(()=>{let L=l.map(be=>`d${be}: u32`).join(", "),ee=l.map(be=>`d${be}`).join(", ");return`\n  fn set_${e}(${L}, value: ${g}) {\n    set_${e}ByIndices(${W(ee)}, value);\n  }`})();return{impl:()=>{let L=[],ee=!1;return b.offsetToIndices&&(L.push(E),ee=!0),b.indicesToOffset&&(L.push(B),ee=!0),b.broadcastedIndicesToOffset&&(Object.values(j).forEach(be=>L.push(be)),ee=!0),b.set&&(L.push(ge),ee=!0),b.setByIndices&&(L.push(le),ee=!0),b.get&&(L.push(ae),ee=!0),b.getByIndices&&(L.push(Pe),ee=!0),!u&&ee&&L.unshift(`const ${I} = ${v.indices}(${r.join(",")});`,`const ${_} = ${v.indices}(${N.computeStrides(r).join(",")});`),L.join(`\n`)},type:v,offsetToIndices:T,indicesToOffset:V,broadcastedIndicesToOffset:J,indices:W,indicesGet:Z,indicesSet:R,set:(...L)=>{if(L.length!==d+1)throw new Error(`indices length must be ${d}`);let ee=L[d];if(typeof ee!="string")throw new Error("value must be string");let be=L.slice(0,d).map($).join(",");return d===0?re("0u",ee):d===1?re(be[0],ee):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${be}, ${ee})`)},setByOffset:re,setByIndices:(L,ee)=>d<2?re(L,ee):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${ee});`),get:Ee,getByOffset:Ae,getByIndices:De,usage:o,name:e,strides:_,shape:I,rank:d}},U=(e,t,r,o=1)=>co(e,t,r,"input",o),Q=(e,t,r,o=1)=>co(e,t,r,"output",o),Sn=(e,t,r,o=1)=>co(e,t,r,"internal",o),uo=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=bd){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],u=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,d=u?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=u?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${d}) {\n    ${l}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let u=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${u}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},Aa=e=>new uo(e),dr=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let u=r-1-n,d=e[u]||1;(t[t.length-1-n]||1)>1&&d===1&&o.unshift(u)}return o},Be=e=>!0});var wd,Ta,vd,$d,dt,Ea,Oa,lr=X(()=>{"use strict";xe();Fe();$e();wd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Ta=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,vd=(e,t)=>N.sortBasedOnPerm(e,Ta(e.length,t)),$d=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let u=0;u<t;++u)n.push(r.indicesSet("a",e[u],`i[${u}]`));return n.push("return a;}"),n.join(`\n`)},dt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Ta(o,t),u=Be(o),d=vd(e.dims,n),l=u?d.length:d,a=u?o:e.dims,f=Q("output",r,l),g=U("a",r,a),y=v=>`\n  ${v.registerUniform("output_size","u32").declareVariables(g,f)}\n\n  ${$d(n,o,g,f)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${f.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${f.setByOffset("global_idx",g.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:u?["rank"]:["dims"]},getRunData:v=>{let $=N.size(d);return{outputs:[{dims:d,dataType:v[0].dataType}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:u?[{type:"uint32",data:$},...F(v[0].dims),...F(d)]:[{type:"uint32",data:$}]}},getShaderSource:y}},Ea=(e,t)=>{wd(e.inputs),e.compute(dt(e.inputs[0],t.perm))},Oa=e=>fe({perm:e.perm})});var Sd,xd,_d,Cd,Id,Ad,Td,Ed,Od,Pd,xt,Pa,Ra,ka,Ba,Da,Ma,za,Ua,Va,Na,Wa=X(()=>{"use strict";xe();$e();xn();lr();Sd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},xd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},_d={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Cd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Id=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},Ad=(e,t)=>{let r=[],o=e.length;for(let u=0;u<o;u++)t.indexOf(u)===-1&&r.push(e[u]);let n=t.map(u=>e[u]);return[r,n]},Td=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let u=0;u<r;u++)t.indexOf(u)===-1?o.push(e[n++]):o.push(1);return o},Ed=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Od=(e,t)=>{let r=[];if(!Ed(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},Pd=(e,t,r,o,n,u,d)=>{let l=r[0].dims,a=N.size(u),f=N.size(d),g=U("_A",r[0].dataType,l),y=Q("output",n,u),v=32,$=`\n          var<workgroup> aBestValues : array<${y.type.storage}, ${v}>;\n       `;return{name:e,shaderCache:t,getShaderSource:C=>`\n        ${C.registerUniform("reduceSize","u32").declareVariables(g,y)}\n        ${$}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${C.mainStart(v)}\n\n          let outputIndex = global_idx / ${v};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${y.type.storage}(${_d[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${v}) {\n           let candidate = ${y.type.storage}(${g.getByOffset("offset + k")});\n           bestValue = ${Sd[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${v}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${xd[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${y.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${Cd[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:f}]})}},xt=(e,t,r,o)=>{let n=e.inputs.length===1?r:po(e.inputs,r),u=n.axes;u.length===0&&!n.noopWithEmptyAxes&&(u=e.inputs[0].dims.map(($,b)=>b));let d=N.normalizeAxes(u,e.inputs[0].dims.length),l=d,a=e.inputs[0],f=Od(l,e.inputs[0].dims.length);f.length>0&&(a=e.compute(dt(e.inputs[0],f),{inputs:[0],outputs:[-1]})[0],l=Id(l.length,a.dims.length));let[g,y]=Ad(a.dims,l),v=g;n.keepDims&&(v=Td(g,d)),e.compute(Pd(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,v,y),{inputs:[a]})},Pa=(e,t)=>{xt(e,"ReduceMeanShared",t,"mean")},Ra=(e,t)=>{xt(e,"ReduceL1Shared",t,"l1")},ka=(e,t)=>{xt(e,"ReduceL2Shared",t,"l2")},Ba=(e,t)=>{xt(e,"ReduceLogSumExpShared",t,"logSumExp")},Da=(e,t)=>{xt(e,"ReduceMaxShared",t,"max")},Ma=(e,t)=>{xt(e,"ReduceMinShared",t,"min")},za=(e,t)=>{xt(e,"ReduceProdShared",t,"prod")},Ua=(e,t)=>{xt(e,"ReduceSumShared",t,"sum")},Va=(e,t)=>{xt(e,"ReduceSumSquareShared",t,"sumSquare")},Na=(e,t)=>{xt(e,"ReduceLogSumShared",t,"logSum")}});var _t,Rd,_n,po,Ct,kd,Bd,Dd,Md,zd,Ud,Vd,Nd,Wd,Hd,It,Ha,Ga,La,Fa,ja,qa,Ka,Ya,Za,Qa,xn=X(()=>{"use strict";xe();Fe();$e();Wa();_t=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Rd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],_n=(e,t,r,o,n,u,d=!1,l=!1)=>{let a=[],f=r[0].dims,g=f.length,y=N.normalizeAxes(n,g),v=!l&&y.length===0;f.forEach((I,_)=>{v||y.indexOf(_)>=0?d&&a.push(1):a.push(I)});let $=a.length,b=N.size(a);return{name:e,shaderCache:t,getShaderSource:I=>{let _=[],S=U("_A",r[0].dataType,g),E=Q("output",u,$),T=o(S,E,y),z=T[2];for(let B=0,V=0;B<g;B++)v||y.indexOf(B)>=0?(d&&V++,z=`for(var j${B}: u32 = 0; j${B} < ${f[B]}; j${B}++) {\n                  ${T[2].includes("last_index")?`let last_index = j${B};`:""}\n                  ${S.indicesSet("input_indices",B,`j${B}`)}\n                  ${z}\n                }`):(_.push(`${S.indicesSet("input_indices",B,E.indicesGet("output_indices",V))};`),V++);return`\n\n        ${I.registerUniform("output_size","u32").declareVariables(S,E)}\n\n        ${I.mainStart()}\n          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${S.type.indices};\n          let output_indices = ${E.offsetToIndices("global_idx")};\n\n          ${_.join(`\n`)}\n          ${T[0]}       // init ops for reduce max/min\n          ${T[1]}\n          ${z}\n          ${T[3]}\n          ${T.length===4?E.setByOffset("global_idx","value"):T.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:"uint32",data:b},...F(f),...F(a)]})}},po=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),fe({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},Ct=(e,t,r,o)=>{let n=e.inputs,u=n.length===1?r:po(n,r);e.compute(_n(t,{hint:u.cacheKey,inputDependencies:["rank"]},[n[0]],u.noopWithEmptyAxes&&u.axes.length===0?Rd:o,u.axes,n[0].dataType,u.keepDims,u.noopWithEmptyAxes),{inputs:[0]})},kd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},Bd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},Dd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Md=(e,t)=>{_t(e.inputs),Ct(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},zd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceMax",t,(o,n,u)=>{let d=[];for(let l=0;l<o.rank;l++)(u.indexOf(l)>=0||u.length===0)&&d.push(o.indicesSet("input_indices",l,0));return[`${d.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},Ud=(e,t)=>{_t(e.inputs),Ct(e,"ReduceMean",t,(o,n,u)=>{let d=1;for(let l=0;l<o.rank;l++)(u.indexOf(l)>=0||u.length===0)&&(d*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${d});`]})},Vd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceMin",t,(o,n,u)=>{let d=[];for(let l=0;l<o.rank;l++)(u.indexOf(l)>=0||u.length===0)&&d.push(`input_indices[${l}] = 0;`);return[`${d.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},Nd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},Wd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Hd=(e,t)=>{_t(e.inputs),Ct(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},It=(e,t,r)=>{if(t.length===0)return r;let o=1,n=1;for(let u=0;u<t.length;u++)t.indexOf(u)===-1?o*=e[u]:n*=e[u];return n<32&&o>1024},Ha=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ud(e,t):Pa(e,t)},Ga=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):Ra(e,t)},La=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dd(e,t):ka(e,t)},Fa=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):Ba(e,t)},ja=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):Da(e,t)},qa=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Vd(e,t):Ma(e,t)},Ka=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nd(e,t):za(e,t)},Ya=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wd(e,t):Ua(e,t)},Za=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Hd(e,t):Va(e,t)},Qa=(e,t)=>{It(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):Na(e,t)}});var Xa,Ja,ei,mo,ti=X(()=>{"use strict";Ne();Fe();xn();Xa=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ja=(e,t)=>{Xa(e.inputs);let r=(o,n,u)=>{let d=[];for(let l=0;l<o.rank;l++)(u.indexOf(l)>=0||u.length===0)&&d.push(`input_indices[${l}] = 0;`);return[`${d.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(_n("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ei=(e,t)=>{Xa(e.inputs);let r=(o,n,u)=>{let d=[];for(let l=0;l<o.rank;l++)(u.indexOf(l)>=0||u.length===0)&&d.push(`input_indices[${l}] = 0;`);return[`${d.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(_n("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},mo=e=>fe(e)});var Gd,Ld,Fd,jd,Cn,qd,ri,fo=X(()=>{"use strict";Ne();ur();$e();Gd=(e,t)=>{let r=e[0],o=e[1],n=e[2],u=e[3],d=e[4],l=e[5];if(d&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],f=r.dims[1],g=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==g)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let y=n.dims[0]/3,v=y,$=v;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of t.qkvHiddenSizes)if(E%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],v=t.qkvHiddenSizes[1],$=t.qkvHiddenSizes[2]}let b=f;if(y!==v)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==y+v+$)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let C=0;if(d){if(v!==$)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(d.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(d.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(d.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(d.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(d.dims[4]!==v/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(C=d.dims[3])}let I=b+C,_=-1,S=0;if(u)throw new Error("Mask not supported");if(d)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:f,pastSequenceLength:C,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:_,inputHiddenSize:g,hiddenSize:y,vHiddenSize:$,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor($/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ld=(e,t,r,o)=>{let n=We(o),u=64,d=o/n;d<u?u=1:d/8<64&&(u=Math.ceil(d/8));let l=Math.ceil(o/n/u),f=[{type:rt(t.dataType),data:1/o},{type:"uint32",data:d},{type:"uint32",data:l}],g=Le(t.dataType,n),y=v=>{let $=Q("x",t.dataType,t.dims,n),b="thread_max_vector";n===2?b="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(b="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let C=ht(t.dataType),I=[{name:"d_inv",type:C},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${u}>;\n  var<workgroup> wgSum: array<f32, ${u}>;\n  ${v.registerUniforms(I).declareVariables($)}\n  ${v.mainStart([u,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${Xe("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${gt(C,n,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${b};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${u}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Xe("f32",n,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${gt(C,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${nt("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${u}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${Xe("f32",n,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${gt(C,n,"x[offset + i]")};\n        x[offset + i] = ${$.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${g};${n}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:f})},{inputs:[t],outputs:[]})},Fd=(e,t,r,o,n,u)=>{let d=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=u.scale===0?1/Math.sqrt(n.headSize):u.scale,a=We(n.headSize),f=n.headSize/a,g=12,y={x:Math.ceil(n.totalSequenceLength/g),y:Math.ceil(n.sequenceLength/g),z:n.batchSize*n.numHeads},v=rt(t.dataType),$=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:f},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.kvSequenceLength},{type:v,data:l}],b=[t,r],C=_=>{let S=U("q",t.dataType,t.dims,a),E=U("key",r.dataType,r.dims,a),T=Q("output",t.dataType,d),z=Le(t.dataType),B=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:z}];return`\n  const beta: ${z} = 1.0;\n  const TILE_SIZE = ${g}u;\n\n  var<workgroup> tileQ: array<${S.type.storage}, ${g*g}>;\n  var<workgroup> tileK: array<${S.type.storage}, ${g*g}>;\n  ${_.registerUniforms(B).declareVariables(S,E,T)}\n  ${_.mainStart([g,g,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${Xe(z,a)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${nt("value",a)} * uniforms.alpha;\n    }\n  }`},I=e.compute({name:"AttentionProbs",shaderCache:{hint:`${a}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:y,programUniforms:$}),getShaderSource:C},{inputs:b,outputs:[-1]})[0];return Ld(e,I,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),I},jd=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],u=12,d={x:Math.ceil(o.vHeadSize/u),y:Math.ceil(o.sequenceLength/u),z:o.batchSize*o.numHeads},l=[{type:"uint32",data:o.sequenceLength},{type:"uint32",data:o.totalSequenceLength},{type:"uint32",data:o.vHeadSize},{type:"uint32",data:o.numHeads},{type:"uint32",data:o.vHiddenSize}],a=f=>{let g=U("probs",t.dataType,t.dims),y=U("v",r.dataType,r.dims),v=Q("output",t.dataType,n),$=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileQ: array<${g.type.value}, ${u*u}>;\n  var<workgroup> tileK: array<${g.type.value}, ${u*u}>;\n  ${f.registerUniforms($).declareVariables(g,y,v)}\n  ${f.mainStart([u,u,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${g.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:l}),getShaderSource:a},{inputs:[t,r],outputs:[0]})[0]},Cn=(e,t,r,o,n,u,d,l,a,f,g)=>{let y=Fd(e,t,r,a,f,g);jd(e,y,o,f)},qd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,n=t.inputHiddenSize,u=t.headSize,d=12,l={x:Math.ceil(t.headSize/d),y:Math.ceil(t.sequenceLength/d),z:t.batchSize*t.numHeads},a=[e.inputs[0],e.inputs[1],e.inputs[2]],f=[{type:"uint32",data:o},{type:"uint32",data:n},{type:"uint32",data:u},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],g=y=>{let v=Q("output_q",a[0].dataType,r),$=Q("output_k",a[0].dataType,r),b=Q("output_v",a[0].dataType,r),C=U("input",a[0].dataType,a[0].dims),I=U("weight",a[1].dataType,a[1].dims),_=U("bias",a[2].dataType,a[2].dims),S=C.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${d}u;\n  var<workgroup> tileInput: array<${S}, ${d*d}>;\n  var<workgroup> tileWeightQ: array<${S}, ${d*d}>;\n  var<workgroup> tileWeightK: array<${S}, ${d*d}>;\n  var<workgroup> tileWeightV: array<${S}, ${d*d}>;\n  ${y.registerUniforms(E).declareVariables(C,I,_,v,$,b)}\n  ${y.mainStart([d,d,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${S}(0);\n    var valueK = ${S}(0);\n    var valueV = ${S}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:l,programUniforms:f}),getShaderSource:g},{inputs:a,outputs:[-1,-1,-1]})},ri=(e,t)=>{let r=Gd(e.inputs,t),[o,n,u]=qd(e,r);return Cn(e,o,n,u,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Kd,Yd,Zd,ni,oi=X(()=>{"use strict";sr();xe();Fe();$e();Kd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,u)=>{let d=n.length;if(d!==o.length)throw new Error(`${u}: num dimensions != ${d}`);n.forEach((l,a)=>{if(l!==o[a])throw new Error(`${u}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Yd=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,u=e[0].dims,d=o?We(u[u.length-1]):1,l=n==="NHWC"&&u.length>1?d:1,a=N.size(u)/d,f=Be(u.length)&&o,g=f?u.length:u,y=U("x",e[0].dataType,e[0].dims,d),v=U("scale",e[1].dataType,e[1].dims,l),$=U("bias",e[2].dataType,e[2].dims,l),b=U("inputMean",e[3].dataType,e[3].dims,l),C=U("inputVar",e[4].dataType,e[4].dims,l),I=Q("y",e[0].dataType,g,d),_=()=>{let E="";if(o)E=`let cOffset = ${u.length===1?"0u":n==="NHWC"?`outputIndices[${u.length-1}] / ${d}`:"outputIndices[1]"};`;else if(n==="NCHW")E=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${v.type.indices}(0);\n                       cIndices[0] = outputIndices[${u.length-1}];`;for(let T=1;T<v.rank;T++)E+=`cIndices[${T}] = outputIndices[${T}];`;E+=`let cOffset = ${v.indicesToOffset("cIndices")};`}return E},S=E=>`\n  const epsilon = ${r};\n  ${E.registerUniform("outputSize","u32").declareVariables(y,v,$,b,C,I)}\n  ${E.mainStart()}\n  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${d}`)};\n    ${_()}\n    let scale = ${v.getByOffset("cOffset")};\n    let bias = ${$.getByOffset("cOffset")};\n    let inputMean = ${b.getByOffset("cOffset")};\n    let inputVar = ${C.getByOffset("cOffset")};\n    let x = ${y.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${d}`,inputDependencies:f?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:f?[{type:"uint32",data:a},...F(u)]:[{type:"uint32",data:a}]})}},Zd=e=>fe(e),ni=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Zd({...t,outputCount:o});if(ir.webgpu.validateInputContent&&Kd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Yd(r,n))}});var Qd,Xd,ai,ii=X(()=>{"use strict";xe();$e();Qd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Xd=e=>{let t=e[0].dims,r=e[0].dims[2],o=N.size(t)/4,n=e[0].dataType,u=U("input",n,t,4),d=U("bias",n,[r],4),l=U("residual",n,t,4),a=Q("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:g=>`\n  const channels = ${r}u / 4;\n  ${g.declareVariables(u,d,l,a)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${u.getByOffset("global_idx")}\n      + ${d.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},ai=e=>{Qd(e.inputs),e.compute(Xd(e.inputs))}});var Jd,Te,si,ui,di,li,ci,pi,mi,fi,hi,el,gi,yi,bi,wi,In,vi,An,$i,Si,xi,_i,Ci,Ii,Ai,Ti,Ei,Oi,Pi,Ri,ki,Bi,Di,Mi,zi,Ui,Vi,ho=X(()=>{"use strict";Ne();xe();Fe();$e();Jd=(e,t,r,o,n,u)=>{let d=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let a=U("inputData",r,[d],4),f=Q("outputData",o,[d],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,f)}\n\n  ${u??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${f.setByOffset("global_idx",l)}\n  }`},Te=(e,t,r,o,n,u=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:d=>Jd(d,N.size(e.dims),e.dataType,u,r,o),getRunData:d=>({outputs:[{dims:e.dims,dataType:u}],dispatchGroup:{x:Math.ceil(N.size(d[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(N.size(e.dims)/4)}]})}),si=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},ui=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},di=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},li=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},ci=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},pi=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},mi=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},fi=e=>fe(e),hi=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},el=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:vn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:$n;return fe({min:t,max:r})},gi=(e,t)=>{let r=e.inputs.length===1?t:el(e.inputs),o=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},yi=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},bi=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},wi=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},In=e=>fe(e),vi=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},An=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,$i=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,An(`vec4<${t}>`,t)))},Si=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},xi=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},_i=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,An(`vec4<${t}>`,t)))},Ci=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Ii=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},Ai=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},Ti=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Ei=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Oi=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},Pi=e=>fe(e),Ri=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"HardSigmoid",o=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${o} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},ki=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},Bi=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},Di=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},Mi=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},zi=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},Ui=(e,t)=>{let r=ht(e.inputs[0].dataType);return e.compute(Te(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},Vi=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var rl,nl,Ni,Wi=X(()=>{"use strict";xe();$e();ho();rl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},nl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=U("input",e[0].dataType,e[0].dims,4),o=U("bias",e[0].dataType,[e[0].dims[2]],4),n=Q("output",e[0].dataType,t,4),u=N.size(t)/4,d=Le(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${An(`vec4<${d}>`,d)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Ni=e=>{rl(e.inputs),e.compute(nl(e.inputs))}});var ol,al,At,Hi,Gi,Li,Fi,ji,qi,Ki,Yi,Zi,Qi,Xi=X(()=>{"use strict";Ne();xe();$e();ol=(e,t,r,o,n,u,d,l,a,f,g,y,v)=>{let $,b;typeof l=="string"?$=b=(B,V)=>`${l}((${B}),(${V}))`:typeof l=="function"?$=b=l:($=l.scalar,b=l.vector);let C=y?t.length:t,I=y?r.length:r,_=y?o.length:o,S=Q("outputData",g,_,4),E=U("aData",a,C,4),T=U("bData",f,I,4),z;if(n)if(u){let B=N.size(t)===1,V=N.size(r)===1,W=t.length>0&&t[t.length-1]%4===0,Z=r.length>0&&r[r.length-1]%4===0;B||V?z=S.setByOffset("global_idx",b(B?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"),V?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"))):z=`\n            let outputIndices = ${S.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${E.broadcastedIndicesToOffset("outputIndices",S)};\n            let offsetB = ${T.broadcastedIndicesToOffset("outputIndices",S)};\n            ${S.setByOffset("global_idx",b(d||W?E.getByOffset("offsetA / 4u"):`${E.type.value}(${E.getByOffset("offsetA / 4u")}[offsetA % 4u])`,d||Z?T.getByOffset("offsetB / 4u"):`${T.type.value}(${T.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else z=S.setByOffset("global_idx",b(E.getByOffset("global_idx"),T.getByOffset("global_idx")));else{if(!u)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let B=(V,W,Z="")=>{let R=`aData[indexA${W}][componentA${W}]`,j=`bData[indexB${W}][componentB${W}]`;return`\n            let outputIndices${W} = ${S.offsetToIndices(`global_idx * 4u + ${W}u`)};\n            let offsetA${W} = ${E.broadcastedIndicesToOffset(`outputIndices${W}`,S)};\n            let offsetB${W} = ${T.broadcastedIndicesToOffset(`outputIndices${W}`,S)};\n            let indexA${W} = offsetA${W} / 4u;\n            let indexB${W} = offsetB${W} / 4u;\n            let componentA${W} = offsetA${W} % 4u;\n            let componentB${W} = offsetB${W} % 4u;\n            ${V}[${W}] = ${Z}(${$(R,j)});\n          `};g===9?z=`\n            var data = vec4<u32>(0);\n            ${B("data",0,"u32")}\n            ${B("data",1,"u32")}\n            ${B("data",2,"u32")}\n            ${B("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:z=`\n            ${B("outputData[global_idx]",0)}\n            ${B("outputData[global_idx]",1)}\n            ${B("outputData[global_idx]",2)}\n            ${B("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(E,T,S)}\n\n        ${v??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${z}\n      }`},al=(e,t,r,o,n,u,d=r.dataType)=>{let l=!N.areEqual(r.dims,o.dims),a=r.dims,f=N.size(r.dims),g=!1,y=!1,v=[l];if(l){let b=St.calcShape(r.dims,o.dims,!1);if(!b)throw new Error("Can\'t perform binary op on the given tensors");a=b,f=N.size(a);let C=N.size(r.dims)===1,I=N.size(o.dims)===1,_=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,S=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;v.push(C),v.push(I),v.push(_),v.push(S);let E=1;for(let T=1;T<a.length;T++){let z=r.dims[r.dims.length-T]??1,B=o.dims[o.dims.length-T]??1;if(z===B)E*=z;else break}E%4===0?(y=!0,g=!0):(C||I||_||S)&&(g=!0)}else g=!0;v.push(g);let $=Be(r.dims.length)&&Be(o.dims.length)&&Be(a.length);return{name:e,shaderCache:{hint:t+v.map(b=>b.toString()).join("_"),inputDependencies:$?["rank","rank"]:["dims","dims"]},getShaderSource:b=>ol(b,r.dims,o.dims,a,g,l,y,n,r.dataType,o.dataType,d,$,u),getRunData:()=>({outputs:[{dims:a,dataType:d}],dispatchGroup:{x:Math.ceil(f/64/4)},programUniforms:$?[{type:"uint32",data:Math.ceil(N.size(a)/4)},...F(r.dims),...F(o.dims),...F(a)]:[{type:"uint32",data:Math.ceil(N.size(a)/4)}]})}},At=(e,t,r,o,n,u)=>{e.compute(al(t,n??"",e.inputs[0],e.inputs[1],r,o,u))},Hi=e=>{At(e,"Add",(t,r)=>`${t}+${r}`)},Gi=e=>{At(e,"Div",(t,r)=>`${t}/${r}`)},Li=e=>{At(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Fi=e=>{At(e,"Mul",(t,r)=>`${t}*${r}`)},ji=e=>{let t=U("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;At(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},qi=e=>{At(e,"Sub",(t,r)=>`${t}-${r}`)},Ki=e=>{At(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Yi=e=>{At(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Zi=e=>{At(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Qi=e=>{At(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var sl,ul,dl,ll,Ji,es,ts=X(()=>{"use strict";xe();Fe();$e();sl=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},ul=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,dl=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let u=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(u):n===0?o.push(`if (inputIndex == ${n}u) { ${u} }`):n===r-1?o.push(`else { ${u} }`):o.push(`else if (inputIndex == ${n}) { ${u} }`)}return o.join(`\n`)},ll=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let T=1;T<e.length;T++){let z=e[T].dims.slice();for(let B=0;B<r.length;B++)if(B===o)n[o]+=z[B];else if(r[B]!==z[B])throw new Error("non concat dimensions must match")}let u=N.size(n),d=new Array(e.length),l=new Array(e.length),a=e[0].dataType,f=0,g=[],y=[],v=[],$=[{type:"uint32",data:u}];for(let T=0;T<e.length;++T)f+=e[T].dims[o],d[T]=f,v.push(Be(e[T].dims.length)),y.push(v[T]?e[T].dims.length:e[T].dims),l[T]=U(`input${T}`,a,y[T]),g.push(v[T]?"rank":"dims"),$.push({type:"uint32",data:d[T]});for(let T=0;T<e.length;++T)v[T]&&$.push(...F(e[T].dims));let b=Be(n.length);b&&$.push(...F(n));let C=b?n.length:n,I=Q("output",a,C),_=I.indicesGet("indices",o),S=Array.from(Array(d.length).keys()).map(T=>`uniforms.sizeInConcatAxis${T}`).join(","),E=T=>`\n\n  ${(()=>{T.registerUniform("outputSize","u32");for(let z=0;z<e.length;z++)T.registerUniform(`sizeInConcatAxis${z}`,"u32");return T.declareVariables(...l,I)})()}\n\n  ${ul(d.length,S)}\n\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${_});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${d.length}u>(${S});\n      ${_} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${dl(l,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:$}),getShaderSource:E}},Ji=(e,t)=>{sl(e.inputs),e.compute(ll(e.inputs,t.axis))},es=e=>fe({axis:e.axis})});var yt,Tn,Bt=X(()=>{"use strict";xe();yt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Tn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[vn,$n];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var Ke,En,On=X(()=>{"use strict";Ke=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},En=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Pn,go=X(()=>{"use strict";Pn=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var cl,pl,kr,rs,ml,Br,fl,Rn,Dr=X(()=>{"use strict";xe();$e();Bt();On();cl=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,pl=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,kr=(e,t,r="f32",o,n=!1,u=32,d=!1,l=32)=>{let a=t[1]*e[1],f=t[0]*e[0],g=n?a:u,y=n?u:a,v=g/t[0],$=u/t[1];if(!((n&&v===4&&e[1]===4||!n&&(v===3||v===4))&&g%t[0]===0&&u%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${v} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${v} must be 3 or 4.\n  tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}. tileInner ${u} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${v}<${r}>, ${g/v}>, ${y}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${f/e[0]}>, ${u}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${v};\nconst tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${d?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${d?`${Math.ceil(l/u)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${d?`i32(globalId.z) * ${l}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${$};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${cl(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${v===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${pl(n,v)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},rs=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,ml=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Br=(e,t,r="f32",o,n=!1,u=32,d=!1,l=32,a=!1)=>{let f=e[1]*t[1],g=e[0]*t[0],y=n?f:u,v=n?u:f;if(!(v%t[1]===0&&y%t[0]===0&&u%t[1]===0))throw new Error(`tileAHight ${v} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${u} must be divisible by workgroupSize[1]${t[1]}`);let $=v/t[1],b=y/t[0],C=u/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${f};\n    let globalColStart = i32(workgroupId.x) * ${g};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${v}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {\n          ${rs(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${f};\n\nlet tileRowA = i32(localId.y) * ${$};\nlet tileColA = i32(localId.x) * ${b};\nlet tileRowB = i32(localId.y) * ${C};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${rs(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${C}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${ml(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${v}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${g}>, ${u}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${d?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${d?`${Math.ceil(l/u)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${d?`i32(globalId.z) * ${l}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},fl=(e,t,r,o,n,u=!1)=>{let[d,l,a]=n,[f,g,y,v]=o,$=dr(d,a),b=dr(l,a),C=Le(o[0].type.tensor),I=()=>{let E=g.rank,T=f.rank,z=`var aIndices: ${g.type.indices};`;for(let B=E-2-1,V=T-1;B>=0;B--,V--)z+=`\naIndices[${B}] = ${T>1?`batchIndices[${V}]`:"batchIndices"};`;return $.forEach(B=>{z+=`\naIndices[${B}] = 0;`}),z+=`\naIndices[${E-2}] = u32(row);\n                   aIndices[${E-1}] = u32(colIn);`,z},_=()=>{let E=y.rank,T=f.rank,z=`var bIndices: ${y.type.indices};`;for(let B=E-2-1,V=T-1;B>=0;B--,V--)z+=`\nbIndices[${B}] = ${T>1?`batchIndices[${V}]`:"batchIndices"};`;return b.forEach(B=>{z+=`\nbIndices[${B}] = 0;`}),z+=`\nbIndices[${E-2}] = u32(row);\n                   bIndices[${E-1}] = u32(colIn);`,z};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${f.type.indices}) -> ${Ke(e,C)} {\n      var value = ${Ke(e,C)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${g.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${f.type.indices}) -> ${Ke(e,C)} {\n      var value = ${Ke(e,C)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${_()}\n        value = ${y.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ke(e,C)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${u?"bias[colIn]":`${Ke(e,C)}(bias[row])`};`:""}\n        ${r}\n        ${v.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Rn=(e,t,r,o,n=!1)=>{let u=e[0].dims,d=e[1].dims,l=u.slice(0,-2),a=d.slice(0,-2),f=o?o.slice(0,-2):r.slice(0,-2),g=Be(f.length),y=g?f.length:f,v=Sn("batchDims",e[0].dataType,y,1),$=N.size(f),b=u[u.length-2],C=u[u.length-1],I=d[d.length-1],_=C%4===0&&I%4===0,S=b<=8?[4,1,1]:[4,4,1],E=[8,8,1],T=[Math.ceil(I/E[0]/S[0]),Math.ceil(b/E[1]/S[1]),Math.ceil($/E[2]/S[2])],z=Le(e[0].dataType),B=_?4:1,V=[...l,b,C/B],W=Be(V.length),Z=W?V.length:V,R=[...a,C,I/B],j=Be(R.length),J=j?R.length:R,re=[$,b,I/B],Ae=U("a",e[0].dataType,Z,B),Pe=U("b",e[1].dataType,J,B),ae=Q("result",e[0].dataType,re.length,B),Ee=[Ae,Pe],De=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:C}];g&&De.push(...F(f)),W&&De.push(...F(V)),j&&De.push(...F(R));let le=[];le.push(W?"rank":"dims"),le.push(j?"rank":"dims");let ge=e.length>2,{activationFunction:Ie,applyActivation:Oe}=yt(t,ae.type.value),He=fl(B,ge,Oe,[v,Ae,Pe,ae],[l,a,f],n);if(ge){let ee=n?B:1;Ee.push(U("bias",e[2].dataType,e[2].dims.length,ee)),De.push(...F(e[2].dims)),le.push("rank")}De.push(...F(re));let L=ee=>`\n  ${ee.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(v).declareVariables(...Ee,ae)}\n  ${Ie}\n  ${He}\n  ${_?kr(S,E,z,v):Br(S,E,z,v)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${S}${_}${n}`,inputDependencies:le},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:De}),getShaderSource:L}}});var hl,ns,os=X(()=>{"use strict";kt();$e();Bt();On();go();Dr();hl=(e,t,r,o,n=!1,u,d=4,l=4,a=4,f="f32")=>{let g=j=>{switch(j){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${f}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${j} is not supported.`)}},y=j=>{switch(j){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${j} is not supported.`)}},v=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,$=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",C=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",_=e?"col":"row",S=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${_} / (filterDims[1] * inChannels);\n    let WCol = ${_} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${_} % inChannels;\n    var resData = ${Ke(d,f)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${C}) {\n      ${v}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${g(d)}\n    }\n    return resData;`,E=e?t&&o?`\n    let col = colIn * ${d};\n    ${S}`:`\n    let col = colIn * ${d};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${S}\n    }\n    return ${Ke(d,f)}(0.0);`:o&&r?`\n    let col = colIn * ${d};\n    ${S}`:`\n    let col = colIn * ${d};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${S}\n    }\n    return ${Ke(d,f)}(0.0);`,T=`${y(l)}`,z=Ke(a,f),B=e?Ke(d,f):Ke(l,f),V=e?Ke(l,f):Ke(d,f),{activationFunction:W,applyActivation:Z}=yt(u,z);return`\n    ${W}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${B} {\n      ${e?E:T}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${V} {\n      ${e?T:E}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${z}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${$}\n      ${En(n)}\n      ${Z}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},ns=(e,t,r,o,n,u,d,l)=>{let a=t.format==="NHWC",f=a?e[0].dims[3]:e[0].dims[1],g=r[0],y=a?r[2]:r[3],v=a?r[1]:r[2],$=a?r[3]:r[1],b=a&&(f%4===0||f%3===0)&&$%4===0,C=a?$:y*v,I=a?y*v:$,_=[8,8,1],S=o<=8?[4,1,1]:[4,4,1],E=[Math.ceil(C/_[0]/S[0]),Math.ceil(I/_[1]/S[1]),Math.ceil(g/_[2]/S[2])];ke("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let T=b?a&&f%4!==0?3:4:1,z=_[1]*S[1],B=_[0]*S[0],V=Math.max(_[0]*T,_[1]),W=o%z===0,Z=n%B===0,R=u%V===0,j=b?[T,4,4]:[1,1,1],J=Le(e[0].dataType),re=b?4:1,Ae=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:u}],Pe=U("x",e[0].dataType,e[0].dims.length,T===3?1:T),ae=U("w",e[1].dataType,e[1].dims.length,re),Ee=[Pe,ae];Ae.push(...F(e[0].dims)),Ae.push(...F(e[1].dims));let De=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${J}>`:J}) {\n        result[flatIndex] = ${b?`vec4<${J}>`:J}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${J}>`:J}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);\n      }`;if(d){let ge=U("bias",e[2].dataType,e[2].dims.length,re);Ee.push(ge),Ae.push(...F(e[2].dims)),De+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${J}>`:J} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}let le=Q("result",e[0].dataType,r.length,re);return Ae.push(...F(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ae}),getShaderSource:ge=>`\n        ${Pn("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${ge.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Ee,le)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${De}\n        ${hl(a,W,Z,R,d,t,j[0],j[1],j[2],J)}\n            ${b?kr(S,_,J,void 0,!a,V):Br(S,_,J,void 0,!a,V,!1,void 0,l)}`}}});var yo,as,is=X(()=>{"use strict";xe();$e();bo();Bt();yo=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",u=e[0].dims,d=e[1].dims,l=d[0]/t.group,a=t.format==="NHWC",f=kn(u,d,t.dilations,t.pads,t.strides,a),g=N.size(f),y=Q("output",e[0].dataType,f),{activationFunction:v,applyActivation:$}=yt(t,y.type.value),b=U("x",e[0].dataType,u),C=U("w",e[1].dataType,d),I=[b,C];o&&I.push(U("b",e[2].dataType,e[2].dims));let _=S=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${S.declareVariables(...I,y)}\n\n  ${v}\n\n  ${S.mainStart()}\n    ${S.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n\n    let outputIndices = ${y.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${l}u;\n\n    var value: ${y.type.value} = ${y.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${d[1]}u; wInChannel++) {\n      let input_channel = group_id * ${d[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${d[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${u[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${d[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${u[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${C.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${$}\n    ${y.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(f):f,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)}}),getShaderSource:_}},as=(e,t,r)=>{let o=e.length>2,n=We(r[3]),u=We(r[2]),d=N.size(r)/n/u,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/n],a=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/n],f=[r[0],r[1],r[2],r[3]/n],g=[{type:"uint32",data:d},{type:"int32",data:t.strides},{type:"int32",data:t.pads},...F(l),...F(a),...F(f)],y=(u-1)*t.strides[1]+a[1],v=$=>{let b=Q("output",e[0].dataType,f.length,n),{activationFunction:C,applyActivation:I}=yt(t,b.type.value),_=U("x",e[0].dataType,l.length,n),S=U("w",e[1].dataType,a.length,n),E=[_,S];o&&E.push(U("b",e[2].dataType,e[2].dims,n));let T=o?"value += b[output_channel];":"";return`\n  ${$.registerUniform("output_size","u32").registerUniform("strides","i32",2).registerUniform("pads","i32",2).declareVariables(...E,b)}\n  ${C}\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${u}u;\n    let col = (index1 % width1) * ${u}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${_.type.value}, ${y}>;\n    var values: array<${b.type.value}, ${u}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w\'s height/width.\n    for (var w_height: u32 = 0u; w_height < ${a[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${y}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${_.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${_.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${a[1]}; w_width++) {\n          let w_val = ${S.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${u}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${u}u; i++) {\n      var value = values[i];\n      ${T}\n      ${I}\n      ${b.set("batch","row","col + i","output_channel","value")};\n    }\n  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.activationCacheKey};${n};${u};${y};${a[0]};${a[1]}`,inputDependencies:o?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:g}),getShaderSource:v}}});var wo,gl,ss,vo=X(()=>{"use strict";xe();Dr();$e();Bt();wo=(e,t,r,o,n=!1)=>{let u=e[0].dims,d=e[1].dims,l=u[u.length-2],a=d[d.length-1],f=u[u.length-1],g=We(a),y=We(f),v=We(l),$=N.size(r)/g/v,b=e.length>2,C=o?o.slice(0,-2):r.slice(0,-2),_=[N.size(C),l,a],S=[{type:"uint32",data:$},{type:"uint32",data:l},{type:"uint32",data:a},{type:"uint32",data:f},...F(C),...F(u),...F(d)];b&&S.push(...F(e[2].dims)),S.push(...F(_));let E=T=>{let z=Sn("batch_dims",e[0].dataType,C.length),B=U("a",e[0].dataType,u.length,y),V=U("b",e[1].dataType,d.length,g),W=Q("output",e[0].dataType,_.length,g),{activationFunction:Z,applyActivation:R}=yt(t,W.type.value),j=[B,V],J="";if(b){let le=n?g:1;j.push(U("bias",e[2].dataType,e[2].dims.length,le)),J=`${n?`value += bias[col / ${le}];`:`value += ${W.type.value}(bias[row + i]);`}`}let re=u.slice(0,-2),Ae=d.slice(0,-2),Pe=dr(re,C),ae=dr(Ae,C),Ee=(le,ge)=>{let Ie=le.rank,Oe=le.name;if(Ie===2)return`var ${Oe}_indices = ${le.type.indices}(0u, 0u);`;let He=z.rank,L=`var ${Oe}_indices: ${le.type.indices};`;for(let ee=Ie-2-1,be=He-1;ee>=0;ee--,be--)L+=`\n${Oe}_indices[${ee}] = ${He>1?`batch_indices[${be}]`:"batch_indices"};`;return ge.forEach(ee=>{L+=`\n${Oe}_indices[${ee}] = 0;`}),L+=`${Oe}_indices[${Ie-2}] = 0u;\n                     ${Oe}_indices[${Ie-1}] = 0u;`,L},De=()=>{let le=`var a_data: ${B.type.value};`;for(let ge=0;ge<y;ge++)le+=`\n              let b_data${ge} = b[(b_offset + (k + ${ge}) * uniforms.N + col) / ${g}];`;for(let ge=0;ge<v;ge++){le+=`a_data = a[(a_offset + (row + ${ge}) * uniforms.K + k) / ${y}];`;for(let Ie=0;Ie<y;Ie++)le+=`\n            values[${ge}] = fma(${V.type.value}(a_data${y===1?"":`[${Ie}]`}), b_data${Ie}, values[${ge}]);\n`}return le};return`\n  ${T.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(z).declareVariables(...j,W)}\n  ${Z}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    let col = (global_idx % (uniforms.N / ${g})) * ${g};\n    var index1 = global_idx / (uniforms.N / ${g});\n    let stride1 = uniforms.M / ${v};\n    let row = (index1 % stride1) * ${v};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${z.offsetToIndices("batch")};`}\n    ${Ee(B,Pe)}\n    let a_offset = ${B.indicesToOffset("a_indices")};\n    ${Ee(V,ae)}\n    let b_offset = ${V.indicesToOffset("b_indices")};\n    var values: array<${W.type.value}, ${v}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${y}) {\n      ${De()}\n    }\n    for (var i = 0u; i < ${v}u; i++) {\n      var value = values[i];\n      ${J}\n      ${R}\n      let cur_indices = ${W.type.indices}(batch, row + i, col);\n      let offset = ${W.indicesToOffset("cur_indices")};\n      ${W.setByOffset(`offset / ${g}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${g}_${y}_${v}_${n}`,inputDependencies:b?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:S}),getShaderSource:E}},gl=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},ss=e=>{gl(e.inputs);let t=St.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(wo(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(Rn(e.inputs,{activation:"",activationCacheKey:""},t))}});var kn,$o,yl,us,So,bl,wl,xo,bo=X(()=>{"use strict";xe();Fe();os();Dr();is();Bt();vo();lr();kn=(e,t,r,o,n,u)=>{let d=e[0],l=e.slice(u?1:2,u?3:4),a=l.length,f=t[0],y=t.slice(2).map((b,C)=>b+(b-1)*(r[C]-1)),$=l.map((b,C)=>b+o[C]+o[C+a]).map((b,C)=>Math.floor((b-y[C]+n[C])/n[C]));return $.splice(0,0,d),$.splice(u?3:1,0,f),$},$o=[2,3,1,0],yl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},us=(e,t)=>{let r=e.kernelShape.slice();for(let u=2;u<t[1].dims.length;++u)r[u-2]===0&&(r[u-2]=t[1].dims[u]);let o=e.pads.slice();Lt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},So=e=>{let t=Tn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,u=e.group,d=e.kernel_shape,l=e.pads,a=e.strides,f=e.w_is_const();return fe({autoPad:o,format:r,dilations:n,group:u,kernelShape:d,pads:l,strides:a,wIsConst:f,...t})},bl=(e,t,r)=>{let o=us(r,t),n=r.format==="NHWC";if(r.group!==1){if(n&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let B=kn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),V=e.kernelCustomData.wT??e.compute(dt(t[1],$o),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=V);let W=[t[0],V];t.length===3&&W.push(t[2]),e.compute(as(W,o,B),{inputs:W})}else e.compute(yo(t,o));return}let u=t.length===3,d=t[0].dims[n?1:2],l=t[0].dims[n?2:3],a=t[0].dims[n?3:1],f=t[1].dims[2],g=t[1].dims[3],y=kn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),v=y[n?1:2],$=y[n?2:3],b=y[n?3:1],C=n&&f===d&&g===l&&r.pads[0]===0&&r.pads[1]===0;if(C||f===1&&g===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let B=y[0],V,W,Z,R=[];if(n){let re=e.kernelCustomData.wT??e.compute(dt(t[1],$o),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=re),C){let Ae=d*l*a;V=t[0].reshape([1,B,Ae]),W=re.reshape([1,Ae,b]),Z=[1,B,b]}else V=t[0].reshape([B,d*l,a]),W=re.reshape([1,a,b]),Z=[B,v*$,b];R.push(V),R.push(W)}else V=t[0].reshape([B,a,d*l]),W=t[1].reshape([1,b,a]),Z=[B,b,v*$],R.push(W),R.push(V);u&&R.push(t[2]);let j=Z[2],J=R[0].dims[R[0].dims.length-1];j<8&&J<8?e.compute(wo(R,o,y,Z,n),{inputs:R}):e.compute(Rn(R,o,y,Z,n),{inputs:R});return}let I=!0,_=e.kernelCustomData.wT??e.compute(dt(t[1],$o),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_);let S=[t[0],_];u&&S.push(t[2]);let E=n?v*$:b,T=n?b:v*$,z=f*g*a;e.compute(ns(S,o,y,E,T,z,u,I),{inputs:S})},wl=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],u=[1].concat(t.strides),d=[1].concat(t.dilations),l=[1].concat(t.kernelShape),a=us({...t,pads:n,strides:u,dilations:d,kernelShape:l},o);e.compute(yo(o,a,f=>r?[f[0],f[2],f[3]]:[]))},xo=(e,t)=>{yl(e.inputs,t),e.inputs[0].dims.length===3?wl(e,t):bl(e,e.inputs,t)}});var vl,ds,ls=X(()=>{"use strict";kt();$e();Bt();On();go();Dr();vl=(e,t=!1,r,o=4)=>{let n=Ke(o,"f32"),u=S=>{switch(S){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${S} is not supported.`)}},d=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,l=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",f=e?"outBackprop[2]":"outBackprop[3]",g=e?"row":"col",y=e?"col":"row",v=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${g} / outWidth;\n      let outCol = ${g} % outWidth;\n\n      let WRow = ${y} / (filterDims[1] * inChannels);\n      let WCol = ${y} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${f}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${y} % inChannels;\n      ${d}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,$=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${v}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${v}\n      }\n      return ${n}(0.0);`,b=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${u(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:C,applyActivation:I}=yt(r,n);return`\n      ${C}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?$:b}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?b:$}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${l}\n      ${En(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},ds=(e,t,r,o,n,u,d,l)=>{let a=t.format==="NHWC",f=a?e[0].dims[3]:e[0].dims[1],g=r[0],y=a?r[2]:r[3],v=a?r[1]:r[2],$=a?r[3]:r[1],b=a?f%4===0&&$%4===0:y%4===0&&$%4===0,C=a?$:y*v,I=a?y*v:$,_=b?[8,8,1]:[C<=4||I<=4?4:16,C>4&&I<=4?4:16,1],S=b?[4,4,1]:[C<=4?1:4,C>4&&I<=4?1:4,1],E=[Math.ceil(C/_[0]/S[0]),Math.ceil(I/_[1]/S[1]),Math.ceil(g/_[2]/S[2])];ke("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let T=b?4:1,z=Math.max(_[0]*T,_[1]),B=b?4:1,V=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:u}],W=U("x",e[0].dataType,e[0].dims.length,B),Z=U("w",e[1].dataType,e[1].dims.length,1),R=Q("result",e[0].dataType,r.length,B),j=[W,Z];V.push(...F(e[0].dims)),V.push(...F(e[1].dims));let J="";if(d){let re=U("bias",e[2].dataType,e[2].dims.length,B);j.push(re),V.push(...F(e[2].dims)),J+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}return V.push(...F(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:V}),getShaderSource:re=>`\n        ${Pn("uniforms.result_strides")}\n        ${re.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...j,R)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${u};\n        ${J}\n        ${vl(a,d,t,T)}\n        ${b?kr(S,_,"f32",void 0,!a,z):Br(S,_,"f32",void 0,!a,z,!1,void 0,l)}`}}});var $l,_o,cs=X(()=>{"use strict";kt();xe();$e();$l=(e,t,r,o,n,u,d=!1,l)=>{let a=r.format==="NHWC",f=a?1:2,g=a?2:3,y=a?3:1,v=N.size(o),$=d?2:1,b=r.group,C=t[1].dims,I=C[0]/b,_=C[1],S=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${d?`vec4<${l}>`:l}) {\n    result[flatIndex] = ${d?`vec4<${l}>`:l}(value);\n  }`;n&&(S+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${d?`vec4<${l}>`:l} {\n      return bias[coords.${a?"w":"y"}${d?"/ 4":""}];\n    }`);let E=d?4:1,T=U("W",t[1].dataType,t[1].dims,E),z=U("Dy",t[0].dataType,t[0].dims,E),B=[z,T];n&&B.push(U("bias",t[2].dataType,[o[y]],E));let V=Q("result",t[0].dataType,o,E),W=`{\n        let batch: u32 = ${u?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${u?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${u?"global_id.y":"workgroup_id.y"} * ${$};\n        let d1: u32 = ${u?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${l}>, ${$}>;\n        for (var i = 0; i < ${$}; i++) {\n          dotProd[i] = vec4<${l}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);\n            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${z.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${y}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${z.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${l}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${$}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${l}>(0.0)`};\n          ${V.set("batch","r","c + i","d1","value")};\n        }\n      }`,Z=`\n          let outputIndices = ${V.offsetToIndices("global_idx")};\n          let batch = ${V.indicesGet("outputIndices",0)};\n          let d1 = ${V.indicesGet("outputIndices",y)};\n          let r = ${V.indicesGet("outputIndices",f)};\n          let c = ${V.indicesGet("outputIndices",g)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${_};\n          let wOutChannel = d1 - groupId * ${_};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${l}(0.0);\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${f}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${g}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?z.get("batch","idyR","idyC","inputChannel"):z.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${T.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":`${l}(0.0)`};\n          ${V.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...B,V)}\n  ${S}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(v)};\n  ${d?W:Z}}`},_o=(e,t,r)=>{let o=e.length>2,n=t.outputShape,u=N.size(n),d=[Math.ceil(u/64),1,1];ke("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${d}`);let l=Le(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:d[0],y:d[1],z:d[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>$l(a,e,t,n,o,d[1]===1&&d[2]===1,!1,l)}}});var Sl,xl,_l,ps,ms,Cl,Il,Al,Tl,fs,hs=X(()=>{"use strict";Fe();ls();cs();Bt();lr();Sl=(e,t,r,o,n,u)=>(e-1)*t+r+(o-1)*n+1-u,xl=(e,t,r,o,n)=>{let u=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=u,r[n]=e-u):t==="SAME_LOWER"&&(r[o]=e-u,r[n]=u)},_l=(e,t,r,o,n,u,d,l,a,f)=>{let g=e.length-2,y=f.length===0;if(a.length===0)for(let b=0;b<g;++b)a.push(0);let v=e[0],$=t[l?3:1]*n;for(let b=0,C=e.length-g-(l?1:0);b<g;++b,++C){let I=e[C],_=y?I*d[b]:f[b],S=Sl(I,d[b],u[b],t[C],r[b],_);xl(S,o,u,b,b+g),y&&f.push(d[b]*(I-1)+a[b]+(t[C]-1)*r[b]+1-u[b]-u[b+g])}f.splice(0,0,v),f.splice(l?3:1,0,$)},ps=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((v,$)=>v*$,1)===0){r.length=0;for(let v=2;v<t[1].dims.length;++v)r.push(t[1].dims[v])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),u=e.outputShape.slice(),d=e.outputPadding.slice(),l=t[0].dims,a=e.dilations.slice();if(a.reduce((v,$)=>v+$,0)===0){let v=t[0].dims.length-2;a=new Array(v).fill(1)}let f=e.strides.slice();if(f.reduce((v,$)=>v+$,0)===0){let v=t[0].dims.length-2;f=new Array(v).fill(1)}_l(l,r,a,e.autoPad,e.group,n,f,o,d,u);let g=Object.assign({},e),y=e.cacheKey+[r.join("n,"),n.join(","),f.join(","),d.join(","),u.join(","),a.join(",")].join("_");return Object.assign(g,{kernelShape:r,pads:n,outputPadding:d,outputShape:u,dilations:a,strides:f,cacheKey:y}),g},ms=e=>{let t=Tn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,u=e.group,d=e.kernelShape,l=e.pads,a=e.strides,f=e.wIsConst(),g=e.outputPadding,y=e.outputShape;return fe({autoPad:o,format:r,dilations:n,group:u,kernelShape:d,outputPadding:g,outputShape:y,pads:l,strides:a,wIsConst:f,...t})},Cl=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let u=e[0].dims.length-2;if(t.dilations.reduce((g,y)=>g+y,0)>0&&t.dilations.length!==u)throw new Error(`dilations should be ${u}D`);if(t.strides.reduce((g,y)=>g+y,0)>0&&t.strides.length!==u)throw new Error(`strides should be ${u}D`);if(t.pads.reduce((g,y)=>g+y,0)>0&&t.pads.length!==u*2)throw new Error(`pads should be ${u*2}D`);if(t.outputPadding.length!==u&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${u}D`);if(t.kernelShape.reduce((g,y)=>g+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},Il=[2,3,1,0],Al=(e,t,r)=>{let o=ps(r,t),n=r.format==="NHWC",u=o.outputShape,d=u[n?3:1],l=t[0].dims[n?3:1];if(o.group!==1||d===1&&l===1){e.compute(_o(t,o));return}let a=u[n?1:2],f=u[n?2:3],g=t[1].dims[2],y=t[1].dims[3],v=n?a*f:d,$=n?d:a*f,b=g*y*l,C=!0,I=e.kernelCustomData.wT??e.compute(dt(t[1],Il),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let _=[t[0],I],S=t.length===3;S&&(!n&&t[2].dims.length===1?_.push(t[2].reshape([t[2].dims[0],1,1])):_.push(t[2])),e.compute(ds(_,o,u,v,$,b,S,C),{inputs:_})},Tl=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let u=t.dilations;(u.length===0||u[0]===0)&&(u=[1]);let d=t.strides;(d.length===0||d[0]===0)&&(d=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],d=[1].concat(d),u=[1].concat(u),n=[1].concat(n);let a=ps({...t,pads:l,strides:d,dilations:u,kernelShape:n},o);e.compute(_o(o,a,f=>r?[f[0],f[2],f[3]]:[f[0],f[1],f[3]]))},fs=(e,t)=>{Cl(e.inputs,t),e.inputs[0].dims.length===3?Tl(e,t):Al(e,e.inputs,t)}});var El,gs,ys,bs=X(()=>{"use strict";Ne();xe();Fe();$e();El=(e,t,r,o)=>{let n=N.size(t),u=t.length,d=U("input",e,u),l=Q("output",e,u),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),f=N.normalizeAxis(a,u),g=y=>{let v=` i32(${d.indicesGet("inputIndices","uniforms.axis")}) `,$=de("uniforms.input_shape","uniforms.axis",u),b=o.reverse?v+(o.exclusive?" + 1":""):"0",C=o.reverse?$:v+(o.exclusive?"":" + 1");return`\n                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(d,l)}\n                ${y.mainStart()}\n                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${l.offsetToIndices("global_idx")};\n                  var sum = ${l.type.value}(0);\n                  let first : i32 = ${b};\n                  let last : i32 = ${C};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${d.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${d.getByIndices("inputIndices")};\n                  }\n                  ${l.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:f},...F(t),...F(t)]}),getShaderSource:g}},gs=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(El(o,r,n,t),{inputs:[0]})},ys=e=>{let t=e.exclusive===1,r=e.reverse===1;return fe({exclusive:t,reverse:r})}});var Co,Bn,ws,Ol,Pl,Io,Ao,vs,Rl,$s,Ss,xs=X(()=>{"use strict";xe();Fe();$e();Co="[a-zA-Z]|\\\\.\\\\.\\\\.",Bn="("+Co+")+",ws="^"+Bn+"$",Ol="("+Bn+",)*"+Bn,Pl="^"+Ol+"$",Io=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Ao=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(Pl)))throw new Error("Invalid LHS term");if(o.split(",").forEach((l,a)=>{let f=t[a].dims.slice();if(!l.match(RegExp(ws)))throw new Error("Invalid LHS term");let g=this.processTerm(l,!0,f,a);this.lhs.push(g)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,a])=>a.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(Bn)))throw new Error("Invalid RHS");n.match(RegExp(Co,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(l);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let u=o.length,d=!1,l=[],a=0;if(!t.match(RegExp(ws))&&!r&&t!=="")throw new Error("Invalid LHS term");let f=t.match(RegExp(Co,"g")),g=new Io(n);return f?.forEach((y,v)=>{if(y==="..."){if(d)throw new Error("Only one ellipsis is allowed per input term");d=!0;let $=u-f.length+1;if($<0)throw new Error("Ellipsis out of bounds");if(l=o.slice(a,a+$),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<l.length;b++){let C=String.fromCharCode("0".charCodeAt(0)+b);g.addSymbol(C,v+b),this.addSymbol(C,o[a++],n)}}else g.addSymbol(y,v+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,o[a++],n)}),g}},vs=e=>e+"_max",Rl=(e,t,r,o,n)=>{let d=t.map(($,b)=>e[b]?$.length:$).map(($,b)=>U(`input${b}`,r,$)),l=N.size(n),a=Be(n.length),f=a?n.length:n,g=Q("output",r,f),y=[...o.symbolToInfo.keys()].filter($=>!o.rhs.symbolToIndices.has($)),v=$=>{let b=[],C="var prod = 1.0;",I="var sum = 0.0;",_="sum += prod;",S=[],E=[],T=[],z=[],B=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((W,Z)=>{if(o.rhs.symbolToIndices.has(Z)){let R=o.rhs.symbolToIndices.get(Z)?.[0];R!==void 0&&o.lhs.forEach((j,J)=>{if(W.inputIndices.includes(J)){let re=j.symbolToIndices.get(Z);if(re===void 0)throw new Error("Invalid symbol error");re.forEach(Ae=>{b.push(`${d[J].indicesSet(`input${J}Indices`,Ae,g.indicesGet("outputIndices",R))}`)})}})}else o.lhs.forEach((R,j)=>{if(W.inputIndices.includes(j)){let J=R.symbolToIndices.get(Z);if(J===void 0)throw new Error("Invalid symbol error");J.forEach(re=>{S.push(`${d[j].indicesSet(`input${j}Indices`,re,`${Z}`)}`)}),z.push(`prod *= ${d[j].getByIndices(`input${j}Indices`)};`)}}),E.push(`for(var ${Z}: u32 = 0; ${Z} < uniforms.${vs(Z)}; ${Z}++) {`),T.push("}")});let V=B?[...b,`let sum = ${d.map((W,Z)=>W.getByIndices(`input${Z}Indices`)).join(" * ")};`]:[...b,I,...E,...S,C,...z,_,...T];return`\n            ${$.registerUniforms(y.map(W=>({name:`${vs(W)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...d,g)}\n\n            ${$.mainStart()}\n            ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${g.offsetToIndices("global_idx")};\n            ${d.map((W,Z)=>`var input${Z}Indices: ${d[Z].type.indices};`).join(`\n`)}\n            ${V.join(`\n`)};\n            ${g.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map($=>$?"rank":"dims")},getRunData:()=>{let $=y.filter(C=>o.symbolToInfo.has(C)).map(C=>({type:"uint32",data:o.symbolToInfo.get(C)?.dimValue||0}));$.push({type:"uint32",data:l});let b=t.filter((C,I)=>e[I]).map((C,I)=>[...F(C)]).reduce((C,I)=>C.concat(I),$);return a&&b.push(...F(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:b}},getShaderSource:v}},$s=(e,t)=>{let r=new Ao(e.inputs,t.equation),o=e.inputs.map((d,l)=>Be(d.dims.length)),n=r.outputDims,u=e.inputs.map((d,l)=>d.dims);e.compute(Rl(o,u,e.inputs[0].dataType,r,n))},Ss=e=>{let t=e.equation.replace(/\\s+/g,"");return fe({equation:t})}});var kl,_s,Bl,Dl,Cs,Is=X(()=>{"use strict";Ne();xe();$e();kl=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},_s=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},Bl=(e,t)=>e.length>t.length?_s(e,t):_s(t,e),Dl=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=Bl(t,r),n=e[0].dataType,u=n===9?4:1,d=Math.ceil(N.size(o)/u),l=Be(t.length),a=Be(o.length),f=y=>{let v=l?t.length:t,$=a?o.length:o,b=U("input",n,v,u),C=Q("output",n,$,u),I;if(n===9){let _=(S,E,T="")=>`\n          let outputIndices${E} = ${C.offsetToIndices(`outputOffset + ${E}u`)};\n          let offset${E} = ${b.broadcastedIndicesToOffset(`outputIndices${E}`,C)};\n          let index${E} = offset${E} / 4u;\n          let component${E} = offset${E} % 4u;\n          ${S}[${E}] = ${T}(${b.getByOffset(`index${E}`)}[component${E}]);\n        `;I=`\n        let outputOffset = global_idx * ${u};\n        var data = vec4<u32>(0);\n        ${_("data",0,"u32")}\n        ${_("data",1,"u32")}\n        ${_("data",2,"u32")}\n        ${_("data",3,"u32")}\n        ${C.setByOffset("global_idx","data")}\n      }`}else I=`\n        let outputIndices = ${C.offsetToIndices("global_idx")};\n        let inputOffset = ${b.broadcastedIndicesToOffset("outputIndices",C)};\n        ${C.setByOffset("global_idx",b.getByOffset("inputOffset"))}\n      }`;return`\n    ${y.registerUniform("vec_size","u32").declareVariables(b,C)}\n    ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${I}`},g=[{type:"uint32",data:d}];return l&&g.push(...F(t)),a&&g.push(...F(o)),{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:[l?"rank":"dims"]},getShaderSource:f,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:g})}},Cs=e=>{kl(e.inputs),e.compute(Dl(e.inputs),{inputs:[0]})}});var Ml,zl,As,Ts,Es=X(()=>{"use strict";Ne();xe();Fe();$e();Ml=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},zl=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,u=N.normalizeAxis(t.axis,n),d=r.slice(0);d.splice(u,1,...o);let l=r[u],a=e[0].dataType===9?4:1,f=Math.ceil(N.size(d)/a),g=Be(e[0].dims.length),y=g?e[0].dims.length:e[0].dims,v=Be(e[1].dims.length),$=v?e[1].dims.length:e[1].dims,b=Be(d.length),C=b?d.length:d,I=[{type:"uint32",data:f},{type:"int32",data:l},{type:"uint32",data:u}];g&&I.push(...F(e[0].dims)),v&&I.push(...F(e[1].dims)),b&&I.push(...F(d));let _=[];_.push(g?"rank":"dims"),_.push(v?"rank":"dims");let S=E=>{let T=U("data",e[0].dataType,y,a),z=U("inputIndices",e[1].dataType,$),B=Q("output",e[0].dataType,C,a),V=Z=>{let R=o.length,j=`var indicesIndices${Z}  = ${z.type.indices}(0);`;for(let J=0;J<R;J++)j+=`${R>1?`indicesIndices${Z}[${J}]`:`indicesIndices${Z}`} = ${d.length>1?`outputIndices${Z}[uniforms.axis + ${J}]`:`outputIndices${Z}`};`;j+=`\n          var idx${Z} = ${z.getByIndices(`indicesIndices${Z}`)};\n          if (idx${Z} < 0) {\n            idx${Z} = idx${Z} + uniforms.axisDimLimit;\n          }\n          var dataIndices${Z} = ${T.type.indices}(0);\n        `;for(let J=0,re=0;J<n;J++)J===u?(j+=`${n>1?`dataIndices${Z}[${J}]`:`dataIndices${Z}`} = u32(idx${Z});`,re+=R):(j+=`${n>1?`dataIndices${Z}[${J}]`:`dataIndices${Z}`} = ${d.length>1?`outputIndices${Z}[${re}]`:`outputIndices${Z}`};`,re++);return j},W;if(e[0].dataType===9){let Z=(R,j,J="")=>`\n          let outputIndices${j} = ${B.offsetToIndices(`outputOffset + ${j}u`)};\n          ${V(j)};\n          let offset${j} = ${T.indicesToOffset(`dataIndices${j}`)};\n          let index${j} = offset${j} / 4u;\n          let component${j} = offset${j} % 4u;\n          ${R}[${j}] = ${J}(${T.getByOffset(`index${j}`)}[component${j}]);\n        `;W=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${Z("value",0,"u32")}\n        ${Z("value",1,"u32")}\n        ${Z("value",2,"u32")}\n        ${Z("value",3,"u32")}\n        ${B.setByOffset("global_idx","value")}\n      `}else W=`\n      let outputIndices = ${B.offsetToIndices("global_idx")};\n      ${V("")};\n      let value = ${T.getByIndices("dataIndices")};\n      ${B.setByOffset("global_idx","value")};\n      `;return`\n      ${E.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(T,z,B)}\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${W}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:_},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:I}),getShaderSource:S}},As=e=>fe({axis:e.axis}),Ts=(e,t)=>{let r=e.inputs;Ml(r),e.compute(zl(e.inputs,t))}});var Ul,Vl,Os,Ps,Rs=X(()=>{"use strict";xe();Fe();$e();Ul=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Vl=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,u=e[1].dims,d=e[1].dataType,l=N.normalizeAxis(t.axis,n),a=r[l],f=u.slice(0),g=N.size(f),y=U("input",o,n),v=U("indicesInput",d,u.length),$=Q("output",o,f.length),b=[{type:"uint32",data:g},{type:"int32",data:a},{type:"uint32",data:l}];return b.push(...F(r)),b.push(...F(u)),b.push(...F(f)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:f,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:b}),getShaderSource:_=>`\n      ${_.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,v,$)}\n      ${_.mainStart()}\n      ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${$.offsetToIndices("global_idx")};\n\n      var idx = ${v.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${y.type.indices}(outputIndices);\n      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${y.getByIndices("inputIndices")};\n\n      ${$.setByOffset("global_idx","value")};\n  }`}},Os=e=>fe({axis:e.axis}),Ps=(e,t)=>{let r=e.inputs;Ul(r),e.compute(Vl(e.inputs,t))}});var Nl,Wl,ks,Bs,Ds=X(()=>{"use strict";xe();$e();Nl=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Wl=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,u,d]=wn.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),l=[n,u];if(!l)throw new Error("Can\'t use gemm on the given tensors");let a=N.size(l),f=[{type:"uint32",data:a},{type:"uint32",data:n},{type:"uint32",data:u},{type:"uint32",data:d},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],g=["type","type"];e.length===3&&(f.push(...F(e[2].dims)),g.push("rank")),f.push(...F(l));let y=v=>{let $="";t.transA&&t.transB?$="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?$="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?$="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&($="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let b=t.alpha===1?"":"value *= uniforms.alpha;",C=U("a",e[0].dataType,e[0].dims),I=U("b",e[1].dataType,e[1].dims),_=C.type.value,S=null,E=[C,I];e.length===3&&(S=U("c",e[2].dataType,e[2].dims.length),E.push(S));let T=Q("output",e[0].dataType,l.length);E.push(T);let z=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${v.registerUniforms(z).declareVariables(...E)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${_}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${$}\n    }\n\n    ${b}\n    ${(()=>S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += ${_}(uniforms.beta) * ${S.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:f}),getShaderSource:y}},ks=e=>{let t=e.transA,r=e.transB,o=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:o,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},Bs=(e,t)=>{Nl(e.inputs),e.compute(Wl(e.inputs,t))}});var Hl,Gl,Ll,Ms,zs=X(()=>{"use strict";Ne();xe();$e();Hl=(e,t)=>{let r=e[0].dims,o=r,n=2,u=N.sizeToDimension(r,n),d=N.sizeFromDimension(r,n),l=We(d),a=d/l,f=[r[0],r[1],a],g=["rank","type","type"],y=[{type:"uint32",data:d},{type:"uint32",data:a}];y.push(...F(f),...F(f));let v=$=>{let b=U("x",e[0].dataType,f.length,l),C=U("scale",e[1].dataType,e[1].dims),I=U("bias",e[2].dataType,e[2].dims),_=Q("output",e[0].dataType,f.length,l),S=[b,C,I,_],E=b.type.value,T=l===1?"f32":`vec${l}<f32>`,z=64,B=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${T}, ${z}>;\n  const workgroupSize = ${z}u;\n  ${$.registerUniforms(B).declareVariables(...S)}\n  ${$.mainStart(z)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${T}(${b.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${nt("workgroupShared[0]",l)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${T}(${b.get("batch","channel","h")}) - ${T}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${nt("workgroupShared[0]",l)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${C.getByOffset("channel")});\n    let channelShift = f32(${I.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${b.get("batch","channel","h")} * ${E}(${T}(channelScale)) + ${E}(${T}(channelShift));\n      ${_.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${l}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:u},programUniforms:y}),getShaderSource:v}},Gl=(e,t,r,o,n,u,d,l)=>{let a=We(d),f=64,g=a===1?"vec2f":`mat2x${a}f`,y=a===1?"f32":`vec${a}f`,v=(B,V)=>`${g}(${B}, ${V})`,$=n*d/a,b=Math.ceil(u/f),C=["type"],I=[{type:"uint32",data:b},{type:"uint32",data:u},{type:"uint32",data:Math.floor(d/a)},{type:"uint32",data:Math.floor(u*d/a)}],_=B=>{let V=U("input",t.dataType,t.dims,a);return`\n  ${B.declareVariables(V)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${g}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${B.mainStart(f)}\n    let currentImageNumber = global_idx / ${f} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${f}) % uniforms.C;\n    let wgId = global_idx % ${f};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Xe("f32",a)};\n    var squaredSum = ${Xe("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${y}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${v("sum","squaredSum")};\n  }`},S=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${a}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:[n,d,f,2],dataType:1}],dispatchGroup:{x:n*d/a},programUniforms:I}),getShaderSource:_},{inputs:[t],outputs:[-1]})[0],E=[{type:"uint32",data:$},{type:"uint32",data:u},{type:"uint32",data:Math.floor(d/a)},{type:"uint32",data:Math.floor(f*d/a)}],T=["type","type","type"],z=B=>{let V=U("scale",r.dataType,r.dims,a),W=U("bias",o.dataType,o.dims,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${g}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${V.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${W.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${g}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${B.mainStart()}\n    ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Xe("f32",a)};\n    var squaredSum = ${Xe("f32",a)};\n    for (var i: u32 = 0; i < ${f}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${f}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${l}));\n    let channelScale = invStdDev * ${y}(scale[currentChannelNumber]);\n    let channelShift = ${y}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${v("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${a};${l}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:[n,d,2],dataType:1}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:E}),getShaderSource:z},{inputs:[S,r,o],outputs:[-1]})[0]},Ll=(e,t,r)=>{let o=t[0].dims,n=o,u=o[0],d=o[o.length-1],l=N.sizeFromDimension(o,1)/d,a=We(d),f=N.size(n)/a,g=[{type:"uint32",data:l},{type:"uint32",data:Math.floor(d/a)}],y=["type","type"],v=Gl(e,t[0],t[1],t[2],u,l,d,r.epsilon),$=b=>{let C=Le(t[0].dataType),I=a===1?"vec2f":`mat2x${a}f`,_=a===1?C:`vec${a}<${C}>`,S=U("input",t[0].dataType,t[0].dims,a),E=Q("output",t[0].dataType,n,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${I}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${b.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${_}(scale[0]), ${_}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${a}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:g}),getShaderSource:$},{inputs:[t[0],v]})},Ms=(e,t)=>{t.format==="NHWC"?Ll(e,e.inputs,t):e.compute(Hl(e.inputs,t))}});var Fl,jl,Us,Vs=X(()=>{"use strict";Ne();xe();$e();Fl=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},jl=(e,t,r)=>{let o=e[0].dims,n=e[1],u=e[2],d=o,l=N.normalizeAxis(t.axis,o.length),a=N.sizeToDimension(o,l),f=N.sizeFromDimension(o,l),g=N.size(n.dims),y=u?N.size(u.dims):0;if(g!==f||u&&y!==f)throw new Error(`Size of X.shape()[axis:] == ${f}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${g} and bias size of ${y}`);let v=[];for(let T=0;T<o.length;++T)T<l?v.push(o[T]):v.push(1);let $=We(f),b=["type","type"],C=[{type:"uint32",data:a},{type:"float32",data:f},{type:"uint32",data:Math.floor(f/$)},{type:"float32",data:t.epsilon}];u&&b.push("type");let I=r>1,_=r>2,S=T=>{let z=Le(e[0].dataType),B=[U("x",e[0].dataType,e[0].dims,$),U("scale",n.dataType,n.dims,$)];u&&B.push(U("bias",u.dataType,u.dims,$)),B.push(Q("output",e[0].dataType,d,$)),I&&B.push(Q("mean_data_output",1,v)),_&&B.push(Q("inv_std_output",1,v));let V=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${T.registerUniforms(V).declareVariables(...B)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${Xe("f32",$)};\n    var meanSquareVector = ${Xe("f32",$)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${gt(z,$,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${nt("meanVector",$)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${nt("meanSquareVector",$)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${gt(z,$,"x[j + offset]")};\n      let f32scale = ${gt(z,$,"scale[j]")};\n      output[j + offset] = ${B[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${u?`+ ${gt(z,$,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"mean_data_output[global_idx] = mean":""};\n    ${_?"inv_std_output[global_idx] = invStdDev":""};\n  }`},E=[{dims:d,dataType:e[0].dataType}];return I&&E.push({dims:v,dataType:1}),_&&E.push({dims:v,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${$};${r}`,inputDependencies:b},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:C}),getShaderSource:S}},Us=(e,t)=>{Fl(e.inputs),e.compute(jl(e.inputs,t,e.outputCount))}});var ql,Ws,Ns,Kl,To,Hs,Gs=X(()=>{"use strict";xe();Fe();ur();fo();$e();lr();ql=(e,t)=>{let r=e[0],o=e[1],n=e[2],u=e[3],d=e[4],l=e[5],a=e[6],f=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let g=!1,y=r.dims[0],v=r.dims[1],$=r.dims.length===3?g?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=v,C=0,I=0,_=Math.floor($/t.numHeads);if(a&&f){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(f.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');C=a.dims[2],I=a.dims[2]}else if(a||f)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let S;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');S=2,b=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==_)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');S=5,b=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==_)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');S=0,b=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');S=3}if(u){if(u.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(d){E=8;let W=d.dims;throw W.length===1?W[0]===y?E=1:W[0]===3*y+2&&(E=3):W.length===2&&W[0]===y&&W[1]===b&&(E=5),E===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let T=!1,z=$;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(b!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');z=n.dims[2]}else{if(b!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');z=n.dims[1]*n.dims[3],T=!0}}let B=C+b,V=!1;if(d)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(f)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:v,pastSequenceLength:C,kvSequenceLength:b,totalSequenceLength:B,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:$,vHiddenSize:z,headSize:_,vHeadSize:Math.floor(z/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:E,scale:t.scale,broadcastResPosBias:V,passPastInKv:T,qkvFormat:S}},Ws=e=>fe({...e}),Ns=fe({perm:[0,2,1,3]}),Kl=(e,t,r,o,n,u,d)=>{let l=[o,n,u],a=N.size(l),f=[{type:"uint32",data:a},{type:"uint32",data:d},{type:"uint32",data:u}],g=y=>{let v=Q("qkv_with_bias",t.dataType,l),$=U("qkv",t.dataType,l),b=U("bias",r.dataType,l),C=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${y.registerUniforms(C).declareVariables($,b,v)}\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:f}),getShaderSource:g},{inputs:[t,r],outputs:[-1]})[0]},To=(e,t,r,o,n,u,d,l)=>{let a=u;if(d){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Kl(e,u,d,t,o,r*n,l),a=a.reshape([t,o,r,n]),e.compute(dt(a,Ns.perm),{inputs:[a],outputs:[-1]})[0]}else return u.dims.length===3&&(a=u.reshape([t,o,r,n])),e.compute(dt(a,Ns.perm),{inputs:[a],outputs:[-1]})[0]},Hs=(e,t)=>{let r=ql(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=To(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Cn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let u=To(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),d=To(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Cn(e,n,u,d,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Yl,Zl,Ql,Xl,Jl,ec,tc,rc,Ls,Fs=X(()=>{"use strict";Ne();xe();$e();Yl=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Zl=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n            k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n              break;\n            }\n            offset += k * i32(${de("uniforms.x_strides",n,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},Ql=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${de("uniforms.x_shape",n,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${de("uniforms.x_shape",n,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Xl=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n                  k = i32(${de("uniforms.x_shape",n,t)}) - 1;\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Jl=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0)  {\n                  k += i32(${de("uniforms.x_shape",n,t)}]);\n                }\n                if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n                  k -= i32(${de("uniforms.x_shape",n,t)});\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},ec=(e,t,r)=>{switch(r.mode){case 0:return Zl(e,t,r.pads.length);case 1:return Ql(e,t,r.pads.length);case 2:return Xl(e,t,r.pads.length);case 3:return Jl(e,t,r.pads.length);default:throw new Error("Invalid mode")}},tc=(e,t)=>{let r=N.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,u=[{type:"uint32",data:N.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let a=rt(e[0].dataType);u.push({type:a,data:t.value})}u.push(...F(e[0].dims),...F(r));let d=["rank"],l=a=>{let f=Q("output",e[0].dataType,r.length),g=U("x",e[0].dataType,o.length),y=g.type.value,v=ec(f,o.length,t),$=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&$.push({name:"constant_value",type:y}),`\n            ${a.registerUniforms($).declareVariables(g,f)}\n            ${a.mainStart()}\n            ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${f.offsetToIndices("global_idx")};\n\n            var value = ${y}(0);\n            ${v}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(N.size(r)/64)},programUniforms:u}),getShaderSource:l}},rc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,u=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let a=0;a<l.length;a++)u[Number(l[a])]=Number(r[a]),u[Number(l[a])+n]=Number(r[a+l.length])}else r.forEach((l,a)=>u[Number(a)]=Number(l));let d=[];return u.forEach(l=>d.push(l)),{mode:t.mode,value:o,pads:d}}else return t},Ls=(e,t)=>{Yl(e.inputs);let r=rc(e.inputs,t);e.compute(tc(e.inputs,r),{inputs:[0]})}});var Dn,js,qs,Ks,Ys,nc,oc,Zs,Qs,Xs,Js,eu,tu,ru,nu,ou,au,iu,su,uu=X(()=>{"use strict";sr();xe();$e();Dn=e=>{if(ir.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},js=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let u=Object.hasOwnProperty.call(t,"dilations"),d=t.kernelShape.slice(),l=t.strides.slice(),a=u?t.dilations.slice():[],f=t.pads.slice();Lt.adjustPoolAttributes(r,n,d,l,a,f);let g=Lt.computePoolOutputShape(r,n,l,a,d,f,t.autoPad),y=Object.assign({},t);u?Object.assign(y,{kernelShape:d,strides:l,pads:f,dilations:a,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:d,strides:l,pads:f,cacheKey:t.cacheKey});let v=g.slice();return v.push(v.splice(1,1)[0]),[y,o?v:g]},qs=(e,t)=>{let r=t.format==="NHWC",o=N.size(e),n=N.size(t.kernelShape),u=[{type:"uint32",data:o},{type:"uint32",data:n}],d=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let l=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],f=t.pads[t.pads.length/2-1],g=t.pads[t.pads.length-1],y=!!(f+g);u.push({type:"uint32",data:l},{type:"uint32",data:a},{type:"uint32",data:f},{type:"uint32",data:g}),d.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let v=!1;if(t.kernelShape.length===2){let $=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],C=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];v=!!(C+I),u.push({type:"uint32",data:$},{type:"uint32",data:b},{type:"uint32",data:C},{type:"uint32",data:I}),d.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[u,d,!0,y,v]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let l=N.computeStrides(t.kernelShape);u.push({type:"uint32",data:l},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),d.push({name:"kernelStrides",type:"u32",length:l.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((f,g)=>f+g);return[u,d,!!a,!1,!1]}},Ks=(e,t,r,o,n,u,d,l,a,f,g,y)=>{let v=n.format==="NHWC",$=t.type.value,b=Q("output",t.type.tensor,o);if(n.kernelShape.length<=2){let C="",I="",_="",S=r-(v?2:1);if(g?C=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${S}] < 0 || xIndices[${S}]\n                      >= uniforms.x_shape[${S}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`:C=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`,n.kernelShape.length===2){let T=r-(v?3:2);y?I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${T}] < 0 || xIndices[${T}] >= uniforms.x_shape[${T}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                `,_=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var value = ${$}(${l});\n              var pad = 0;\n              ${I}\n              ${C}\n              ${_}\n              ${d}\n\n              output[global_idx] = value;\n            }`}else{if(v)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let C=n.kernelShape.length,I=n.pads.length,_="";return f?_=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${u}\n              }`:_=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${u}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${C}>;\n\n              var value = ${$}(${l});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${C-1}u; j++) {\n                  offsets[j] = offset / ${de("uniforms.kernelStrides","j",C)};\n                  offset -= offsets[j] * ${de("uniforms.kernelStrides","j",C)};\n                }\n                offsets[${C-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-C}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${de("uniforms.strides",`j - ${r-C}u`,C)}\n                    + offsets[j - ${r-C}u] - ${de("uniforms.pads","j - 2u",I)};\n                  ${_}\n              }\n              ${d}\n\n              output[global_idx] = value;\n            }`}},Ys=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,nc=e=>`${Ys(e)};${e.countIncludePad}`,oc=e=>`${Ys(e)};${e.storageOrder};${e.dilations}`,Zs=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Qs=(e,t,r,o)=>{let[n,u]=js(t,o,r),d=U("x",t.dataType,t.dims.length),l=d.type.value,a="value += x_val;",f="";n.countIncludePad?f+=`value /= ${l}(uniforms.kernelSize);`:f+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[g,y,v,$,b]=qs(u,n);g.push(...F(t.dims),...F(u));let C=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${v};${$};${b}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(N.size(u)/64)},programUniforms:g}),getShaderSource:I=>Ks(I,d,t.dims.length,u.length,n,a,f,0,y,v,$,b)}},Xs=e=>{let t=e.count_include_pad!==0,r=Zs(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:nc(o)}},Js=(e,t)=>{Dn(e.inputs),e.compute(Qs("AveragePool",e.inputs[0],!1,t))},eu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},tu=e=>{let t=e.format;return{format:t,...eu,cacheKey:t}},ru=(e,t)=>{Dn(e.inputs),e.compute(Qs("GlobalAveragePool",e.inputs[0],!0,t))},nu=(e,t,r,o)=>{let[n,u]=js(t,o,r),d=`\n      value = max(x_val, value);\n    `,l="",a=U("x",t.dataType,t.dims.length),f=["rank"],[g,y,v,$,b]=qs(u,n);return g.push(...F(t.dims),...F(u)),{name:e,shaderCache:{hint:`${o.cacheKey};${v};${$};${b}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(N.size(u)/64)},programUniforms:g}),getShaderSource:C=>Ks(C,a,t.dims.length,u.length,n,d,l,-1e5,y,v,$,b)}},ou=(e,t)=>{Dn(e.inputs),e.compute(nu("MaxPool",e.inputs[0],!1,t))},au=e=>{let t=e.storage_order,r=e.dilations,o=Zs(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...o,cacheKey:""};return{...n,cacheKey:oc(n)}},iu=e=>{let t=e.format;return{format:t,...eu,cacheKey:t}},su=(e,t)=>{Dn(e.inputs),e.compute(nu("GlobalMaxPool",e.inputs[0],!0,t))}});var ic,sc,du,lu=X(()=>{"use strict";sr();Ne();$e();ic=(e,t,r)=>{let o=e===t,n=e<t&&r<0,u=e>t&&r>0;if(o||n||u)throw new Error("Range these inputs\' contents are invalid.")},sc=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),u=[n],d=n,l=rt(o),a=[{type:"uint32",data:d},{type:l,data:e},{type:l,data:r},...F(u)],f=g=>{let y=Q("output",o,u.length),v=y.type.value,$=[{name:"outputSize",type:"u32"},{name:"start",type:v},{name:"delta",type:v}];return`\n        ${g.registerUniforms($).declareVariables(y)}\n        ${g.mainStart()}\n        ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${v}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:f,getRunData:()=>({outputs:[{dims:u,dataType:o}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:a})}},du=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),ir.webgpu.validateInputContent&&ic(t,r,o),e.compute(sc(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var uc,dc,lc,cc,pc,mc,fc,hc,gc,yc,bc,cu,wc,vc,$c,Sc,xc,pu,mu,fu=X(()=>{"use strict";xe();Fe();$e();uc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},dc=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,u)=>o[n]=e[u]),o},lc=(e,t,r,o,n,u)=>{let[d,l,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],f=e[0].dims.length;if(d>0&&e.length>d&&e[d].dims.length>0)e[d].getFloat32Array().forEach(g=>u.push(g));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(g=>o.push(g)),o.length!==0&&o.length!==f&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");uc(o,t),t.axes.length>0&&dc(o,t.axes,f).forEach((g,y)=>o[y]=g)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(g=>n.push(Number(g))),n.length!==f||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>f)throw new Error("Resize requires only of scales or sizes to be specified")},cc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",pc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",mc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((u,d)=>{o[u]=n[d],o[d+r]=n[t.length+d]}),o):n},fc=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(u=>n.push(u)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((u,d)=>n[u]=r[d])}else r.forEach(u=>n.push(u));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((u,d)=>Math.round(u*t[d]))}return n},hc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(u=>t[u]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(u=>t[u]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(u=>t[u]=o),r.axes.forEach(u=>n[u]=Math.round(e[u]*t[u]))):(t.fill(o,0,t.length),n.forEach((u,d)=>n[d]=Math.round(u*t[d]))),n},gc=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${de("uniforms.scales","i",o)};\n        var roi_low = ${de("uniforms.roi","i",n)};\n        var roi_hi = ${de("uniforms.roi",`i + ${t.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${de("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${de("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,yc=(e,t,r,o,n,u,d)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${de("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${de("uniforms.roi","i",u)};\n          var roi_hi = ${de("uniforms.roi",`i + ${r.length}`,u)};\n          var input_shape_i = ${de("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${de("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${d} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,bc=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${de("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,cu=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",wc=(e,t,r,o,n)=>{let[d,l,a,f]=r.length===2?[-1,0,1,-1]:[0,2,3,1],g=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${g} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",l,`max(0, min(row, ${r[l]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${r[a]} - 1))`)};\n      ${cu(e,f,d,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${g} = originalIndices[${l}];\n      var col:${g} = originalIndices[${a}];\n      ${o?`if (row < 0 || row > (${r[l]} - 1) || col < 0 || col > (${r[a]} - 1)) {\n        return ${n};\n      }`:""};\n      row = max(0, min(row, ${r[l]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${f}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${d}])`:"0"};\n      var x11: ${g} = getInputValue(batch, channel, row1, col1);\n      var x12: ${g} = getInputValue(batch, channel, row1, col2);\n      var x21: ${g} = getInputValue(batch, channel, row2, col1);\n      var x22: ${g} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${g} = abs(row - ${g}(row1));\n      var dx2: ${g} = abs(${g}(row2) - row);\n      var dy1: ${g} = abs(col - ${g}(col1));\n      var dy2: ${g} = abs(${g}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},vc=(e,t,r,o,n,u,d,l,a,f)=>{let g=r.length===2,y=!0,[v,$]=g?[0,1]:y?[2,3]:[1,2],b=e.type.value,C=I=>{let _=I===v?"row":"col";return`\n      fn ${_}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${b} {\n        var output_index = ${t.indicesGet("output_indices",I)};\n        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[I]},\n        ${o[I]}, ${r[I]}, ${u[I]}, ${u[I]} + ${r.length});\n        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${l} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {\n          return ${a};\n        }\n        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${_}: ${b} = originalIdx + ${b}(i);\n          if (${_} < 0 || ${_} >= ${r[I]}) {\n            ${(()=>f?`coefs[i + 1] = 0.0;\n                        continue;`:l?`return ${a};`:`${_} = max(0, min(${_}, ${r[I]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",I,`u32(${_})`)};\n          data[i + 1] = ${I===v?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${C(v)};\n    ${C($)};\n  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${b} = 1.0 - absS;\n    var twoMinusAbsS: ${b} = 2.0 - absS;\n    var onePlusAbsS: ${b} = 1.0 + absS;\n    coeffs[0] = ((${d} * onePlusAbsS - 5 * ${d}) * onePlusAbsS + 8 * ${d}) * onePlusAbsS - 4 * ${d};\n    coeffs[1] = ((${d} + 2) * absS - (${d} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${d} + 2) * oneMinusAbsS - (${d} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${d} * twoMinusAbsS - 5 * ${d}) * twoMinusAbsS + 8 * ${d}) * twoMinusAbsS - 4 * ${d};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {\n    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${b} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},$c=(e,t,r,o,n)=>{let[d,l,a,f,g]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],y=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${y} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",l,`max(0, min(depth, ${r[l]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(height, ${r[a]} - 1))`)};\n      ${e.indicesSet("input_indices",f,`max(0, min(width, ${r[f]} - 1))`)};\n      ${cu(e,g,d,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${y} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${y} = originalIndices[${l}];\n      var height:${y} = originalIndices[${a}];\n      var width:${y} = originalIndices[${f}];\n      ${o?`if (depth < 0 || depth > (${r[l]} - 1) || height < 0 || height > (${r[a]} - 1) || width < 0 || (width > ${r[f]} - 1)) {\n      return ${n};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[l]} - 1));\n      height = max(0, min(height, ${r[a]} - 1));\n      width = max(0, min(width, ${r[f]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${g}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${d}])`:"0"};\n\n      var x111: ${y} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${y} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${y} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${y} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${y} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${y} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${y} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${y} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${y} = abs(depth - ${y}(depth1));\n      var dx2: ${y} = abs(${y}(depth2) - depth);\n      var dy1: ${y} = abs(height - ${y}(height1));\n      var dy2: ${y} = abs(${y}(height2) - height);\n      var dz1: ${y} = abs(width - ${y}(width1));\n      var dz2: ${y} = abs(${y}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Sc=(e,t,r,o,n,u)=>{let d=e.dims,l=mc(u,t.axes,d.length),a=fc(d,o,n,t.axes),f=o.slice();o.length===0&&(f=d.map((S,E)=>S===0?1:a[E]/S),t.keepAspectRatioPolicy!=="stretch"&&(a=hc(d,f,t)));let g=Q("output",e.dataType,a.length),y=U("input",e.dataType,d.length),v=N.size(a),$=d.length===a.length&&d.every((S,E)=>S===a[E]),b=t.coordinateTransformMode==="tf_crop_and_resize",C=t.extrapolationValue,I=y.type.value,_=S=>`\n      ${$?"":`\n      ${cc(t.coordinateTransformMode,I)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${bc(y,d)};\n              ${pc(t.nearestMode,r,I)};\n              ${yc(y,g,d,a,f.length,l.length,b)};\n              `;case"linear":return`\n              ${gc(g,d,a,f.length,l.length)};\n              ${(()=>{if(d.length===2||d.length===4)return`${wc(y,g,d,b,C)}`;if(d.length===3||d.length===5)return`${$c(y,g,d,b,C)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(d.length===2||d.length===4)return`${vc(y,g,d,a,f,l,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",f.length).registerUniform("roi","f32",l.length).declareVariables(y,g)}\n      ${S.mainStart()}\n        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${$?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${g.offsetToIndices("global_idx")};\n        var input_indices: ${y.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${y.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${d.length===2||d.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${f.length>0?f:""}|${n.length>0?n:""}|${l.length>0?l:""}|${$}|${d}`,inputDependencies:["rank"]},getShaderSource:_,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:"uint32",data:v},{type:"float32",data:f},{type:"float32",data:l},...F(d),...F(a)]})}},xc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},pu=(e,t)=>{let r=[],o=[],n=[],u=xc(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");lc(e.inputs,t,u,r,o,n),e.compute(Sc(e.inputs[0],t,u,r,o,n),{inputs:[0]})},mu=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,u=e.excludeOutside!==0,d=e.extrapolationValue,l=e.keepAspectRatioPolicy,a=e.mode,f=e.nearestMode===""?"simple":e.nearestMode;return fe({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:u,extrapolationValue:d,keepAspectRatioPolicy:l,mode:a,nearestMode:f})}});var _c,Cc,hu,gu,yu=X(()=>{"use strict";Ne();xe();Fe();$e();_c=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],u=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==u)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let d=e[3];if(d.dims.length!==1)throw new Error("Beta must be 1D");if(d.dims[d.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let d=e[4];if(d.dims.length!==1)throw new Error("Bias must be 1D");if(d.dims[d.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},Cc=(e,t,r,o)=>{let n=e[0].dims,u=N.size(n),d=n,l=u,a=n.slice(-1)[0],f=o?n.slice(0,-1).concat(1):[],g=e.length>3,y=e.length>4,v=o&&r>1,$=o&&r>2,b=r>3,C=We(a),I=[U("x",e[0].dataType,e[0].dims,C),U("skip",e[1].dataType,e[1].dims,C),U("gamma",e[2].dataType,e[2].dims,C)];g&&I.push(U("beta",e[3].dataType,e[3].dims,C)),y&&I.push(U("bias",e[4].dataType,e[4].dims,C)),I.push(Q("output",e[0].dataType,d,C)),v&&I.push(Q("meanOutput",1,f)),$&&I.push(Q("invStdOutput",1,f)),b&&I.push(Q("inputSkipBiasSum",e[0].dataType,d,C));let _=Le(e[0].dataType),S=T=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/C};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${T.declareVariables(...I)}\n\n      ${T.mainStart()}\n        ${T.guardAgainstOutOfBoundsWorkgroupSizes(l/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Xe("f32",C)};\n        var squareSum = ${Xe("f32",C)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${y?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${b?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${gt(_,C,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${nt("sum",C)} / hiddenSize;\n        let invStdDev = inverseSqrt(${nt("squareSum",C)} / hiddenSize - mean * mean + epsilon);\n        ${v?"meanOutput[global_idx] = mean;":""}\n        ${$?"invStdOutput[global_idx] = invStdDev;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${_}(mean)) * ${_}(invStdDev) * gamma[i]\n           + ${g?"beta[i]":"0.0"};\n        }\n      }`,E=[{dims:d,dataType:e[0].dataType}];return r>1&&E.push({dims:f,dataType:1}),r>2&&E.push({dims:f,dataType:1}),r>3&&E.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:S,getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(l/a/64)}})}},hu=(e,t)=>{_c(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(Cc(e.inputs,t,e.outputCount,!1),{outputs:o})},gu=e=>{let t=e.epsilon;return fe({epsilon:t})}});var Ic,Mn,Ac,bu,Tc,Ec,wu,vu,$u=X(()=>{"use strict";Ne();xe();Fe();$e();Ic=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Mn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},Ac=(e,t)=>{if(e.length>1){let r=Mn(e,1),o=Mn(e,2),n=Mn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),fe({starts:r,ends:o,axes:n})}else return t},bu=(e,t,r,o,n)=>{let u=e;return e<0&&(u+=r[o[t]]),n[t]<0?Math.max(0,Math.min(u,r[o[t]]-1)):Math.max(0,Math.min(u,r[o[t]]))},Tc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${de("uniforms.input_shape","i",r.length)};\n            let steps_i = ${de("uniforms.steps","i",r.length)};\n            let signs_i = ${de("uniforms.signs","i",r.length)};\n            let starts_i = ${de("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,Ec=(e,t)=>{let r=e[0].dims,o=N.size(r),n=t.axes.length>0?N.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],u=Mn(e,4);u.forEach(_=>_!==0||(()=>{throw new Error("step cannot be 0")})),u.length===0&&(u=Array(n.length).fill(1));let d=t.starts.map((_,S)=>bu(_,S,r,n,u)),l=t.ends.map((_,S)=>bu(_,S,r,n,u));if(n.length!==d.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let _=0;_<r.length;++_)n.includes(_)||(d.splice(_,0,0),l.splice(_,0,r[_]),u.splice(_,0,1));let a=u.map(_=>Math.sign(_));u.forEach((_,S,E)=>{if(_<0){let T=(l[S]-d[S])/_,z=d[S],B=z+T*u[S];d[S]=B,l[S]=z,E[S]=-_}});let f=r.slice(0);n.forEach((_,S)=>{f[_]=Math.ceil((l[_]-d[_])/u[_])});let g={dims:f,dataType:e[0].dataType},y=Q("output",e[0].dataType,f.length),v=U("input",e[0].dataType,e[0].dims.length),$=N.size(f),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:d.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:u.length}],C=[{type:"uint32",data:$},{type:"uint32",data:d},{type:"int32",data:a},{type:"uint32",data:u},...F(e[0].dims),...F(f)],I=_=>`\n      ${_.registerUniforms(b).declareVariables(v,y)}\n        ${Tc(v,y,r)}\n        ${_.mainStart()}\n          ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${y.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${y.setByOffset("global_idx",v.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${d.length}_${u.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[g],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:C})}},wu=(e,t)=>{Ic(e.inputs,t);let r=Ac(e.inputs,t);e.compute(Ec(e.inputs,r),{inputs:[0]})},vu=e=>{let t=e.starts,r=e.ends,o=e.axes;return fe({starts:t,ends:r,axes:o})}});var Oc,Pc,Su,xu,_u=X(()=>{"use strict";xe();Fe();$e();Oc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Pc=(e,t)=>{let r=e.dims,o=N.size(r),n=64,u=t.axis;if(u<0&&(u=r.length+u),u<r.length-1)throw new Error("softmax only supports last axis for now.");let d=r[u],l=o/d,a=We(d),f=d/a,g=(I,_)=>_===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:_===2?`max(${I}.x, ${I}.y)`:_===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,y=U("x",e.dataType,e.dims,a),v=Q("result",e.dataType,e.dims,a),$=y.type.value,b=Le(e.dataType)==="f32"?`var threadMax = ${$}(-3.402823e+38f);`:`var threadMax = ${$}(-65504.0h);`,C=I=>`\n      var<workgroup> rowMaxShared : ${$};\n      var<workgroup> rowSumShared : ${$};\n      var<workgroup> threadShared : array<${$}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${$} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${$}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(y,v)}\n      ${I.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${$}(${g("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${$}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${$}(${nt("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:f}]}),getShaderSource:C}},Su=(e,t)=>{Oc(e.inputs),e.compute(Pc(e.inputs[0],t))},xu=e=>fe({axis:e.axis})});var Rc,kc,Bc,Dc,Mc,Cu,Iu,Au=X(()=>{"use strict";xe();Fe();$e();Rc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},kc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),fe({numOutputs:o,axis:t.axis,splitSizes:r})},Bc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${de("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Dc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (output_number == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${o}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Mc=(e,t)=>{let r=e[0].dims,o=N.size(r),n=e[0].dataType,u=N.normalizeAxis(t.axis,r.length),d=new Array(t.numOutputs),l=U("input",n,r),a=new Array(t.numOutputs),f=[],g=[],y=0,v=[{type:"uint32",data:o}];for(let b=0;b<t.numOutputs;b++){y+=t.splitSizes[b],a[b]=y;let C=r.slice();C[t.axis]=t.splitSizes[b],g.push(C),d[b]=Q(`output${b}`,n,C),f.push({dims:g[b],dataType:e[0].dataType})}v.push({type:"uint32",data:a}),v.push(...F(r)),g.forEach(b=>v.push(...F(b)));let $=b=>`\n  ${b.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",a.length).declareVariables(l,...d)}\n  ${Bc(a.length)}\n  ${Dc(d)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${l.offsetToIndices("global_idx")};\n    var index = ${l.indicesGet("indices",u)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${de("uniforms.size_in_split_axis","output_number - 1u",a.length)};\n      ${l.indicesSet("indices",u,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:$,getRunData:()=>({outputs:f,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:v})}},Cu=(e,t)=>{Rc(e.inputs);let r=e.inputs.length===1?t:kc(e.inputs,t);e.compute(Mc(e.inputs,r),{inputs:[0]})},Iu=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return fe({axis:t,numOutputs:o,splitSizes:r})}});var Tu,zc,Uc,Vc,Eu,Ou=X(()=>{"use strict";Ne();xe();$e();Tu=e=>Array.from(e.getBigInt64Array(),Number),zc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Tu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Uc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},Vc=e=>{let t=e[0].dims,r=Tu(e[1]),o=Uc(t,r),n=N.size(o),u=e[0].dataType,d=U("input",u,t.length),l=Q("output",u,o.length),a=f=>`\n      const inputShape = ${d.indices(...t)};\n      ${f.registerUniform("output_size","u32").declareVariables(d,l)}\n      ${f.mainStart()}\n      ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${l.offsetToIndices("global_idx")};\n      var input_indices: ${d.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${d.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${d.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${l.setByOffset("global_idx",d.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...F(e[0].dims),...F(o)]}),getShaderSource:a}},Eu=e=>{zc(e.inputs),e.compute(Vc(e.inputs),{inputs:[0]})}});var Nc,Wc,Pu,Ru=X(()=>{"use strict";Ne();xe();$e();Nc=(e,t,r,o,n)=>{let u=Q("output_data",n,r.length,4),d=U("a_data",t[1].dataType,t[1].dims.length,4),l=U("b_data",t[2].dataType,t[2].dims.length,4),a=U("c_data",t[0].dataType,t[0].dims.length,4),f,g=(y,v,$)=>`select(${v}, ${y}, ${$})`;if(!o)f=u.setByOffset("global_idx",g(d.getByOffset("global_idx"),l.getByOffset("global_idx"),a.getByOffset("global_idx")));else{let y=(v,$,b="")=>{let C=`a_data[index_a${$}][component_a${$}]`,I=`b_data[index_b${$}][component_b${$}]`,_=`bool(c_data[index_c${$}] & ${4278190080>>>(3-$)*8}u)`;return`\n            let output_indices${$} = ${u.offsetToIndices(`global_idx * 4u + ${$}u`)};\n            let offset_a${$} = ${d.broadcastedIndicesToOffset(`output_indices${$}`,u)};\n            let offset_b${$} = ${l.broadcastedIndicesToOffset(`output_indices${$}`,u)};\n            let offset_c${$} = ${a.broadcastedIndicesToOffset(`output_indices${$}`,u)};\n            let index_a${$} = offset_a${$} / 4u;\n            let index_b${$} = offset_b${$} / 4u;\n            let index_c${$} = offset_c${$} / 4u;\n            let component_a${$} = offset_a${$} % 4u;\n            let component_b${$} = offset_b${$} % 4u;\n            ${v}[${$}] = ${b}(${g(C,I,_)});\n          `};n===9?f=`\n            var data = vec4<u32>(0);\n            ${y("data",0,"u32")}\n            ${y("data",1,"u32")}\n            ${y("data",2,"u32")}\n            ${y("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:f=`\n            ${y("output_data[global_idx]",0)}\n            ${y("output_data[global_idx]",1)}\n            ${y("output_data[global_idx]",2)}\n            ${y("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(a,d,l,u)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${f}\n      }`},Wc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,u=!(N.areEqual(t,r)&&N.areEqual(r,o)),d=t,l=N.size(t);if(u){let f=St.calcShape(St.calcShape(t,r,!1),o,!1);if(!f)throw new Error("Can\'t perform where op on the given tensors");d=f,l=N.size(d)}let a=Math.ceil(l/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:f=>Nc(f,e,d,u,n),getRunData:()=>({outputs:[{dims:d,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:"uint32",data:a},...F(o),...F(t),...F(r),...F(d)]})}},Pu=e=>{e.compute(Wc(e.inputs))}});var ku,Bu=X(()=>{"use strict";ti();fo();oi();ii();Wi();Xi();ts();bo();hs();bs();xs();Is();Es();Rs();Ds();zs();Vs();vo();Gs();Fs();uu();lu();xn();fu();yu();$u();_u();Au();Ou();lr();ho();Ru();ku=new Map([["Abs",[si]],["Acos",[ui]],["Acosh",[di]],["Add",[Hi]],["ArgMax",[ei,mo]],["ArgMin",[Ja,mo]],["Asin",[li]],["Asinh",[ci]],["Atan",[pi]],["Atanh",[mi]],["Attention",[ri]],["AveragePool",[Js,Xs]],["BatchNormalization",[ni]],["BiasAdd",[ai]],["BiasSplitGelu",[Ni]],["Cast",[hi,fi]],["Ceil",[yi]],["Clip",[gi]],["Concat",[Ji,es]],["Conv",[xo,So]],["ConvTranspose",[fs,ms]],["Cos",[bi]],["Cosh",[wi]],["CumSum",[gs,ys]],["Div",[Gi]],["Einsum",[$s,Ss]],["Elu",[vi,In]],["Equal",[Li]],["Erf",[$i]],["Exp",[Si]],["Expand",[Cs]],["Floor",[xi]],["FusedConv",[xo,So]],["Gather",[Ts,As]],["GatherElements",[Ps,Os]],["Gelu",[_i]],["Gemm",[Bs,ks]],["GlobalAveragePool",[ru,tu]],["GlobalMaxPool",[su,iu]],["Greater",[Ki]],["GreaterOrEqual",[Zi]],["HardSigmoid",[Ri,Pi]],["InstanceNormalization",[Ms]],["LayerNormalization",[Us]],["LeakyRelu",[Ci,In]],["Less",[Yi]],["LessOrEqual",[Qi]],["Log",[Vi]],["MatMul",[ss]],["MaxPool",[ou,au]],["Mul",[Fi]],["MultiHeadAttention",[Hs,Ws]],["Neg",[Ai]],["Not",[Ii]],["Pad",[Ls]],["Pow",[ji]],["Range",[du]],["Reciprocal",[Ti]],["ReduceMin",[qa]],["ReduceMean",[Ha]],["ReduceMax",[ja]],["ReduceSum",[Ya]],["ReduceProd",[Ka]],["ReduceL1",[Ga]],["ReduceL2",[La]],["ReduceLogSum",[Qa]],["ReduceLogSumExp",[Fa]],["ReduceSumSquare",[Za]],["Relu",[Ei]],["Resize",[pu,mu]],["Sigmoid",[Oi]],["Sin",[ki]],["Sinh",[Bi]],["Slice",[wu,vu]],["SkipLayerNormalization",[hu,gu]],["Split",[Cu,Iu]],["Sqrt",[Di]],["Softmax",[Su,xu]],["Sub",[qi]],["Tan",[Mi]],["Tanh",[zi]],["ThresholdedRelu",[Ui,In]],["Tile",[Eu]],["Transpose",[Ea,Oa]],["Where",[Pu]]])});var zn,Du=X(()=>{"use strict";sr();kt();$e();ur();zn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,u){Ht(t.programInfo.name);let d=this.backend.device,l=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let a=[];for(let g of r)a.push({binding:a.length,resource:{buffer:g.buffer}});for(let g of o)a.push({binding:a.length,resource:{buffer:g.buffer}});u&&a.push({binding:a.length,resource:u});let f=d.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:a,label:t.programInfo.name});if(this.backend.status===1){let g={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:f,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(g)}l.setPipeline(t.computePipeline),l.setBindGroup(0,f),l.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Gt(t.programInfo.name)}dispose(){}build(t,r){Ht(t.name);let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let u=Aa(r),d=t.getShaderSource(u),l=`${n.join(`\n`)}\n${u.additionalImplementations}\n${d}`,a=o.createShaderModule({code:l,label:t.name});ke("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let f=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return Gt(t.name),{programInfo:t,computePipeline:f}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,u=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=u&&o<=u&&n<=u)return[r,o,n];let d=r*o*n,l=Math.ceil(Math.sqrt(d));if(l>u){if(l=Math.ceil(Math.cbrt(d)),l>u)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Hc,Gc,Un,Mu=X(()=>{"use strict";sr();Ne();kt();$a();Ia();Bu();Du();ur();Hc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let u=e[o].dims.length;r.push(`${n};${u}`);break}case"dims":{let u=e[o].dims.join(",");r.push(`${n};${u}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Gc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Hc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},Un=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.status=0;this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Ca(this),this.programManager=new zn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,wa(t.logLevel,!!t.debug),this.device.onuncapturederror=u=>{u.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${u.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder(),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE}))),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType==="at-passes"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Ht(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let n=0;n<r.length/2;n++){let u=o[n],d=u.kernelId,l=this.kernels.get(d),a=l.kernelType,f=l.kernelName,g=u.programName,y=u.inputTensorViews,v=u.outputTensorViews,$=r[n*2],b=r[n*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=$);let C=Number($-this.queryTimeBase),I=Number(b-this.queryTimeBase);if(!Number.isSafeInteger(C)||!Number.isSafeInteger(I))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:y.map(_=>({dims:_.dims,dataType:rt(_.dataType)})),outputsMetadata:v.map(_=>({dims:_.dims,dataType:rt(_.dataType)})),kernelId:d,kernelType:a,kernelName:f,programName:g,startTime:C,endTime:I});else{let _="";y.forEach((E,T)=>{_+=`input[${T}]: [${E.dims}] | ${rt(E.dataType)}, `});let S="";v.forEach((E,T)=>{S+=`output[${T}]: [${E.dims}] | ${rt(E.dataType)}, `}),console.log(`[profiling] kernel "${d}|${a}|${f}|${g}" ${_}${S}execution time: ${I-C} ns`)}ro("GPU",`${g}::${$}::${b}`)}t.unmap(),this.pendingQueries.delete(t)}),Gt()}run(t,r,o,n,u){Ht(t.name);let d=[];for(let S=0;S<r.length;++S){let E=this.gpuDataManager.get(r[S].data);if(!E)throw new Error(`no GPU data for input: ${r[S].data}`);d[S]=E}let{outputs:l,dispatchGroup:a,programUniforms:f}=t.getRunData(r),g=o.length===0?l.map((S,E)=>E):o;if(g.length!==l.length)throw new Error(`Output size ${g.length} must be equal to ${l.length}.`);let y=[],v=[];for(let S=0;S<l.length;++S){if(!Number.isInteger(g[S])||g[S]<-3||g[S]>=l.length)throw new Error(`Invalid output index: ${g[S]}`);if(g[S]===-3)continue;let E=g[S]===-1,T=g[S]===-2,z=E||T?u(l[S].dataType,l[S].dims):n(g[S],l[S].dataType,l[S].dims),B=this.gpuDataManager.get(z.data);if(!B)throw new Error(`no GPU data for output: ${z.data}`);if(E&&this.temporaryData.push(B),T){let V=this.kernelPersistentData.get(this.currentKernelId);V||(V=[],this.kernelPersistentData.set(this.currentKernelId,V)),V.push(B)}y.push(z),v.push(B)}let $;if(f){let S=0,E=[];f.forEach(V=>{let W=typeof V.data=="number"?[V.data]:V.data;if(W.length===0)return;let Z=W.length<=2?W.length*4:16;S=Math.ceil(S/Z)*Z,E.push(S),S+=W.length>4?Math.ceil(W.length/4)*16:W.length*4});let T=16;S=Math.ceil(S/T)*T;let z=new ArrayBuffer(S);f.forEach((V,W)=>{let Z=E[W],R=typeof V.data=="number"?[V.data]:V.data;V.type==="int32"?new Int32Array(z,Z,R.length).set(R):V.type==="uint32"?new Uint32Array(z,Z,R.length).set(R):new Float32Array(z,Z,R.length).set(R)});let B=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(B.buffer,0,z,0,S),this.gpuDataManager.release(B.id),$={offset:0,size:S,buffer:B.buffer}}let b=this.programManager.normalizeDispatchGroupSize(a),C=b[1]===1&&b[2]===1,I=Gc(t,r,C),_=this.programManager.getArtifact(I);if(_||(_=this.programManager.build(t,b),this.programManager.setArtifact(I,_),ke("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),ke("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.queryType!=="none"||this.status===1){let S={kernelId:this.currentKernelId,programName:_.programInfo.name,inputTensorViews:r,outputTensorViews:y};this.pendingKernels.push(S),this.capturedPendingKernels.get(this.currentSessionId).push(S)}return this.programManager.run(_,d,v,b,$),Gt(t.name),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let u=ku.get(t);if(!u)throw new Error(`kernel not implemented: ${t}`);let d={kernelType:t,kernelName:n,kernelEntry:u[0],attributes:[u[1],o]};this.kernels.set(r,d)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let u=n.kernelType,d=n.kernelName,l=n.kernelEntry,a=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${u}] ${d}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),ke("info",()=>`[WebGPU] Start to run kernel "[${u}] ${d}"...`);let f=this.env.debug;this.temporaryData=[];try{return f&&this.device.pushErrorScope("validation"),l(r,a[1]),0}catch(g){return o.push(Promise.resolve(`[WebGPU] Kernel "[${u}] ${d}" failed. ${g}`)),1}finally{f&&o.push(this.device.popErrorScope().then(g=>g?`GPU validation error for kernel "[${u}] ${d}": ${g.message}`:null));for(let g of this.temporaryData)this.gpuDataManager.release(g.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let u=this.sessionExternalDataMapping.get(t);u||(u=new Map,this.sessionExternalDataMapping.set(t,u));let d=u.get(r),l=this.gpuDataManager.registerExternalBuffer(o,n,d?.[1]);return u.set(r,[l,o]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await ao(this,t,r);return va(n.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"))}captureBegin(t){ke("info",()=>`captureBegin ${t}`),this.currentSessionId=t;let r=this.capturedCommandList.get(t),o=this.capturedPendingKernels.get(t);r||(r=[],this.capturedCommandList.set(t,r),o=[],this.capturedPendingKernels.set(t,o)),this.status=1}captureEnd(t){ke("info",()=>`captureEnd ${t}`),this.flush(),this.currentSessionId=null,this.status=0}replay(t){ke("info",()=>`replay ${t}`),this.currentSessionId=t,this.status=2;let r=this.capturedCommandList.get(t),o=this.capturedPendingKernels.get(t),n=r.length;this.pendingKernels=[];for(let u=0;u<n;u++){let d=this.getComputePassEncoder(),l=r[u];this.writeTimestamp(this.pendingDispatchNumber*2),d.setPipeline(l.computePipeline),d.setBindGroup(0,l.bindGroup),d.dispatchWorkgroups(...l.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(o[u]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.status=0}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(){this.setQueryType()}}});var zu={};pn(zu,{init:()=>Lc});var Mr,Eo,Lc,Uu=X(()=>{"use strict";Ne();Mu();kt();xe();Mr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=N.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=N.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=N.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(N.size(t)!==N.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Eo=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,u=o>>>2;this.opKernelContext=n[u++];let d=n[u++];this.outputCount=n[u++],this.customDataOffset=n[u++],this.customDataSize=n[u++];let l=[];for(let a=0;a<d;a++){let f=n[u++],g=n[u++],y=n[u++],v=[];for(let $=0;$<y;$++)v.push(n[u++]);l.push(new Mr(t,f,g,v))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],u=(l,a,f)=>new Mr(this.module,a,this.output(l,f),f),d=(l,a)=>{let f=Pr(l);if(!f)throw new Error(`Unsupported data type: ${l}`);let g=f*N.size(a);return new Mr(this.module,l,this.backend.gpuDataManager.create(g).id,a)};return this.backend.run(t,o,n,u,d)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),u=n>>2;this.module.HEAPU32[u++]=r.length;for(let d=0;d<r.length;d++)this.module.HEAPU32[u++]=r[d];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Lc=async(e,t,r)=>{let o=e.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new Un;await n.initialize(t,r),o(n,u=>n.alloc(u),u=>n.free(u),(u,d,l,a=!1)=>{if(a)ke("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${u}, dst=${d}, size=${l}`),n.memcpy(u,d);else{ke("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${u}, gpuDataId=${d}, size=${l}`);let f=e.HEAPU8.subarray(u>>>0,(u>>>0)+l);n.upload(d,f)}},async(u,d,l)=>{ke("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${d}, size=${l}`),await n.download(u,()=>e.HEAPU8.subarray(d>>>0,(d>>>0)+l))},(u,d,l)=>n.createKernel(u,d,l,e.UTF8ToString(e._JsepGetNodeName(d))),u=>n.releaseKernel(u),(u,d,l,a)=>{ke("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${l}, kernel=${u}, contextDataOffset=${d}`);let f=new Eo(e,n,d);return n.computeKernel(u,f,a)},u=>n.captureBegin(u),u=>n.captureEnd(u),u=>n.replay(u))}});var Yo;Yo=Vo();var od=jo(),Qn,Xn=!1,mn=!1,Ko=!1,ad=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},id=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},sd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Zo=async e=>{if(Xn)return Promise.resolve();if(mn)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Ko)throw new Error("previous call to \'initializeWebAssembly()\' failed.");mn=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=ad(r),u=o&&id(),d=e.wasmPaths,l=typeof d=="string"?d:void 0,a=sd(u,n),f=typeof d=="object"?d[a]:void 0,g=!1,y=[];if(t>0&&y.push(new Promise(v=>{setTimeout(()=>{g=!0,v()},t)})),y.push(new Promise((v,$)=>{let b=n?od:Yo,C={locateFile:(I,_)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([qo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(f)return f;let S=l??_;return a==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+a}return _+I}};if(n)if(C.numThreads=r,typeof Blob>"u")C.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;C.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(C).then(I=>{mn=!1,Xn=!0,Qn=I,v()},I=>{mn=!1,Ko=!0,$(I)})})),await Promise.race(y),g)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},ze=()=>{if(Xn&&Qn)return Qn;throw new Error("WebAssembly is not initialized yet.")};var Ue=(e,t)=>{let r=ze(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},Or=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,u])=>{let d=t?t+n:n;if(typeof u=="object")Or(u,d+".",r,o);else if(typeof u=="string"||typeof u=="number")o(d,u.toString());else if(typeof u=="boolean")o(d,u?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof u}`)})},Re=e=>{let t=ze(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],u=t.HEAPU32[o/4+1],d=u?t.UTF8ToString(u):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${d}`)}finally{t.stackRestore(r)}};var Qo=e=>{let t=ze(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let u=0;return e?.tag!==void 0&&(u=Ue(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,u),r===0&&Re("Can\'t create run options."),e?.extra!==void 0&&Or(e.extra,"",new WeakSet,(d,l)=>{let a=Ue(d,o),f=Ue(l,o);t._OrtAddRunConfigEntry(r,a,f)!==0&&Re(`Can\'t set a run config entry: ${d} - ${l}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(d=>t._free(d)),u}};var ud=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},dd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ld=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},cd=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"webnn":if(n="WEBNN",typeof o!="string"){let d=o;if(d?.deviceType){let l=Ue("deviceType",r),a=Ue(d.deviceType,r);ze()._OrtAddSessionConfigEntry(e,l,a)!==0&&Re(`Can\'t set a session config entry: \'deviceType\' - ${d.deviceType}.`)}if(d?.numThreads){let l=d.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let a=Ue("numThreads",r),f=Ue(l.toString(),r);ze()._OrtAddSessionConfigEntry(e,a,f)!==0&&Re(`Can\'t set a session config entry: \'numThreads\' - ${d.numThreads}.`)}if(d?.powerPreference){let l=Ue("powerPreference",r),a=Ue(d.powerPreference,r);ze()._OrtAddSessionConfigEntry(e,l,a)!==0&&Re(`Can\'t set a session config entry: \'powerPreference\' - ${d.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let d=o;if(d?.preferredLayout){if(d.preferredLayout!=="NCHW"&&d.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${d.preferredLayout}`);let l=Ue("preferredLayout",r),a=Ue(d.preferredLayout,r);ze()._OrtAddSessionConfigEntry(e,l,a)!==0&&Re(`Can\'t set a session config entry: \'preferredLayout\' - ${d.preferredLayout}.`)}if(d?.graphCaptureEnabled!==void 0){if(typeof d.graphCaptureEnabled!="boolean")throw new Error(`graphCaptureEnabled must be a boolean value: ${d.graphCaptureEnabled}`);let l=Ue("graphCaptureEnabled",r),a=Ue(d.graphCaptureEnabled.toString(),r);ze()._OrtAddSessionConfigEntry(e,l,a)!==0&&Re(`Can\'t set a session config entry: \'graphCaptureEnabled\' - ${d.graphCaptureEnabled}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let u=Ue(n,r);ze()._OrtAppendExecutionProvider(e,u)!==0&&Re(`Can\'t append execution provider: ${n}.`)}},Xo=e=>{let t=ze(),r=0,o=[],n=e||{};ld(n);try{let u=ud(n.graphOptimizationLevel??"all"),d=dd(n.executionMode??"sequential"),l=typeof n.logId=="string"?Ue(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let f=n.logVerbosityLevel??0;if(!Number.isInteger(f)||f<0||f>4)throw new Error(`log verbosity level is not valid: ${f}`);let g=typeof n.optimizedModelFilePath=="string"?Ue(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(u,!!n.enableCpuMemArena,!!n.enableMemPattern,d,!!n.enableProfiling,0,l,a,f,g),r===0&&Re("Can\'t create session options."),n.executionProviders&&cd(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[y,v]of Object.entries(n.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof v!="number"||!Number.isInteger(v)||v<0)throw new Error(`free dimension override value must be a non-negative integer: ${v}`);let $=Ue(y,o);t._OrtAddFreeDimensionOverride(r,$,v)!==0&&Re(`Can\'t set a free dimension override: ${y} - ${v}.`)}return n.extra!==void 0&&Or(n.extra,"",new WeakSet,(y,v)=>{let $=Ue(y,o),b=Ue(v,o);t._OrtAddSessionConfigEntry(r,$,b)!==0&&Re(`Can\'t set a session config entry: ${y} - ${v}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(d=>t._free(d)),u}};Ne();var ea=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let n of r)o.push(n);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let n=t.body.getReader(),u;try{u=new ArrayBuffer(o)}catch(l){if(l instanceof RangeError){let a=Math.ceil(o/65536);u=new WebAssembly.Memory({initial:a,maximum:a}).buffer}else throw l}let d=0;for(;;){let{done:l,value:a}=await n.read();if(l)break;let f=a.byteLength;new Uint8Array(u,d,f).set(a),d+=f}return new Uint8Array(u,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var Nu,Fc=(e,t)=>{ze()._OrtInit(e,t)!==0&&Re("Can\'t initialize onnxruntime.")},Wu=async e=>{Fc(e.wasm.numThreads,Rr(e.logLevel))},Hu=async(e,t)=>{if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let o=(Uu(),ar(zu)).init;await o(ze(),e,r)}Nu=t},cr=new Map,jc=e=>{let t=ze(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Re("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},Oo=e=>{let t=ze(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Gu=async(e,t)=>{let r,o,n=ze();Array.isArray(e)?[r,o]=e:e.buffer===n.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=Oo(e);let u=0,d=0,l=0,a=[],f=[],g=[];try{if([d,a]=Xo(t),t?.externalData&&n.mountExternalData){let S=[];for(let E of t.externalData){let T=typeof E=="string"?E:E.path;S.push(ea(typeof E=="string"?E:E.data).then(z=>{n.mountExternalData(T,z)}))}await Promise.all(S)}u=n._OrtCreateSession(r,o,d),u===0&&Re("Can\'t create a session.");let[y,v]=jc(u),$=!1;if(Nu==="webgpu"){let S=t?.executionProviders;for(let E of S)if((typeof E=="string"?E:E.name)==="webgpu"){let z=E;$=z.graphCaptureEnabled===void 0?!1:z.graphCaptureEnabled}}let b=[],C=[],I=[];for(let S=0;S<y;S++){let E=n._OrtGetInputName(u,S);E===0&&Re("Can\'t get an input name."),f.push(E),b.push(n.UTF8ToString(E))}for(let S=0;S<v;S++){let E=n._OrtGetOutputName(u,S);E===0&&Re("Can\'t get an output name."),g.push(E);let T=n.UTF8ToString(E);C.push(T);{if($){I.push("gpu-buffer");continue}let z=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[T]??"cpu";if(z!=="cpu"&&z!=="cpu-pinned"&&z!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${z}.`);I.push(z)}}let _=null;return I.some(S=>S==="gpu-buffer")&&(l=n._OrtCreateBinding(u),l===0&&Re("Can\'t create IO binding."),_={handle:l,outputPreferredLocations:I,outputPreferredLocationsEncoded:I.map(S=>eo(S))}),cr.set(u,[u,f,g,_,$,!1]),[u,b,C]}catch(y){throw f.forEach(v=>n._OrtFree(v)),g.forEach(v=>n._OrtFree(v)),l!==0&&n._OrtReleaseBinding(l),u!==0&&n._OrtReleaseSession(u),y}finally{n._free(r),d!==0&&n._OrtReleaseSessionOptions(d),a.forEach(y=>n._free(y)),n.unmountExternalData?.()}},Lu=e=>{let t=ze(),r=cr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,u,d]=r;d&&t._OrtReleaseBinding(d.handle),t.jsepOnReleaseSession?.(e),n.forEach(l=>t._OrtFree(l)),u.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(o),cr.delete(e)},Vu=(e,t,r,o,n,u=!1)=>{if(!e){t.push(0);return}let d=ze(),l=e[0],a=e[1],f=e[3],g,y;if(l==="string"&&f==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(u&&f!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${n} when graphCaptureEnabled is true.`);if(f==="gpu-buffer"){let b=e[2].gpuBuffer,C=Pr(Jn(l));y=a.reduce((I,_)=>I*_,1)*C,g=d.jsepRegisterBuffer(o,n,b,y)}else{let b=e[2];if(Array.isArray(b)){y=4*b.length,g=d._malloc(y),r.push(g);let C=g/4;for(let I=0;I<b.length;I++){if(typeof b[I]!="string")throw new TypeError(`tensor data at index ${I} is not a string`);d.HEAPU32[C++]=Ue(b[I],r)}}else y=b.byteLength,g=d._malloc(y),r.push(g),d.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,y),g)}let v=d.stackSave(),$=d.stackAlloc(4*a.length);try{let b=$/4;a.forEach(I=>d.HEAP32[b++]=I);let C=d._OrtCreateTensor(Jn(l),g,y,$,a.length,eo(f));C===0&&Re(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(C)}finally{d.stackRestore(v)}},Fu=async(e,t,r,o,n,u)=>{let d=ze(),l=cr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let a=l[0],f=l[1],g=l[2],y=l[3],v=l[4],$=l[5],b=t.length,C=o.length,I=0,_=[],S=[],E=[],T=[],z=d.stackSave(),B=d.stackAlloc(b*4),V=d.stackAlloc(b*4),W=d.stackAlloc(C*4),Z=d.stackAlloc(C*4);try{[I,_]=Qo(u);for(let ae=0;ae<b;ae++)Vu(r[ae],S,T,e,t[ae],v);for(let ae=0;ae<C;ae++)Vu(n[ae],E,T,e,b+o[ae],v);let R=B/4,j=V/4,J=W/4,re=Z/4;for(let ae=0;ae<b;ae++)d.HEAPU32[R++]=S[ae],d.HEAPU32[j++]=f[t[ae]];for(let ae=0;ae<C;ae++)d.HEAPU32[J++]=E[ae],d.HEAPU32[re++]=g[o[ae]];if(y&&(!v||v&&!$)){let{handle:ae,outputPreferredLocations:Ee,outputPreferredLocationsEncoded:De}=y;if(f.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model\'s input count (${f.length}).`);for(let le=0;le<b;le++){let ge=t[le];await d._OrtBindInput(ae,f[ge],S[le])!==0&&Re(`Can\'t bind input[${le}] for session=${e}.`)}for(let le=0;le<C;le++){let ge=o[le];n[le]?.[3]?d._OrtBindOutput(ae,g[ge],E[le],0)!==0&&Re(`Can\'t bind pre-allocated output[${le}] for session=${e}.`):d._OrtBindOutput(ae,g[ge],0,De[ge])!==0&&Re(`Can\'t bind output[${le}] to ${Ee[le]} for session=${e}.`)}cr.set(e,[a,f,g,y,v,!0])}d.jsepOnRunStart?.();let Ae;y?Ae=await d._OrtRunWithBinding(a,y.handle,C,W,I):Ae=await d._OrtRun(a,V,B,b,Z,C,W,I),Ae!==0&&Re("failed to call OrtRun().");let Pe=[];for(let ae=0;ae<C;ae++){let Ee=d.HEAPU32[W/4+ae];if(Ee===E[ae]){Pe.push(n[ae]);continue}let De=d.stackSave(),le=d.stackAlloc(4*4),ge=!1,Ie,Oe=0;try{d._OrtGetTensorData(Ee,le,le+4,le+8,le+12)!==0&&Re(`Can\'t access output tensor data on index ${ae}.`);let L=le/4,ee=d.HEAPU32[L++];Oe=d.HEAPU32[L++];let be=d.HEAPU32[L++],bt=d.HEAPU32[L++],Ge=[];for(let je=0;je<bt;je++)Ge.push(d.HEAPU32[be/4+je]);d._OrtFree(be);let ot=Ge.reduce((je,Ve)=>je*Ve,1);Ie=rt(ee);let lt=y?.outputPreferredLocations[o[ae]];if(Ie==="string"){if(lt==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let je=[],Ve=Oe/4;for(let wt=0;wt<ot;wt++){let Tt=d.HEAPU32[Ve++],vt=wt===ot-1?void 0:d.HEAPU32[Ve]-Tt;je.push(d.UTF8ToString(Tt,vt))}Pe.push([Ie,Ge,je,"cpu"])}else if(lt==="gpu-buffer"&&ot>0){let je=d.jsepGetBuffer(Oe),Ve=Pr(ee);if(Ve===void 0||!Jo(Ie))throw new Error(`Unsupported data type: ${Ie}`);ge=!0,Pe.push([Ie,Ge,{gpuBuffer:je,download:d.jsepCreateDownloader(je,ot*Ve,Ie),dispose:()=>{d._OrtReleaseTensor(Ee)}},"gpu-buffer"])}else{let je=fn(Ie),Ve=new je(ot);new Uint8Array(Ve.buffer,Ve.byteOffset,Ve.byteLength).set(d.HEAPU8.subarray(Oe,Oe+Ve.byteLength)),Pe.push([Ie,Ge,Ve,"cpu"])}}finally{d.stackRestore(De),Ie==="string"&&Oe&&d._free(Oe),ge||d._OrtReleaseTensor(Ee)}}return y&&!v&&d._OrtClearBoundOutputs(y.handle),Pe}finally{d.stackRestore(z),S.forEach(R=>d._OrtReleaseTensor(R)),E.forEach(R=>d._OrtReleaseTensor(R)),T.forEach(R=>d._free(R)),I!==0&&d._OrtReleaseRunOptions(I),_.forEach(R=>d._free(R))}},ju=e=>{let t=ze(),r=cr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Re("Can\'t get an profile file name."),t._OrtFree(n)},qu=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Zo(r.wasm).then(()=>{Wu(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:n}=r;Hu(n,o).then(()=>{postMessage({type:t})},u=>{postMessage({type:t,err:u})});break}case"copy-from":{let{buffer:o}=r,n=Oo(o);postMessage({type:t,out:n});break}case"create":{let{model:o,options:n}=r;Gu(o,n).then(u=>{postMessage({type:t,out:u})},u=>{postMessage({type:t,err:u})});break}case"release":Lu(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:n,inputs:u,outputIndices:d,options:l}=r;Fu(o,n,u,d,new Array(d.length).fill(null),l).then(a=>{a.some(f=>f[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:a},qu(a))},a=>{postMessage({type:t,err:a})});break}case"end-profiling":ju(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var er,gt,Zr,oa,sa,ni,ai,$r,_r,Zp,ia,Ul,Vl,Wl,Nl,Hl,Ll,Gl,ii=Z(()=>{"use strict";ft();Ml();gr();er=()=>!!Ie.wasm.proxy&&typeof document<"u",Zr=!1,oa=!1,sa=!1,ai=new Map,$r=(e,t)=>{let r=ai.get(e);r?r.push(t):ai.set(e,[t])},_r=()=>{if(Zr||!oa||sa||!gt)throw new Error("worker not ready")},Zp=e=>{switch(e.data.type){case"init-wasm":Zr=!1,e.data.err?(sa=!0,ni[1](e.data.err)):(oa=!0,ni[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=ai.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},ia=typeof document<"u"?document?.currentScript?.src:void 0,Ul=async()=>{if(!oa){if(Zr)throw new Error("multiple calls to 'initWasm()' detected.");if(sa)throw new Error("previous call to 'initWasm()' failed.");if(Zr=!0,er())return Ie.wasm.wasmPaths===void 0&&ia&&ia.indexOf("blob:")!==0&&(Ie.wasm.wasmPaths=ia.substr(0,+ia.lastIndexOf("/")+1)),new Promise((e,t)=>{gt?.terminate();let r=URL.createObjectURL(new Blob([zl()],{type:"text/javascript"}));gt=new Worker(r,{name:"ort-wasm-proxy-worker"}),gt.onerror=n=>t(n),gt.onmessage=Zp,URL.revokeObjectURL(r),ni=[e,t];let a={type:"init-wasm",in:Ie};gt.postMessage(a)});try{await Ji(Ie.wasm),await Tl(Ie),oa=!0}catch(e){throw sa=!0,e}finally{Zr=!1}}},Vl=async e=>{if(er())return _r(),new Promise((t,r)=>{$r("init-ep",[t,r]);let a={type:"init-ep",in:{epName:e,env:Ie}};gt.postMessage(a)});await Ol(Ie,e)},Wl=async e=>er()?(_r(),new Promise((t,r)=>{$r("copy-from",[t,r]);let a={type:"copy-from",in:{buffer:e}};gt.postMessage(a,[e.buffer])})):ri(e),Nl=async(e,t)=>{if(er()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return _r(),new Promise((r,a)=>{$r("create",[r,a]);let n={type:"create",in:{model:e,options:t}},o=[];e instanceof Uint8Array&&o.push(e.buffer),gt.postMessage(n,o)})}else return kl(e,t)},Hl=async e=>{if(er())return _r(),new Promise((t,r)=>{$r("release",[t,r]);let a={type:"release",in:e};gt.postMessage(a)});Rl(e)},Ll=async(e,t,r,a,n,o)=>{if(er()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return _r(),new Promise((u,d)=>{$r("run",[u,d]);let i=r,p={type:"run",in:{sessionId:e,inputIndices:t,inputs:i,outputIndices:a,options:o}};gt.postMessage(p,Dl(i))})}else return Pl(e,t,r,a,n,o)},Gl=async e=>{if(er())return _r(),new Promise((t,r)=>{$r("end-profiling",[t,r]);let a={type:"end-profiling",in:e};gt.postMessage(a)});Bl(e)}});var Fl,Xp,ua,ql=Z(()=>{"use strict";ft();ii();We();Oa();Fl=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Xp=e=>{switch(e[3]){case"cpu":return new Ze(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!zn(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Ze.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},ua=class{async fetchModelAndCopyToWasmMemory(t){return Wl(await Fr(t))}async loadModel(t,r){it();let a;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?a=await Fr(t):a=await this.fetchModelAndCopyToWasmMemory(t):a=t,[this.sessionId,this.inputNames,this.outputNames]=await Nl(a,r),ot()}async dispose(){return Hl(this.sessionId)}async run(t,r,a){it();let n=[],o=[];Object.entries(t).forEach(y=>{let v=y[0],b=y[1],x=this.inputNames.indexOf(v);if(x===-1)throw new Error(`invalid input '${v}'`);n.push(b),o.push(x)});let u=[],d=[];Object.entries(r).forEach(y=>{let v=y[0],b=y[1],x=this.outputNames.indexOf(v);if(x===-1)throw new Error(`invalid output '${v}'`);u.push(b),d.push(x)});let i=n.map((y,v)=>Fl(y,()=>`input "${this.inputNames[o[v]]}"`)),p=u.map((y,v)=>y?Fl(y,()=>`output "${this.outputNames[d[v]]}"`):null),h=await Ll(this.sessionId,o,i,d,p,a),g={};for(let y=0;y<h.length;y++)g[this.outputNames[d[y]]]=u[y]??Xp(h[y]);return ot(),g}startProfiling(){}endProfiling(){Gl(this.sessionId)}}});var Qp,la,jl=Z(()=>{"use strict";ft();ii();ql();Qp=()=>{if((typeof Ie.wasm.initTimeout!="number"||Ie.wasm.initTimeout<0)&&(Ie.wasm.initTimeout=0),typeof Ie.wasm.simd!="boolean"&&(Ie.wasm.simd=!0),typeof Ie.wasm.proxy!="boolean"&&(Ie.wasm.proxy=!1),typeof Ie.wasm.trace!="boolean"&&(Ie.wasm.trace=!1),typeof Ie.wasm.numThreads!="number"||!Number.isInteger(Ie.wasm.numThreads)||Ie.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(Ie.wasm.numThreads=1);let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Ie.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},la=class{async init(t){Qp(),await Ul(),await Vl(t)}async createInferenceSessionHandler(t,r){let a=new ua;return await a.loadModel(t,r),Promise.resolve(a)}}});var Kl={};Yt(Kl,{wasmBackend:()=>Jp});var Jp,Yl=Z(()=>{"use strict";jl();Jp=new la});var tm={};Yt(tm,{InferenceSession:()=>Ri,TRACE:()=>Nr,TRACE_FUNC_BEGIN:()=>it,TRACE_FUNC_END:()=>ot,Tensor:()=>Ze,TrainingSession:()=>Mi,default:()=>em,env:()=>Ie,registerBackend:()=>Xt});ft();ft();ft();var Ui="1.18.0";var em=wa;{let e=(Yl(),Wt(Kl)).wasmBackend;Xt("webgpu",e,5),Xt("cpu",e,10),Xt("wasm",e,10)}Object.defineProperty(Ie.versions,"web",{value:Ui,enumerable:!0});return Wt(tm);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
