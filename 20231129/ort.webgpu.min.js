/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var kn=Object.defineProperty;var Hl=Object.getOwnPropertyDescriptor;var Ll=Object.getOwnPropertyNames;var Gl=Object.prototype.hasOwnProperty;var F=(e,t)=>()=>(e&&(t=e(e=0)),t);var Kt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),zt=(e,t)=>{for(var r in t)kn(e,r,{get:t[r],enumerable:!0})},Fl=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Ll(t))!Gl.call(e,n)&&n!==r&&kn(e,n,{get:()=>t[n],enumerable:!(a=Hl(t,n))||a.enumerable});return e};var Ct=e=>Fl(kn({},"__esModule",{value:!0}),e);var Ur,Wt,vt,Hr,Lr=F(()=>{Ur=new Map,Wt=[],vt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Ur.get(e);if(a===void 0)Ur.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Wt.indexOf(e);n!==-1&&Wt.splice(n,1);for(let s=0;s<Wt.length;s++)if(Ur.get(Wt[s]).priority<=r){Wt.splice(s,0,e);return}Wt.push(e)}return}throw new TypeError("not a valid backend")},Hr=async e=>{let t=e.length===0?Wt:e,r=[];for(let a of t){let n=Ur.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let s=!!n.initPromise;try{return s||(n.initPromise=n.backend.init()),await n.initPromise,n.initialized=!0,n.backend}catch(u){s||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var ja=F(()=>{Lr()});var Ka,Ya=F(()=>{Ka="1.17.0"});var Za,Rn,Xa=F(()=>{Ya();Za="warning",Rn={wasm:{},webgl:{},webgpu:{},versions:{common:Ka},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Za=e}},get logLevel(){return Za}};Object.defineProperty(Rn,"logLevel",{enumerable:!0})});var Oe,Qa=F(()=>{Xa();Oe=Rn});var Ja,eo,to=F(()=>{Ja=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[3]):(n=e.dims[3],s=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,o,p;l===void 0||l.mean===void 0?o=[255,255,255,255]:typeof l.mean=="number"?o=[l.mean,l.mean,l.mean,l.mean]:(o=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(o[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias=="number"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));let f=s*n,y=0,g=f,b=f*2,$=-1;u==="RGBA"?(y=0,g=f,b=f*2,$=f*3):u==="RGB"?(y=0,g=f,b=f*2):u==="RBG"&&(y=0,b=f,g=f*2);for(let v=0;v<s;v++)for(let _=0;_<n;_++){let C=(e.data[y++]-p[0])*o[0],I=(e.data[g++]-p[1])*o[1],T=(e.data[b++]-p[2])*o[2],A=$===-1?255:(e.data[$++]-p[3])*o[3];a.fillStyle="rgba("+C+","+I+","+T+","+A+")",a.fillRect(_,v,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},eo=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,s,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[1],u=e.dims[3]):(n=e.dims[3],s=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",o=t?.norm,p,f;o===void 0||o.mean===void 0?p=[255,255,255,255]:typeof o.mean=="number"?p=[o.mean,o.mean,o.mean,o.mean]:(p=[o.mean[0],o.mean[1],o.mean[2],255],o.mean[3]!==void 0&&(p[3]=o.mean[3])),o===void 0||o.bias===void 0?f=[0,0,0,0]:typeof o.bias=="number"?f=[o.bias,o.bias,o.bias,o.bias]:(f=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(f[3]=o.bias[3]));let y=s*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let g=4,b=0,$=1,v=2,_=3,C=0,I=y,T=y*2,A=-1;l==="RGBA"?(C=0,I=y,T=y*2,A=y*3):l==="RGB"?(C=0,I=y,T=y*2):l==="RBG"&&(C=0,T=y,I=y*2),a=r.createImageData(n,s);for(let B=0;B<s*n;b+=g,$+=g,v+=g,_+=g,B++)a.data[b]=(e.data[C++]-f[0])*p[0],a.data[$]=(e.data[I++]-f[1])*p[1],a.data[v]=(e.data[T++]-f[2])*p[2],a.data[_]=A===-1?255:(e.data[A++]-f[3])*p[3]}else throw new Error("Can not access image data");return a}});var Pn,ro,no,ao,oo,io=F(()=>{Gr();Pn=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},s,u;typeof n.mean=="number"?s=[n.mean,n.mean,n.mean,n.mean]:s=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",o=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",p=r*a,f=o==="RGBA"?new Float32Array(p*4):new Float32Array(p*3),y=4,g=0,b=1,$=2,v=3,_=0,C=p,I=p*2,T=-1;l==="RGB"&&(y=3,g=0,b=1,$=2,v=-1),o==="RGBA"?T=p*3:o==="RBG"?(_=0,I=p,C=p*2):o==="BGR"&&(I=0,C=p,_=p*2);for(let B=0;B<p;B++,g+=y,$+=y,b+=y,v+=y)f[_++]=(e[g]+u[0])/s[0],f[C++]=(e[b]+u[1])/s[1],f[I++]=(e[$]+u[2])/s[2],T!==-1&&v!==-1&&(f[T++]=(e[v]+u[3])/s[3]);return o==="RGBA"?new je("float32",f,[1,4,r,a]):new je("float32",f,[1,3,r,a])},ro=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",u,l=t??{};if(r){let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let p=o.getContext("2d");if(p!=null){let f=e.height,y=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(f=t.resizedHeight,y=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=f,l.width=y}else l.tensorFormat="RGBA",l.height=f,l.width=y;p.drawImage(e,0,0),u=p.getImageData(0,0,y,f).data}else throw new Error("Can not access image data")}else if(a){let o,p;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(o=t.resizedHeight,p=t.resizedWidth):(o=e.height,p=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=o,l.width=p,t!==void 0){let f=document.createElement("canvas");f.width=p,f.height=o;let y=f.getContext("2d");if(y!=null)y.putImageData(e,0,0),u=y.getImageData(0,0,p,o).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let p=o.getContext("2d");if(p!=null){let f=e.height,y=e.width;return p.drawImage(e,0,0,y,f),u=p.getImageData(0,0,y,f).data,l.height=f,l.width=y,Pn(u,l)}else throw new Error("Can not access image data")}else{if(s)return new Promise((o,p)=>{let f=document.createElement("canvas"),y=f.getContext("2d");if(!e||!y)return p();let g=new Image;g.crossOrigin="Anonymous",g.src=e,g.onload=()=>{f.width=g.width,f.height=g.height,y.drawImage(g,0,0,f.width,f.height);let b=y.getImageData(0,0,f.width,f.height);l.height=f.height,l.width=f.width,o(Pn(b.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Pn(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},no=(e,t)=>{let{width:r,height:a,download:n,dispose:s}=t,u=[1,a,r,4];return new je({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:s})},ao=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:s}=t;return new je({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:s})},oo=(e,t,r)=>new je({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var mr,Fr,so,uo,lo=F(()=>{mr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Fr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),so=!1,uo=()=>{if(!so){so=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(mr.set("int64",BigInt64Array),Fr.set(BigInt64Array,"int64")),t&&(mr.set("uint64",BigUint64Array),Fr.set(BigUint64Array,"uint64"))}}});var co,po,fo=F(()=>{Gr();co=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},po=(e,t)=>{switch(e.location){case"cpu":return new je(e.type,e.data,t);case"cpu-pinned":return new je({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new je({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new je({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var je,Gr=F(()=>{to();io();lo();fo();je=class{constructor(t,r,a){uo();let n,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,s=t.dims,t.location){case"cpu-pinned":{let l=mr.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,o;if(typeof t=="string")if(n=t,o=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let p=mr.get(t);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=p.from(r,BigInt):l=p.from(r)}else if(r instanceof p)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${p}`)}else if(o=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let p=typeof t[0];if(p==="string")n="string",l=t;else if(p==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else{let p=Fr.get(t.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=p,l=t}if(o===void 0)o=[l.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");s=o,this.cpuData=l,this.dataLocation="cpu"}let u=co(s);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=u}static async fromImage(t,r){return ro(t,r)}static fromTexture(t,r){return no(t,r)}static fromGpuBuffer(t,r){return ao(t,r)}static fromPinnedBuffer(t,r,a){return oo(t,r,a)}toDataURL(t){return Ja(this,t)}toImageData(t){return eo(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return po(this,t)}}});var Le,qr=F(()=>{Gr();Le=je});var jr,mo=F(()=>{Lr();qr();jr=class e{constructor(t){this.handler=t}async run(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Le||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Le)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let p of r){if(typeof p!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);n[p]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let p=!1,f=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(f.indexOf(y)!==-1){let g=r[y];(g===null||g instanceof Le)&&(p=!0,u=!1,n[y]=g)}if(p){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let p of this.inputNames)if(typeof t[p]>"u")throw new Error(`input '${p}' is missing in 'feeds'.`);if(u)for(let p of this.outputNames)n[p]=null;let l=await this.handler.run(t,n,s),o={};for(let p in l)if(Object.hasOwnProperty.call(l,p)){let f=l[p];f instanceof Le?o[p]=f:o[p]=new Le(f.type,f.data,f.dims)}return o}async release(){return this.handler.dispose()}static async create(t,r,a,n){let s,u={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let y=t,g=0,b=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(g=r,!Number.isSafeInteger(g))throw new RangeError("'byteOffset' must be an integer.");if(g<0||g>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(b=t.byteLength-g,typeof a=="number"){if(b=a,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||g+b>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-g}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(y,g,b)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let o=(u.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),f=await(await Hr(o)).createInferenceSessionHandler(s,u);return new e(f)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var ho,go=F(()=>{mo();ho=jr});var yo=F(()=>{});var ql,Kr,bo=F(()=>{Lr();qr();ql="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Kr=class e{constructor(t){this.handler=t}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",s=r||{},l=(s.executionProviders||[]).map(p=>typeof p=="string"?p:p.name),o=await Hr(l);if(o.createTrainingSessionHandler){let p=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,s);return new e(p)}else throw new Error(ql)}typeNarrowingForRunStep(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Le||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Le)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let l of r){if(typeof l!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(l)===-1)throw new RangeError(`'fetches' contains invalid output name: ${l}.`);n[l]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let l=!1,o=Object.getOwnPropertyNames(r);for(let p of this.outputNames)if(o.indexOf(p)!==-1){let f=r[p];(f===null||f instanceof Le)&&(l=!0,u=!1,n[p]=f)}if(l){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let l of this.inputNames)if(typeof t[l]>"u")throw new Error(`input '${l}' is missing in 'feeds'.`);if(u)for(let l of this.outputNames)n[l]=null;return[n,s]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Le?r[a]=n:r[a]=new Le(n.type,n.data,n.dims)}return r}async runTrainStep(t,r,a){let[n,s]=this.typeNarrowingForRunStep(t,r,a),u=await this.handler.runTrainStep(t,n,s);return this.convertHandlerReturnTypeToMapOfTensors(u)}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var wo,vo=F(()=>{bo();wo=Kr});var Bn={};zt(Bn,{InferenceSession:()=>ho,Tensor:()=>Le,TrainingSession:()=>wo,env:()=>Oe,registerBackend:()=>vt});var $t=F(()=>{ja();Qa();go();qr();yo();vo()});var Mn={};zt(Mn,{readFile:()=>jl});var jl,Dn=F(()=>{jl=void 0});var zn={};zt(zn,{join:()=>Kl});var Kl,Wn=F(()=>{Kl=void 0});var Io=Kt((xo,Vn)=>{"use strict";var So=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,m)=>{a=d,n=m}),r.jsepInit=(d,m,w,x,O,L,H,le)=>{r.Za=d,r.Oa=m,r.Qa=w,r.Ja=x,r.Pa=O,r.ra=L,r.Ra=H,r.Sa=le,m=(Z,re,Q)=>(...fe)=>{let ye=Qe,R=re?.();fe=Z(...fe);let ie=re?.();return R!==ie&&(Z=ie,Q(R),re=Q=null),Qe!=ye?kr():fe},w=Z=>async(...re)=>{try{if(r.Da)throw Error("Session already started");let Q=r.Da={Ta:re[0],errors:[]},fe=await Z(...re);if(r.Da!==Q)throw Error("Session mismatch");d.flush();let ye=Q.errors;if(0<ye.length){let R=await Promise.all(ye);if(R=R.filter(ie=>ie),0<R.length)throw Error(R.join(`
`))}return fe}finally{r.Da=null}},r._OrtRun=w(m(r._OrtRun,()=>r._OrtRun,Z=>r._OrtRun=Z)),r._OrtRunWithBinding=w(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Z=>r._OrtRunWithBinding=Z)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,Z=>r._OrtBindInput=Z),r.jsepRegisterBuffer=(Z,re,Q,fe)=>d.registerBuffer(Z,re,Q,fe),r.jsepUnregisterBuffers=Z=>{d.unregisterBuffers(Z)},r.jsepGetBuffer=Z=>d.getBuffer(Z),r.jsepCreateDownloader=(Z,re,Q)=>d.createDownloader(Z,re,Q)};var s=Object.assign({},r),u="./this.program",l=(d,m)=>{throw m},o=typeof window=="object",p=typeof importScripts=="function",f=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",g,b,$;if(f){var v=(Dn(),Ct(Mn)),_=(Wn(),Ct(zn));y=p?_.dirname(y)+"/":__dirname+"/",g=(d,m)=>(d=d.startsWith("file://")?new URL(d):_.normalize(d),v.readFileSync(d,m?void 0:"utf8")),$=d=>(d=g(d,!0),d.buffer||(d=new Uint8Array(d)),d),b=(d,m,w,x=!0)=>{d=d.startsWith("file://")?new URL(d):_.normalize(d),v.readFile(d,x?void 0:"utf8",(O,L)=>{O?w(O):m(x?L.buffer:L)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,m)=>{throw process.exitCode=d,m},r.inspect=()=>"[Emscripten Module object]"}else(o||p)&&(p?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",g=d=>{var m=new XMLHttpRequest;return m.open("GET",d,!1),m.send(null),m.responseText},p&&($=d=>{var m=new XMLHttpRequest;return m.open("GET",d,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),b=(d,m,w)=>{var x=new XMLHttpRequest;x.open("GET",d,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?m(x.response):w()},x.onerror=w,x.send(null)});var C=r.print||console.log.bind(console),I=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var T;r.wasmBinary&&(T=r.wasmBinary);var A=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Fe("no native wasm support detected");var B,k,W=!1,z,K,X,D,Y,Ce,ae;function pe(){var d=B.buffer;r.HEAP8=K=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=D=new Int32Array(d),r.HEAPU8=X=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=Y=new Uint32Array(d),r.HEAPF32=Ce=new Float32Array(d),r.HEAPF64=ae=new Float64Array(d)}var j=[],$e=[],Ae=[];function Ee(){var d=r.preRun.shift();j.unshift(d)}var ce=0,Ke=null,Ne=null;function Fe(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",I(d),W=!0,z=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function tt(d){return d.startsWith("data:application/octet-stream;base64,")}var G;if(G="ort-wasm-simd.wasm",!tt(G)){var oe=G;G=r.locateFile?r.locateFile(oe,y):y+oe}function he(d){if(d==G&&T)return new Uint8Array(T);if($)return $(d);throw"both async and sync fetching of the wasm failed"}function Je(d){if(!T&&(o||p)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at '"+d+"'";return m.arrayBuffer()}).catch(()=>he(d));if(b)return new Promise((m,w)=>{b(d,x=>m(new Uint8Array(x)),w)})}return Promise.resolve().then(()=>he(d))}function Te(d,m,w){return Je(d).then(x=>WebAssembly.instantiate(x,m)).then(x=>x).then(w,x=>{I("failed to asynchronously prepare wasm: "+x),Fe(x)})}function We(d,m){var w=G;return T||typeof WebAssembly.instantiateStreaming!="function"||tt(w)||w.startsWith("file://")||f||typeof fetch!="function"?Te(w,d,m):fetch(w,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,d).then(m,function(O){return I("wasm streaming compile failed: "+O),I("falling back to ArrayBuffer instantiation"),Te(w,d,m)}))}var qe,st={912800:d=>{r.ra("Abs",d,void 0)},912851:d=>{r.ra("Neg",d,void 0)},912902:d=>{r.ra("Floor",d,void 0)},912955:d=>{r.ra("Ceil",d,void 0)},913007:d=>{r.ra("Reciprocal",d,void 0)},913065:d=>{r.ra("Sqrt",d,void 0)},913117:d=>{r.ra("Exp",d,void 0)},913168:d=>{r.ra("Erf",d,void 0)},913219:d=>{r.ra("Sigmoid",d,void 0)},913274:d=>{r.ra("Log",d,void 0)},913325:d=>{r.ra("Sin",d,void 0)},913376:d=>{r.ra("Cos",d,void 0)},913427:d=>{r.ra("Tan",d,void 0)},913478:d=>{r.ra("Asin",d,void 0)},913530:d=>{r.ra("Acos",d,void 0)},913582:d=>{r.ra("Atan",d,void 0)},913634:d=>{r.ra("Sinh",d,void 0)},913686:d=>{r.ra("Cosh",d,void 0)},913738:d=>{r.ra("Asinh",d,void 0)},913791:d=>{r.ra("Acosh",d,void 0)},913844:d=>{r.ra("Atanh",d,void 0)},913897:d=>{r.ra("Tanh",d,void 0)},913949:d=>{r.ra("Not",d,void 0)},914e3:(d,m,w)=>{r.ra("Clip",d,{min:m,max:w})},914069:d=>{r.ra("Clip",d,void 0)},914121:(d,m)=>{r.ra("Elu",d,{alpha:m})},914179:d=>{r.ra("Relu",d,void 0)},914231:(d,m)=>{r.ra("LeakyRelu",d,{alpha:m})},914295:(d,m)=>{r.ra("ThresholdedRelu",d,{alpha:m})},914365:(d,m)=>{r.ra("Cast",d,{to:m})},914423:d=>{r.ra("Add",d,void 0)},914474:d=>{r.ra("Sub",d,void 0)},914525:d=>{r.ra("Mul",d,void 0)},914576:d=>{r.ra("Div",d,void 0)},914627:d=>{r.ra("Pow",d,void 0)},914678:d=>{r.ra("Equal",d,void 0)},914731:d=>{r.ra("Greater",d,void 0)},914786:d=>{r.ra("GreaterOrEqual",d,void 0)},914848:d=>{r.ra("Less",d,void 0)},914900:d=>{r.ra("LessOrEqual",d,void 0)},914959:(d,m,w,x,O)=>{r.ra("ReduceMean",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},915123:(d,m,w,x,O)=>{r.ra("ReduceMax",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},915286:(d,m,w,x,O)=>{r.ra("ReduceMin",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},915449:(d,m,w,x,O)=>{r.ra("ReduceProd",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},915613:(d,m,w,x,O)=>{r.ra("ReduceSum",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},915776:(d,m,w,x,O)=>{r.ra("ReduceL1",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},915938:(d,m,w,x,O)=>{r.ra("ReduceL2",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},916100:(d,m,w,x,O)=>{r.ra("ReduceLogSum",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},916266:(d,m,w,x,O)=>{r.ra("ReduceSumSquare",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},916435:(d,m,w,x,O)=>{r.ra("ReduceLogSumExp",d,{keepDims:!!m,noopWithEmptyAxes:!!w,axes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},916604:d=>{r.ra("Where",d,void 0)},916657:(d,m,w)=>{r.ra("Transpose",d,{perm:m?Array.from(D.subarray(w>>>0,w+m>>>0)):[]})},916770:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie)=>{r.ra("ConvTranspose",d,{format:Z?"NHWC":"NCHW",autoPad:m,dilations:[w],group:x,kernel_shape:[O],pads:[L,H],strides:[le],wIsConst:()=>!!K[re>>>0],outputPadding:Q?Array.from(D.subarray(fe>>>0,fe+Q>>>0)):[],outputShape:ye?Array.from(D.subarray(R>>>0,R+ye>>>0)):[],activation:De(ie)})},917184:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(D.subarray(w>>>0,w+2>>>0)),group:x,kernelShape:Array.from(D.subarray(O>>>0,O+2>>>0)),pads:Array.from(D.subarray(L>>>0,L+4>>>0)),strides:Array.from(D.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Z>>>0],outputPadding:0<re?Array.from(D.subarray(Q>>>0,Q+re>>>0)):[],outputShape:0<fe?Array.from(D.subarray(ye>>>0,ye+fe>>>0)):[],activation:De(R)})},917741:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie)=>{r.ra("ConvTranspose",d,{format:Z?"NHWC":"NCHW",autoPad:m,dilations:[w],group:x,kernel_shape:[O],pads:[L,H],strides:[le],wIsConst:()=>!!K[re>>>0],outputPadding:Q?Array.from(D.subarray(fe>>>0,fe+Q>>>0)):[],outputShape:ye?Array.from(D.subarray(R>>>0,R+ye>>>0)):[],activation:De(ie)})},918155:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(D.subarray(w>>>0,w+2>>>0)),group:x,kernelShape:Array.from(D.subarray(O>>>0,O+2>>>0)),pads:Array.from(D.subarray(L>>>0,L+4>>>0)),strides:Array.from(D.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Z>>>0],outputPadding:0<re?Array.from(D.subarray(Q>>>0,Q+re>>>0)):[],outputShape:0<fe?Array.from(D.subarray(ye>>>0,ye+fe>>>0)):[],activation:De(R)})},918712:(d,m)=>{r.ra("GlobalAveragePool",d,{format:m?"NHWC":"NCHW"})},918803:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie,ge)=>{r.ra("AveragePool",d,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[le,Z],pads:[re,Q,fe,ye],strides:[R,ie]})},919087:(d,m)=>{r.ra("GlobalAveragePool",d,{format:m?"NHWC":"NCHW"})},919178:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie,ge)=>{r.ra("AveragePool",d,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[le,Z],pads:[re,Q,fe,ye],strides:[R,ie]})},919462:(d,m)=>{r.ra("GlobalMaxPool",d,{format:m?"NHWC":"NCHW"})},919549:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie,ge)=>{r.ra("MaxPool",d,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[le,Z],pads:[re,Q,fe,ye],strides:[R,ie]})},919829:(d,m)=>{r.ra("GlobalMaxPool",d,{format:m?"NHWC":"NCHW"})},919916:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie,ge)=>{r.ra("MaxPool",d,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:w,count_include_pad:x,storage_order:O,dilations:[L,H],kernel_shape:[le,Z],pads:[re,Q,fe,ye],strides:[R,ie]})},920196:(d,m,w,x,O)=>{r.ra("Gemm",d,{alpha:m,beta:w,transA:x,transB:O})},920300:d=>{r.ra("MatMul",d,void 0)},920354:(d,m,w,x)=>{r.ra("ArgMax",d,{keepDims:!!m,selectLastIndex:!!w,axis:x})},920462:(d,m,w,x)=>{r.ra("ArgMin",d,{keepDims:!!m,selectLastIndex:!!w,axis:x})},920570:(d,m)=>{r.ra("Softmax",d,{axis:m})},920633:(d,m)=>{r.ra("Concat",d,{axis:m})},920693:(d,m,w,x,O)=>{r.ra("Split",d,{axis:m,numOutputs:w,splitSizes:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},920838:d=>{r.ra("Expand",d,void 0)},920892:(d,m)=>{r.ra("Gather",d,{axis:Number(m)})},920963:(d,m)=>{r.ra("GatherElements",d,{axis:Number(m)})},921042:(d,m,w,x,O,L,H,le,Z,re,Q)=>{r.ra("Resize",d,{antialias:m,axes:w?Array.from(D.subarray(x>>>0,x+w>>>0)):[],coordinateTransformMode:De(O),cubicCoeffA:L,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:De(Z),mode:De(re),nearestMode:De(Q)})},921393:(d,m,w,x,O,L,H)=>{r.ra("Slice",d,{starts:m?Array.from(D.subarray(w>>>0,w+m>>>0)):[],ends:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[],axes:L?Array.from(D.subarray(H>>>0,H+L>>>0)):[]})},921624:d=>{r.ra("Tile",d,void 0)},921676:(d,m,w)=>{r.ra("LayerNormalization",d,{axis:Number(m),epsilon:Number(w)})},921783:(d,m,w)=>{r.ra("InstanceNormalization",d,{epsilon:m,format:w?"NHWC":"NCHW"})},921897:(d,m,w)=>{r.ra("InstanceNormalization",d,{epsilon:m,format:w?"NHWC":"NCHW"})},922011:d=>{r.ra("Range",d,void 0)},922064:(d,m)=>{r.ra("Einsum",d,{equation:De(m)})},922145:(d,m,w,x,O)=>{r.ra("Pad",d,{mode:m,value:w,pads:x?Array.from(D.subarray(O>>>0,O+x>>>0)):[]})},922277:(d,m,w,x,O,L)=>{r.ra("BatchNormalization",d,{epsilon:m,momentum:w,spatial:!!O,trainingMode:!!x,format:L?"NHWC":"NCHW"})},922446:(d,m,w,x,O,L)=>{r.ra("BatchNormalization",d,{epsilon:m,momentum:w,spatial:!!O,trainingMode:!!x,format:L?"NHWC":"NCHW"})},922615:(d,m,w,x,O,L,H,le,Z)=>{r.ra("Attention",d,{numHeads:m,isUnidirectional:w,maskFilterValue:x,scale:O,doRotary:L,qkvHiddenSizes:H?Array.from(D.subarray(Number(le)>>>0,Number(le)+H>>>0)):[],pastPresentShareBuffer:!!Z})},922887:d=>{r.ra("Gelu",d,void 0)},922939:(d,m,w,x,O,L)=>{r.ra("MultiHeadAttention",d,{numHeads:m,isUnidirectional:w,maskFilterValue:x,scale:O,doRotary:L})},923098:d=>{r.ra("BiasAdd",d,void 0)},923153:d=>{r.ra("BiasSplitGelu",d,void 0)},923214:(d,m)=>{r.ra("SkipLayerNormalization",d,{epsilon:m})},923295:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye)=>{r.ra("Conv",d,{format:Z?"NHWC":"NCHW",auto_pad:m,dilations:[w],group:x,kernel_shape:[O],pads:L?Array.from(D.subarray(H>>>0,H+L>>>0)):[],strides:[le],w_is_const:()=>!!K[re>>>0],activation:De(Q),activation_params:fe?Array.from(Ce.subarray(ye>>>0,ye+fe>>>0)):[]})},923676:(d,m,w,x,O,L,H,le,Z,re,Q,fe,ye,R,ie,ge)=>{r.ra("Conv",d,{format:fe?"NHWC":"NCHW",auto_pad:m,dilations:[w,x],group:O,kernel_shape:[L,H],pads:le?Array.from(D.subarray(Z>>>0,Z+le>>>0)):[],strides:[re,Q],w_is_const:()=>!!K[ye>>>0],activation:De(R),activation_params:ie?Array.from(Ce.subarray(ge>>>0,ge+ie>>>0)):[]})},924078:d=>{r.Ra(d)},924112:(d,m)=>r.Sa(d,m,r.Da.Ta,r.Da.errors),924224:d=>r.Oa(d),924257:d=>r.Qa(d),924289:(d,m,w)=>{r.Ja(d,m,w,!0)},924328:(d,m,w)=>{r.Ja(d,m,w)}};function Xe(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var Tt=d=>{for(;0<d.length;)d.shift()(r)};function kt(d){this.Ha=d-24,this.Ma=function(m){Y[this.Ha+4>>2>>>0]=m},this.La=function(m){Y[this.Ha+8>>2>>>0]=m},this.Ya=function(m,w){this.Ka(),this.Ma(m),this.La(w)},this.Ka=function(){Y[this.Ha+16>>2>>>0]=0}}var Xt=0,Ir=0,rt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Qt=(d,m,w)=>{m>>>=0;var x=m+w;for(w=m;d[w]&&!(w>=x);)++w;if(16<w-m&&d.buffer&&rt)return rt.decode(d.subarray(m,w));for(x="";m<w;){var O=d[m++];if(O&128){var L=d[m++]&63;if((O&224)==192)x+=String.fromCharCode((O&31)<<6|L);else{var H=d[m++]&63;O=(O&240)==224?(O&15)<<12|L<<6|H:(O&7)<<18|L<<12|H<<6|d[m++]&63,65536>O?x+=String.fromCharCode(O):(O-=65536,x+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else x+=String.fromCharCode(O)}return x},De=(d,m)=>(d>>>=0)?Qt(X,d,m):"",Ut=d=>{for(var m=0,w=0;w<d.length;++w){var x=d.charCodeAt(w);127>=x?m++:2047>=x?m+=2:55296<=x&&57343>=x?(m+=4,++w):m+=3}return m},Jt=(d,m,w,x)=>{if(w>>>=0,!(0<x))return 0;var O=w;x=w+x-1;for(var L=0;L<d.length;++L){var H=d.charCodeAt(L);if(55296<=H&&57343>=H){var le=d.charCodeAt(++L);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(w>=x)break;m[w++>>>0]=H}else{if(2047>=H){if(w+1>=x)break;m[w++>>>0]=192|H>>6}else{if(65535>=H){if(w+2>=x)break;m[w++>>>0]=224|H>>12}else{if(w+3>=x)break;m[w++>>>0]=240|H>>18,m[w++>>>0]=128|H>>12&63}m[w++>>>0]=128|H>>6&63}m[w++>>>0]=128|H&63}}return m[w>>>0]=0,w-O},gt=d=>d%4===0&&(d%100!==0||d%400===0),_r=[0,31,60,91,121,152,182,213,244,274,305,335],yt=[0,31,59,90,120,151,181,212,243,273,304,334],Ht=d=>{var m=Ut(d)+1,w=qt(m);return w&&Jt(d,X,w,m),w},xt=[],Lt=(d,m)=>{xt.length=0;var w;for(m>>=2;w=X[d++>>>0];)m+=w!=105&m,xt.push(w==105?D[m>>>0]:ae[m++>>>1]),++m;return xt},Gt={},er=()=>{if(!Ft){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Gt)Gt[m]===void 0?delete d[m]:d[m]=Gt[m];var w=[];for(m in d)w.push(`${m}=${d[m]}`);Ft=w}return Ft},Ft,Cr=[null,[],[]],He=[31,29,31,30,31,30,31,31,30,31,30,31],tr=[31,28,31,30,31,30,31,31,30,31,30,31];function rr(d){var m=Array(Ut(d)+1);return Jt(d,m,0,m.length),m}function ue(d,m,w,x){function O(R,ie,ge){for(R=typeof R=="number"?R.toString():R||"";R.length<ie;)R=ge[0]+R;return R}function L(R,ie){return O(R,ie,"0")}function H(R,ie){function ge(fr){return 0>fr?-1:0<fr?1:0}var wt;return(wt=ge(R.getFullYear()-ie.getFullYear()))===0&&(wt=ge(R.getMonth()-ie.getMonth()))===0&&(wt=ge(R.getDate()-ie.getDate())),wt}function le(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function Z(R){var ie=R.Ba;for(R=new Date(new Date(R.Ca+1900,0,1).getTime());0<ie;){var ge=R.getMonth(),wt=(gt(R.getFullYear())?He:tr)[ge];if(ie>wt-R.getDate())ie-=wt-R.getDate()+1,R.setDate(1),11>ge?R.setMonth(ge+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+ie);break}}return ge=new Date(R.getFullYear()+1,0,4),ie=le(new Date(R.getFullYear(),0,4)),ge=le(ge),0>=H(ie,R)?0>=H(ge,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}d>>>=0,m>>>=0,w>>>=0,x>>>=0;var re=D[x+40>>2>>>0];x={Wa:D[x>>2>>>0],Va:D[x+4>>2>>>0],Ea:D[x+8>>2>>>0],Ia:D[x+12>>2>>>0],Fa:D[x+16>>2>>>0],Ca:D[x+20>>2>>>0],wa:D[x+24>>2>>>0],Ba:D[x+28>>2>>>0],$a:D[x+32>>2>>>0],Ua:D[x+36>>2>>>0],Xa:re?De(re):""},w=De(w),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var Q in re)w=w.replace(new RegExp(Q,"g"),re[Q]);var fe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ye="January February March April May June July August September October November December".split(" ");re={"%a":R=>fe[R.wa].substring(0,3),"%A":R=>fe[R.wa],"%b":R=>ye[R.Fa].substring(0,3),"%B":R=>ye[R.Fa],"%C":R=>L((R.Ca+1900)/100|0,2),"%d":R=>L(R.Ia,2),"%e":R=>O(R.Ia,2," "),"%g":R=>Z(R).toString().substring(2),"%G":R=>Z(R),"%H":R=>L(R.Ea,2),"%I":R=>(R=R.Ea,R==0?R=12:12<R&&(R-=12),L(R,2)),"%j":R=>{for(var ie=0,ge=0;ge<=R.Fa-1;ie+=(gt(R.Ca+1900)?He:tr)[ge++]);return L(R.Ia+ie,3)},"%m":R=>L(R.Fa+1,2),"%M":R=>L(R.Va,2),"%n":()=>`
`,"%p":R=>0<=R.Ea&&12>R.Ea?"AM":"PM","%S":R=>L(R.Wa,2),"%t":()=>"	","%u":R=>R.wa||7,"%U":R=>L(Math.floor((R.Ba+7-R.wa)/7),2),"%V":R=>{var ie=Math.floor((R.Ba+7-(R.wa+6)%7)/7);if(2>=(R.wa+371-R.Ba-2)%7&&ie++,ie)ie==53&&(ge=(R.wa+371-R.Ba)%7,ge==4||ge==3&&gt(R.Ca)||(ie=1));else{ie=52;var ge=(R.wa+7-R.Ba-1)%7;(ge==4||ge==5&&gt(R.Ca%400-1))&&ie++}return L(ie,2)},"%w":R=>R.wa,"%W":R=>L(Math.floor((R.Ba+7-(R.wa+6)%7)/7),2),"%y":R=>(R.Ca+1900).toString().substring(2),"%Y":R=>R.Ca+1900,"%z":R=>{R=R.Ua;var ie=0<=R;return R=Math.abs(R)/60,(ie?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Xa,"%%":()=>"%"},w=w.replace(/%%/g,"\0\0");for(Q in re)w.includes(Q)&&(w=w.replace(new RegExp(Q,"g"),re[Q](x)));return w=w.replace(/\0\0/g,"%"),Q=rr(w),Q.length>m?0:(K.set(Q,d>>>0),Q.length-1)}function bt(d){try{d()}catch(m){Fe(m)}}function Ar(d){var m={},w;for(w in d)(function(x){var O=d[x];m[x]=typeof O=="function"?function(){Rt.push(x);try{return O.apply(null,arguments)}finally{W||(Rt.pop()===x||Fe(),Qe&&ut===1&&Rt.length===0&&(ut=0,bt(cr),typeof Fibers<"u"&&Fibers.ab()))}}:O})(w);return m}var ut=0,Qe=null,Er=0,Rt=[],nr={},ar={},Or=0,Pt=null,Tr=[];function kr(){return new Promise((d,m)=>{Pt={resolve:d,reject:m}})}function Rr(){var d=qt(65548),m=d+12;Y[d>>2>>>0]=m,Y[d+4>>2>>>0]=m+65536,m=Rt[0];var w=nr[m];return w===void 0&&(w=Or++,nr[m]=w,ar[w]=m),D[d+8>>2>>>0]=w,d}function Pr(d){if(!W){if(ut===0){var m=!1,w=!1;d((x=0)=>{if(!W&&(Er=x,m=!0,w)){ut=2,bt(()=>jt(Qe)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),x=!1;try{var O=(0,k[ar[D[Qe+8>>2>>>0]]])()}catch(le){O=le,x=!0}var L=!1;if(!Qe){var H=Pt;H&&(Pt=null,(x?H.reject:H.resolve)(O),L=!0)}if(x&&!L)throw O}}),w=!0,m||(ut=1,Qe=Rr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),bt(()=>dr(Qe)))}else ut===2?(ut=0,bt(Bt),or(Qe),Qe=null,Tr.forEach(x=>{if(!W)try{if(x(),!A)try{z=z=x=z,A||(r.onExit&&r.onExit(x),W=!0),l(x,new Xe(x))}catch(O){O instanceof Xe||O=="unwind"||l(1,O)}}catch(O){O instanceof Xe||O=="unwind"||l(1,O)}})):Fe(`invalid state: ${ut}`);return Er}}function Br(d){return Pr(m=>{d().then(m)})}var Mr={n:function(d,m,w){return Br(async()=>{await r.Pa(d,m,w)})},a:function(d,m,w){throw d>>>=0,new kt(d).Ya(m>>>0,w>>>0),Xt=d,Ir++,Xt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(d,m,w){d=m+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*m:NaN,w>>>=0,d=new Date(1e3*d),D[w>>2>>>0]=d.getUTCSeconds(),D[w+4>>2>>>0]=d.getUTCMinutes(),D[w+8>>2>>>0]=d.getUTCHours(),D[w+12>>2>>>0]=d.getUTCDate(),D[w+16>>2>>>0]=d.getUTCMonth(),D[w+20>>2>>>0]=d.getUTCFullYear()-1900,D[w+24>>2>>>0]=d.getUTCDay(),D[w+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,m,w){d=m+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*m:NaN,w>>>=0,d=new Date(1e3*d),D[w>>2>>>0]=d.getSeconds(),D[w+4>>2>>>0]=d.getMinutes(),D[w+8>>2>>>0]=d.getHours(),D[w+12>>2>>>0]=d.getDate(),D[w+16>>2>>>0]=d.getMonth(),D[w+20>>2>>>0]=d.getFullYear()-1900,D[w+24>>2>>>0]=d.getDay(),D[w+28>>2>>>0]=(gt(d.getFullYear())?_r:yt)[d.getMonth()]+d.getDate()-1|0,D[w+36>>2>>>0]=-(60*d.getTimezoneOffset()),m=new Date(d.getFullYear(),6,1).getTimezoneOffset();var x=new Date(d.getFullYear(),0,1).getTimezoneOffset();D[w+32>>2>>>0]=(m!=x&&d.getTimezoneOffset()==Math.min(x,m))|0},s:function(d){d>>>=0;var m=new Date(D[d+20>>2>>>0]+1900,D[d+16>>2>>>0],D[d+12>>2>>>0],D[d+8>>2>>>0],D[d+4>>2>>>0],D[d>>2>>>0],0),w=D[d+32>>2>>>0],x=m.getTimezoneOffset(),O=new Date(m.getFullYear(),6,1).getTimezoneOffset(),L=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(L,O);return 0>w?D[d+32>>2>>>0]=+(O!=L&&H==x):0<w!=(H==x)&&(O=Math.max(L,O),m.setTime(m.getTime()+6e4*((0<w?H:O)-x))),D[d+24>>2>>>0]=m.getDay(),D[d+28>>2>>>0]=(gt(m.getFullYear())?_r:yt)[m.getMonth()]+m.getDate()-1|0,D[d>>2>>>0]=m.getSeconds(),D[d+4>>2>>>0]=m.getMinutes(),D[d+8>>2>>>0]=m.getHours(),D[d+12>>2>>>0]=m.getDate(),D[d+16>>2>>>0]=m.getMonth(),D[d+20>>2>>>0]=m.getYear(),d=m.getTime()/1e3,ir((qe=d,1<=+Math.abs(qe)?0<qe?+Math.floor(qe/4294967296)>>>0:~~+Math.ceil((qe-+(~~qe>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},v:function(d,m,w){function x(Z){return(Z=Z.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Z[1]:"GMT"}w>>>=0;var O=new Date().getFullYear(),L=new Date(O,0,1),H=new Date(O,6,1);O=L.getTimezoneOffset();var le=H.getTimezoneOffset();Y[d>>>0>>2>>>0]=60*Math.max(O,le),D[m>>>0>>2>>>0]=+(O!=le),d=x(L),m=x(H),d=Ht(d),m=Ht(m),le<O?(Y[w>>2>>>0]=d,Y[w+4>>2>>>0]=m):(Y[w>>2>>>0]=m,Y[w+4>>2>>>0]=d)},e:()=>{Fe("")},b:function(d,m,w){return d>>>=0,m=Lt(m>>>0,w>>>0),st[d].apply(null,m)},i:function(d,m,w){return d>>>=0,m=Lt(m>>>0,w>>>0),st[d].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(d,m,w){return m>>>=0,X.copyWithin(d>>>0>>>0,m>>>0,m+(w>>>0)>>>0)},u:function(d){d>>>=0;var m=X.length;if(4294901760<d)return!1;for(var w=1;4>=w;w*=2){var x=m*(1+.2/w);x=Math.min(x,d+100663296);var O=Math;x=Math.max(d,x);e:{O=O.min.call(O,4294901760,x+(65536-x%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(O),pe();var L=1;break e}catch{}L=void 0}if(L)return!0}return!1},D:function(d,m){d>>>=0,m>>>=0;var w=0;return er().forEach(function(x,O){var L=m+w;for(O=Y[d+4*O>>2>>>0]=L,L=0;L<x.length;++L)K[O++>>0>>>0]=x.charCodeAt(L);K[O>>0>>>0]=0,w+=x.length+1}),0},E:function(d,m){d>>>=0,m>>>=0;var w=er();Y[d>>2>>>0]=w.length;var x=0;return w.forEach(function(O){x+=O.length+1}),Y[m>>2>>>0]=x,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(d,m,w,x){m>>>=0,w>>>=0,x>>>=0;for(var O=0,L=0;L<w;L++){var H=Y[m>>2>>>0],le=Y[m+4>>2>>>0];m+=8;for(var Z=0;Z<le;Z++){var re=X[H+Z>>>0],Q=Cr[d];re===0||re===10?((d===1?C:I)(Qt(Q,0)),Q.length=0):Q.push(re)}O+=le}return Y[x>>2>>>0]=O,0},F:ue,d:function(d,m,w,x){return ue(d>>>0,m>>>0,w>>>0,x>>>0)}};(function(){function d(w){if(w=w.exports,w=Ar(w),k=w=It(w),B=k.M,pe(),$e.unshift(k.N),ce--,r.monitorRunDependencies&&r.monitorRunDependencies(ce),ce==0&&(Ke!==null&&(clearInterval(Ke),Ke=null),Ne)){var x=Ne;Ne=null,x()}return w}var m={a:Mr};if(ce++,r.monitorRunDependencies&&r.monitorRunDependencies(ce),r.instantiateWasm)try{return r.instantiateWasm(m,d)}catch(w){I("Module.instantiateWasm callback failed with error: "+w),n(w)}return We(m,function(w){d(w.instance)}).catch(n),{}})(),r._OrtInit=(d,m)=>(r._OrtInit=k.O)(d,m),r._OrtGetLastError=(d,m)=>(r._OrtGetLastError=k.P)(d,m),r._OrtCreateSessionOptions=(d,m,w,x,O,L,H,le,Z,re)=>(r._OrtCreateSessionOptions=k.Q)(d,m,w,x,O,L,H,le,Z,re),r._OrtAppendExecutionProvider=(d,m)=>(r._OrtAppendExecutionProvider=k.R)(d,m),r._OrtAddFreeDimensionOverride=(d,m,w)=>(r._OrtAddFreeDimensionOverride=k.S)(d,m,w),r._OrtAddSessionConfigEntry=(d,m,w)=>(r._OrtAddSessionConfigEntry=k.T)(d,m,w),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=k.U)(d),r._OrtCreateSession=(d,m,w)=>(r._OrtCreateSession=k.V)(d,m,w),r._OrtReleaseSession=d=>(r._OrtReleaseSession=k.W)(d),r._OrtGetInputOutputCount=(d,m,w)=>(r._OrtGetInputOutputCount=k.X)(d,m,w),r._OrtGetInputName=(d,m)=>(r._OrtGetInputName=k.Y)(d,m),r._OrtGetOutputName=(d,m)=>(r._OrtGetOutputName=k.Z)(d,m),r._OrtFree=d=>(r._OrtFree=k._)(d),r._OrtCreateTensor=(d,m,w,x,O,L)=>(r._OrtCreateTensor=k.$)(d,m,w,x,O,L),r._OrtGetTensorData=(d,m,w,x,O)=>(r._OrtGetTensorData=k.aa)(d,m,w,x,O),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=k.ba)(d),r._OrtCreateRunOptions=(d,m,w,x)=>(r._OrtCreateRunOptions=k.ca)(d,m,w,x),r._OrtAddRunConfigEntry=(d,m,w)=>(r._OrtAddRunConfigEntry=k.da)(d,m,w),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=k.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=k.fa)(d),r._OrtBindInput=(d,m,w)=>(r._OrtBindInput=k.ga)(d,m,w),r._OrtBindOutput=(d,m,w,x)=>(r._OrtBindOutput=k.ha)(d,m,w,x),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=k.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=k.ja)(d),r._OrtRunWithBinding=(d,m,w,x,O)=>(r._OrtRunWithBinding=k.ka)(d,m,w,x,O),r._OrtRun=(d,m,w,x,O,L,H,le)=>(r._OrtRun=k.la)(d,m,w,x,O,L,H,le),r._OrtEndProfiling=d=>(r._OrtEndProfiling=k.ma)(d),r._JsepOutput=(d,m,w)=>(r._JsepOutput=k.na)(d,m,w),r._JsepGetNodeName=d=>(r._JsepGetNodeName=k.oa)(d);var qt=r._malloc=d=>(qt=r._malloc=k.pa)(d),or=r._free=d=>(or=r._free=k.qa)(d),ir=d=>(ir=k.sa)(d),sr=()=>(sr=k.ta)(),ur=d=>(ur=k.ua)(d),lr=d=>(lr=k.va)(d),dr=d=>(dr=k.xa)(d),cr=()=>(cr=k.ya)(),jt=d=>(jt=k.za)(d),Bt=()=>(Bt=k.Aa)();r.___start_em_js=924361,r.___stop_em_js=924522;function It(d){d=Object.assign({},d);var m=x=>()=>x()>>>0,w=x=>O=>x(O)>>>0;return d.__errno_location=m(d.__errno_location),d.malloc=w(d.malloc),d.stackSave=m(d.stackSave),d.stackAlloc=w(d.stackAlloc),d}r.stackAlloc=lr,r.stackSave=sr,r.stackRestore=ur,r.UTF8ToString=De,r.stringToUTF8=(d,m,w)=>Jt(d,X,m,w),r.lengthBytesUTF8=Ut;var Mt;Ne=function d(){Mt||pr(),Mt||(Ne=d)};function pr(){function d(){if(!Mt&&(Mt=!0,r.calledRun=!0,!W)){if(Tt($e),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();Ae.unshift(m)}Tt(Ae)}}if(!(0<ce)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Ee();Tt(j),0<ce||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return pr(),t.ready}})();typeof xo=="object"&&typeof Vn=="object"?Vn.exports=So:typeof define=="function"&&define.amd&&define([],()=>So)});var _o=Kt(()=>{});var Co=Kt(()=>{});var Ao={};zt(Ao,{cpus:()=>Yl});var Yl,Eo=F(()=>{Yl=void 0});var ko=Kt((To,Nn)=>{"use strict";var Oo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return pe.buffer!=ce.buffer&&oe(),ce}function a(){return pe.buffer!=ce.buffer&&oe(),Ke}function n(){return pe.buffer!=ce.buffer&&oe(),Ne}function s(){return pe.buffer!=ce.buffer&&oe(),Fe}function u(){return pe.buffer!=ce.buffer&&oe(),tt}function l(){return pe.buffer!=ce.buffer&&oe(),G}var o=t,p,f;o.ready=new Promise((i,c)=>{p=i,f=c}),o.jsepInit=(i,c,h,S,E,M,U,ne)=>{o.Qb=i,o.wb=c,o.yb=h,o.jb=S,o.xb=E,o.Ea=M,o.zb=U,o.Ab=ne,c=(J,te,se)=>(...be)=>{let xe=lt,P=te?.();be=J(...be);let de=te?.();return P!==de&&(J=de,se(P),te=se=null),lt!=xe?Bl():be},h=J=>async(...te)=>{try{if(o.bb)throw Error("Session already started");let se=o.bb={Fb:te[0],errors:[]},be=await J(...te);if(o.bb!==se)throw Error("Session mismatch");i.flush();let xe=se.errors;if(0<xe.length){let P=await Promise.all(xe);if(P=P.filter(de=>de),0<P.length)throw Error(P.join(`
`))}return be}finally{o.bb=null}},o._OrtRun=h(c(o._OrtRun,()=>o._OrtRun,J=>o._OrtRun=J)),o._OrtRunWithBinding=h(c(o._OrtRunWithBinding,()=>o._OrtRunWithBinding,J=>o._OrtRunWithBinding=J)),o._OrtBindInput=c(o._OrtBindInput,()=>o._OrtBindInput,J=>o._OrtBindInput=J),o.jsepRegisterBuffer=(J,te,se,be)=>i.registerBuffer(J,te,se,be),o.jsepUnregisterBuffers=J=>{i.unregisterBuffers(J)},o.jsepGetBuffer=J=>i.getBuffer(J),o.jsepCreateDownloader=(J,te,se)=>i.createDownloader(J,te,se)};var y=Object.assign({},o),g="./this.program",b=(i,c)=>{throw c},$=typeof window=="object",v=typeof importScripts=="function",_=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",C=o.ENVIRONMENT_IS_PTHREAD||!1,I="";function T(i){return o.locateFile?o.locateFile(i,I):I+i}var A,B,k;if(_){var W=(Dn(),Ct(Mn)),z=(Wn(),Ct(zn));I=v?z.dirname(I)+"/":__dirname+"/",A=(c,h)=>(c=c.startsWith("file://")?new URL(c):z.normalize(c),W.readFileSync(c,h?void 0:"utf8")),k=c=>(c=A(c,!0),c.buffer||(c=new Uint8Array(c)),c),B=(c,h,S,E=!0)=>{c=c.startsWith("file://")?new URL(c):z.normalize(c),W.readFile(c,E?void 0:"utf8",(M,U)=>{M?S(M):h(E?U.buffer:U)})},!o.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),b=(c,h)=>{throw process.exitCode=c,h},o.inspect=()=>"[Emscripten Module object]";let i;try{i=_o()}catch(c){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),c}global.Worker=i.Worker}else($||v)&&(v?I=self.location.href:typeof document<"u"&&document.currentScript&&(I=document.currentScript.src),typeof e<"u"&&e&&(I=e),I.indexOf("blob:")!==0?I=I.substr(0,I.replace(/[?#].*/,"").lastIndexOf("/")+1):I="",_||(A=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},v&&(k=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),B=(i,c,h)=>{var S=new XMLHttpRequest;S.open("GET",i,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?c(S.response):h()},S.onerror=h,S.send(null)}));_&&typeof performance>"u"&&(global.performance=Co().performance);var K=console.log.bind(console),X=console.error.bind(console);_&&(K=(...i)=>W.writeSync(1,i.join(" ")+`
`),X=(...i)=>W.writeSync(2,i.join(" ")+`
`));var D=o.print||K,Y=o.printErr||X;Object.assign(o,y),y=null,o.thisProgram&&(g=o.thisProgram),o.quit&&(b=o.quit);var Ce;o.wasmBinary&&(Ce=o.wasmBinary);var ae=o.noExitRuntime||!0;typeof WebAssembly!="object"&&rt("no native wasm support detected");var pe,j,$e,Ae=!1,Ee,ce,Ke,Ne,Fe,tt,G;function oe(){var i=pe.buffer;o.HEAP8=ce=new Int8Array(i),o.HEAP16=new Int16Array(i),o.HEAP32=Ne=new Int32Array(i),o.HEAPU8=Ke=new Uint8Array(i),o.HEAPU16=new Uint16Array(i),o.HEAPU32=Fe=new Uint32Array(i),o.HEAPF32=tt=new Float32Array(i),o.HEAPF64=G=new Float64Array(i)}var he=o.INITIAL_MEMORY||16777216;if(5242880<=he||rt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+he+"! (STACK_SIZE=5242880)"),C)pe=o.wasmMemory;else if(o.wasmMemory)pe=o.wasmMemory;else if(pe=new WebAssembly.Memory({initial:he/65536,maximum:65536,shared:!0}),!(pe.buffer instanceof SharedArrayBuffer))throw Y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),_&&Y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");oe(),he=pe.buffer.byteLength;var Je=[],Te=[],We=[],qe=0;function st(){return ae||0<qe}var Xe=0,Tt=null,kt=null;function Xt(){Xe++,o.monitorRunDependencies&&o.monitorRunDependencies(Xe)}function Ir(){if(Xe--,o.monitorRunDependencies&&o.monitorRunDependencies(Xe),Xe==0&&(Tt!==null&&(clearInterval(Tt),Tt=null),kt)){var i=kt;kt=null,i()}}function rt(i){throw o.onAbort&&o.onAbort(i),i="Aborted("+i+")",Y(i),Ae=!0,Ee=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),f(i),i}function Qt(i){return i.startsWith("data:application/octet-stream;base64,")}var De;De="ort-wasm-simd-threaded.wasm",Qt(De)||(De=T(De));function Ut(i){if(i==De&&Ce)return new Uint8Array(Ce);if(k)return k(i);throw"both async and sync fetching of the wasm failed"}function Jt(i){if(!Ce&&($||v)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+i+"'";return c.arrayBuffer()}).catch(()=>Ut(i));if(B)return new Promise((c,h)=>{B(i,S=>c(new Uint8Array(S)),h)})}return Promise.resolve().then(()=>Ut(i))}function gt(i,c,h){return Jt(i).then(S=>WebAssembly.instantiate(S,c)).then(S=>S).then(h,S=>{Y("failed to asynchronously prepare wasm: "+S),rt(S)})}function _r(i,c){var h=De;return Ce||typeof WebAssembly.instantiateStreaming!="function"||Qt(h)||h.startsWith("file://")||_||typeof fetch!="function"?gt(h,i,c):fetch(h,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,i).then(c,function(E){return Y("wasm streaming compile failed: "+E),Y("falling back to ArrayBuffer instantiation"),gt(h,i,c)}))}var yt,Ht={1428784:i=>{o.Ea("Abs",i,void 0)},1428835:i=>{o.Ea("Neg",i,void 0)},1428886:i=>{o.Ea("Floor",i,void 0)},1428939:i=>{o.Ea("Ceil",i,void 0)},1428991:i=>{o.Ea("Reciprocal",i,void 0)},1429049:i=>{o.Ea("Sqrt",i,void 0)},1429101:i=>{o.Ea("Exp",i,void 0)},1429152:i=>{o.Ea("Erf",i,void 0)},1429203:i=>{o.Ea("Sigmoid",i,void 0)},1429258:i=>{o.Ea("Log",i,void 0)},1429309:i=>{o.Ea("Sin",i,void 0)},1429360:i=>{o.Ea("Cos",i,void 0)},1429411:i=>{o.Ea("Tan",i,void 0)},1429462:i=>{o.Ea("Asin",i,void 0)},1429514:i=>{o.Ea("Acos",i,void 0)},1429566:i=>{o.Ea("Atan",i,void 0)},1429618:i=>{o.Ea("Sinh",i,void 0)},1429670:i=>{o.Ea("Cosh",i,void 0)},1429722:i=>{o.Ea("Asinh",i,void 0)},1429775:i=>{o.Ea("Acosh",i,void 0)},1429828:i=>{o.Ea("Atanh",i,void 0)},1429881:i=>{o.Ea("Tanh",i,void 0)},1429933:i=>{o.Ea("Not",i,void 0)},1429984:(i,c,h)=>{o.Ea("Clip",i,{min:c,max:h})},1430053:i=>{o.Ea("Clip",i,void 0)},1430105:(i,c)=>{o.Ea("Elu",i,{alpha:c})},1430163:i=>{o.Ea("Relu",i,void 0)},1430215:(i,c)=>{o.Ea("LeakyRelu",i,{alpha:c})},1430279:(i,c)=>{o.Ea("ThresholdedRelu",i,{alpha:c})},1430349:i=>{o.zb(i)},1430383:(i,c)=>o.Ab(i,c,o.bb.Fb,o.bb.errors),1430495:(i,c)=>{o.Ea("Cast",i,{to:c})},1430553:i=>{o.Ea("Add",i,void 0)},1430604:i=>{o.Ea("Sub",i,void 0)},1430655:i=>{o.Ea("Mul",i,void 0)},1430706:i=>{o.Ea("Div",i,void 0)},1430757:i=>{o.Ea("Pow",i,void 0)},1430808:i=>{o.Ea("Equal",i,void 0)},1430861:i=>{o.Ea("Greater",i,void 0)},1430916:i=>{o.Ea("GreaterOrEqual",i,void 0)},1430978:i=>{o.Ea("Less",i,void 0)},1431030:i=>{o.Ea("LessOrEqual",i,void 0)},1431089:(i,c,h,S,E)=>{o.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431253:(i,c,h,S,E)=>{o.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431416:(i,c,h,S,E)=>{o.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431579:(i,c,h,S,E)=>{o.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431743:(i,c,h,S,E)=>{o.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1431906:(i,c,h,S,E)=>{o.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432068:(i,c,h,S,E)=>{o.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432230:(i,c,h,S,E)=>{o.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432396:(i,c,h,S,E)=>{o.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432565:(i,c,h,S,E)=>{o.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1432734:i=>{o.Ea("Where",i,void 0)},1432787:(i,c,h)=>{o.Ea("Transpose",i,{perm:c?Array.from(n().subarray(h>>>0,h+c>>>0)):[]})},1432900:(i,c,h,S,E,M,U,ne,J,te,se,be,xe)=>{o.Ea("Conv",i,{format:J?"NHWC":"NCHW",auto_pad:c,dilations:[h],group:S,kernel_shape:[E],pads:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[],strides:[ne],w_is_const:()=>!!r()[te>>>0],activation:He(se),activation_params:be?Array.from(u().subarray(xe>>>0,xe+be>>>0)):[]})},1433281:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de,Se)=>{o.Ea("Conv",i,{format:be?"NHWC":"NCHW",auto_pad:c,dilations:[h,S],group:E,kernel_shape:[M,U],pads:ne?Array.from(n().subarray(J>>>0,J+ne>>>0)):[],strides:[te,se],w_is_const:()=>!!r()[xe>>>0],activation:He(P),activation_params:de?Array.from(u().subarray(Se>>>0,Se+de>>>0)):[]})},1433683:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de)=>{o.Ea("ConvTranspose",i,{format:J?"NHWC":"NCHW",autoPad:c,dilations:[h],group:S,kernel_shape:[E],pads:[M,U],strides:[ne],wIsConst:()=>!!r()[te>>>0],outputPadding:se?Array.from(n().subarray(be>>>0,be+se>>>0)):[],outputShape:xe?Array.from(n().subarray(P>>>0,P+xe>>>0)):[],activation:He(de)})},1434097:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P)=>{o.Ea("ConvTranspose",i,{format:ne?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(h>>>0,h+2>>>0)),group:S,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[J>>>0],outputPadding:0<te?Array.from(n().subarray(se>>>0,se+te>>>0)):[],outputShape:0<be?Array.from(n().subarray(xe>>>0,xe+be>>>0)):[],activation:He(P)})},1434654:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de)=>{o.Ea("ConvTranspose",i,{format:J?"NHWC":"NCHW",autoPad:c,dilations:[h],group:S,kernel_shape:[E],pads:[M,U],strides:[ne],wIsConst:()=>!!r()[te>>>0],outputPadding:se?Array.from(n().subarray(be>>>0,be+se>>>0)):[],outputShape:xe?Array.from(n().subarray(P>>>0,P+xe>>>0)):[],activation:He(de)})},1435068:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P)=>{o.Ea("ConvTranspose",i,{format:ne?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(h>>>0,h+2>>>0)),group:S,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[J>>>0],outputPadding:0<te?Array.from(n().subarray(se>>>0,se+te>>>0)):[],outputShape:0<be?Array.from(n().subarray(xe>>>0,xe+be>>>0)):[],activation:He(P)})},1435625:(i,c)=>{o.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435716:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de,Se)=>{o.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:S,storage_order:E,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1436e3:(i,c)=>{o.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1436091:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de,Se)=>{o.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:S,storage_order:E,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1436375:(i,c)=>{o.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436462:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de,Se)=>{o.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:S,storage_order:E,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1436742:(i,c)=>{o.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436829:(i,c,h,S,E,M,U,ne,J,te,se,be,xe,P,de,Se)=>{o.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:S,storage_order:E,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1437109:(i,c,h,S,E)=>{o.Ea("Gemm",i,{alpha:c,beta:h,transA:S,transB:E})},1437213:i=>{o.Ea("MatMul",i,void 0)},1437267:(i,c,h,S)=>{o.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!h,axis:S})},1437375:(i,c,h,S)=>{o.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!h,axis:S})},1437483:(i,c)=>{o.Ea("Softmax",i,{axis:c})},1437546:(i,c)=>{o.Ea("Concat",i,{axis:c})},1437606:(i,c,h,S,E)=>{o.Ea("Split",i,{axis:c,numOutputs:h,splitSizes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1437751:i=>{o.Ea("Expand",i,void 0)},1437805:(i,c)=>{o.Ea("Gather",i,{axis:Number(c)})},1437876:(i,c)=>{o.Ea("GatherElements",i,{axis:Number(c)})},1437955:(i,c,h,S,E,M,U,ne,J,te,se)=>{o.Ea("Resize",i,{antialias:c,axes:h?Array.from(n().subarray(S>>>0,S+h>>>0)):[],coordinateTransformMode:He(E),cubicCoeffA:M,excludeOutside:U,extrapolationValue:ne,keepAspectRatioPolicy:He(J),mode:He(te),nearestMode:He(se)})},1438306:(i,c,h,S,E,M,U)=>{o.Ea("Slice",i,{starts:c?Array.from(n().subarray(h>>>0,h+c>>>0)):[],ends:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[],axes:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[]})},1438537:i=>{o.Ea("Tile",i,void 0)},1438589:(i,c,h)=>{o.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(h)})},1438696:(i,c,h)=>{o.Ea("InstanceNormalization",i,{epsilon:c,format:h?"NHWC":"NCHW"})},1438810:(i,c,h)=>{o.Ea("InstanceNormalization",i,{epsilon:c,format:h?"NHWC":"NCHW"})},1438924:i=>{o.Ea("Range",i,void 0)},1438977:(i,c)=>{o.Ea("Einsum",i,{equation:He(c)})},1439058:(i,c,h,S,E)=>{o.Ea("Pad",i,{mode:c,value:h,pads:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},1439190:(i,c,h,S,E,M)=>{o.Ea("BatchNormalization",i,{epsilon:c,momentum:h,spatial:!!E,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1439359:(i,c,h,S,E,M)=>{o.Ea("BatchNormalization",i,{epsilon:c,momentum:h,spatial:!!E,trainingMode:!!S,format:M?"NHWC":"NCHW"})},1439528:(i,c,h,S,E,M,U,ne,J)=>{o.Ea("Attention",i,{numHeads:c,isUnidirectional:h,maskFilterValue:S,scale:E,doRotary:M,qkvHiddenSizes:U?Array.from(n().subarray(Number(ne)>>>0,Number(ne)+U>>>0)):[],pastPresentShareBuffer:!!J})},1439800:i=>{o.Ea("Gelu",i,void 0)},1439852:(i,c,h,S,E,M)=>{o.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:h,maskFilterValue:S,scale:E,doRotary:M})},1440011:i=>{o.Ea("BiasAdd",i,void 0)},1440066:i=>{o.Ea("BiasSplitGelu",i,void 0)},1440127:(i,c)=>{o.Ea("SkipLayerNormalization",i,{epsilon:c})},1440208:i=>o.wb(i),1440241:i=>o.yb(i),1440273:(i,c,h)=>{o.jb(i,c,h,!0)},1440312:(i,c,h)=>{o.jb(i,c,h)}};function xt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Lt(i){i.terminate(),i.onmessage=()=>{}}function Gt(i){(i=ue.Qa[i])||rt(),ue.Eb(i)}function er(i){var c=ue.tb();if(!c)return 6;ue.Ya.push(c),ue.Qa[i.Xa]=c,c.Xa=i.Xa;var h={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return _&&c.unref(),c.postMessage(h,i.Mb),0}var Ft=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Cr=(i,c,h)=>{c>>>=0;var S=c+h;for(h=c;i[h]&&!(h>=S);)++h;if(16<h-c&&i.buffer&&Ft)return Ft.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,h):i.subarray(c,h));for(S="";c<h;){var E=i[c++];if(E&128){var M=i[c++]&63;if((E&224)==192)S+=String.fromCharCode((E&31)<<6|M);else{var U=i[c++]&63;E=(E&240)==224?(E&15)<<12|M<<6|U:(E&7)<<18|M<<12|U<<6|i[c++]&63,65536>E?S+=String.fromCharCode(E):(E-=65536,S+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else S+=String.fromCharCode(E)}return S},He=(i,c)=>(i>>>=0)?Cr(a(),i,c):"";function tr(i){if(C)return H(1,1,i);Ee=i,st()||(ue.Hb(),o.onExit&&o.onExit(i),Ae=!0),b(i,new xt(i))}var rr=i=>{if(Ee=i,C)throw Ar(i),"unwind";tr(i)},ue={ab:[],Ya:[],mb:[],Qa:{},gb:function(){C?ue.vb():ue.ub()},ub:function(){Je.unshift(()=>{Xt(),ue.Bb(()=>Ir())})},vb:function(){ue.receiveObjectTransfer=ue.Db,ue.threadInitTLS=ue.lb,ue.setExitStatus=ue.kb,ae=!1},kb:function(i){Ee=i},Sb:["$terminateWorker"],Hb:function(){for(var i of ue.Ya)Lt(i);for(i of ue.ab)Lt(i);ue.ab=[],ue.Ya=[],ue.Qa=[]},Eb:function(i){var c=i.Xa;delete ue.Qa[c],ue.ab.push(i),ue.Ya.splice(ue.Ya.indexOf(i),1),i.Xa=0,An(c)},Db:function(){},lb:function(){ue.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=M=>{M=M.data;var U=M.cmd;if(M.targetThread&&M.targetThread!=Wr()){var ne=ue.Qa[M.Rb];ne?ne.postMessage(M,M.transferList):Y('Internal error! Worker sent a message "'+U+'" to target pthread '+M.targetThread+", but that thread no longer exists!")}else U==="checkMailbox"?Bt():U==="spawnThread"?er(M):U==="cleanupThread"?Gt(M.thread):U==="killThread"?(M=M.thread,U=ue.Qa[M],delete ue.Qa[M],Lt(U),An(M),ue.Ya.splice(ue.Ya.indexOf(U),1),U.Xa=0):U==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):U==="loaded"?(i.loaded=!0,c(i)):U==="alert"?alert("Thread "+M.threadId+": "+M.text):M.target==="setimmediate"?i.postMessage(M):U==="callHandler"?o[M.handler](...M.args):U&&Y("worker sent an unknown command "+U)},i.onerror=M=>{throw Y("worker sent an error! "+M.filename+":"+M.lineno+": "+M.message),M},_&&(i.on("message",function(M){i.onmessage({data:M})}),i.on("error",function(M){i.onerror(M)}));var h=[],S=["onExit","onAbort","print","printErr"],E;for(E of S)o.hasOwnProperty(E)&&h.push(E);i.postMessage({cmd:"load",handlers:h,urlOrBlob:o.mainScriptUrlOrBlob||e,wasmMemory:pe,wasmModule:$e})}),Bb:function(i){i()},qb:function(){var i=T("ort-wasm-simd-threaded.worker.js");i=new Worker(i),ue.ab.push(i)},tb:function(){return ue.ab.length==0&&(ue.qb(),ue.Cb(ue.ab[0])),ue.ab.pop()}};o.PThread=ue;var bt=i=>{for(;0<i.length;)i.shift()(o)};o.establishStackSpace=function(){var i=Wr(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],Va(c,c-i),Vr(c)};function Ar(i){if(C)return H(2,0,i);rr(i)}o.invokeEntryPoint=function(i,c){i=Na.apply(null,[i,c]),st()?ue.kb(i):En(i)};function ut(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,h){this.nb(),this.pb(c),this.ob(h)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Qe=0,Er=0;function Rt(i,c,h,S){return C?H(3,1,i,c,h,S):nr(i,c,h,S)}function nr(i,c,h,S){if(i>>>=0,c>>>=0,h>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return Y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var E=[];return C&&E.length===0?Rt(i,c,h,S):(i={Gb:h,Xa:i,rb:S,Mb:E},C?(i.Ob="spawnThread",postMessage(i,E),0):er(i))}function ar(i,c,h){return C?H(4,1,i,c,h):0}function Or(i,c){if(C)return H(5,1,i,c)}var Pt=i=>{for(var c=0,h=0;h<i.length;++h){var S=i.charCodeAt(h);127>=S?c++:2047>=S?c+=2:55296<=S&&57343>=S?(c+=4,++h):c+=3}return c},Tr=(i,c,h,S)=>{if(h>>>=0,!(0<S))return 0;var E=h;S=h+S-1;for(var M=0;M<i.length;++M){var U=i.charCodeAt(M);if(55296<=U&&57343>=U){var ne=i.charCodeAt(++M);U=65536+((U&1023)<<10)|ne&1023}if(127>=U){if(h>=S)break;c[h++>>>0]=U}else{if(2047>=U){if(h+1>=S)break;c[h++>>>0]=192|U>>6}else{if(65535>=U){if(h+2>=S)break;c[h++>>>0]=224|U>>12}else{if(h+3>=S)break;c[h++>>>0]=240|U>>18,c[h++>>>0]=128|U>>12&63}c[h++>>>0]=128|U>>6&63}c[h++>>>0]=128|U&63}}return c[h>>>0]=0,h-E},kr=(i,c,h)=>Tr(i,a(),c,h);function Rr(i,c){if(C)return H(6,1,i,c)}function Pr(i,c,h){if(C)return H(7,1,i,c,h)}function Br(i,c,h){return C?H(8,1,i,c,h):0}function Mr(i,c){if(C)return H(9,1,i,c)}function qt(i,c,h){if(C)return H(10,1,i,c,h)}function or(i,c,h,S){if(C)return H(11,1,i,c,h,S)}function ir(i,c,h,S){if(C)return H(12,1,i,c,h,S)}function sr(i,c,h,S){if(C)return H(13,1,i,c,h,S)}function ur(i){if(C)return H(14,1,i)}function lr(i,c){if(C)return H(15,1,i,c)}function dr(i,c,h){if(C)return H(16,1,i,c,h)}var cr=i=>{if(!Ae)try{if(i(),!st())try{C?En(Ee):rr(Ee)}catch(c){c instanceof xt||c=="unwind"||b(1,c)}}catch(c){c instanceof xt||c=="unwind"||b(1,c)}};function jt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(Bt),i+=128,Atomics.store(n(),i>>2,1))}o.__emscripten_thread_mailbox_await=jt;function Bt(){var i=Wr();i&&(jt(i),cr(()=>za()))}o.checkMailbox=Bt;var It=i=>i%4===0&&(i%100!==0||i%400===0),Mt=[0,31,60,91,121,152,182,213,244,274,305,335],pr=[0,31,59,90,120,151,181,212,243,273,304,334];function d(i,c,h,S,E,M,U,ne){return C?H(17,1,i,c,h,S,E,M,U,ne):-52}function m(i,c,h,S,E,M,U){if(C)return H(18,1,i,c,h,S,E,M,U)}var w=i=>{var c=Pt(i)+1,h=Cn(c);return h&&kr(i,h,c),h},x=[],O=(i,c)=>{x.length=0;var h;for(c>>=2;h=a()[i++>>>0];)c+=h!=105&c,x.push(h==105?n()[c>>>0]:l()[c++>>>1]),++c;return x},L=i=>{var c=On();return i=i(),Vr(c),i};function H(i,c){var h=arguments.length-2,S=arguments;return L(()=>{for(var E=Tn(8*h),M=E>>3,U=0;U<h;U++){var ne=S[2+U];l()[M+U>>>0]=ne}return Da(i,h,E,c)})}var le=[],Z={},re=()=>{if(!Q){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:g||"./this.program"},c;for(c in Z)Z[c]===void 0?delete i[c]:i[c]=Z[c];var h=[];for(c in i)h.push(`${c}=${i[c]}`);Q=h}return Q},Q;function fe(i,c){if(C)return H(19,1,i,c);i>>>=0,c>>>=0;var h=0;return re().forEach(function(S,E){var M=c+h;for(E=s()[i+4*E>>2>>>0]=M,M=0;M<S.length;++M)r()[E++>>0>>>0]=S.charCodeAt(M);r()[E>>0>>>0]=0,h+=S.length+1}),0}function ye(i,c){if(C)return H(20,1,i,c);i>>>=0,c>>>=0;var h=re();s()[i>>2>>>0]=h.length;var S=0;return h.forEach(function(E){S+=E.length+1}),s()[c>>2>>>0]=S,0}function R(i){return C?H(21,1,i):52}function ie(i,c,h,S){return C?H(22,1,i,c,h,S):52}function ge(i,c,h,S,E){return C?H(23,1,i,c,h,S,E):70}var wt=[null,[],[]];function fr(i,c,h,S){if(C)return H(24,1,i,c,h,S);c>>>=0,h>>>=0,S>>>=0;for(var E=0,M=0;M<h;M++){var U=s()[c>>2>>>0],ne=s()[c+4>>2>>>0];c+=8;for(var J=0;J<ne;J++){var te=a()[U+J>>>0],se=wt[i];te===0||te===10?((i===1?D:Y)(Cr(se,0)),se.length=0):se.push(te)}E+=ne}return s()[S>>2>>>0]=E,0}var Ea=[31,29,31,30,31,30,31,31,30,31,30,31],Oa=[31,28,31,30,31,30,31,31,30,31,30,31];function Ol(i){var c=Array(Pt(i)+1);return Tr(i,c,0,c.length),c}var Tl=(i,c)=>{r().set(i,c>>>0)};function Ta(i,c,h,S){function E(P,de,Se){for(P=typeof P=="number"?P.toString():P||"";P.length<de;)P=Se[0]+P;return P}function M(P,de){return E(P,de,"0")}function U(P,de){function Se(qa){return 0>qa?-1:0<qa?1:0}var Dt;return(Dt=Se(P.getFullYear()-de.getFullYear()))===0&&(Dt=Se(P.getMonth()-de.getMonth()))===0&&(Dt=Se(P.getDate()-de.getDate())),Dt}function ne(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function J(P){var de=P.Za;for(P=new Date(new Date(P.$a+1900,0,1).getTime());0<de;){var Se=P.getMonth(),Dt=(It(P.getFullYear())?Ea:Oa)[Se];if(de>Dt-P.getDate())de-=Dt-P.getDate()+1,P.setDate(1),11>Se?P.setMonth(Se+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+de);break}}return Se=new Date(P.getFullYear()+1,0,4),de=ne(new Date(P.getFullYear(),0,4)),Se=ne(Se),0>=U(de,P)?0>=U(Se,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,c>>>=0,h>>>=0,S>>>=0;var te=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:te?He(te):""},h=He(h),te={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in te)h=h.replace(new RegExp(se,"g"),te[se]);var be="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),xe="January February March April May June July August September October November December".split(" ");te={"%a":P=>be[P.Wa].substring(0,3),"%A":P=>be[P.Wa],"%b":P=>xe[P.eb].substring(0,3),"%B":P=>xe[P.eb],"%C":P=>M((P.$a+1900)/100|0,2),"%d":P=>M(P.ib,2),"%e":P=>E(P.ib,2," "),"%g":P=>J(P).toString().substring(2),"%G":P=>J(P),"%H":P=>M(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),M(P,2)),"%j":P=>{for(var de=0,Se=0;Se<=P.eb-1;de+=(It(P.$a+1900)?Ea:Oa)[Se++]);return M(P.ib+de,3)},"%m":P=>M(P.eb+1,2),"%M":P=>M(P.Jb,2),"%n":()=>`
`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>M(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>M(Math.floor((P.Za+7-P.Wa)/7),2),"%V":P=>{var de=Math.floor((P.Za+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.Za-2)%7&&de++,de)de==53&&(Se=(P.Wa+371-P.Za)%7,Se==4||Se==3&&It(P.$a)||(de=1));else{de=52;var Se=(P.Wa+7-P.Za-1)%7;(Se==4||Se==5&&It(P.$a%400-1))&&de++}return M(de,2)},"%w":P=>P.Wa,"%W":P=>M(Math.floor((P.Za+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.$a+1900).toString().substring(2),"%Y":P=>P.$a+1900,"%z":P=>{P=P.Ib;var de=0<=P;return P=Math.abs(P)/60,(de?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},h=h.replace(/%%/g,"\0\0");for(se in te)h.includes(se)&&(h=h.replace(new RegExp(se,"g"),te[se](S)));return h=h.replace(/\0\0/g,"%"),se=Ol(h),se.length>c?0:(Tl(se,i),se.length-1)}function Dr(i){try{i()}catch(c){rt(c)}}function kl(i){var c={},h;for(h in i)(function(S){var E=i[S];c[S]=typeof E=="function"?function(){zr.push(S);try{return E.apply(null,arguments)}finally{Ae||(zr.pop()===S||rt(),lt&&_t===1&&zr.length===0&&(_t=0,qe+=1,Dr(Ha),typeof Fibers<"u"&&Fibers.Ub()))}}:E})(h);return c}var _t=0,lt=null,ka=0,zr=[],Ra={},Pa={},Rl=0,_n=null,Pl=[];function Bl(){return new Promise((i,c)=>{_n={resolve:i,reject:c}})}function Ml(){var i=Cn(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=zr[0];var h=Ra[c];return h===void 0&&(h=Rl++,Ra[c]=h,Pa[h]=c),c=h,n()[i+8>>2>>>0]=c,i}function Dl(){var i=n()[lt+8>>2>>>0];return i=j[Pa[i]],--qe,i()}function zl(i){if(!Ae){if(_t===0){var c=!1,h=!1;i((S=0)=>{if(!Ae&&(ka=S,c=!0,h)){_t=2,Dr(()=>La(lt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var E=Dl()}catch(ne){E=ne,S=!0}var M=!1;if(!lt){var U=_n;U&&(_n=null,(S?U.reject:U.resolve)(E),M=!0)}if(S&&!M)throw E}}),h=!0,c||(_t=1,lt=Ml(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Dr(()=>Ua(lt)))}else _t===2?(_t=0,Dr(Ga),Ba(lt),lt=null,Pl.forEach(S=>cr(S))):rt(`invalid state: ${_t}`);return ka}}function Wl(i){return zl(c=>{i().then(c)})}ue.gb();var Vl=[null,tr,Ar,Rt,ar,Or,Rr,Pr,Br,Mr,qt,or,ir,sr,ur,lr,dr,d,m,fe,ye,R,ie,ge,fr],Nl={r:function(i,c,h){return Wl(async()=>{await o.xb(i,c,h)})},b:function(i,c,h){throw i>>>=0,new ut(i).gb(c>>>0,h>>>0),Qe=i,Er++,Qe},P:function(i){Ma(i>>>0,!v,1,!$,131072,!1),ue.lb()},n:function(i){i>>>=0,C?postMessage({cmd:"cleanupThread",thread:i}):Gt(i)},K:nr,g:ar,V:Or,F:Rr,H:Pr,y:Br,T:Mr,L:qt,S:or,p:ir,G:sr,D:ur,U:lr,E:dr,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>Bt()):C?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=ue.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:jt,X:function(i){_&&ue.Qa[i>>>0].ref()},u:function(i,c,h){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,h>>>=0,i=new Date(1e3*i),n()[h>>2>>>0]=i.getUTCSeconds(),n()[h+4>>2>>>0]=i.getUTCMinutes(),n()[h+8>>2>>>0]=i.getUTCHours(),n()[h+12>>2>>>0]=i.getUTCDate(),n()[h+16>>2>>>0]=i.getUTCMonth(),n()[h+20>>2>>>0]=i.getUTCFullYear()-1900,n()[h+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[h+28>>2>>>0]=i},v:function(i,c,h){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,h>>>=0,i=new Date(1e3*i),n()[h>>2>>>0]=i.getSeconds(),n()[h+4>>2>>>0]=i.getMinutes(),n()[h+8>>2>>>0]=i.getHours(),n()[h+12>>2>>>0]=i.getDate(),n()[h+16>>2>>>0]=i.getMonth(),n()[h+20>>2>>>0]=i.getFullYear()-1900,n()[h+24>>2>>>0]=i.getDay(),c=(It(i.getFullYear())?Mt:pr)[i.getMonth()]+i.getDate()-1|0,n()[h+28>>2>>>0]=c,n()[h+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var S=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=S&&i.getTimezoneOffset()==Math.min(S,c))|0,n()[h+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),h=n()[i+32>>2>>>0],S=c.getTimezoneOffset(),E=new Date(c.getFullYear(),6,1).getTimezoneOffset(),M=new Date(c.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(M,E);return 0>h?n()[i+32>>2>>>0]=+(E!=M&&U==S):0<h!=(U==S)&&(E=Math.max(M,E),c.setTime(c.getTime()+6e4*((0<h?U:E)-S))),n()[i+24>>2>>>0]=c.getDay(),h=(It(c.getFullYear())?Mt:pr)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=h,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,Wa((yt=i,1<=+Math.abs(yt)?0<yt?+Math.floor(yt/4294967296)>>>0:~~+Math.ceil((yt-+(~~yt>>>0))/4294967296)>>>0:0)),i>>>0},s:d,t:m,A:function(i,c,h){function S(te){return(te=te.toTimeString().match(/\(([A-Za-z ]+)\)$/))?te[1]:"GMT"}i>>>=0,c>>>=0,h>>>=0;var E=new Date().getFullYear(),M=new Date(E,0,1),U=new Date(E,6,1);E=M.getTimezoneOffset();var ne=U.getTimezoneOffset(),J=Math.max(E,ne);s()[i>>2>>>0]=60*J,n()[c>>2>>>0]=+(E!=ne),i=S(M),c=S(U),i=w(i),c=w(c),ne<E?(s()[h>>2>>>0]=i,s()[h+4>>2>>>0]=c):(s()[h>>2>>>0]=c,s()[h+4>>2>>>0]=i)},e:()=>{rt("")},c:function(i,c,h){return i>>>=0,c=O(c>>>0,h>>>0),Ht[i].apply(null,c)},l:function(i,c,h){return i>>>=0,c=O(c>>>0,h>>>0),Ht[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw qe+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return _?(Eo(),Ct(Ao)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,h,S){for(ue.Pb=c>>>0,le.length=h,c=S>>>0>>3,S=0;S<h;S++)le[S]=l()[c+S>>>0];return(0>i?Ht[-i-1]:Vl[i]).apply(null,le)},z:function(i){i>>>=0;var c=a().length;if(i<=c||4294901760<i)return!1;for(var h=1;4>=h;h*=2){var S=c*(1+.2/h);S=Math.min(S,i+100663296);var E=Math;S=Math.max(i,S);e:{E=E.min.call(E,4294901760,S+(65536-S%65536)%65536)-pe.buffer.byteLength+65535>>>16;try{pe.grow(E),oe();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Q:fe,R:ye,J:rr,h:R,m:ie,x:ge,j:fr,a:pe||o.wasmMemory,I:Ta,f:function(i,c,h,S){return Ta(i>>>0,c>>>0,h>>>0,S>>>0)}};(function(){function i(h,S){return h=h.exports,h=kl(h),j=h=Ul(h),ue.mb.push(j.Da),Te.unshift(j.Y),$e=S,Ir(),h}var c={a:Nl};if(Xt(),o.instantiateWasm)try{return o.instantiateWasm(c,i)}catch(h){Y("Module.instantiateWasm callback failed with error: "+h),f(h)}return _r(c,function(h){i(h.instance,h.module)}).catch(f),{}})(),o._OrtInit=(i,c)=>(o._OrtInit=j.Z)(i,c),o._OrtGetLastError=(i,c)=>(o._OrtGetLastError=j._)(i,c),o._OrtCreateSessionOptions=(i,c,h,S,E,M,U,ne,J,te)=>(o._OrtCreateSessionOptions=j.$)(i,c,h,S,E,M,U,ne,J,te),o._OrtAppendExecutionProvider=(i,c)=>(o._OrtAppendExecutionProvider=j.aa)(i,c),o._OrtAddFreeDimensionOverride=(i,c,h)=>(o._OrtAddFreeDimensionOverride=j.ba)(i,c,h),o._OrtAddSessionConfigEntry=(i,c,h)=>(o._OrtAddSessionConfigEntry=j.ca)(i,c,h),o._OrtReleaseSessionOptions=i=>(o._OrtReleaseSessionOptions=j.da)(i),o._OrtCreateSession=(i,c,h)=>(o._OrtCreateSession=j.ea)(i,c,h),o._OrtReleaseSession=i=>(o._OrtReleaseSession=j.fa)(i),o._OrtGetInputOutputCount=(i,c,h)=>(o._OrtGetInputOutputCount=j.ga)(i,c,h),o._OrtGetInputName=(i,c)=>(o._OrtGetInputName=j.ha)(i,c),o._OrtGetOutputName=(i,c)=>(o._OrtGetOutputName=j.ia)(i,c),o._OrtFree=i=>(o._OrtFree=j.ja)(i),o._OrtCreateTensor=(i,c,h,S,E,M)=>(o._OrtCreateTensor=j.ka)(i,c,h,S,E,M),o._OrtGetTensorData=(i,c,h,S,E)=>(o._OrtGetTensorData=j.la)(i,c,h,S,E),o._OrtReleaseTensor=i=>(o._OrtReleaseTensor=j.ma)(i),o._OrtCreateRunOptions=(i,c,h,S)=>(o._OrtCreateRunOptions=j.na)(i,c,h,S),o._OrtAddRunConfigEntry=(i,c,h)=>(o._OrtAddRunConfigEntry=j.oa)(i,c,h),o._OrtReleaseRunOptions=i=>(o._OrtReleaseRunOptions=j.pa)(i),o._OrtCreateBinding=i=>(o._OrtCreateBinding=j.qa)(i),o._OrtBindInput=(i,c,h)=>(o._OrtBindInput=j.ra)(i,c,h),o._OrtBindOutput=(i,c,h,S)=>(o._OrtBindOutput=j.sa)(i,c,h,S),o._OrtClearBoundOutputs=i=>(o._OrtClearBoundOutputs=j.ta)(i),o._OrtReleaseBinding=i=>(o._OrtReleaseBinding=j.ua)(i),o._OrtRunWithBinding=(i,c,h,S,E)=>(o._OrtRunWithBinding=j.va)(i,c,h,S,E),o._OrtRun=(i,c,h,S,E,M,U,ne)=>(o._OrtRun=j.wa)(i,c,h,S,E,M,U,ne),o._OrtEndProfiling=i=>(o._OrtEndProfiling=j.xa)(i),o._JsepOutput=(i,c,h)=>(o._JsepOutput=j.ya)(i,c,h),o._JsepGetNodeName=i=>(o._JsepGetNodeName=j.za)(i);var Wr=o._pthread_self=()=>(Wr=o._pthread_self=j.Aa)(),Cn=o._malloc=i=>(Cn=o._malloc=j.Ba)(i),Ba=o._free=i=>(Ba=o._free=j.Ca)(i);o.__emscripten_tls_init=()=>(o.__emscripten_tls_init=j.Da)();var Ma=o.__emscripten_thread_init=(i,c,h,S,E,M)=>(Ma=o.__emscripten_thread_init=j.Fa)(i,c,h,S,E,M);o.__emscripten_thread_crashed=()=>(o.__emscripten_thread_crashed=j.Ga)();var Da=(i,c,h,S)=>(Da=j.Ha)(i,c,h,S),An=i=>(An=j.Ia)(i),En=o.__emscripten_thread_exit=i=>(En=o.__emscripten_thread_exit=j.Ja)(i),za=o.__emscripten_check_mailbox=()=>(za=o.__emscripten_check_mailbox=j.Ka)(),Wa=i=>(Wa=j.La)(i),Va=(i,c)=>(Va=j.Ma)(i,c),On=()=>(On=j.Na)(),Vr=i=>(Vr=j.Oa)(i),Tn=i=>(Tn=j.Pa)(i),Na=o.dynCall_ii=(i,c)=>(Na=o.dynCall_ii=j.Ra)(i,c),Ua=i=>(Ua=j.Sa)(i),Ha=()=>(Ha=j.Ta)(),La=i=>(La=j.Ua)(i),Ga=()=>(Ga=j.Va)();o.___start_em_js=1440345,o.___stop_em_js=1440506;function Ul(i){i=Object.assign({},i);var c=S=>()=>S()>>>0,h=S=>E=>S(E)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=h(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=h(i.stackAlloc),i}o.keepRuntimeAlive=st,o.wasmMemory=pe,o.stackAlloc=Tn,o.stackSave=On,o.stackRestore=Vr,o.UTF8ToString=He,o.stringToUTF8=kr,o.lengthBytesUTF8=Pt,o.ExitStatus=xt,o.PThread=ue;var Nr;kt=function i(){Nr||Fa(),Nr||(kt=i)};function Fa(){function i(){if(!Nr&&(Nr=!0,o.calledRun=!0,!Ae)&&(C||bt(Te),p(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!C)){if(o.postRun)for(typeof o.postRun=="function"&&(o.postRun=[o.postRun]);o.postRun.length;){var c=o.postRun.shift();We.unshift(c)}bt(We)}}if(!(0<Xe))if(C)p(o),C||bt(Te),startWorker(o);else{if(o.preRun)for(typeof o.preRun=="function"&&(o.preRun=[o.preRun]);o.preRun.length;)Je.unshift(o.preRun.shift());bt(Je),0<Xe||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),i()},1)):i())}}if(o.preInit)for(typeof o.preInit=="function"&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return Fa(),t.ready}})();typeof To=="object"&&typeof Nn=="object"?Nn.exports=Oo:typeof define=="function"&&define.amd&&define([],()=>Oo)});var Ro=Kt((Mf,Zl)=>{Zl.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var Bo,Xl,Un,Hn,Yr,Po,Ql,Jl,ed,Mo,Me,Yt=F(()=>{"use strict";Bo=Io();Xl=ko(),Hn=!1,Yr=!1,Po=!1,Ql=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Jl=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},ed=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Mo=async e=>{if(Hn)return Promise.resolve();if(Yr)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Po)throw new Error("previous call to 'initializeWebAssembly()' failed.");Yr=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&Ql(),s=a&&Jl(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,o=ed(s,n),p=typeof u=="object"?u[o]:void 0,f=!1,y=[];if(t>0&&y.push(new Promise(g=>{setTimeout(()=>{f=!0,g()},t)})),y.push(new Promise((g,b)=>{let $=n?Xl:Bo,v={locateFile:(_,C)=>{if(n&&_.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Ro()],{type:"text/javascript"}));if(_.endsWith(".wasm")){if(p)return p;let I=l??C;return o==="ort-wasm-simd.wasm"?I+"ort-wasm-simd.jsep.wasm":o==="ort-wasm-simd-threaded.wasm"?I+"ort-wasm-simd-threaded.jsep.wasm":I+o}return C+_}};if(n)if(typeof Blob>"u")v.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let _=`var ortWasmThreaded=${$.toString()};`;v.mainScriptUrlOrBlob=new Blob([_],{type:"text/javascript"})}$(v).then(_=>{Yr=!1,Hn=!0,Un=_,g()},_=>{Yr=!1,Po=!0,b(_)})})),await Promise.race(y),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Me=()=>{if(Hn&&Un)return Un;throw new Error("WebAssembly is not initialized yet.")}});var ze,hr,ke,Zr=F(()=>{"use strict";Yt();ze=(e,t)=>{let r=Me(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},hr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")hr(s,u+".",r,a);else if(typeof s=="string"||typeof s=="number")a(u,s.toString());else if(typeof s=="boolean")a(u,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},ke=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],s=t.HEAPU32[a/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var Do,zo=F(()=>{"use strict";Yt();Zr();Do=e=>{let t=Me(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=ze(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&ke("Can't create run options."),e?.extra!==void 0&&hr(e.extra,"",new WeakSet,(u,l)=>{let o=ze(u,a),p=ze(l,a);t._OrtAddRunConfigEntry(r,o,p)!==0&&ke(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),s}}});var td,rd,nd,ad,Wo,Vo=F(()=>{"use strict";Yt();Zr();td=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},rd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},nd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},ad=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=ze("deviceType",r),o=ze(u.deviceType,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&ke(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let o=ze("numThreads",r),p=ze(l.toString(),r);Me()._OrtAddSessionConfigEntry(e,o,p)!==0&&ke(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let l=ze("powerPreference",r),o=ze(u.powerPreference,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&ke(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=ze("preferredLayout",r),o=ze(u.preferredLayout,r);Me()._OrtAddSessionConfigEntry(e,l,o)!==0&&ke(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=ze(n,r);Me()._OrtAppendExecutionProvider(e,s)!==0&&ke(`Can't append execution provider: ${n}.`)}},Wo=e=>{let t=Me(),r=0,a=[],n=e||{};nd(n);try{let s=td(n.graphOptimizationLevel??"all"),u=rd(n.executionMode??"sequential"),l=typeof n.logId=="string"?ze(n.logId,a):0,o=n.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let f=typeof n.optimizedModelFilePath=="string"?ze(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,o,p,f),r===0&&ke("Can't create session options."),n.executionProviders&&ad(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[y,g]of Object.entries(n.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof g!="number"||!Number.isInteger(g)||g<0)throw new Error(`free dimension override value must be a non-negative integer: ${g}`);let b=ze(y,a);t._OrtAddFreeDimensionOverride(r,b,g)!==0&&ke(`Can't set a free dimension override: ${y} - ${g}.`)}return n.extra!==void 0&&hr(n.extra,"",new WeakSet,(y,g)=>{let b=ze(y,a),$=ze(g,a);t._OrtAddSessionConfigEntry(r,b,$)!==0&&ke(`Can't set a session config entry: ${y} - ${g}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),s}}});var Ln,gr,yr,Xr,br,Qr,Gn,Ve=F(()=>{"use strict";Ln=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},gr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},yr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Xr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},br=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Qr=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Gn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var od,id,No,Uo,Ho,sd,Be,At=F(()=>{"use strict";Ve();od=["V","I","W","E","F"],id=(e,t)=>{console.log(`[${od[e]},${new Date().toISOString()}]${t}`)},Ho=(e,t)=>{No=e,Uo=t},sd=(e,t)=>{let r=br(e),a=br(No);r>=a&&id(r,typeof t=="function"?t():t)},Be=(...e)=>{Uo&&sd(...e)}});var Lo,Go=F(()=>{"use strict";Ve();Lo=(e,t)=>new(Xr(t))(e)});var Jr=F(()=>{"use strict"});var en,ud,Fo,qn,Fn,jo,Ko=F(()=>{"use strict";At();Jr();en=e=>Math.ceil(e/16)*16,ud=1,Fo=()=>ud++,qn=async(e,t,r,a)=>{let n=en(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let l=s.getMappedRange();if(a){let o=a();return o.set(new Uint8Array(l,0,r)),o}else return new Uint8Array(l.slice(0,r))}finally{s.destroy()}},Fn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,s=r.byteLength,u=en(s),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${s}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=o.getMappedRange();new Uint8Array(p).set(new Uint8Array(a,n,s)),o.unmap();let f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(o,0,l.gpuData.buffer,0,u),Be("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=en(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=Fo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Be("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Be("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=en(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let o=s?this.freeBuffers:this.freeUniformBuffers,p=o.get(a);p||(p=[],o.set(a,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:Fo(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Be("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Be("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await qn(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},jo=(...e)=>new Fn(...e)});var jn,ee,Re=F(()=>{"use strict";jn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},ee=e=>new jn(e)});var Kn,dt,V,Vt,tn,rn,nn,we=F(()=>{"use strict";Kn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},dt=class{static calcShape(t,r,a=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||s<2)return;let o=Kn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(o===void 0)return;[l[u-2],l[u-1]]=o}for(let o=a?3:1;o<=u;o++){let p=n-o<0?1:t[n-o],f=s-o<0?1:r[s-o];if(p!==f&&p>1&&f>1)return;l[u-o]=Math.max(p,f)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let s=1;s<=a;s++)if(t[a-s]!==1&&t[a-s]!==r[n-s])return!1;return!0}},V=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let s=r;s<a;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,s)=>n+r[s]+r[s+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Vt=class e{static adjustPoolAttributes(t,r,a,n,s,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<s.length){if(s[l]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,s,u,l){if(l){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<t.length-2;o++)e.adjustPadAndReturnShape(t[o+(u?1:2)],r[o],a[o],n[o],s,o,o+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,s,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let o=[r[0],r[1]];return e.computeShapeHelper(t,r,o,a,n,s,u,l),o}static computeConvOutputShape(t,r,a,n,s,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[t[0],r[0]];return e.computeShapeHelper(!1,t,o,a,n,s,u,l),o}static computeShapeHelper(t,r,a,n,s,u,l,o){if(t)for(let p=0;p<r.length-2;p++)a.push(1);else for(let p=0;p<r.length-2;p++)a.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],l,p,p+r.length-2,o))}static adjustPadAndReturnShape(t,r,a,n,s,u,l,o){let p=a*(n-1)+1;if(o&&o!=="NOTSET")switch(o){case"VALID":return s[u]=0,s[l]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(o==="SAME_LOWER"?(y+1)/2:y/2),s[l]=y-s[u],Math.floor((t+y-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[l]-p)/r+1)}},tn=class{static getShapeOfGemmResult(t,r,a,n,s){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,o;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let p=-1;if(n?(o=a[0],p=1):(o=a[1],p=0),a[p]!==l)throw new Error("dimension mismatch");if(u<=0||o<=0||l<=0)throw new Error("invalid shape specified");if(s&&!dt.isValidBroadcast(s,[u,o]))throw new Error("gemm: invalid bias shape for broadcast");return[u,o,l]}},rn=-34028234663852886e22,nn=34028234663852886e22});var ld,Yo,Ie,me,Ye,Ge,nt,at,Zo,N,q,Yn,Xo,Zn,Pe,ve=F(()=>{"use strict";Ve();we();ld=64,Yo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ie=(e,t=1)=>{let r=Yo(e,t);return typeof r=="string"?r:r[0]},me=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:V.computeStrides(e)}],Ye=e=>e%4===0?4:e%2===0?2:1,Ge=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,nt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,at=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Zo=(e,t,r,a,n,s=!1)=>{let u=typeof r=="number",l=u?r:r.length,o=[...new Array(l).keys()],p=l<2?"u32":l<=4?`vec${l}<u32>`:`array<u32, ${l}>`,f=Yo(t,n),y=typeof f=="string"?f:f[1],g=typeof f=="string"?f:f[0],b={indices:p,value:y,storage:g,tensor:t},$=G=>typeof G=="string"?G:`${G}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},_=u||s?"uniforms.":"",C=`${_}${e}_shape`,I=`${_}${e}_strides`,T="";for(let G=0;G<l-1;G++)T+=`
    let dim${G} = current / ${I}[${G}];
    let rest${G} = current % ${I}[${G}];
    indices[${G}] = dim${G};
    current = rest${G};
    `;T+=`indices[${l-1}] = current;`;let A=l<2?"":`
  fn o2i_${e}(offset: u32) -> ${b.indices} {
    var indices: ${b.indices};
    var current = offset;
    ${T}
    return indices;
  }`,B=G=>(v.offsetToIndices=!0,l<2?G:`o2i_${e}(${G})`),k=[];if(l>=2)for(let G=l-1;G>=0;G--)k.push(`${I}[${G}] * (indices[${G}])`);let W=l<2?"":`
  fn i2o_${e}(indices: ${b.indices}) -> u32 {
    return ${k.join("+")};
  }`,z=G=>(v.indicesToOffset=!0,l<2?G:`i2o_${e}(${G})`),K=(...G)=>l===0?"0u":`${b.indices}(${G.map($).join(",")})`,X=(G,oe)=>l<2?`${G}`:`${G}[${oe}]`,D=(G,oe,he)=>l<2?`${G}=${he};`:`${G}[${oe}]=${he};`,Y={},Ce=(G,oe)=>{v.broadcastedIndicesToOffset=!0;let he=`${oe.name}broadcastedIndicesTo${e}Offset`;if(he in Y)return`${he}(${G})`;let Je=[];for(let Te=l-1;Te>=0;Te--){let We=oe.indicesGet("outputIndices",Te+oe.rank-l);Je.push(`${X(I,Te)} * (${We} % ${X(C,Te)})`)}return Y[he]=`fn ${he}(outputIndices: ${oe.type.indices}) -> u32 {
             return ${Je.length>0?Je.join("+"):"0u"};
           }`,`${he}(${G})`},ae=(G,oe)=>(()=>{if(b.storage===b.value)return`${e}[${G}]=${oe};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${oe}), select(0u, 0xFFFFFFFFu, ${oe} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${oe}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${oe}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),pe=G=>(()=>{if(b.storage===b.value)return`${e}[${G}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${G}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${G}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),j=l<2?"":`
  fn get_${e}ByIndices(indices: ${b.indices}) -> ${y} {
    return ${pe(`i2o_${e}(indices)`)};
  }`,$e=l<2?"":(()=>{let G=o.map(he=>`d${he}: u32`).join(", "),oe=o.map(he=>`d${he}`).join(", ");return`
  fn get_${e}(${G}) -> ${y} {
    return get_${e}ByIndices(${K(oe)});
  }`})(),Ae=(...G)=>{if(G.length!==l)throw new Error(`indices length must be ${l}`);let oe=G.map($).join(",");return l===0?pe("0u"):l===1?pe(oe[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${oe})`)},Ee=G=>l<2?pe(G):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${G})`),ce=l<2?"":`
  fn set_${e}ByIndices(indices: ${b.indices}, value: ${y}) {
    ${ae(`i2o_${e}(indices)`,"value")}
  }`,Ke=l<2?"":(()=>{let G=o.map(he=>`d${he}: u32`).join(", "),oe=o.map(he=>`d${he}`).join(", ");return`
  fn set_${e}(${G}, value: ${y}) {
    set_${e}ByIndices(${K(oe)}, value);
  }`})();return{impl:()=>{let G=[];return u||(G.push(`const ${C} = ${b.indices}(${r.join(",")});`),G.push(`const ${I} = ${b.indices}(${V.computeStrides(r).join(",")});`)),v.offsetToIndices&&G.push(A),v.indicesToOffset&&G.push(W),v.broadcastedIndicesToOffset&&Object.values(Y).forEach(oe=>G.push(oe)),v.set&&G.push(Ke),v.setByIndices&&G.push(ce),v.get&&G.push($e),v.getByIndices&&G.push(j),G.join(`
`)},type:b,offsetToIndices:B,indicesToOffset:z,broadcastedIndicesToOffset:Ce,indices:K,indicesGet:X,indicesSet:D,set:(...G)=>{if(G.length!==l+1)throw new Error(`indices length must be ${l}`);let oe=G[l];if(typeof oe!="string")throw new Error("value must be string");let he=G.slice(0,l).map($).join(",");return l===0?ae("0u",oe):l===1?ae(he[0],oe):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${he}, ${oe})`)},setByOffset:ae,setByIndices:(G,oe)=>l<2?ae(G,oe):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${oe});`),get:Ae,getByOffset:pe,getByIndices:Ee,usage:a?"input":"output",name:e,strides:I,shape:C,rank:l,uniformOnly:s}},N=(e,t,r,a=1,n=!1)=>Zo(e,t,r,!0,a,n),q=(e,t,r,a=1)=>Zo(e,t,r,!1,a),Yn=class{constructor(t){this.normalizedDispatchGroup=t;this.indicesHelpers=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=ld){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}declareVariable(t,r=-1){if(this.indicesHelpers.push(t),t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices})),t.uniformOnly)return"";let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>r.uniformOnly===!0?this.declareVariable(r):this.declareVariable(r,this.variableIndex++)).join(`
`)}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a}of this.uniforms)t.push(`${r}:${a}`);return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.indicesHelpers.map(t=>t.impl()).join(`
`)}},Xo=e=>new Yn(e),Zn=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(s)}return a},Pe=e=>e<=4});var dd,Qo,cd,pd,ot,Jo,ei,Zt=F(()=>{"use strict";we();Re();ve();dd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Qo=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,cd=(e,t)=>V.sortBasedOnPerm(e,Qo(e.length,t)),pd=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`
`)},ot=(e,t)=>{let r=e.dataType,a=e.dims.length,n=Qo(a,t),s=Pe(a),u=cd(e.dims,n),l=s?u.length:u,o=s?a:e.dims,p=q("output",r,l),f=N("a",r,o),y=g=>`
  ${g.registerUniform("output_size","u32").declareVariables(f,p)}

  ${pd(n,a,f,p)}

  ${g.mainStart()}
    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${p.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${p.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:g=>{let b=V.size(u);return{outputs:[{dims:u,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:s?[{type:"uint32",data:b},...me(g[0].dims),...me(u)]:[{type:"uint32",data:b}]}},getShaderSource:y}},Jo=(e,t)=>{dd(e.inputs),e.compute(ot(e.inputs[0],t.perm))},ei=e=>ee({perm:e.perm})});var fd,md,hd,gd,yd,bd,wd,vd,$d,Sd,ct,ti,ri,ni,ai,oi,ii,si,ui,li,di,ci=F(()=>{"use strict";we();ve();an();Zt();fd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},md={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},hd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},gd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},yd=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},bd=(e,t)=>{let r=[],a=e.length;for(let s=0;s<a;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},wd=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?a.push(e[n++]):a.push(1);return a},vd=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},$d=(e,t)=>{let r=[];if(!vd(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},Sd=(e,t,r,a,n,s,u)=>{let l=r[0].dims,o=V.size(s),p=V.size(u),f=N("_A",r[0].dataType,l),y=q("output",n,s),g=32,b=`
          var<workgroup> aBestValues : array<${y.type.storage}, ${g}>;
       `;return{name:e,shaderCache:t,getShaderSource:v=>`
        ${v.registerUniform("reduceSize","u32").declareVariables(f,y)}
        ${b}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${v.mainStart(g)}
          let local_idx = local_id.x;

          let outputIndex = global_idx / ${g};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${y.type.storage}(${hd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${g}) {
           let candidate = ${y.type.storage}(${f.getByOffset("offset + k")});
           bestValue = ${fd[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${g}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${md[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${gd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:p}]})}},ct=(e,t,r,a)=>{let n=e.inputs.length===1?r:Xn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((b,$)=>$));let u=V.normalizeAxes(s,e.inputs[0].dims.length),l=u,o=e.inputs[0],p=$d(l,e.inputs[0].dims.length);p.length>0&&(o=e.compute(ot(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],l=yd(l.length,o.dims.length));let[f,y]=bd(o.dims,l),g=f;n.keepDims&&(g=wd(f,u)),e.compute(Sd(t,{hint:n.cacheKey,inputDependencies:["type"]},[o],a,e.inputs[0].dataType,g,y),{inputs:[o]})},ti=(e,t)=>{ct(e,"ReduceMeanShared",t,"mean")},ri=(e,t)=>{ct(e,"ReduceL1Shared",t,"l1")},ni=(e,t)=>{ct(e,"ReduceL2Shared",t,"l2")},ai=(e,t)=>{ct(e,"ReduceLogSumExpShared",t,"logSumExp")},oi=(e,t)=>{ct(e,"ReduceMaxShared",t,"max")},ii=(e,t)=>{ct(e,"ReduceMinShared",t,"min")},si=(e,t)=>{ct(e,"ReduceProdShared",t,"prod")},ui=(e,t)=>{ct(e,"ReduceSumShared",t,"sum")},li=(e,t)=>{ct(e,"ReduceSumSquareShared",t,"sumSquare")},di=(e,t)=>{ct(e,"ReduceLogSumShared",t,"logSum")}});var pt,xd,on,Xn,ft,Id,_d,Cd,Ad,Ed,Od,Td,kd,Rd,Pd,mt,pi,fi,mi,hi,gi,yi,bi,wi,vi,$i,it,an=F(()=>{"use strict";we();Re();ve();ci();pt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},xd=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],on=(e,t,r,a,n,s,u=!1,l=!1)=>{let o=[],p=r[0].dims,f=V.normalizeAxes(n,r[0].dims.length),y=!l&&f.length===0;p.forEach((W,z)=>{y||f.indexOf(z)>=0?u&&o.push(1):o.push(W)});let g=[],b=N("_A",r[0].dataType,p),$=q("output",s,o),v=a(b,$,f),_=`inputOffset = ${b.indicesToOffset("inputIndices")};`,C=`let ${_};`,I=`var ${_};`,T=v[1]===""?"":I,A=(v[1]===""?C:_)+`
`+v[2];for(let W=0,z=0;W<r[0].dims.length;W++)y||f.indexOf(W)>=0?(u&&z++,A=`for(var j${W}: u32 = 0; j${W} < ${r[0].dims[W]}; j${W}++) {
                ${v[2].includes("lastIndex")?`let lastIndex = j${W};`:""}
                ${b.indicesSet("inputIndices",W,`j${W}`)}
                ${A}
              }`):(g.push(`${b.indicesSet("inputIndices",W,$.indicesGet("outputIndices",z))};`),z++);let B=V.size(o);return{name:e,shaderCache:t,getShaderSource:W=>`
        ${W.declareVariables(b,$)}

        ${W.mainStart()}
          ${W.guardAgainstOutOfBoundsWorkgroupSizes(B)}
          var inputIndices: ${b.type.indices};
          let outputIndices = ${$.offsetToIndices("global_idx")};

          ${g.join(`
`)}
          ${v[0]}       // init ops for reduce max/min
          ${T}
          ${v[1]}
          ${A}
          ${v[3]}
          ${v.length===4?$.setByOffset("global_idx","value"):v.slice(4).join(`
`)}
        }`,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(B/64)}})}},Xn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),ee({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ft=(e,t,r,a)=>{let n=e.inputs,s=n.length===1?r:Xn(n,r);e.compute(on(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?xd:a,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Id=(e,t)=>{pt(e.inputs),ft(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,"value = log(value);"])},_d=(e,t)=>{pt(e.inputs),ft(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByOffset("inputOffset")});`,""])},Cd=(e,t)=>{pt(e.inputs),ft(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},Ad=(e,t)=>{pt(e.inputs),ft(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByOffset("inputOffset")});`,"value = log(value);"])},Ed=(e,t)=>{pt(e.inputs),ft(e,"ReduceMax",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(a.indicesSet("inputIndices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = max(value, ${a.getByOffset("inputOffset")});`,""]})},Od=(e,t)=>{pt(e.inputs),ft(e,"ReduceMean",t,(a,n,s)=>{let u=1;for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},Td=(e,t)=>{pt(e.inputs),ft(e,"ReduceMin",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = min(value, ${a.getByOffset("inputOffset")});`,""]})},kd=(e,t)=>{pt(e.inputs),ft(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByOffset("inputOffset")};`,""])},Rd=(e,t)=>{pt(e.inputs),ft(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,""])},Pd=(e,t)=>{pt(e.inputs),ft(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += t * t;`,""])},mt=(e,t,r)=>{if(t.length===0)return!!r;let a=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?a*=e[s]:n*=e[s];return n<32&&a>1024},pi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):ti(e,t)},fi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_d(e,t):ri(e,t)},mi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cd(e,t):ni(e,t)},hi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ad(e,t):ai(e,t)},gi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ed(e,t):oi(e,t)},yi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Td(e,t):ii(e,t)},bi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):si(e,t)},wi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):ui(e,t)},vi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):li(e,t)},$i=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Id(e,t):di(e,t)},it=e=>ee(e)});var Si,xi,Ii,Qn,_i=F(()=>{"use strict";Ve();Re();an();Si=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},xi=(e,t)=>{Si(e.inputs);let r=(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(on("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ii=(e,t)=>{Si(e.inputs);let r=(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(on("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Qn=e=>ee(e)});var Bd,Ci,Md,Dd,zd,sn,Wd,Ai,Jn=F(()=>{"use strict";Re();Jr();ve();Bd=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let o=r.dims[0],p=r.dims[1],f=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==f)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=n.dims[0]/3,g=y,b=g;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let T of t.qkvHiddenSizes)if(T%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],g=t.qkvHiddenSizes[1],b=t.qkvHiddenSizes[2]}let $=p;if(y!==g)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==y+g+b)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let v=0;if(u){if(g!==b)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==o)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==g/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(v=u.dims[3])}let _=$+v,C=-1,I=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:o,sequenceLength:p,pastSequenceLength:v,kvSequenceLength:$,totalSequenceLength:_,maxSequenceLength:C,inputHiddenSize:f,hiddenSize:y,vHiddenSize:b,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(b/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:I,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ci=e=>ee({...e}),Md=(e,t,r,a)=>{let n=Ye(a),s=q("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let l=Ie(t.dataType),o=64,p=a/n;p<o?o=1:p/8<64&&(o=Math.ceil(p/8));let f=Math.ceil(a/n/o),y=g=>`
  const dInv: ${l} = 1 / ${a};
  const dComp = ${a/n};
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;

  ${g.declareVariables(s)}
  @compute @workgroup_size(${o}, 1, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_index : u32) {
    let localOffset = local_index * ${f};
    let offset: u32 = workgroup_id.x * dComp + localOffset;

    var threadMaxVector = ${Ge("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      threadMaxVector = max(${nt(l,n,"x[offset + i]")}, threadMaxVector);
    }
    wgMax[local_index] = ${u};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${Ge("f32",n,"0")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      sumVector += exp(${nt(l,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_index] = ${at("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        x[offset + i] = ${Ge(l,n,"dInv")};
      }
    } else {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        let f32input = ${nt(l,n,"x[offset + i]")};
        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${a}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Dd=(e,t,r,a,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=s.scale===0?1/Math.sqrt(n.headSize):s.scale,o=Ie(t.dataType),p=Ye(n.headSize),f=N("q",t.dataType,t.dims,p),y=N("key",r.dataType,r.dims,p),g=q("output",t.dataType,u),b=n.headSize/p,$=n.sequenceLength,v=n.totalSequenceLength,_=b,C=12,I={x:Math.ceil(n.totalSequenceLength/C),y:Math.ceil(n.sequenceLength/C),z:n.batchSize*n.numHeads},T=[t,r],A=k=>`
  const M: u32 = ${$}u;
  const N: u32 = ${v}u;
  const K: u32 = ${_}u;
  const alpha: ${o} = ${l};
  const beta: ${o} = 1.0;
  const TILE_SIZE = ${C}u;

  var<workgroup> tileQ: array<${f.type.storage}, ${C*C}>;
  var<workgroup> tileK: array<${f.type.storage}, ${C*C}>;

  ${k.declareVariables(f,y,g)}

  @compute @workgroup_size(${C}, ${C}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${I.x*I.y}u +
          workgroup_id.y * ${I.x}u + workgroup_id.x) * ${C*C}u + local_index;

    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = ${n.sequenceLength*b} * headIdx + m * K;
    let kOffset = ${n.kvSequenceLength*b} * headIdx + n * K;

    var value = ${Ge(o,p)};
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m + local_id.y < M && w + local_id.x < K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];
      }
      if (n + local_id.y < N && w + local_id.x < K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * M * N;
    if (lm < M && ln < N) {
      let outputIdx = headOffset + lm * N + ln;
      output[outputIdx] = ${at("value",p)} * alpha;
    }
  }`,B=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:I}),getShaderSource:A},{inputs:T,outputs:[-1]})[0];return Md(e,B,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),B},zd=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],s=N("probs",t.dataType,t.dims),u=N("v",r.dataType,r.dims),l=q("output",t.dataType,n),o=Ie(t.dataType),p=12,f={x:Math.ceil(a.vHeadSize/p),y:Math.ceil(a.sequenceLength/p),z:a.batchSize*a.numHeads},y=g=>`
  const M: u32 = ${a.sequenceLength}u;
  const N: u32 = ${a.vHeadSize}u;
  const K: u32 = ${a.totalSequenceLength}u;
  const numHeads: u32 = ${a.numHeads}u;
  const TILE_SIZE = ${p}u;

  var<workgroup> tileQ: array<${s.type.storage}, ${p*p}>;
  var<workgroup> tileK: array<${s.type.storage}, ${p*p}>;

  ${g.declareVariables(s,u,l)}

  @compute @workgroup_size(${p}, ${p}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${f.x*f.y}u +
          workgroup_id.y * ${f.x}u + workgroup_id.x) * ${p*p}u + local_index;

   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (M * K) + m * K;
   let offsetB = headIdx * (N * K) + n;

   var value = ${o}(0);
   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
     if (m < M && w + local_id.x < K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < N && w + local_id.y < K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / ${a.numHeads};
   let currentBatchHeadNumber = workgroup_id.z % ${a.numHeads};
   let headOffset = (batchIdx * M * ${a.numHeads} + currentBatchHeadNumber) * ${a.vHeadSize};
   if (m < M && n < N) {
     let outputIdx = batchIdx * ${a.sequenceLength*a.vHiddenSize} + m * ${a.vHiddenSize}
       + currentBatchHeadNumber * ${a.vHeadSize} + n;
     output[outputIdx] = value;
   }
  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(a)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:f}),getShaderSource:y},{inputs:[t,r],outputs:[0]})[0]},sn=(e,t,r,a,n,s,u,l,o,p,f)=>{let y=Dd(e,t,r,o,p,f);zd(e,y,a,p)},Wd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=Ie(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,l=12,o={x:Math.ceil(t.headSize/l),y:Math.ceil(t.sequenceLength/l),z:t.batchSize*t.numHeads},p=()=>`
  const M: u32 = ${n}u;
  const K: u32 = ${s}u;
  const N: u32 = ${u}u;
  const numHeads: u32 = ${t.numHeads};
  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileInput: array<${a}, ${l*l}>;
  var<workgroup> tileWeightQ: array<${a}, ${l*l}>;
  var<workgroup> tileWeightK: array<${a}, ${l*l}>;
  var<workgroup> tileWeightV: array<${a}, ${l*l}>;

  @group(0) @binding(0) var<storage, read> input: array<${a}>;
  @group(0) @binding(1) var<storage, read> weight: array<${a}>;
  @group(0) @binding(2) var<storage, read> bias: array<${a}>;
  @group(0) @binding(3) var<storage, read_write> outputQ: array<${a}>;
  @group(0) @binding(4) var<storage, read_write> outputK: array<${a}>;
  @group(0) @binding(5) var<storage, read_write> outputV: array<${a}>;

  @compute @workgroup_size(${l}, ${l}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${o.x*o.y}u +
          workgroup_id.y * ${o.x}u + workgroup_id.x) * ${l*l}u + local_index;

    let batchIndex = workgroup_id.z / ${t.numHeads};
    let headNumber = workgroup_id.z % ${t.numHeads};
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (M * K) + m * K;
    let biasOffsetQ = headNumber * ${t.headSize};
    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;
    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;

    var valueQ = ${a}(0);
    var valueK = ${a}(0);
    var valueV = ${a}(0);
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m < M && w + local_id.x < K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < N && w + local_id.y < K) {
        let offset = n + (w + local_id.y) * ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * N + n) % ${t.headSize};
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * M * N;
    if (m < M && n < N) {
      let outputIdx = offset + m * N + n;
      outputQ[outputIdx] = valueQ;
      outputK[outputIdx] = valueK;
      outputV[outputIdx] = valueV;
    }
  }`,f=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o}),getShaderSource:p},{inputs:f,outputs:[-1,-1,-1]})},Ai=(e,t)=>{let r=Bd(e.inputs,t),[a,n,s]=Wd(e,r);return sn(e,a,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Vd,Nd,Ud,Ei,Oi=F(()=>{"use strict";$t();we();Re();ve();Vd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,s)=>{let u=n.length;if(u!==a.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((l,o)=>{if(l!==a[o])throw new Error(`${s}: dim[${o}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Nd=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,s=e[0].dims,u=a?Ye(s[s.length-1]):1,l=n==="NHWC"&&s.length>1?u:1,o=V.size(s)/u,p=Pe(s.length)&&a,f=p?s.length:s,y=N("x",e[0].dataType,e[0].dims,u),g=N("scale",e[1].dataType,e[1].dims,l),b=N("bias",e[2].dataType,e[2].dims,l),$=N("inputMean",e[3].dataType,e[3].dims,l),v=N("inputVar",e[4].dataType,e[4].dims,l),_=q("y",e[0].dataType,f,u),C=()=>{let T="";if(a)T=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")T=`
            ${_.indicesSet("outputIndices","0","0")}
            let cOffset = ${_.indicesToOffset("outputIndices")};`;else{T=`var cIndices = ${g.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let A=1;A<g.rank;A++)T+=`cIndices[${A}] = outputIndices[${A}];`;T+=`let cOffset = ${g.indicesToOffset("cIndices")};`}return T},I=T=>`
  const epsilon = ${r};
  ${T.registerUniform("outputSize","u32").declareVariables(y,g,b,$,v,_)}
  ${T.mainStart()}
  ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${_.offsetToIndices(`global_idx * ${u}`)};
    ${C()}
    let scale = ${g.getByOffset("cOffset")};
    let bias = ${b.getByOffset("cOffset")};
    let inputMean = ${$.getByOffset("cOffset")};
    let inputVar = ${v.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;
    ${_.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:I,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p?[{type:"uint32",data:o},...me(s)]:[{type:"uint32",data:o}]})}},Ud=e=>ee(e),Ei=(e,t)=>{let{inputs:r,outputCount:a}=e,n=Ud({...t,outputCount:a});if(Oe.webgpu.validateInputContent&&Vd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Nd(r,n))}});var Hd,Ld,Ti,ki=F(()=>{"use strict";we();ve();Hd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ld=e=>{let t=e[0].dims,r=e[0].dims[2],a=V.size(t)/4,n=e[0].dataType,s=N("input",n,t,4),u=N("bias",n,[r],4),l=N("residual",n,t,4),o=q("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:f=>`
  const channels = ${r}u / 4;
  ${f.declareVariables(s,u,l,o)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${s.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${o.setByOffset("global_idx","value")}
  }`}},Ti=e=>{Hd(e.inputs),e.compute(Ld(e.inputs))}});var Gd,_e,Ri,Pi,Bi,Mi,Di,zi,Wi,Vi,Ni,Fd,Ui,Hi,Li,Gi,un,Fi,ln,qi,ji,Ki,Yi,Zi,Xi,Qi,Ji,es,ts,rs,ns,as,os,is,ss,us,ea=F(()=>{"use strict";Ve();we();Re();ve();Gd=(e,t,r,a,n,s)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let o=N("inputData",r,[u],4),p=q("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(o,p)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${o.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",l)}
  }`},_e=(e,t,r,a,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Gd(u,V.size(e.dims),e.dataType,s,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(V.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(V.size(e.dims)/4)}]})}),Ri=e=>{e.compute(_e(e.inputs[0],"Abs","abs"))},Pi=e=>{e.compute(_e(e.inputs[0],"Acos","acos"))},Bi=e=>{e.compute(_e(e.inputs[0],"Acosh","acosh"))},Mi=e=>{e.compute(_e(e.inputs[0],"Asin","asin"))},Di=e=>{e.compute(_e(e.inputs[0],"Asinh","asinh"))},zi=e=>{e.compute(_e(e.inputs[0],"Atan","atan"))},Wi=e=>{e.compute(_e(e.inputs[0],"Atanh","atanh"))},Vi=e=>ee(e),Ni=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(_e(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Fd=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:rn,r=e.length>=3?e[2].getFloat32Array()[0]:nn;return ee({min:t,max:r})},Ui=(e,t)=>{let r=e.inputs.length===1?t:Fd(e.inputs),a=Ie(e.inputs[0].dataType);e.compute(_e(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Hi=e=>{e.compute(_e(e.inputs[0],"Ceil","ceil"))},Li=e=>{e.compute(_e(e.inputs[0],"Cos","cos"))},Gi=e=>{e.compute(_e(e.inputs[0],"Cosh","cosh"))},un=e=>ee(e),Fi=(e,t)=>{e.compute(_e(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_: f32 = f32(${t.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},ln=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,qi=e=>{let t=Ie(e.inputs[0].dataType);e.compute(_e(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,ln(`vec4<${t}>`,t)))},ji=e=>{e.compute(_e(e.inputs[0],"Exp","exp"))},Ki=e=>{e.compute(_e(e.inputs[0],"Floor","floor"))},Yi=e=>{let t=Ie(e.inputs[0].dataType);e.compute(_e(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,ln(`vec4<${t}>`,t)))},Zi=(e,t)=>{e.compute(_e(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},Xi=e=>{e.compute(_e(e.inputs[0],"Not",t=>`!${t}`))},Qi=e=>{e.compute(_e(e.inputs[0],"Neg",t=>`-${t}`))},Ji=e=>{e.compute(_e(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},es=e=>{e.compute(_e(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},ts=e=>{e.compute(_e(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},rs=e=>{e.compute(_e(e.inputs[0],"Sin","sin"))},ns=e=>{e.compute(_e(e.inputs[0],"Sinh","sinh"))},as=e=>{e.compute(_e(e.inputs[0],"Sqrt","sqrt"))},os=e=>{e.compute(_e(e.inputs[0],"Tan","tan"))},is=e=>{e.compute(_e(e.inputs[0],"Tanh","tanh"))},ss=(e,t)=>(e.compute(_e(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),us=e=>{e.compute(_e(e.inputs[0],"Log","log"))}});var jd,Kd,ls,ds=F(()=>{"use strict";we();ve();ea();jd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Kd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=N("input",e[0].dataType,e[0].dims,4),a=N("bias",e[0].dataType,[e[0].dims[2]],4),n=q("output",e[0].dataType,t,4),s=V.size(t)/4,u=Ie(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${o.declareVariables(r,a,n)}

  ${ln(`vec4<${u}>`,u)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},ls=e=>{jd(e.inputs),e.compute(Kd(e.inputs))}});var Yd,Zd,ht,cs,ps,fs,ms,hs,gs,ys,bs,ws,vs,$s=F(()=>{"use strict";Ve();we();ve();Yd=(e,t,r,a,n,s,u,l,o,p,f,y,g)=>{let b,$;typeof l=="string"?b=$=(k,W)=>`${l}((${k}),(${W}))`:typeof l=="function"?b=$=l:(b=l.scalar,$=l.vector);let v=y?t.length:t,_=y?r.length:r,C=y?a.length:a,I=q("outputData",f,C,4),T=N("aData",o,v,4),A=N("bData",p,_,4),B;if(n)if(s){let k=V.size(t)===1,W=V.size(r)===1,z=t.length>0&&t[t.length-1]%4===0,K=r.length>0&&r[r.length-1]%4===0;k||W?B=I.setByOffset("global_idx",$(k?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"),W?`${A.type.value}(${A.getByOffset("0")}.x)`:A.getByOffset("global_idx"))):B=`
            let outputIndices = ${I.offsetToIndices("global_idx * 4u")};
            let offsetA = ${T.broadcastedIndicesToOffset("outputIndices",I)};
            let offsetB = ${A.broadcastedIndicesToOffset("outputIndices",I)};
            ${I.setByOffset("global_idx",$(u||z?T.getByOffset("offsetA / 4u"):`${T.type.value}(${T.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||K?A.getByOffset("offsetB / 4u"):`${A.type.value}(${A.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else B=I.setByOffset("global_idx",$(T.getByOffset("global_idx"),A.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let k=(W,z,K="")=>{let X=`aData[indexA${z}][componentA${z}]`,D=`bData[indexB${z}][componentB${z}]`;return`
            let outputIndices${z} = ${I.offsetToIndices(`global_idx * 4u + ${z}u`)};
            let offsetA${z} = ${T.broadcastedIndicesToOffset(`outputIndices${z}`,I)};
            let offsetB${z} = ${A.broadcastedIndicesToOffset(`outputIndices${z}`,I)};
            let indexA${z} = offsetA${z} / 4u;
            let indexB${z} = offsetB${z} / 4u;
            let componentA${z} = offsetA${z} % 4u;
            let componentB${z} = offsetB${z} % 4u;
            ${W}[${z}] = ${K}(${b(X,D)});
          `};f===9?B=`
            var data = vec4<u32>(0);
            ${k("data",0,"u32")}
            ${k("data",1,"u32")}
            ${k("data",2,"u32")}
            ${k("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`
            ${k("outputData[global_idx]",0)}
            ${k("outputData[global_idx]",1)}
            ${k("outputData[global_idx]",2)}
            ${k("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(T,A,I)}

        ${g??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${B}
      }`},Zd=(e,t,r,a,n,s,u=r.dataType)=>{let l=!V.areEqual(r.dims,a.dims),o=r.dims,p=V.size(r.dims),f=!1,y=!1,g=[l];if(l){let $=dt.calcShape(r.dims,a.dims,!1);if(!$)throw new Error("Can't perform binary op on the given tensors");o=$,p=V.size(o);let v=V.size(r.dims)===1,_=V.size(a.dims)===1,C=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,I=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;g.push(v),g.push(_),g.push(C),g.push(I);let T=1;for(let A=1;A<o.length;A++){let B=r.dims[r.dims.length-A]??1,k=a.dims[a.dims.length-A]??1;if(B===k)T*=B;else break}T%4===0?(y=!0,f=!0):(v||_||C||I)&&(f=!0)}else f=!0;g.push(f);let b=Pe(r.dims.length)&&Pe(a.dims.length)&&Pe(o.length);return{name:e,shaderCache:{hint:t+g.map($=>$.toString()).join("_"),inputDependencies:b?["rank","rank"]:["dims","dims"]},getShaderSource:$=>Yd($,r.dims,a.dims,o,f,l,y,n,r.dataType,a.dataType,u,b,s),getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:b?[{type:"uint32",data:Math.ceil(V.size(o)/4)},...me(r.dims),...me(a.dims),...me(o)]:[{type:"uint32",data:Math.ceil(V.size(o)/4)}]})}},ht=(e,t,r,a,n,s)=>{e.compute(Zd(t,n??"",e.inputs[0],e.inputs[1],r,a,s))},cs=e=>{ht(e,"Add",(t,r)=>`${t}+${r}`)},ps=e=>{ht(e,"Div",(t,r)=>`${t}/${r}`)},fs=e=>{ht(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},ms=e=>{ht(e,"Mul",(t,r)=>`${t}*${r}`)},hs=e=>{let t=N("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ht(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},gs=e=>{ht(e,"Sub",(t,r)=>`${t}-${r}`)},ys=e=>{ht(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},bs=e=>{ht(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},ws=e=>{ht(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},vs=e=>{ht(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Qd,Jd,ec,tc,Ss,xs,Is=F(()=>{"use strict";we();Re();ve();Qd=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},Jd=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,ec=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(s):n===0?a.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?a.push(`else { ${s} }`):a.push(`else if (inputIndex == ${n}) { ${s} }`)}return a.join(`
`)},tc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let A=1;A<e.length;A++){let B=e[A].dims.slice();for(let k=0;k<r.length;k++)if(k===a)n[a]+=B[k];else if(r[k]!==B[k])throw new Error("non concat dimensions must match")}let s=V.size(n),u=new Array(e.length),l=new Array(e.length),o=e[0].dataType,p=0,f=[],y=[],g=[],b=[{type:"uint32",data:s}];for(let A=0;A<e.length;++A)p+=e[A].dims[a],u[A]=p,g.push(Pe(e[A].dims.length)),y.push(g[A]?e[A].dims.length:e[A].dims),l[A]=N(`input${A}`,o,y[A]),f.push(g[A]?"rank":"dims"),b.push({type:"uint32",data:u[A]});for(let A=0;A<e.length;++A)g[A]&&b.push(...me(e[A].dims));let $=Pe(n.length);$&&b.push(...me(n));let v=$?n.length:n,_=q("output",o,v),C=_.indicesGet("indices",a),I=Array.from(Array(u.length).keys()).map(A=>`uniforms.sizeInConcatAxis${A}`).join(","),T=A=>`

  ${(()=>{A.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)A.registerUniform(`sizeInConcatAxis${B}`,"u32");return A.declareVariables(...l,_)})()}

  ${Jd(u.length,I)}

  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${_.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${C});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${I});
      ${C} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${ec(l,_)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:b}),getShaderSource:T}},Ss=(e,t)=>{Qd(e.inputs),e.compute(tc(e.inputs,t.axis))},xs=e=>ee({axis:e.axis})});var Et,dn,Nt=F(()=>{"use strict";we();Et=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},dn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[rn,nn];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Ue,cn,pn=F(()=>{"use strict";Ue=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},cn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var fn,ta=F(()=>{"use strict";fn=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var rc,nc,wr,_s,ac,vr,oc,mn,$r=F(()=>{"use strict";we();ve();Nt();pn();rc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,nc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,wr=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32)=>{let o=t[1]*e[1],p=t[0]*e[0],f=n?o:s,y=n?s:o,g=f/t[0],b=s/t[1];if(!((n&&g===4&&e[1]===4||!n&&(g===3||g===4))&&f%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${g} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${g} must be 3 or 4.
  tileAWidth ${f} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${g}<${r}>, ${f/g}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${g};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${o};

  let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${b};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${rc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${g===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${nc(n,g)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},_s=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,ac=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",vr=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32,o=!1)=>{let p=e[1]*t[1],f=e[0]*t[0],y=n?p:s,g=n?s:p;if(!(g%t[1]===0&&y%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let b=g/t[1],$=y/t[0],v=s/t[1],_=o?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${p};
    let globalColStart = i32(workgroupId.x) * ${f};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${_s(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${p};

let tileRowA = i32(localId.y) * ${b};
let tileColA = i32(localId.x) * ${$};
let tileRowB = i32(localId.y) * ${v};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${$}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${_s(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${ac(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${g}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${f}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${_}
  }
`},oc=(e,t,r,a,n,s=!1)=>{let u=n[0],l=n[1],o=n[2],p=a[0],f=a[1],y=a[2],g=a[3],b=Zn(u,o),$=Zn(l,o),v=Ie(a[0].type.tensor),_=()=>{let T=f.rank,A=p.rank,B=`var aIndices: ${f.type.indices};`;for(let k=T-2-1,W=A-1;k>=0;k--,W--)B+=`
aIndices[${k}] = ${A>1?`batchIndices[${W}]`:"batchIndices"};`;return b.forEach(k=>{B+=`
aIndices[${k}] = 0;`}),B+=`
aIndices[${T-2}] = u32(row);
                   aIndices[${T-1}] = u32(colIn);`,B},C=()=>{let T=y.rank,A=p.rank,B=`var bIndices: ${y.type.indices};`;for(let k=T-2-1,W=A-1;k>=0;k--,W--)B+=`
bIndices[${k}] = ${A>1?`batchIndices[${W}]`:"batchIndices"};`;return $.forEach(k=>{B+=`
bIndices[${k}] = 0;`}),B+=`
bIndices[${T-2}] = u32(row);
                   bIndices[${T-1}] = u32(colIn);`,B};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ue(e,v)} {
      var value = ${Ue(e,v)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${_()}
        value = ${f.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ue(e,v)} {
      var value = ${Ue(e,v)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${C()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ue(e,v)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${s?"bias[colIn]":`${Ue(e,v)}(bias[row])`};`:""}
        ${r}
        ${g.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},mn=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s.slice(0,-2),o=u.slice(0,-2),p=a?a.slice(0,-2):r.slice(0,-2),f=Pe(p.length),y=f?p.length:p,g=N("batchDims",e[0].dataType,y,1,!0),b=[g],$=[l,o,p],v=V.size(p),_=s[s.length-2],C=s[s.length-1],I=u[u.length-1],T=C%4===0&&I%4===0,A=_<=8?[4,1,1]:[4,4,1],B=[8,8,1],k=[Math.ceil(I/B[0]/A[0]),Math.ceil(_/B[1]/A[1]),Math.ceil(v/B[2]/A[2])],W=Ie(e[0].dataType),z=T?4:1,K=[...l,_,C/z],X=Pe(K.length),D=X?K.length:K,Y=[...o,C,I/z],Ce=Pe(Y.length),ae=Ce?Y.length:Y,pe=[v,_,I/z],j=N("a",e[0].dataType,D,z),$e=N("b",e[1].dataType,ae,z),Ae=q("result",e[0].dataType,pe.length,z);b.push(j),b.push($e),b.push(Ae);let Ee=[g,j,$e],ce=[{type:"int32",data:_},{type:"int32",data:I},{type:"int32",data:C}];f&&ce.push(...me(p)),X&&ce.push(...me(K)),Ce&&ce.push(...me(Y));let Ke=[];Ke.push(X?"rank":"dims"),Ke.push(Ce?"rank":"dims");let Ne=e.length>2,{activationFunction:Fe,applyActivation:tt}=Et(t,Ae.type.value),G=oc(z,Ne,tt,b,$,n);if(Ne){let he=n?z:1;Ee.push(N("bias",e[2].dataType,e[2].dims.length,he)),ce.push(...me(e[2].dims)),Ke.push("rank")}ce.push(...me(pe));let oe=he=>`
  ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Ee,Ae)}
  ${Fe}
  ${G}
  ${T?wr(A,B,W,g):vr(A,B,W,g)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${A}${t.activation}${t.clipMax}${t.clipMin}${T}${Ne}${n}`,inputDependencies:Ke},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:k[0],y:k[1],z:k[2]},programUniforms:ce}),getShaderSource:oe}}});var ic,Cs,As=F(()=>{"use strict";At();ve();Nt();pn();ta();$r();ic=(e,t,r,a,n=!1,s,u=4,l=4,o=4,p="f32")=>{let f=D=>{switch(D){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},y=D=>{switch(D){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},g=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,b=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,$=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",v=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",_=e?"row":"col",C=e?"col":"row",I=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${_} / outWidth;
    let outCol = ${_} % outWidth;

    let WRow = ${C} / (filterDims[1] * inChannels);
    let WCol = ${C} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${C} % inChannels;
    var resData = ${Ue(u,p)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${$} && xCol >= 0 && xCol < ${v}) {
      ${g}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${f(u)}
    }
    return resData;`,T=e?t&&a?`
    let col = colIn * ${u};
    ${I}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${I}
    }
    return ${Ue(u,p)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${I}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${I}
    }
    return ${Ue(u,p)}(0.0);`,A=`${y(l)}`,B=Ue(o,p),k=e?Ue(u,p):Ue(l,p),W=e?Ue(l,p):Ue(u,p),{activationFunction:z,applyActivation:K}=Et(s,B);return`
    ${z}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${k} {
      ${e?T:A}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${W} {
      ${e?A:T}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {
      let col = colIn * ${o};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${b}
      ${cn(n)}
      ${K}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Cs=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",p=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],g=o?r[1]:r[2],b=o?r[3]:r[1],$=o&&(p%4===0||p%3===0)&&b%4===0,v=o?b:y*g,_=o?y*g:b,C=[8,8,1],I=a<=8?[4,1,1]:[4,4,1],T=[Math.ceil(v/C[0]/I[0]),Math.ceil(_/C[1]/I[1]),Math.ceil(f/C[2]/I[2])];Be("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${T}`);let A=$?o&&p%4!==0?3:4:1,B=C[1]*I[1],k=C[0]*I[0],W=Math.max(C[0]*A,C[1]),z=a%B===0,K=n%k===0,X=s%W===0,D=$?[A,4,4]:[1,1,1],Y=Ie(e[0].dataType),Ce=$?4:1,ae=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:s}],pe=N("x",e[0].dataType,e[0].dims.length,A===3?1:A),j=N("w",e[1].dataType,e[1].dims.length,Ce),$e=[pe,j];ae.push(...me(e[0].dims)),ae.push(...me(e[1].dims));let Ae=`
      fn setOutputAtIndex(flatIndex : i32, value : ${$?`vec4<${Y}>`:Y}) {
        result[flatIndex] = ${$?`vec4<${Y}>`:Y}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${$?`vec4<${Y}>`:Y}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${$?"/ 4":""}, value);
      }`;if(u){let ce=N("bias",e[2].dataType,e[2].dims.length,Ce);$e.push(ce),ae.push(...me(e[2].dims)),Ae+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?`vec4<${Y}>`:Y} {
          return bias[coords.${o?"w":"y"}${$?"/ 4":""}];
        }`}let Ee=q("result",e[0].dataType,r.length,Ce);return ae.push(...me(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:ae}),getShaderSource:ce=>`
        ${fn("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${ce.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...$e,Ee)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Ae}
        ${ic(o,z,K,X,u,t,D[0],D[1],D[2],Y)}
            ${$?wr(I,C,Y,void 0,!o,W):vr(I,C,Y,void 0,!o,W,!1,void 0,l)}`}}});var ra,Es=F(()=>{"use strict";we();ve();aa();Nt();ra=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,l=u[0]/t.group,o=t.format==="NHWC",p=na(s,u,t.dilations,t.pads,t.strides,o),f=V.size(p),y=q("output",e[0].dataType,p),{activationFunction:g,applyActivation:b}=Et(t,y.type.value),$=N("x",e[0].dataType,s),v=N("w",e[1].dataType,u),_=[$,v];a&&_.push(N("b",e[2].dataType,e[2].dims));let C=I=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${I.declareVariables(..._,y)}

  ${g}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes(f)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${o?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${o?1:2}], outputIndices[${o?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${s[o?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${s[o?2:3]}u) {
            continue;
          }

          let xVal = ${o?$.get("batch","xHeight","xWidth","input_channel"):$.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${v.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${b}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)}}),getShaderSource:C}}});var na,Os,sc,Ts,oa,uc,lc,ia,aa=F(()=>{"use strict";we();Re();As();$r();Es();Nt();Zt();na=(e,t,r,a,n,s)=>{let u=e[0],l=e.slice(s?1:2,s?3:4),o=l.length,p=t[0],y=t.slice(2).map(($,v)=>$+($-1)*(r[v]-1)),b=l.map(($,v)=>$+a[v]+a[v+o]).map(($,v)=>Math.floor(($-y[v]+n[v])/n[v]));return b.splice(0,0,u),b.splice(s?3:1,0,p),b},Os=[2,3,1,0],sc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ts=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let a=e.pads.slice();Vt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},oa=e=>{let t=dn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,l=e.pads,o=e.strides,p=e.w_is_const();return ee({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,pads:l,strides:o,wIsConst:p,...t})},uc=(e,t,r)=>{let a=Ts(r,t);if(r.group!==1){e.compute(ra(t,a));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],o=t[0].dims[n?3:1],p=t[1].dims[2],f=t[1].dims[3],y=na(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),g=y[n?1:2],b=y[n?2:3],$=y[n?3:1],v=n&&p===u&&f===l&&r.pads[0]===0&&r.pads[1]===0;if(v||p===1&&f===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let k=y[0],W,z,K,X=[];if(n){let D=e.kernelCustomData.wT??e.compute(ot(t[1],Os),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=D),v){let Y=u*l*o;W=t[0].reshape([1,k,Y]),z=D.reshape([1,Y,$]),K=[1,k,$]}else W=t[0].reshape([k,u*l,o]),z=D.reshape([1,o,$]),K=[k,g*b,$];X.push(W),X.push(z)}else W=t[0].reshape([k,o,u*l]),z=t[1].reshape([1,$,o]),K=[k,$,g*b],X.push(z),X.push(W);s&&X.push(t[2]),e.compute(mn(X,a,y,K,n),{inputs:X});return}let _=!0,C=e.kernelCustomData.wT??e.compute(ot(t[1],Os),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=C);let I=[t[0],C];s&&I.push(t[2]);let T=n?g*b:$,A=n?$:g*b,B=p*f*o;e.compute(Cs(I,a,y,T,A,B,s,_),{inputs:I})},lc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),o=Ts({...t,pads:n,strides:s,dilations:u,kernelShape:l},a);e.compute(ra(a,o,p=>r?[p[0],p[2],p[3]]:[]))},ia=(e,t)=>{sc(e.inputs,t),e.inputs[0].dims.length===3?lc(e,t):uc(e,e.inputs,t)}});var dc,ks,Rs=F(()=>{"use strict";At();ve();Nt();pn();ta();$r();dc=(e,t=!1,r,a=4)=>{let n=Ue(a,"f32"),s=I=>{switch(I){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${I} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,l=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,o=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",f=e?"row":"col",y=e?"col":"row",g=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${f} / outWidth;
      let outCol = ${f} % outWidth;

      let WRow = ${y} / (filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${o}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,b=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${g}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${g}
      }
      return ${n}(0.0);`,$=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${s(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:v,applyActivation:_}=Et(r,n);return`
      ${v}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:$}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?$:b}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${l}
      ${cn(t)}
      ${_}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},ks=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",p=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],g=o?r[1]:r[2],b=o?r[3]:r[1],$=o?p%4===0&&b%4===0:y%4===0&&b%4===0,v=o?b:y*g,_=o?y*g:b,C=$?[8,8,1]:[v<=4||_<=4?4:16,v>4&&_<=4?4:16,1],I=$?[4,4,1]:[v<=4?1:4,v>4&&_<=4?1:4,1],T=[Math.ceil(v/C[0]/I[0]),Math.ceil(_/C[1]/I[1]),Math.ceil(f/C[2]/I[2])];Be("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${T}`);let A=$?4:1,B=Math.max(C[0]*A,C[1]),k=$?4:1,W=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:s}],z=N("x",e[0].dataType,e[0].dims.length,k),K=N("w",e[1].dataType,e[1].dims.length,1),X=q("result",e[0].dataType,r.length,k),D=[z,K];W.push(...me(e[0].dims)),W.push(...me(e[1].dims));let Y="";if(u){let Ce=N("bias",e[2].dataType,e[2].dims.length,k);D.push(Ce),W.push(...me(e[2].dims)),Y+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?"vec4<f32>":"f32"} {
          return bias[coords.${o?"w":"y"}${$?"/ 4":""}];
        }`}return W.push(...me(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:W}),getShaderSource:Ce=>`
        ${fn("uniforms.result_strides")}
        ${Ce.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...D,X)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[o?1:2]}, ${t.kernelShape[o?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${s};
        ${Y}
        ${dc(o,u,t,A)}
        ${$?wr(I,C,"f32",void 0,!o,B):vr(I,C,"f32",void 0,!o,B,!1,void 0,l)}`}}});var cc,sa,Ps=F(()=>{"use strict";At();we();ve();cc=(e,t,r,a,n,s,u=!1,l)=>{let o=r.format==="NHWC",p=o?1:2,f=o?2:3,y=o?3:1,g=V.size(a),b=u?2:1,$=r.group,v=t[1].dims,_=v[0]/$,C=v[1],I=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(I+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${o?"w":"y"}${u?"/ 4":""}];
    }`);let T=u?4:1,A=N("W",t[1].dataType,t[1].dims,T),B=N("Dy",t[0].dataType,t[0].dims,T),k=[B,A];n&&k.push(N("bias",t[2].dataType,[a[y]],T));let W=q("result",t[0].dataType,a,T),z=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${b};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${b}>;
        for (var i = 0; i < ${b}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${B.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${b}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};
          ${W.set("batch","r","c + i","d1","value")};
        }
      }`,K=`
          let outputIndices = ${W.offsetToIndices("global_idx")};
          let batch = ${W.indicesGet("outputIndices",0)};
          let d1 = ${W.indicesGet("outputIndices",y)};
          let r = ${W.indicesGet("outputIndices",p)};
          let c = ${W.indicesGet("outputIndices",f)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${C};
          let wOutChannel = d1 - groupId * ${C};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${p}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${f}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${_};
              for (var d2: u32 = 0; d2 < ${_}; d2 = d2 + 1) {
                let xValue = ${o?B.get("batch","idyR","idyC","inputChannel"):B.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${A.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":"0.0"};
          ${W.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...k,W)}
  ${I}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[o?1:2]}, ${r.kernelShape[o?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)};
  ${u?z:K}}`},sa=(e,t,r)=>{let a=e.length>2,n=t.outputShape,s=V.size(n),u=[Math.ceil(s/64),1,1];Be("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Ie(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:o=>cc(o,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var pc,fc,mc,Bs,Ms,hc,gc,yc,bc,Ds,zs=F(()=>{"use strict";Re();Rs();Ps();Nt();Zt();pc=(e,t,r,a,n,s)=>(e-1)*t+r+(a-1)*n+1-s,fc=(e,t,r,a,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[a]=e-s,r[n]=s)},mc=(e,t,r,a,n,s,u,l,o,p)=>{let f=e.length-2,y=p.length===0;if(o.length===0)for(let $=0;$<f;++$)o.push(0);let g=e[0],b=t[l?3:1]*n;for(let $=0,v=e.length-f-(l?1:0);$<f;++$,++v){let _=e[v],C=y?_*u[$]:p[$],I=pc(_,u[$],s[$],t[v],r[$],C);fc(I,a,s,$,$+f),y&&p.push(u[$]*(_-1)+o[$]+(t[v]-1)*r[$]+1-s[$]-s[$+f])}p.splice(0,0,g),p.splice(l?3:1,0,b)},Bs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,b)=>g*b,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,o=e.dilations.slice();if(o.reduce((g,b)=>g+b,0)===0){let g=t[0].dims.length-2;o=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,b)=>g+b,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}mc(l,r,o,e.autoPad,e.group,n,p,a,u,s);let f=Object.assign({},e),y=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),o.join(",")].join("_");return Object.assign(f,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:o,strides:p,cacheKey:y}),f},Ms=e=>{let t=dn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,o=e.strides,p=e.wIsConst(),f=e.outputPadding,y=e.outputShape;return ee({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,outputPadding:f,outputShape:y,pads:l,strides:o,wIsConst:p,...t})},hc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((f,y)=>f+y,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((f,y)=>f+y,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((f,y)=>f+y,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((f,y)=>f+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},gc=[2,3,1,0],yc=(e,t,r)=>{let a=Bs(r,t),n=r.format==="NHWC",s=t.length===3;if(a.group!==1){e.compute(sa(t,a));return}let u=a.outputShape,l=u[n?1:2],o=u[n?2:3],p=u[n?3:1],f=t[1].dims[2],y=t[1].dims[3],g=t[0].dims[n?3:1],b=n?l*o:p,$=n?p:l*o,v=f*y*g,_=!0,C=e.kernelCustomData.wT??e.compute(ot(t[1],gc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=C);let I=[t[0],C];s&&(!n&&t[2].dims.length===1?I.push(t[2].reshape([t[2].dims[0],1,1])):I.push(t[2])),e.compute(ks(I,a,u,b,$,v,s,_),{inputs:I})},bc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let o=Bs({...t,pads:l,strides:u,dilations:s,kernelShape:n},a);e.compute(sa(a,o,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Ds=(e,t)=>{hc(e.inputs,t),e.inputs[0].dims.length===3?bc(e,t):yc(e,e.inputs,t)}});var ua,hn,Ws,wc,vc,la,da,$c,Vs,Ns,Us=F(()=>{"use strict";we();Re();ve();ua="[a-zA-Z]|\\.\\.\\.",hn="("+ua+")+",Ws="^"+hn+"$",wc="("+hn+",)*"+hn,vc="^"+wc+"$",la=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},da=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(vc)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,o)=>{let p=t[o].dims.slice();if(!l.match(RegExp(Ws)))throw new Error("Invalid LHS term");let f=this.processTerm(l,!0,p,o);this.lhs.push(f)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,o])=>o.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(hn)))throw new Error("Invalid RHS");n.match(RegExp(ua,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(l);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(n,!0,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let s=a.length,u=!1,l=[],o=0;if(!t.match(RegExp(Ws))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(ua,"g")),f=new la(n);return p?.forEach((y,g)=>{if(y==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let b=s-p.length+1;if(b<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(o,o+b),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let $=0;$<l.length;$++){let v=String.fromCharCode("0".charCodeAt(0)+g);f.addSymbol(v,g+$),this.addSymbol(v,a[o++],n)}}else f.addSymbol(y,g),this.addSymbol(y,a[o++],n)}),f}},$c=(e,t)=>{let r=e[0].dataType,a=new Array(e.length);for(let T=0;T<e.length;++T)a[T]=N(`input${T}`,r,e[T].dims);let n=t.outputDims,s=V.size(n),u=q("output",r,n),l=[],o=Array.from(t.rhs.symbolToIndices.keys()),p="var prod = 1.0;",f="var sum = 0.0;",y="sum += prod;",g=[],b=[],$=[],v=[],_=t.symbolToInfo.size===o.length;t.symbolToInfo.forEach((T,A)=>{if(o.includes(A)){let B=o.indexOf(A);t.lhs.forEach((k,W)=>{if(T.inputIndices.includes(W)){let z=k.symbolToIndices.get(A);if(z===void 0)throw new Error("Invalid symbol error");z.forEach(K=>{l.push(`${a[W].indicesSet(`input${W}Indices`,K,u.indicesGet("outputIndices",B))}`)})}})}else t.lhs.forEach((B,k)=>{let W=t.symbolToInfo.get(A);if(W===void 0)throw new Error("Invalid symbol error");if(W.inputIndices.includes(k)){let z=B.symbolToIndices.get(A);if(z===void 0)throw new Error("Invalid symbol error");z.forEach(K=>{g.push(`${a[k].indicesSet(`input${k}Indices`,K,`${A}`)}`)}),v.push(`prod *= ${a[k].getByIndices(`input${k}Indices`)};`)}}),b.push(`for(var ${A}: u32 = 0; ${A} < ${t.symbolToInfo.get(A)?.dimValue}; ${A}++) {`),$.push("}")});let C=_?[...l,`let sum = ${a.map((T,A)=>T.getByIndices(`input${A}Indices`)).join(" * ")};`]:[...l,f,...b,...g,p,...v,y,...$],I=T=>`
      ${T.declareVariables(...a,u)}

      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes(s)}
        var outputIndices = ${u.offsetToIndices("global_idx")};
        ${a.map((A,B)=>`var input${B}Indices: ${a[B].type.indices};`).join(`
`)}
        ${C.join(`
`)};
        ${u.setByOffset("global_idx","sum")};
      }`;return{name:"Einsum",shaderCache:{hint:t.equation},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:I}},Vs=(e,t)=>{let r=new da(e.inputs,t.equation);e.compute($c(e.inputs,r))},Ns=e=>{let t=e.equation.replace(/\s+/g,"");return ee({equation:t})}});var Sc,Hs,xc,Ic,Ls,Gs=F(()=>{"use strict";we();ve();Sc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Hs=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},xc=(e,t)=>e.length>t.length?Hs(e,t):Hs(t,e),Ic=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=xc(t,r),n=V.size(a),s=e[0].dataType,u=Pe(t.length),l=u?t.length:t,o=N("input",s,l),p=Pe(a.length),f=p?a.length:a,y=q("output",s,f),g=$=>`
  const inputShape = ${o.indices(...t)};
  ${$.registerUniform("vec_size","u32").declareVariables(o,y)}
  ${$.mainStart()}
  ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    let outputIndices = ${y.offsetToIndices("global_idx")};
    var inputIndices: ${o.type.indices};
    for (var i = 0; i < ${t.length}; i++) {
      if (${o.indicesGet("inputShape","i")} == 1) {
        ${o.indicesSet("inputIndices","i",0)}
      } else {
        ${o.indicesSet("inputIndices","i",y.indicesGet("outputIndices",`i + ${a.length-t.length}`))}
      }
    }
    ${y.setByOffset("global_idx",o.getByIndices("inputIndices"))}
  }`,b=[{type:"uint32",data:n}];return u&&b.push(...me(t)),p&&b.push(...me(a)),{name:"Expand",shaderCache:{hint:`${a}`,inputDependencies:[u?"rank":"dims"]},getShaderSource:g,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},Ls=e=>{Sc(e.inputs),e.compute(Ic(e.inputs),{inputs:[0]})}});var _c,Cc,Fs,qs,js=F(()=>{"use strict";we();Re();ve();_c=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Cc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,s=V.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...a);let l=r[s],o=V.size(u),p=Pe(e[0].dims.length),f=p?e[0].dims.length:e[0].dims,y=Pe(e[1].dims.length),g=y?e[1].dims.length:e[1].dims,b=Pe(u.length),$=b?u.length:u,v=N("data",e[0].dataType,f),_=N("inputIndices",e[1].dataType,g),C=q("output",e[0].dataType,$),I=[{type:"uint32",data:o},{type:"int32",data:l},{type:"uint32",data:s}];p&&I.push(...me(e[0].dims)),y&&I.push(...me(e[1].dims)),b&&I.push(...me(u));let T=[];T.push(p?"rank":"dims"),T.push(y?"rank":"dims");let A=()=>{let k=a.length,W=`var indicesIndices  = ${_.type.indices}(0);`;for(let z=0;z<k;z++)W+=`${k>1?`indicesIndices[${z}]`:"indicesIndices"} = ${u.length>1?`outputIndices[uniforms.axis + ${z}]`:"outputIndices"};`;W+=`
        var idx = ${_.getByIndices("indicesIndices")};
        if (idx < 0) {
          idx = idx + uniforms.axisDimLimit;
        }
        var dataIndices = ${v.type.indices}(0);
      `;for(let z=0,K=0;z<n;z++)z===s?(W+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = u32(idx);`,K+=k):(W+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = ${u.length>1?`outputIndices[${K}]`:"outputIndices"};`,K++);return W},B=k=>`
      ${k.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(v,_,C)}
      ${k.mainStart()}
        ${k.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        let outputIndices = ${C.offsetToIndices("global_idx")};
        ${A()};
        let value = ${v.getByIndices("dataIndices")};
        ${C.setByOffset("global_idx","value")};
      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:T},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:I}),getShaderSource:B}},Fs=e=>ee({axis:e.axis}),qs=(e,t)=>{let r=e.inputs;_c(r),e.compute(Cc(e.inputs,t))}});var Ac,Ec,Ks,Ys,Zs=F(()=>{"use strict";we();Re();ve();Ac=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Ec=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,s=V.computeStrides(r),u=V.size(r),l=e[1].dims,o=e[1].dataType,p=V.size(l),f=V.normalizeAxis(t.axis,n),y=r[f],g=l.slice(0),b=V.size(g),$=N("input",a,r),v=N("indices",o,[p]),_=q("output",a,g),C=I=>`
      const inputStrides = array<u32, ${s.length}>(${s.map(T=>`${T}u`).join(",")});
      ${I.declareVariables($,v,_)}
      ${I.mainStart()}
      ${I.guardAgainstOutOfBoundsWorkgroupSizes(b)}

      let outputIndices = ${_.offsetToIndices("global_idx")};

      var idx = ${v.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + ${y};
      }

      var srcOffset = u32(0);

      for (var i = 0; i < ${r.length}; i++) {
        if (i == ${f}) {
          srcOffset +=  u32(idx) * inputStrides[i];
        } else {
          srcOffset += ${_.indicesGet("outputIndices","i")} * inputStrides[i];
        }
      }

      // Should never hit this with valid values in indices
      // This is a guard against malicious data in the indices input
      if (srcOffset < 0 || srcOffset >= ${u}) {
        return;
      }

      output[global_idx] = input[srcOffset];
  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:g,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)}}),getShaderSource:C}},Ks=e=>ee({axis:e.axis}),Ys=(e,t)=>{let r=e.inputs;Ac(r),e.compute(Ec(e.inputs,t))}});var Oc,Tc,kc,Xs,Qs,Js=F(()=>{"use strict";we();Re();ve();Oc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Tc=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return a||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},kc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,s,u]=tn.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,s];if(!l)throw new Error("Can't use gemm on the given tensors");let o=V.size(l),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let f=Ie(e[0].dataType),y=t.alpha===1?"":"value *= alpha;",g=e.length===3?`value += beta * c[${Tc(n,s,e[2].dims)}];`:"",b=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];e.length===3&&b.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`);let $=v=>`
  const M: u32 = ${n}u;
  const N: u32 = ${s}u;
  const K: u32 = ${u}u;
  const alpha = ${f}(${t.alpha});
  const beta = ${f}(${t.beta});

  ${b.join(`
`)}
  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${f}>;

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes(o)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${f}(0);
    for (var k: u32 = 0u; k<${u}u; k++) {
      ${p}
    }

    ${y}
    ${g}
    output[global_id.x] = value;

  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:$}},Xs=(e,t)=>{Oc(e.inputs),e.compute(kc(e.inputs,t))},Qs=e=>ee(e)});var Rc,Pc,Bc,Mc,eu,tu,ru=F(()=>{"use strict";Ve();we();Re();ve();Rc={name:"InstanceNormalization"},Pc=(e,t)=>{let r=e[0].dims,a=r,n=2,s=V.sizeToDimension(r,n),u=V.sizeFromDimension(r,n),l=r[1],o=N("x",e[0].dataType,[r[0],r[1],u]),p=N("scale",e[1].dataType,e[1].dims),f=N("bias",e[2].dataType,e[2].dims),y=q("output",e[0].dataType,[r[0],r[1],u]),g=[o,p,f,y],b=o.type.value,$=64,v=_=>`

  const C: u32 = ${l};
  const normSize: u32 = ${u};
  const epsilon: f32 = ${t.epsilon};
  var<workgroup> meanShared : ${b};
  var<workgroup> squaredNormShared : ${b};
  var<workgroup> workgroupShared : array<${b}, ${$}>;
  const workgroupSize = ${$}u;
  ${_.declareVariables(...g)}
  ${_.mainStart($)}
    let norm = global_idx / workgroupSize;
    let batch = norm / C;
    let channel = norm % C;
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial: ${b} = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      initial = initial + ${o.get("batch","channel","h")};
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = workgroupShared[0] / ${b}(normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let deviation =  ${o.get("batch","channel","h")} - meanShared;
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = workgroupShared[0];
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / ${b}(normSize) + epsilon);
    let channelScale = invStdDev * ${p.getByOffset("channel")};
    let channelShift = ${f.getByOffset("channel")} - meanShared * channelScale;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let value = ${o.get("batch","channel","h")} * channelScale + channelShift;
      ${y.set("batch","channel","h","value")};
    }
  }`;return{...Rc,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:v}},Bc=(e,t,r,a,n,s,u,l)=>{let o=Ye(u),p=N("input",t.dataType,t.dims,o),f=N("scale",r.dataType,r.dims,o),y=N("bias",a.dataType,a.dims,o),g=64,b=o===1?"vec2f":`mat2x${o}f`,$=o===1?"f32":`vec${o}f`,v=(B,k)=>`${b}(${B}, ${k})`,_=n*u/o,C=Math.ceil(s/g),I=B=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${s*u/o};

  ${B.declareVariables(p)}
  @group(0) @binding(1) var<storage, read_write> output : array<${b}>;

  ${B.mainStart(g)}
    let currentImageNumber = global_idx / ${g} / C;
    let currentChannelNumber = (global_idx / ${g}) % C;
    let wgId = global_idx % ${g};
    let wgOffset = wgId * ${C};
    if (wgOffset >= H) {
        return;
    }
    let wgMax = min(wgOffset + ${C}, H);

    let offset = currentImageNumber * imageSize + currentChannelNumber;
    var sum = ${Ge("f32",o)};
    var squaredSum = ${Ge("f32",o)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${$}(input[offset + i * C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${v("sum","squaredSum")};
  }`,T=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,g,2],dataType:1}],dispatchGroup:{x:n*u/o}}),getShaderSource:I},{inputs:[t],outputs:[-1]})[0],A=B=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${g*u/o};
  const epsilon: f32 = ${l};

  @group(0) @binding(0) var<storage, read> input : array<${b}>;
  @group(0) @binding(1) var<storage, read> scale : array<${f.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${y.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${b}>;

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes(_)}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;

    let offset = currentImageNumber * imageSize;
    var sum = ${Ge("f32",o)};
    var squaredSum = ${Ge("f32",o)};
    for (var i: u32 = 0; i < ${g}; i++) {
        let value = input[offset + i + currentChannelNumber * ${g}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(H);
    squaredSum = squaredSum / f32(H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);
    let channelScale = invStdDev * ${$}(scale[currentChannelNumber]);
    let channelShift = ${$}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${v("channelScale","channelShift")};
  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u,epsilon:l})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(_/64)}}),getShaderSource:A},{inputs:[T,r,a],outputs:[-1]})[0]},Mc=(e,t,r)=>{let a=t[0].dims,n=a,s=a[0],u=a[a.length-1],l=V.sizeFromDimension(a,1)/u,o=Ye(u),p=V.size(n)/o,f=N("input",t[0].dataType,t[0].dims,o),y=q("output",t[0].dataType,n,o),g=Ie(t[0].dataType),b=o===1?"vec2f":`mat2x${o}f`,$=o===1?g:`vec${o}<${g}>`,v=Bc(e,t[0],t[1],t[2],s,l,u,r.epsilon),_=C=>`
  const H: u32 = ${l};
  const C: u32 = ${u/o};

  @group(0) @binding(0) var<storage, read> input : array<${f.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${b}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${y.type.storage}>;

  ${C.mainStart()}
    let currentImageNumber = global_idx / (C * H);
    let currentChannelNumber = global_idx % C;

    let scaleOffset = currentImageNumber * C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${$}(scale[0]), ${$}(scale[1]));
  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:_},{inputs:[t[0],v]})},eu=e=>ee({epsilon:e.epsilon,format:e.format}),tu=(e,t)=>{t.format==="NHWC"?Mc(e,e.inputs,t):e.compute(Pc(e.inputs,t))}});var Dc,zc,nu,au,ou=F(()=>{"use strict";Ve();we();Re();ve();Dc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},zc=(e,t,r)=>{let a=e[0].dims,n=e[1],s=e[2],u=a,l=V.normalizeAxis(t.axis,a.length),o=V.sizeToDimension(a,l),p=V.sizeFromDimension(a,l),f=V.size(n.dims),y=s?V.size(s.dims):0;if(f!==p||s&&y!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${f} and bias size of ${y}`);let g=[];for(let A=0;A<a.length;++A)A<l?g.push(a[A]):g.push(1);let b=Ye(p),$=Ie(e[0].dataType),v=[N("x",e[0].dataType,e[0].dims,b),N("scale",n.dataType,n.dims,b)];s&&v.push(N("bias",s.dataType,s.dims,b)),v.push(q("output",e[0].dataType,u,b));let _=r>1,C=r>2;_&&v.push(q("meanDataOutput",1,g)),C&&v.push(q("invStdOutput",1,g));let I=A=>`
  const normSize: f32 = ${p};
  const normSizeVectorized: u32 = ${p/b};
  const epsilon: f32 = ${t.epsilon};

  ${A.declareVariables(...v)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let offset = global_idx * normSizeVectorized;
    var meanVector = ${Ge("f32",b)};
    var meanSquareVector = ${Ge("f32",b)};

    for (var h: u32 = 0u; h < normSizeVectorized; h++) {
      let value = ${nt($,b,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${at("meanVector",b)} / normSize;
    let meanSquare = sqrt(${at("meanSquareVector",b)} 
      / normSize - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSizeVectorized; j++) {
      let f32input = ${nt($,b,"x[j + offset]")};
      let f32scale = ${nt($,b,"scale[j]")};
      output[j + offset] = ${v[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${s?`+ ${nt($,b,"bias[j]")}`:""}
      );
    }

    ${_?"meanDataOutput[global_idx] = mean":""};
    ${C?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,T=[{dims:u,dataType:e[0].dataType}];return _&&T.push({dims:g,dataType:1}),C&&T.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:I}},nu=e=>ee({axis:e.axis,epsilon:e.epsilon}),au=(e,t)=>{Dc(e.inputs),e.compute(zc(e.inputs,t,e.outputCount))}});var Wc,iu,su=F(()=>{"use strict";we();$r();Wc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},iu=e=>{Wc(e.inputs);let t=dt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");e.compute(mn(e.inputs,{activation:"",activationCacheKey:""},t))}});var Vc,lu,uu,Nc,ca,du,cu=F(()=>{"use strict";we();Re();Jr();Jn();ve();Zt();Vc=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],l=e[5],o=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let f=!1,y=r.dims[0],g=r.dims[1],b=r.dims.length===3?f?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],$=g,v=0,_=0,C=Math.floor(b/t.numHeads);if(o&&p){if(o.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(p.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');v=o.dims[2],_=o.dims[2]}else if(o||p)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let I;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');I=2,$=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==C)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');I=5,$=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==C)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');I=0,$=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');I=3}if(s){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let T=0;if(u){T=8;let z=u.dims;throw z.length===1?z[0]===y?T=1:z[0]===3*y+2&&(T=3):z.length===2&&z[0]===y&&z[1]===$&&(T=5),T===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let A=!1,B=b;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if($!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');B=n.dims[2]}else{if($!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');B=n.dims[1]*n.dims[3],A=!0}}let k=v+$,W=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(o)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:g,pastSequenceLength:v,kvSequenceLength:$,totalSequenceLength:k,maxSequenceLength:_,inputHiddenSize:0,hiddenSize:b,vHiddenSize:B,headSize:C,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:T,scale:t.scale,broadcastResPosBias:W,passPastInKv:A,qkvFormat:I}},lu=e=>ee({...e}),uu=ee({perm:[0,2,1,3]}),Nc=(e,t,r,a,n,s,u)=>{let l=[a,n,s],o=V.size(l),p=Ie(t.dataType),f=y=>`
  const biasOffset = ${u}u;
  const hiddenSize = ${s}u;

  @group(0) @binding(0) var<storage, read> qkv: array<${p}>;
  @group(0) @binding(1) var<storage, read> bias: array<${p}>;
  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${p}>;

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];
  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:a,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:f},{inputs:[t,r],outputs:[-1]})[0]},ca=(e,t,r,a,n,s,u,l)=>{let o=s;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return o=Nc(e,s,u,t,a,r*n,l),o=o.reshape([t,a,r,n]),e.compute(ot(o,uu.perm),{inputs:[o],outputs:[-1]})[0]}else return s.dims.length===3&&(o=s.reshape([t,a,r,n])),e.compute(ot(o,uu.perm),{inputs:[o],outputs:[-1]})[0]},du=(e,t)=>{let r=Vc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=ca(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return sn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=ca(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=ca(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);sn(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Uc,Hc,Lc,Gc,Fc,qc,jc,Kc,Yc,pu,fu,mu=F(()=>{"use strict";Ve();we();Re();ve();Uc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Hc=(e,t,r,a,n,s)=>{let u=t.length,l="";for(let o=u-1;o>=0;--o)l+=`
            k = i32(${e.indicesGet("indices",o)}) - ${a[o]};
            if (k < 0) {
              break;
            }
            if (k >= ${t[o]}) {
              break;
            }
            offset += k * ${r[o]};
        `;return`
          value = ${n}(${s});
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${l}
            value = x[offset];
          }
      `},Lc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = ${2*(t[u]-1)};
                  k = k % _2n_1;
                  if(k >= ${t[u]}) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},Gc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = 0;
                }
                if (k >= ${t[u]}) {
                  k = ${t[u]-1};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},Fc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0)  {
                  k += ${t[u]};
                }
                if (k >= ${t[u]}) {
                  k -= ${t[u]};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},qc=(e,t,r,a,n)=>{switch(a.mode){case 0:return Hc(e,t,r,a.pads,n,a.value);case 1:return Lc(e,t,r,a.pads);case 2:return Gc(e,t,r,a.pads);case 3:return Fc(e,t,r,a.pads);default:throw new Error("Invalid mode")}},jc=(e,t,r,a)=>{let n=t[0].dims,s=V.padShape(n.slice(),r.pads),u=V.size(s),l=V.computeStrides(n),o=q("output",t[0].dataType,s),p=N("x",t[0].dataType,n),f=qc(o,n,l,r,a);return`
              ${e.declareVariables(p,o)}
              ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}

              let indices = ${o.offsetToIndices("global_idx")};

              var value = ${a}(0);
              ${f}
              output[global_idx] = value;
          }`},Kc=(e,t)=>{let r=V.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(V.size(r)/64)}}),getShaderSource:a=>jc(a,e,t,"f32")}},Yc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let o=0;o<l.length;o++)s[Number(l[o])]=Number(r[o]),s[Number(l[o])+n]=Number(r[o+l.length])}else r.forEach((l,o)=>s[Number(o)]=Number(l));let u=[];return s.forEach(l=>u.push(l)),ee({mode:t.mode,value:a,pads:u})}else return t},pu=(e,t)=>{Uc(e.inputs);let r=Yc(e.inputs,t);e.compute(Kc(e.inputs,r),{inputs:[0]})},fu=e=>{let t=e.mode,r=e.value,a=e.pads;return ee({mode:t,value:r,pads:a})}});var gn,hu,gu,yu,bu,wu,vu,$u,Su,xu,Iu,_u,Cu,Au,Eu,Ou=F(()=>{"use strict";we();Re();ve();gn=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},hu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),o=s?t.dilations.slice():[],p=t.pads.slice();Vt.adjustPoolAttributes(r,n,u,l,o,p);let f=Vt.computePoolOutputShape(r,n,l,o,u,p,t.autoPad),y=Object.assign({},t);s?Object.assign(y,{kernelShape:u,strides:l,pads:p,dilations:o,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:u,strides:l,pads:p,cacheKey:t.cacheKey});let g=f.slice();return g.push(g.splice(1,1)[0]),[y,a?g:f]},gu=(e,t,r,a,n,s,u,l)=>{let o=n.format==="NHWC",p=r,f=t.type.value,y=p.length,g=V.size(a),b=q("output",t.type.tensor,a);if(n.kernelShape.length<=2){let $=n.kernelShape[n.kernelShape.length-1],v=n.strides[n.strides.length-1],_=n.pads[n.pads.length/2-1],C=n.pads[n.pads.length-1],I=y-(o?2:1),T="",A="",B="";if(_+C!==0?T=`
                for (var i: u32 = 0u; i < ${$}u; i++) {
                  xIndices[${I}] = indices[${I}] * ${v} - ${_} + i;
                  if (xIndices[${I}] < 0 || xIndices[${I}] >= ${p[I]}) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:T=`
                for (var i: u32 = 0u; i < ${$}u; i++) {
                  xIndices[${I}] = indices[${I}] * ${v} - ${_} + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,n.kernelShape.length===2){let W=n.kernelShape[n.kernelShape.length-2],z=n.strides[n.strides.length-2],K=n.pads[n.pads.length/2-2],X=n.pads[n.pads.length-2],D=y-(o?3:2),Y=p[D];K+X!==0?A=`
                for (var j: u32 = 0u; j < ${W}u; j++) {
                  xIndices[${D}] = indices[${D}] * ${z} - ${K} + j;
                  if (xIndices[${D}] < 0 || xIndices[${D}] >= ${Y}) {
                    pad+= ${$};
                    continue;
                  }
              `:A=`
                for (var j: u32 = 0u; j < ${W}u; j++) {
                  xIndices[${D}] = indices[${D}] * ${z} - ${K} + j;
                `,B=`
              }
            `}return`
            ${e.declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}

              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var value: ${f} = ${f}(${l});
              var pad = 0;
              ${A}
              ${T}
              ${B}
              ${u}

              output[global_idx] = value;
            }`}else{if(o)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let $=V.size(n.kernelShape),v=V.computeStrides(n.kernelShape),_=v.length,C=n.pads.length,I=n.pads.reduce((B,k)=>B+k),T="";return I?T=`
                if (xIndices[j] >= inputDims[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:T=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.declareVariables(t,b)}

            const pads = array<u32, ${C}>(${n.pads.map(B=>`${B}u`).join(",")});
            const inputDims = array<u32, ${y}>(${p.map(B=>`${B}u`).join(",")});
            const kernelStrides = array<u32, ${_}>(${v.map(B=>`${B}u`).join(",")});
            const strides = array<u32, ${_}>(${n.strides.map(B=>`${B}u`).join(",")});

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}

              let indices = ${b.offsetToIndices("global_idx")};
              let xIndices = ${b.offsetToIndices("global_idx")};

              var offsets: array<u32, ${_}>;

              var value = ${b.type.value}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < ${$}u; i++) {
                var offset = i;
                for (var j = 0u; j < ${_-1}u; j++) {
                  offsets[j] = offset / kernelStrides[j];
                  offset -= offsets[j] * kernelStrides[j];
                }
                offsets[${_-1}] = offset;

                isPad = false;
                for (var j = ${y-_}u; j < ${y}u; j++) {
                  xIndices[j] = indices[j] * strides[j - ${y-_}u]
                    + offsets[j - ${y-_}u] - pads[j - 2u];
                  ${T}
              }
              ${u}

              output[global_idx] = value;
            }`}},yu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),bu=(e,t,r,a)=>{let[n,s]=hu(t,a,r),u=V.size(n.kernelShape),l=N("x",t.dataType,t.dims),o=l.type.value,p="value += x_val;",f="";return n.countIncludePad?f+=`value /= ${o}(${u});`:f+=`value /= ${o}(${u} - pad);`,{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(s)/64)}}),getShaderSource:y=>gu(y,l,t.dims,s,n,p,f,"0.0")}},wu=e=>{let t=e.count_include_pad!==0,r=yu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return ee({countIncludePad:t,...r})},vu=(e,t)=>{gn(e.inputs),e.compute(bu("AveragePool",e.inputs[0],!1,t))},$u={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},Su=e=>{let t=e.format;return{format:t,...$u,cacheKey:t}},xu=(e,t)=>{gn(e.inputs),e.compute(bu("GlobalAveragePool",e.inputs[0],!0,t))},Iu=(e,t,r,a)=>{let[n,s]=hu(t,a,r),u=`
      value = max(x_val, value);
    `,l="",o=N("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(s)/64)}}),getShaderSource:p=>gu(p,o,t.dims,s,n,u,l,"-1e5")}},_u=(e,t)=>{gn(e.inputs),e.compute(Iu("MaxPool",e.inputs[0],!1,t))},Cu=e=>{let t=e.storage_order,r=e.dilations,a=yu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return ee({storageOrder:t,dilations:r,...a})},Au=e=>{let t=e.format;return{format:t,...$u,cacheKey:t}},Eu=(e,t)=>{gn(e.inputs),e.compute(Iu("GlobalMaxPool",e.inputs[0],!0,t))}});var Xc,Qc,Tu,ku=F(()=>{"use strict";$t();Ve();ve();Xc=(e,t,r)=>{let a=e===t,n=e<t&&r<0,s=e>t&&r>0;if(a||n||s)throw new Error("Range these inputs' contents are invalid.")},Qc=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,l=q("output",a,s),o=l.type.storage,p=f=>`
        ${f.declareVariables(l)}
        ${f.mainStart()}
        ${f.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        output[global_idx] = ${o}(${e}) + ${o}(global_idx) * ${o}(${r});
      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(f=>f.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},Tu=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Oe.webgpu.validateInputContent&&Xc(t,r,a),e.compute(Qc(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var Jc,ep,tp,rp,np,ap,op,ip,sp,up,lp,dp,cp,pp,fp,Ru,Pu,Bu=F(()=>{"use strict";we();Re();ve();Jc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},ep=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,s)=>a[n]=e[s]),a},tp=(e,t,r,a,n,s)=>{let[u,l,o]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(f=>s.push(f));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(f=>a.push(f)),a.length!==0&&a.length!==p&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Jc(a,t),t.axes.length>0&&ep(a,t.axes,p).forEach((f,y)=>a[y]=f)}if(o>0&&e.length>o&&(e[o].getBigInt64Array().forEach(f=>n.push(Number(f))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},rp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},
     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",np=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",ap=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((s,u)=>{a[s]=n[u],a[u+r]=n[t.length+u]}),a):n},op=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(s=>n.push(s)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},ip=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=a),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(a,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},sp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});
      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});
      const scales = array<${e.type.value}, ${a.length}>(${a.map(s=>`${s}f`).join(",")});
      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});
      var originalIndices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};
        if (scales[i] == 1.0) {
          originalIndices[i] = ${e.type.value}(outputIndex);
        } else {
          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);
        }
      }
      return originalIndices;
    }`,up=(e,t,r,a,n,s,u)=>`
    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
        const inputShape = array<u32, ${r.length}>(${r.map(l=>`${l}u`).join(",")});
        const outputShape = array<u32, ${a.length}>(${a.map(l=>`${l}u`).join(",")});
        const scales = array<${e.type.value}, ${n.length}>(${n.map(l=>`${l}`).join(",")});
        const roi = array<${e.type.value}, ${s.length}>(${s.map(l=>`${l}`).join(",")});
        var inputIndices: ${e.type.indices};
        for (var i:u32 = 0; i < ${a.length}; i++) {
          var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
          var inputIndex: u32;
          if (scales[i] == 1.0) {
            inputIndex = outputIndex;
          } else {
            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);
            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {
              if (original_idx < 0) {
                inputIndex = 0;
              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {
                inputIndex = inputShape[i] - 1;
              } else {
                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));
              }
            } else {
              inputIndex = u32(original_idx);
            }
          }
          ${e.indicesSet("inputIndices","i","inputIndex")}
        }
        return inputIndices;
    }`,lp=(e,t)=>`
    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {
      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};
        if (inputIndex < 0 || inputIndex >= inputShape[i]) {
          return false;
        }
      }
      return true;
    }`,dp=(e,t,r,a,n,s)=>{let[u,l,o,p]=r.length===2?[-1,0,1,-1]:a[1]===1?[0,2,3,1]:[0,1,2,3],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${f} {
      var inputIndices: ${e.type.indices};
      inputIndices[${l}] = max(0, min(row, ${r[l]} - 1));
      inputIndices[${o}] = max(0, min(col, ${r[o]} - 1));
      if (${r.length} > 2) {
        inputIndices[${p}] = channel;
        inputIndices[${u}] = batch;
      };
      return input[${e.indicesToOffset("inputIndices")}];
    }

    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);
      var row:${f} = originalIndices[${l}];
      var col:${f} = originalIndices[${o}];
      if (${n} && (row < 0 || row > (${r[l]} - 1) || col < 0 || col > ${r[o]} - 1)) {
        return ${s};
      }
      row = max(0, min(row, ${r[l]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${r.length>2}) {
        channel = u32(originalIndices[${p}]);
        batch = u32(originalIndices[${u}]);
      }
      var x11: ${f} = getInputValue(batch, channel, row1, col1);
      var x12: ${f} = getInputValue(batch, channel, row1, col2);
      var x21: ${f} = getInputValue(batch, channel, row2, col1);
      var x22: ${f} = getInputValue(batch, channel, row2, col2);
      var dx1: ${f} = row - ${f}(row1);
      var dx2: ${f} = ${f}(row2) - row;
      var dy1 = col - ${f}(col1);
      var dy2 = ${f}(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},cp=(e,t,r,a,n,s,u,l,o,p)=>{let[f,y]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],g=e.type.value,b=$=>{let v=$===f?"row":"col";return`
      fn ${v}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${g} {
        var outputIndex = ${a.length===1?"outputIndices":`outputIndices[${$}]`};
        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(${g}(outputIndex), ${n[$]},
        ${g}(${a[$]}), ${g}(${r[$]}), ${s[$]}, ${s[$]} + ${r.length});
        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[$]} - 1))) {
          return ${o};
        }
        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${v}: ${g} = originalIdx + ${g}(i);
          if (${v} < 0 || ${v} >= ${r[$]}) {
            if (${p}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${l}) {
              return ${o};
            } else {
              ${v} = max(0, min(${v}, ${r[$]} - 1));
            }
          }
          var inputIndicesCopy: ${e.type.indices} = inputIndices;
          inputIndicesCopy[${$}] = u32(${v});
          data[i + 1] = ${$===f?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`
                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${b(f)};
    ${b(y)};
  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {
    var absS = abs(s);
    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${g} = 1.0 - absS;
    var twoMinusAbsS: ${g} = 2.0 - absS;
    var onePlusAbsS: ${g} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {
    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${g} {
    var inputIndices: ${e.type.indices} = outputIndices;
    return colCubicInterpolation(inputIndices, outputIndices);
  }
    `},pp=(e,t,r,a,n,s)=>{let u=e.dims,l=ap(s,t.axes,u.length),o=op(u,a,n,t.axes),p=a.slice();a.length===0&&(p=u.map((C,I)=>C===0?1:o[I]/C),t.keepAspectRatioPolicy!=="stretch"&&(o=ip(u,p,t)));let f=q("output",e.dataType,o),y=N("input",e.dataType,u),g=V.size(o),b=u.length===o.length&&u.every((C,I)=>C===o[I]),$=t.coordinateTransformMode==="tf_crop_and_resize",v=y.type.value,_=C=>`
      ${b?"":`
      ${rp(t.coordinateTransformMode,v)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${lp(y,u)};
              ${np(t.nearestMode,r,v)};
              ${up(y,f,u,o,p,l,$)};
              `;case"linear":return`
              ${sp(f,u,o,p,l)};
              ${dp(y,f,u,p,$,t.extrapolationValue)};
              `;case"cubic":return`
            ${cp(y,f,u,o,p,l,t.cubicCoeffA,$,t.extrapolationValue,t.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${C.declareVariables(y,f)}
      ${C.mainStart()}
        ${C.guardAgainstOutOfBoundsWorkgroupSizes(g)}
        ${b?"output[global_idx] = input[global_idx];":`
        let outputIndices = ${f.offsetToIndices("global_idx")};
        var inputIndices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);
                if (checkInputIndices(inputIndices)) {
                  output[global_idx] = input[${y.indicesToOffset("inputIndices")}];
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
        `}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${b}`},getShaderSource:_,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(g/64)}})}},fp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Ru=(e,t)=>{let r=[],a=[],n=[],s=fp(e);tp(e.inputs,t,s,r,a,n),e.compute(pp(e.inputs[0],t,s,r,a,n),{inputs:[0]})},Pu=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,o=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return ee({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:l,mode:o,nearestMode:p})}});var mp,hp,Mu,Du,zu=F(()=>{"use strict";Ve();we();Re();ve();mp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},hp=(e,t,r,a)=>{let n=e[0].dims,s=V.size(n),u=n,l=s,o=n.slice(-1)[0],p=a?n.slice(0,-1).concat(1):[],f=e.length>3,y=e.length>4,g=a&&r>1,b=a&&r>2,$=r>3,v=Ye(o),_=[N("x",e[0].dataType,e[0].dims,v),N("skip",e[1].dataType,e[1].dims,v),N("gamma",e[2].dataType,e[2].dims,v)];f&&_.push(N("beta",e[3].dataType,e[3].dims,v)),y&&_.push(N("bias",e[4].dataType,e[4].dims,v)),_.push(q("output",e[0].dataType,u,v)),g&&_.push(q("meanOutput",1,p)),b&&_.push(q("invStdOutput",1,p)),$&&_.push(q("inputSkipBiasSum",e[0].dataType,u,v));let C=Ie(e[0].dataType),I=A=>`
      const hiddenSize: f32 = ${o};
      const hiddenSizeVectorized: u32 = ${o/v};
      const epsilon: f32 = ${t.epsilon};

      ${A.declareVariables(..._)}

      ${A.mainStart()}
        ${A.guardAgainstOutOfBoundsWorkgroupSizes(l/o)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${Ge("f32",v)};
        var squareSum = ${Ge("f32",v)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${y?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${$?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${nt(C,v,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${at("sum",v)} / hiddenSize;
        let variance = sqrt(${at("squareSum",v)} / hiddenSize - mean * mean + epsilon);
        ${g?"meanOutput[global_idx] = mean;":""}
        ${b?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${C}(mean)) / ${C}(variance) * gamma[i]
           + ${f?"beta[i]":"0.0"};
        }
      }`,T=[{dims:u,dataType:e[0].dataType}];return r>1&&T.push({dims:p,dataType:1}),r>2&&T.push({dims:p,dataType:1}),r>3&&T.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:I,getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(l/o/64)}})}},Mu=(e,t)=>{mp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(hp(e.inputs,t,e.outputCount,!1),{outputs:a})},Du=e=>{let t=e.epsilon;return ee({epsilon:t})}});var gp,yn,yp,Wu,bp,wp,Vu,Nu,Uu=F(()=>{"use strict";Ve();we();Re();ve();gp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},yn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},yp=(e,t)=>{if(e.length>1){let r=yn(e,1),a=yn(e,2),n=yn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),ee({starts:r,ends:a,axes:n})}else return t},Wu=(e,t,r,a,n)=>{let s=e;return e<0&&(s+=r[a[t]]),n[t]<0?Math.max(0,Math.min(s,r[a[t]]-1)):Math.max(0,Math.min(s,r[a[t]]))},bp=(e,t,r,a,n)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
          var inputIndices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${n?`uniforms.input_shape${r.length>1?"[i]":""}`:"inputShape[i]"};
            let steps_i  = ${n?`uniforms.steps${r.length>1?"[i]":""}`:"steps[i]"};
            let signs_i  = ${n?`uniforms.signs${r.length>1?"[i]":""}`:"signs[i]"};
            let starts_i  = ${n?`uniforms.starts${r.length>1?"[i]":""}`:"starts[i]"};
            var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
            var inputIndex = outputIndex * steps_i + starts_i + carry;
            carry = inputIndex / input_shape_i;
            inputIndex = inputIndex % input_shape_i;
            if (signs_i < 0) {
              inputIndex = input_shape_i - inputIndex - 1u + starts_i;
            }
            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;
          }
          return inputIndices;
      }`,wp=(e,t)=>{let r=e[0].dims,a=V.size(r),n=t.axes.length>0?V.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=yn(e,4);s.forEach(A=>A!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((A,B)=>Wu(A,B,r,n,s)),l=t.ends.map((A,B)=>Wu(A,B,r,n,s));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let A=0;A<r.length;++A)n.includes(A)||(u.splice(A,0,0),l.splice(A,0,r[A]),s.splice(A,0,1));let o=s.map(A=>Math.sign(A));s.forEach((A,B,k)=>{if(A<0){let W=(l[B]-u[B])/A,z=u[B],K=z+W*s[B];u[B]=K,l[B]=z,k[B]=-A}});let p=Pe(e[0].dims.length),f=p?e[0].dims.length:e[0].dims,y=r.slice(0);n.forEach((A,B)=>{y[A]=Math.ceil((l[A]-u[A])/s[A])});let g=p?y.length:y,b={dims:y,dataType:e[0].dataType},$=q("output",e[0].dataType,g),v=N("input",e[0].dataType,f),_=V.size(y),C=[],I=[];p&&(I.push({name:"starts",type:u.length>1?`vec${u.length}<u32>`:"u32"}),I.push({name:"signs",type:o.length>1?`vec${o.length}<i32>`:"i32"}),I.push({name:"steps",type:s.length>1?`vec${s.length}<u32>`:"u32"}),C.push({type:"uint32",data:u}),C.push({type:"int32",data:o}),C.push({type:"uint32",data:s})),I.push({name:"outputSize",type:"u32"}),C.push({type:"uint32",data:_}),p&&(C.push(...me(e[0].dims)),C.push(...me(y)));let T=A=>`
      ${A.registerUniforms(I).declareVariables(v,$)}
        ${p?"":[`const signs = array<i32, ${o.length}>(${o.map(B=>`${B}i`).join(",")});`,`const starts = array<u32, ${u.length}>(${u.map(B=>`${B}u`).join(",")});`,`const steps = array<u32, ${s.length}>(${s.map(B=>`${B}u`).join(",")});`,`const inputShape = array<u32, ${r.length}>(${r.map(B=>`${B}u`).join(",")});`].join(`
`)}

        ${bp(v,$,r,y,p)}
        ${A.mainStart()}
          ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let outputIndices = ${$.offsetToIndices("global_idx")};
          let inputIndices = calculateInputIndices(outputIndices);
          ${$.setByOffset("global_idx",v.getByIndices("inputIndices"))}
      }`;return{name:"Slice",shaderCache:{hint:p?`${o.length}_${u.length}_${s.length}`:`${t.cacheKey} | ${e[4]?.dims??""}`,inputDependencies:[p?"rank":"dims"]},getShaderSource:T,getRunData:()=>({outputs:[b],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:C})}},Vu=(e,t)=>{gp(e.inputs,t);let r=yp(e.inputs,t);e.compute(wp(e.inputs,r),{inputs:[0]})},Nu=e=>{let t=e.starts,r=e.ends,a=e.axes;return ee({starts:t,ends:r,axes:a})}});var vp,$p,Hu,Lu,Gu=F(()=>{"use strict";we();Re();ve();vp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},$p=(e,t)=>{let r=e.dims,a=V.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],l=a/u,o=Ye(u),p=u/o,f=(_,C)=>C===4?`max(max(${_}.x, ${_}.y), max(${_}.z, ${_}.w))`:C===2?`max(${_}.x, ${_}.y)`:C===3?`max(max(${_}.x, ${_}.y), ${_}.z)`:_,y=N("x",e.dataType,e.dims,o),g=q("result",e.dataType,e.dims,o),b=y.type.value,$=Ie(e.dataType)==="f32"?`var threadMax = ${b}(-3.402823e+38f);`:`var threadMax = ${b}(-65504.0h);`,v=_=>`
      var<workgroup> rowMaxShared : ${b};
      var<workgroup> rowSumShared : ${b};
      var<workgroup> threadShared : array<${b}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${b} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${b}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${_.registerUniform("packedCols","i32").declareVariables(y,g)}
      ${_.mainStart()}
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${$}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${b}(${f("threadShared[0]",o)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${b}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${b}(${at("threadShared[0]",o)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:v}},Hu=(e,t)=>{vp(e.inputs),e.compute($p(e.inputs[0],t))},Lu=e=>ee({axis:e.axis})});var Sp,xp,Ip,_p,Cp,Fu,qu,ju=F(()=>{"use strict";we();Re();ve();Sp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},xp=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),ee({numOutputs:a,axis:t.axis,splitSizes:r})},Ip=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < sizeInConcatAxis[i]) {
        return i;
    }
    }
    return ${e}u;
}`,_p=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (outputNumber == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${a}) { ${n} }`)}return`
      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Cp=(e,t)=>{let r=e[0].dims,a=V.size(r),n=e[0].dataType,s=r.length,u=t.axis,l=u<0?r.length+u:u,o=new Array(t.numOutputs),p=N("input",n,r),f=new Array(t.numOutputs),y=[],g=[],b=0;for(let _=0;_<t.numOutputs;_++){b+=t.splitSizes[_],f[_]=b;let C=r.slice();C[t.axis]=t.splitSizes[_],g.push(C),o[_]=q(`output${_}`,n,g[_]),y.push({dims:g[_],dataType:e[0].dataType})}let $=s<2?"indices":`indices[${l}]`,v=_=>`
  ${_.declareVariables(p,...o)}
  const sizeInConcatAxis = array<u32, ${f.length}>(${f.map(C=>`${C}u`).join(",")});
  ${Ip(f.length)}
  ${_p(o)}

  ${_.mainStart()}
    ${_.guardAgainstOutOfBoundsWorkgroupSizes(a)}

    var indices = ${p.offsetToIndices("global_idx")};
    let outputNumber = calculateOutputIndex(${$});
    if (outputNumber != 0) {
        ${$} -= sizeInConcatAxis[outputNumber - 1u];
    }
    writeBufferData(outputNumber, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:v,getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(a/64)}})}},Fu=(e,t)=>{Sp(e.inputs);let r=e.inputs.length===1?t:xp(e.inputs,t);e.compute(Cp(e.inputs,r),{inputs:[0]})},qu=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ee({axis:t,numOutputs:a,splitSizes:r})}});var Ku,Ap,Ep,Op,Yu,Zu=F(()=>{"use strict";Ve();we();ve();Ku=e=>Array.from(e.getBigInt64Array(),Number),Ap=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Ku(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Ep=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Op=e=>{let t=e[0].dims,r=Ku(e[1]),a=Ep(t,r),n=V.size(a),s=e[0].dataType,u=N("input",s,t),l=q("output",s,a),o=p=>`
      const inputShape = ${u.indices(...t)};
      ${p.declareVariables(u,l)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}
      let outputIndices = ${l.offsetToIndices("global_idx")};
      var inputIndices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let inputDimValue = ${l.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};

        ${u.indicesSet("inputIndices","i","inputDimValue")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("inputIndices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:o}},Yu=e=>{Ap(e.inputs),e.compute(Op(e.inputs),{inputs:[0]})}});var Tp,kp,Xu,Qu=F(()=>{"use strict";Ve();we();ve();Tp=(e,t,r,a,n)=>{let s=V.size(r),u=Math.ceil(s/4),l=q("outputData",n,r,4),o=N("aData",t[1].dataType,t[1].dims,4),p=N("bData",t[2].dataType,t[2].dims,4),f=N("cData",t[0].dataType,t[0].dims,4),y,g=(b,$,v)=>`select(${$}, ${b}, ${v})`;if(!a)y=l.setByOffset("global_idx",g(o.getByOffset("global_idx"),p.getByOffset("global_idx"),f.getByOffset("global_idx")));else{let b=($,v,_="")=>{let C=`aData[indexA${v}][componentA${v}]`,I=`bData[indexB${v}][componentB${v}]`,T=`bool(cData[indexC${v}] & ${4278190080>>>(3-v)*8}u)`;return`
            let outputIndices${v} = ${l.offsetToIndices(`global_idx * 4u + ${v}u`)};
            let offsetA${v} = ${o.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
            let offsetB${v} = ${p.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
            let offsetC${v} = ${f.broadcastedIndicesToOffset(`outputIndices${v}`,l)};
            let indexA${v} = offsetA${v} / 4u;
            let indexB${v} = offsetB${v} / 4u;
            let indexC${v} = offsetC${v} / 4u;
            let componentA${v} = offsetA${v} % 4u;
            let componentB${v} = offsetB${v} % 4u;
            ${$}[${v}] = ${_}(${g(C,I,T)});
          `};n===9?y=`
            var data = vec4<u32>(0);
            ${b("data",0,"u32")}
            ${b("data",1,"u32")}
            ${b("data",2,"u32")}
            ${b("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:y=`
            ${b("outputData[global_idx]",0)}
            ${b("outputData[global_idx]",1)}
            ${b("outputData[global_idx]",2)}
            ${b("outputData[global_idx]",3)}
          `}return`
        ${e.declareVariables(f,o,p,l)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        ${y}
      }`},kp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,s=!(V.areEqual(t,r)&&V.areEqual(r,a)),u=t,l=V.size(t);if(s){let o=dt.calcShape(dt.calcShape(t,r,!1),a,!1);if(!o)throw new Error("Can't perform where op on the given tensors");u=o,l=V.size(u)}return{name:"Where",getShaderSource:o=>Tp(o,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)}})}},Xu=e=>{e.compute(kp(e.inputs))}});var Ju,el=F(()=>{"use strict";_i();Jn();Oi();ki();ds();$s();Is();aa();zs();Us();Gs();js();Zs();Js();ru();ou();su();cu();mu();Ou();ku();an();Bu();zu();Uu();Gu();ju();Zu();Zt();ea();Qu();Ju=new Map([["Abs",[Ri]],["Acos",[Pi]],["Acosh",[Bi]],["Add",[cs]],["ArgMax",[Ii,Qn]],["ArgMin",[xi,Qn]],["Asin",[Mi]],["Asinh",[Di]],["Atan",[zi]],["Atanh",[Wi]],["Attention",[Ai,Ci]],["AveragePool",[vu,wu]],["BatchNormalization",[Ei]],["BiasAdd",[Ti]],["BiasSplitGelu",[ls]],["Cast",[Ni,Vi]],["Ceil",[Hi]],["Clip",[Ui]],["Concat",[Ss,xs]],["Conv",[ia,oa]],["ConvTranspose",[Ds,Ms]],["Cos",[Li]],["Cosh",[Gi]],["Div",[ps]],["Einsum",[Vs,Ns]],["Elu",[Fi,un]],["Equal",[fs]],["Erf",[qi]],["Exp",[ji]],["Expand",[Ls]],["Floor",[Ki]],["FusedConv",[ia,oa]],["Gather",[qs,Fs]],["GatherElements",[Ys,Ks]],["Gelu",[Yi]],["Gemm",[Xs,Qs]],["GlobalAveragePool",[xu,Su]],["GlobalMaxPool",[Eu,Au]],["Greater",[ys]],["GreaterOrEqual",[ws]],["InstanceNormalization",[tu,eu]],["LayerNormalization",[au,nu]],["LeakyRelu",[Zi,un]],["Less",[bs]],["LessOrEqual",[vs]],["Log",[us]],["MatMul",[iu]],["MaxPool",[_u,Cu]],["Mul",[ms]],["MultiHeadAttention",[du,lu]],["Neg",[Qi]],["Not",[Xi]],["Pad",[pu,fu]],["Pow",[hs]],["Range",[Tu]],["Reciprocal",[Ji]],["ReduceMin",[yi,it]],["ReduceMean",[pi,it]],["ReduceMax",[gi,it]],["ReduceSum",[wi,it]],["ReduceProd",[bi,it]],["ReduceL1",[fi,it]],["ReduceL2",[mi,it]],["ReduceLogSum",[$i,it]],["ReduceLogSumExp",[hi,it]],["ReduceSumSquare",[vi,it]],["Relu",[es]],["Resize",[Ru,Pu]],["Sigmoid",[ts]],["Sin",[rs]],["Sinh",[ns]],["Slice",[Vu,Nu]],["SkipLayerNormalization",[Mu,Du]],["Split",[Fu,qu]],["Sqrt",[as]],["Softmax",[Hu,Lu]],["Sub",[gs]],["Tan",[os]],["Tanh",[is]],["ThresholdedRelu",[ss,un]],["Tile",[Yu]],["Transpose",[Jo,ei]],["Where",[Xu]]])});var bn,tl=F(()=>{"use strict";Ve();At();ve();bn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,s,u,l){let o=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let f=[];for(let g of n)f.push({binding:f.length,resource:{buffer:g.buffer}});for(let g of s)f.push({binding:f.length,resource:{buffer:g.buffer}});l&&f.push({binding:f.length,resource:l});let y=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:f,label:t.programInfo.name});if(p.setBindGroup(0,y),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let g=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,g.buffer,0,this.backend.querySetCount*8),this.backend.flush();let b=this.backend.currentKernelId,$=this.backend.kernels.get(b),v=`[${$[0]}] ${$[1]}`;g.buffer.mapAsync(GPUMapMode.READ).then(()=>{let _=new BigUint64Array(g.buffer.getMappedRange()),C=_[0],I=_[1];g.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=C);let T=Number(C-this.backend.queryTimeBase),A=Number(I-this.backend.queryTimeBase);if(!Number.isSafeInteger(T)||!Number.isSafeInteger(A))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(g.id);let B="";r.forEach((W,z)=>{B+=`input[${z}]: [${W.dims}] | ${gr(W.dataType)}, `});let k="";a.forEach((W,z)=>{k+=`output[${z}]: [${W.dims}] | ${gr(W.dataType)}, `}),console.log(`[profiling] kernel "${b}|${v}" ${B}${k}execution time: ${A-T} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let s=Xo(r),u=t.getShaderSource(s),l=`${n.join(`
`)}
${s.additionalImplementations}
${u}`,o=a.createShaderModule({code:l,label:t.name});Be("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let p=a.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&a<=s&&n<=s)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>s){if(l=Math.ceil(Math.cbrt(u)),l>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Rp,Pp,wn,rl=F(()=>{"use strict";At();Go();Ko();el();tl();Rp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[a].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[a].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Pp=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Rp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},wn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=jo(this),this.programManager=new bn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Ho(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,s){let u=[];for(let I=0;I<r.length;++I){let T=this.gpuDataManager.get(r[I].data);if(!T)throw new Error(`no GPU data for input: ${r[I].data}`);u[I]=T}let{outputs:l,dispatchGroup:o,programUniforms:p}=t.getRunData(r),f=a.length===0?l.map((I,T)=>T):a;if(f.length!==l.length)throw new Error(`Output size ${f.length} must be equal to ${l.length}.`);let y=[],g=[];for(let I=0;I<l.length;++I){if(!Number.isInteger(f[I])||f[I]<-3||f[I]>=l.length)throw new Error(`Invalid output index: ${f[I]}`);if(f[I]===-3)continue;let T=f[I]===-1,A=f[I]===-2,B=T||A?s(l[I].dataType,l[I].dims):n(f[I],l[I].dataType,l[I].dims),k=this.gpuDataManager.get(B.data);if(!k)throw new Error(`no GPU data for output: ${B.data}`);if(T&&this.temporaryData.push(k),A){let W=this.kernelPersistentData.get(this.currentKernelId);W||(W=[],this.kernelPersistentData.set(this.currentKernelId,W)),W.push(k)}y.push(B),g.push(k)}let b;if(p){let I=0,T=0,A=[],B=1;p.forEach(z=>{let K=typeof z.data=="number"?[z.data]:z.data;if(K.length===0)return;let X;switch(K.length){case 1:X=4;break;case 2:X=8;break;case 3:X=16;break;case 4:X=16;break;case 5:X=16;break;case 6:X=16;break;default:throw new Error(`unsupported data length: ${K.length}`)}(T===5||T===6)&&(X=16),X>B&&(B=X),I=Math.ceil(I/X)*X,T=K.length,A.push(I),I+=K.length*4}),I=Math.ceil(I/B)*B;let k=new ArrayBuffer(I);p.forEach((z,K)=>{let X=A[K],D=typeof z.data=="number"?[z.data]:z.data;z.type==="int32"?new Int32Array(k,X,D.length).set(D):z.type==="uint32"?new Uint32Array(k,X,D.length).set(D):new Float32Array(k,X,D.length).set(D)});let W=this.gpuDataManager.create(I,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(W.buffer,0,k,0,I),this.gpuDataManager.release(W.id),b={offset:0,size:I,buffer:W.buffer}}let $=this.programManager.normalizeDispatchGroupSize(o),v=$[1]===1&&$[2]===1,_=Pp(t,r,v),C=this.programManager.getArtifact(_);return C||(C=this.programManager.build(t,$),this.programManager.setArtifact(_,C)),Be("info",()=>`[ProgramManager] run "${t.name}" (key=${_}) with ${$[0]}x${$[1]}x${$[2]}`),this.programManager.run(C,r,y,u,g,$,b),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let s=Ju.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,l,o]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Be("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),l(r,o[1]),0}catch(f){return a.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${f}`)),1}finally{p&&a.push(this.device.popErrorScope().then(f=>f?`GPU validation error for kernel "[${s}] ${u}": ${f.message}`:null));for(let f of this.temporaryData)this.gpuDataManager.release(f.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return s.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await qn(this,t,r);return Lo(n.buffer,a)}}}});var nl={};zt(nl,{init:()=>Bp});var Sr,pa,Bp,al=F(()=>{"use strict";Ve();rl();At();we();Sr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(V.size(t)!==V.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},pa=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=a>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let l=[];for(let o=0;o<u;o++){let p=n[s++],f=n[s++],y=n[s++],g=[];for(let b=0;b<y;b++)g.push(n[s++]);l.push(new Sr(t,p,f,g))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],s=(l,o,p)=>new Sr(this.module,o,this.output(l,p),p),u=(l,o)=>{let p=yr(l);if(!p)throw new Error(`Unsupported data type: ${l}`);let f=p*V.size(o);return new Sr(this.module,l,this.backend.gpuDataManager.create(f).id,o)};return this.backend.run(t,a,n,s,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Bp=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new wn;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,s,u,l=!1)=>{if(l)Be("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),a.memcpy(n,s);else{Be("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let o=e.HEAPU8.subarray(n,n+u);a.upload(s,o)}},async(n,s,u)=>{Be("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>a.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>a.releaseKernel(n),(n,s,u,l)=>{Be("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let o=new pa(e,a,s);return a.computeKernel(n,o,l)})}}});var il,Mp,Dp,sl,xr,ul,fa,ma,ll,dl,ol,cl,pl,fl,ml=F(()=>{"use strict";zo();Vo();Ve();Yt();Zr();il=!1,Mp=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&ke("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Dp=(e,t)=>{Me()._OrtInit(e,t)!==0&&ke("Can't initialize onnxruntime.")},sl=async e=>{Dp(e.wasm.numThreads,br(e.logLevel));{let t=(al(),Ct(nl)).init;await t(Me(),e)}il=!0},xr=new Map,ul=()=>il,fa=e=>{let t=Me(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},ma=(e,t)=>{let r=Me(),a=0,n=0,s=0,u=[],l=[],o=[];try{[n,u]=Wo(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&ke("Can't create a session.");let[p,f]=Mp(a),y=[],g=[],b=[];for(let v=0;v<p;v++){let _=r._OrtGetInputName(a,v);_===0&&ke("Can't get an input name."),l.push(_),y.push(r.UTF8ToString(_))}for(let v=0;v<f;v++){let _=r._OrtGetOutputName(a,v);_===0&&ke("Can't get an output name."),o.push(_);let C=r.UTF8ToString(_);g.push(C);{let I=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[C]??"cpu";if(I!=="cpu"&&I!=="cpu-pinned"&&I!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${I}.`);b.push(I)}}let $=null;return b.some(v=>v==="gpu-buffer")&&(s=r._OrtCreateBinding(a),s===0&&ke("Can't create IO binding."),$={handle:s,outputPreferredLocations:b,outputPreferredLocationsEncoded:b.map(v=>Gn(v))}),xr.set(a,[a,l,o,$]),[a,y,g]}catch(p){throw l.forEach(f=>r._OrtFree(f)),o.forEach(f=>r._OrtFree(f)),s!==0&&r._OrtReleaseBinding(s),a!==0&&r._OrtReleaseSession(a),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},ll=(e,t)=>{let r=fa(e);return ma(r,t)},dl=e=>{let t=Me(),r=xr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),s.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),xr.delete(e)},ol=(e,t,r,a,n)=>{if(!e){t.push(0);return}let s=Me(),u=e[0],l=e[1],o=e[3],p,f;if(u==="string"&&o==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o==="gpu-buffer"){let b=e[2].gpuBuffer,$=yr(Ln(u));f=l.reduce((v,_)=>v*_,1)*$,p=s.jsepRegisterBuffer(a,n,b,f)}else{let b=e[2];if(Array.isArray(b)){f=4*b.length,p=s._malloc(f),r.push(p);let $=p/4;for(let v=0;v<b.length;v++){if(typeof b[v]!="string")throw new TypeError(`tensor data at index ${v} is not a string`);s.HEAPU32[$++]=ze(b[v],r)}}else f=b.byteLength,p=s._malloc(f),r.push(p),s.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,f),p)}let y=s.stackSave(),g=s.stackAlloc(4*l.length);try{let b=g/4;l.forEach(v=>s.HEAP32[b++]=v);let $=s._OrtCreateTensor(Ln(u),p,f,g,l.length,Gn(o));$===0&&ke(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push($)}finally{s.stackRestore(y)}},cl=async(e,t,r,a,n,s)=>{let u=Me(),l=xr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[o,p,f,y]=l,g=t.length,b=a.length,$=0,v=[],_=[],C=[],I=[],T=u.stackSave(),A=u.stackAlloc(g*4),B=u.stackAlloc(g*4),k=u.stackAlloc(b*4),W=u.stackAlloc(b*4);try{[$,v]=Do(s);for(let ae=0;ae<g;ae++)ol(r[ae],_,I,e,t[ae]);for(let ae=0;ae<b;ae++)ol(n[ae],C,I,e,g+a[ae]);let z=A/4,K=B/4,X=k/4,D=W/4;for(let ae=0;ae<g;ae++)u.HEAPU32[z++]=_[ae],u.HEAPU32[K++]=p[t[ae]];for(let ae=0;ae<b;ae++)u.HEAPU32[X++]=C[ae],u.HEAPU32[D++]=f[a[ae]];if(y){let{handle:ae,outputPreferredLocations:pe,outputPreferredLocationsEncoded:j}=y;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model's input count (${p.length}).`);for(let $e=0;$e<g;$e++){let Ae=t[$e];await u._OrtBindInput(ae,p[Ae],_[$e])!==0&&ke(`Can't bind input[${$e}] for session=${e}.`)}for(let $e=0;$e<b;$e++){let Ae=a[$e];n[$e]?.[3]?u._OrtBindOutput(ae,f[Ae],C[$e],0)!==0&&ke(`Can't bind pre-allocated output[${$e}] for session=${e}.`):u._OrtBindOutput(ae,f[Ae],0,j[Ae])!==0&&ke(`Can't bind output[${$e}] to ${pe[$e]} for session=${e}.`)}}let Y;y?Y=await u._OrtRunWithBinding(o,y.handle,b,k,$):Y=await u._OrtRun(o,B,A,g,W,b,k,$),Y!==0&&ke("failed to call OrtRun().");let Ce=[];for(let ae=0;ae<b;ae++){let pe=u.HEAPU32[k/4+ae];if(pe===C[ae]){Ce.push(n[ae]);continue}let j=u.stackSave(),$e=u.stackAlloc(4*4),Ae=!1,Ee,ce=0;try{u._OrtGetTensorData(pe,$e,$e+4,$e+8,$e+12)!==0&&ke(`Can't access output tensor data on index ${ae}.`);let Ne=$e/4,Fe=u.HEAPU32[Ne++];ce=u.HEAPU32[Ne++];let tt=u.HEAPU32[Ne++],G=u.HEAPU32[Ne++],oe=[];for(let Te=0;Te<G;Te++)oe.push(u.HEAPU32[tt/4+Te]);u._OrtFree(tt);let he=oe.reduce((Te,We)=>Te*We,1);Ee=gr(Fe);let Je=y?.outputPreferredLocations[a[ae]];if(Ee==="string"){if(Je==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Te=[],We=ce/4;for(let qe=0;qe<he;qe++){let st=u.HEAPU32[We++],Xe=qe===he-1?void 0:u.HEAPU32[We]-st;Te.push(u.UTF8ToString(st,Xe))}Ce.push([Ee,oe,Te,"cpu"])}else if(Je==="gpu-buffer"&&he>0){let Te=u.jsepGetBuffer(ce),We=yr(Fe);if(We===void 0||!Qr(Ee))throw new Error(`Unsupported data type: ${Ee}`);Ae=!0,Ce.push([Ee,oe,{gpuBuffer:Te,download:u.jsepCreateDownloader(Te,he*We,Ee),dispose:()=>{u._OrtReleaseTensor(pe)}},"gpu-buffer"])}else{let Te=Xr(Ee),We=new Te(he);new Uint8Array(We.buffer,We.byteOffset,We.byteLength).set(u.HEAPU8.subarray(ce,ce+We.byteLength)),Ce.push([Ee,oe,We,"cpu"])}}finally{u.stackRestore(j),Ee==="string"&&ce&&u._free(ce),Ae||u._OrtReleaseTensor(pe)}}return y&&u._OrtClearBoundOutputs(y.handle),Ce}finally{u.stackRestore(T),_.forEach(z=>u._OrtReleaseTensor(z)),C.forEach(z=>u._OrtReleaseTensor(z)),I.forEach(z=>u._free(z)),$!==0&&u._OrtReleaseRunOptions($),v.forEach(z=>u._free(z))}},pl=e=>{let t=Me(),r=xr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&ke("Can't get an profile file name."),t._OrtFree(n)},fl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var hl=Kt((zb,Wp)=>{Wp.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var ln=Object.defineProperty;var Pu=Object.getOwnPropertyDescriptor;var Ru=Object.getOwnPropertyNames;var Bu=Object.prototype.hasOwnProperty;var F=(e,t)=>()=>(e&&(t=e(e=0)),t);var rr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Er=(e,t)=>{for(var r in t)ln(e,r,{get:t[r],enumerable:!0})},Mu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Ru(t))!Bu.call(e,n)&&n!==r&&ln(e,n,{get:()=>t[n],enumerable:!(o=Pu(t,n))||o.enumerable});return e};var zt=e=>Mu(ln({},"__esModule",{value:!0}),e);var dn={};Er(dn,{readFile:()=>Du});var Du,cn=F(()=>{Du=void 0});var pn={};Er(pn,{join:()=>zu});var zu,mn=F(()=>{zu=void 0});var fo=rr((mo,fn)=>{"use strict";var po=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((l,m)=>{o=l,n=m}),r.jsepInit=(l,m,g,x,E,G,H,le)=>{r.Za=l,r.Oa=m,r.Qa=g,r.Ja=x,r.Pa=E,r.ra=G,r.Ra=H,r.Sa=le,m=(Z,re,Q)=>(...me)=>{let ye=Ke,k=re?.();me=Z(...me);let ie=re?.();return k!==ie&&(Z=ie,Q(k),re=Q=null),Ke!=ye?wr():me},g=Z=>async(...re)=>{try{if(r.Da)throw Error("Session already started");let Q=r.Da={Ta:re[0],errors:[]},me=await Z(...re);if(r.Da!==Q)throw Error("Session mismatch");l.flush();let ye=Q.errors;if(0<ye.length){let k=await Promise.all(ye);if(k=k.filter(ie=>ie),0<k.length)throw Error(k.join(`\n`))}return me}finally{r.Da=null}},r._OrtRun=g(m(r._OrtRun,()=>r._OrtRun,Z=>r._OrtRun=Z)),r._OrtRunWithBinding=g(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Z=>r._OrtRunWithBinding=Z)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,Z=>r._OrtBindInput=Z),r.jsepRegisterBuffer=(Z,re,Q,me)=>l.registerBuffer(Z,re,Q,me),r.jsepUnregisterBuffers=Z=>{l.unregisterBuffers(Z)},r.jsepGetBuffer=Z=>l.getBuffer(Z),r.jsepCreateDownloader=(Z,re,Q)=>l.createDownloader(Z,re,Q)};var s=Object.assign({},r),u="./this.program",d=(l,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="",b,y,S;if(h){var v=(cn(),zt(dn)),I=(mn(),zt(pn));w=p?I.dirname(w)+"/":__dirname+"/",b=(l,m)=>(l=l.startsWith("file://")?new URL(l):I.normalize(l),v.readFileSync(l,m?void 0:"utf8")),S=l=>(l=b(l,!0),l.buffer||(l=new Uint8Array(l)),l),y=(l,m,g,x=!0)=>{l=l.startsWith("file://")?new URL(l):I.normalize(l),v.readFile(l,x?void 0:"utf8",(E,G)=>{E?g(E):m(x?G.buffer:G)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,m)=>{throw process.exitCode=l,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),e&&(w=e),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",b=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},p&&(S=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),y=(l,m,g)=>{var x=new XMLHttpRequest;x.open("GET",l,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?m(x.response):g()},x.onerror=g,x.send(null)});var A=r.print||console.log.bind(console),C=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var R;r.wasmBinary&&(R=r.wasmBinary);var _=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Ge("no native wasm support detected");var B,O,V=!1,z,K,X,D,Y,Ae,oe;function pe(){var l=B.buffer;r.HEAP8=K=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=D=new Int32Array(l),r.HEAPU8=X=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=Y=new Uint32Array(l),r.HEAPF32=Ae=new Float32Array(l),r.HEAPF64=oe=new Float64Array(l)}var q=[],$e=[],_e=[];function Te(){var l=r.preRun.shift();q.unshift(l)}var ce=0,Fe=null,Ve=null;function Ge(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",C(l),V=!0,z=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function Xe(l){return l.startsWith("data:application/octet-stream;base64,")}var L;if(L="ort-wasm-simd.wasm",!Xe(L)){var ae=L;L=r.locateFile?r.locateFile(ae,w):w+ae}function he(l){if(l==L&&R)return new Uint8Array(R);if(S)return S(l);throw"both async and sync fetching of the wasm failed"}function Ye(l){if(!R&&(a||p)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>he(l));if(y)return new Promise((m,g)=>{y(l,x=>m(new Uint8Array(x)),g)})}return Promise.resolve().then(()=>he(l))}function Ee(l,m,g){return Ye(l).then(x=>WebAssembly.instantiate(x,m)).then(x=>x).then(g,x=>{C("failed to asynchronously prepare wasm: "+x),Ge(x)})}function ze(l,m){var g=L;return R||typeof WebAssembly.instantiateStreaming!="function"||Xe(g)||g.startsWith("file://")||h||typeof fetch!="function"?Ee(g,l,m):fetch(g,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,l).then(m,function(E){return C("wasm streaming compile failed: "+E),C("falling back to ArrayBuffer instantiation"),Ee(g,l,m)}))}var Le,nt={912800:l=>{r.ra("Abs",l,void 0)},912851:l=>{r.ra("Neg",l,void 0)},912902:l=>{r.ra("Floor",l,void 0)},912955:l=>{r.ra("Ceil",l,void 0)},913007:l=>{r.ra("Reciprocal",l,void 0)},913065:l=>{r.ra("Sqrt",l,void 0)},913117:l=>{r.ra("Exp",l,void 0)},913168:l=>{r.ra("Erf",l,void 0)},913219:l=>{r.ra("Sigmoid",l,void 0)},913274:l=>{r.ra("Log",l,void 0)},913325:l=>{r.ra("Sin",l,void 0)},913376:l=>{r.ra("Cos",l,void 0)},913427:l=>{r.ra("Tan",l,void 0)},913478:l=>{r.ra("Asin",l,void 0)},913530:l=>{r.ra("Acos",l,void 0)},913582:l=>{r.ra("Atan",l,void 0)},913634:l=>{r.ra("Sinh",l,void 0)},913686:l=>{r.ra("Cosh",l,void 0)},913738:l=>{r.ra("Asinh",l,void 0)},913791:l=>{r.ra("Acosh",l,void 0)},913844:l=>{r.ra("Atanh",l,void 0)},913897:l=>{r.ra("Tanh",l,void 0)},913949:l=>{r.ra("Not",l,void 0)},914e3:(l,m,g)=>{r.ra("Clip",l,{min:m,max:g})},914069:l=>{r.ra("Clip",l,void 0)},914121:(l,m)=>{r.ra("Elu",l,{alpha:m})},914179:l=>{r.ra("Relu",l,void 0)},914231:(l,m)=>{r.ra("LeakyRelu",l,{alpha:m})},914295:(l,m)=>{r.ra("ThresholdedRelu",l,{alpha:m})},914365:(l,m)=>{r.ra("Cast",l,{to:m})},914423:l=>{r.ra("Add",l,void 0)},914474:l=>{r.ra("Sub",l,void 0)},914525:l=>{r.ra("Mul",l,void 0)},914576:l=>{r.ra("Div",l,void 0)},914627:l=>{r.ra("Pow",l,void 0)},914678:l=>{r.ra("Equal",l,void 0)},914731:l=>{r.ra("Greater",l,void 0)},914786:l=>{r.ra("GreaterOrEqual",l,void 0)},914848:l=>{r.ra("Less",l,void 0)},914900:l=>{r.ra("LessOrEqual",l,void 0)},914959:(l,m,g,x,E)=>{r.ra("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},915123:(l,m,g,x,E)=>{r.ra("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},915286:(l,m,g,x,E)=>{r.ra("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},915449:(l,m,g,x,E)=>{r.ra("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},915613:(l,m,g,x,E)=>{r.ra("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},915776:(l,m,g,x,E)=>{r.ra("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},915938:(l,m,g,x,E)=>{r.ra("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},916100:(l,m,g,x,E)=>{r.ra("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},916266:(l,m,g,x,E)=>{r.ra("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},916435:(l,m,g,x,E)=>{r.ra("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!g,axes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},916604:l=>{r.ra("Where",l,void 0)},916657:(l,m,g)=>{r.ra("Transpose",l,{perm:m?Array.from(D.subarray(g>>>0,g+m>>>0)):[]})},916770:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie)=>{r.ra("ConvTranspose",l,{format:Z?"NHWC":"NCHW",autoPad:m,dilations:[g],group:x,kernel_shape:[E],pads:[G,H],strides:[le],wIsConst:()=>!!K[re>>>0],outputPadding:Q?Array.from(D.subarray(me>>>0,me+Q>>>0)):[],outputShape:ye?Array.from(D.subarray(k>>>0,k+ye>>>0)):[],activation:Me(ie)})},917184:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(D.subarray(g>>>0,g+2>>>0)),group:x,kernelShape:Array.from(D.subarray(E>>>0,E+2>>>0)),pads:Array.from(D.subarray(G>>>0,G+4>>>0)),strides:Array.from(D.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Z>>>0],outputPadding:0<re?Array.from(D.subarray(Q>>>0,Q+re>>>0)):[],outputShape:0<me?Array.from(D.subarray(ye>>>0,ye+me>>>0)):[],activation:Me(k)})},917741:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie)=>{r.ra("ConvTranspose",l,{format:Z?"NHWC":"NCHW",autoPad:m,dilations:[g],group:x,kernel_shape:[E],pads:[G,H],strides:[le],wIsConst:()=>!!K[re>>>0],outputPadding:Q?Array.from(D.subarray(me>>>0,me+Q>>>0)):[],outputShape:ye?Array.from(D.subarray(k>>>0,k+ye>>>0)):[],activation:Me(ie)})},918155:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(D.subarray(g>>>0,g+2>>>0)),group:x,kernelShape:Array.from(D.subarray(E>>>0,E+2>>>0)),pads:Array.from(D.subarray(G>>>0,G+4>>>0)),strides:Array.from(D.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!K[Z>>>0],outputPadding:0<re?Array.from(D.subarray(Q>>>0,Q+re>>>0)):[],outputShape:0<me?Array.from(D.subarray(ye>>>0,ye+me>>>0)):[],activation:Me(k)})},918712:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},918803:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie,ge)=>{r.ra("AveragePool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[le,Z],pads:[re,Q,me,ye],strides:[k,ie]})},919087:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},919178:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie,ge)=>{r.ra("AveragePool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[le,Z],pads:[re,Q,me,ye],strides:[k,ie]})},919462:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919549:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie,ge)=>{r.ra("MaxPool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[le,Z],pads:[re,Q,me,ye],strides:[k,ie]})},919829:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},919916:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie,ge)=>{r.ra("MaxPool",l,{format:ge?"NHWC":"NCHW",auto_pad:m,ceil_mode:g,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[le,Z],pads:[re,Q,me,ye],strides:[k,ie]})},920196:(l,m,g,x,E)=>{r.ra("Gemm",l,{alpha:m,beta:g,transA:x,transB:E})},920300:l=>{r.ra("MatMul",l,void 0)},920354:(l,m,g,x)=>{r.ra("ArgMax",l,{keepDims:!!m,selectLastIndex:!!g,axis:x})},920462:(l,m,g,x)=>{r.ra("ArgMin",l,{keepDims:!!m,selectLastIndex:!!g,axis:x})},920570:(l,m)=>{r.ra("Softmax",l,{axis:m})},920633:(l,m)=>{r.ra("Concat",l,{axis:m})},920693:(l,m,g,x,E)=>{r.ra("Split",l,{axis:m,numOutputs:g,splitSizes:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},920838:l=>{r.ra("Expand",l,void 0)},920892:(l,m)=>{r.ra("Gather",l,{axis:Number(m)})},920963:(l,m)=>{r.ra("GatherElements",l,{axis:Number(m)})},921042:(l,m,g,x,E,G,H,le,Z,re,Q)=>{r.ra("Resize",l,{antialias:m,axes:g?Array.from(D.subarray(x>>>0,x+g>>>0)):[],coordinateTransformMode:Me(E),cubicCoeffA:G,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:Me(Z),mode:Me(re),nearestMode:Me(Q)})},921393:(l,m,g,x,E,G,H)=>{r.ra("Slice",l,{starts:m?Array.from(D.subarray(g>>>0,g+m>>>0)):[],ends:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[],axes:G?Array.from(D.subarray(H>>>0,H+G>>>0)):[]})},921624:l=>{r.ra("Tile",l,void 0)},921676:(l,m,g)=>{r.ra("LayerNormalization",l,{axis:Number(m),epsilon:Number(g)})},921783:(l,m,g)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:g?"NHWC":"NCHW"})},921897:(l,m,g)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:g?"NHWC":"NCHW"})},922011:l=>{r.ra("Range",l,void 0)},922064:(l,m)=>{r.ra("Einsum",l,{equation:Me(m)})},922145:(l,m,g,x,E)=>{r.ra("Pad",l,{mode:m,value:g,pads:x?Array.from(D.subarray(E>>>0,E+x>>>0)):[]})},922277:(l,m,g,x,E,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:g,spatial:!!E,trainingMode:!!x,format:G?"NHWC":"NCHW"})},922446:(l,m,g,x,E,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:g,spatial:!!E,trainingMode:!!x,format:G?"NHWC":"NCHW"})},922615:(l,m,g,x,E,G,H,le,Z)=>{r.ra("Attention",l,{numHeads:m,isUnidirectional:g,maskFilterValue:x,scale:E,doRotary:G,qkvHiddenSizes:H?Array.from(D.subarray(Number(le)>>>0,Number(le)+H>>>0)):[],pastPresentShareBuffer:!!Z})},922887:l=>{r.ra("Gelu",l,void 0)},922939:(l,m,g,x,E,G)=>{r.ra("MultiHeadAttention",l,{numHeads:m,isUnidirectional:g,maskFilterValue:x,scale:E,doRotary:G})},923098:l=>{r.ra("BiasAdd",l,void 0)},923153:l=>{r.ra("BiasSplitGelu",l,void 0)},923214:(l,m)=>{r.ra("SkipLayerNormalization",l,{epsilon:m})},923295:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye)=>{r.ra("Conv",l,{format:Z?"NHWC":"NCHW",auto_pad:m,dilations:[g],group:x,kernel_shape:[E],pads:G?Array.from(D.subarray(H>>>0,H+G>>>0)):[],strides:[le],w_is_const:()=>!!K[re>>>0],activation:Me(Q),activation_params:me?Array.from(Ae.subarray(ye>>>0,ye+me>>>0)):[]})},923676:(l,m,g,x,E,G,H,le,Z,re,Q,me,ye,k,ie,ge)=>{r.ra("Conv",l,{format:me?"NHWC":"NCHW",auto_pad:m,dilations:[g,x],group:E,kernel_shape:[G,H],pads:le?Array.from(D.subarray(Z>>>0,Z+le>>>0)):[],strides:[re,Q],w_is_const:()=>!!K[ye>>>0],activation:Me(k),activation_params:ie?Array.from(Ae.subarray(ge>>>0,ge+ie>>>0)):[]})},924078:l=>{r.Ra(l)},924112:(l,m)=>r.Sa(l,m,r.Da.Ta,r.Da.errors),924224:l=>r.Oa(l),924257:l=>r.Qa(l),924289:(l,m,g)=>{r.Ja(l,m,g,!0)},924328:(l,m,g)=>{r.Ja(l,m,g)}};function qe(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var $t=l=>{for(;0<l.length;)l.shift()(r)};function St(l){this.Ha=l-24,this.Ma=function(m){Y[this.Ha+4>>2>>>0]=m},this.La=function(m){Y[this.Ha+8>>2>>>0]=m},this.Ya=function(m,g){this.Ka(),this.Ma(m),this.La(g)},this.Ka=function(){Y[this.Ha+16>>2>>>0]=0}}var Wt=0,pr=0,Qe=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Nt=(l,m,g)=>{m>>>=0;var x=m+g;for(g=m;l[g]&&!(g>=x);)++g;if(16<g-m&&l.buffer&&Qe)return Qe.decode(l.subarray(m,g));for(x="";m<g;){var E=l[m++];if(E&128){var G=l[m++]&63;if((E&224)==192)x+=String.fromCharCode((E&31)<<6|G);else{var H=l[m++]&63;E=(E&240)==224?(E&15)<<12|G<<6|H:(E&7)<<18|G<<12|H<<6|l[m++]&63,65536>E?x+=String.fromCharCode(E):(E-=65536,x+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else x+=String.fromCharCode(E)}return x},Me=(l,m)=>(l>>>=0)?Nt(X,l,m):"",Ot=l=>{for(var m=0,g=0;g<l.length;++g){var x=l.charCodeAt(g);127>=x?m++:2047>=x?m+=2:55296<=x&&57343>=x?(m+=4,++g):m+=3}return m},Ut=(l,m,g,x)=>{if(g>>>=0,!(0<x))return 0;var E=g;x=g+x-1;for(var G=0;G<l.length;++G){var H=l.charCodeAt(G);if(55296<=H&&57343>=H){var le=l.charCodeAt(++G);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(g>=x)break;m[g++>>>0]=H}else{if(2047>=H){if(g+1>=x)break;m[g++>>>0]=192|H>>6}else{if(65535>=H){if(g+2>=x)break;m[g++>>>0]=224|H>>12}else{if(g+3>=x)break;m[g++>>>0]=240|H>>18,m[g++>>>0]=128|H>>12&63}m[g++>>>0]=128|H>>6&63}m[g++>>>0]=128|H&63}}return m[g>>>0]=0,g-E},pt=l=>l%4===0&&(l%100!==0||l%400===0),mr=[0,31,60,91,121,152,182,213,244,274,305,335],mt=[0,31,59,90,120,151,181,212,243,273,304,334],kt=l=>{var m=Ot(l)+1,g=Mt(m);return g&&Ut(l,X,g,m),g},gt=[],Pt=(l,m)=>{gt.length=0;var g;for(m>>=2;g=X[l++>>>0];)m+=g!=105&m,gt.push(g==105?D[m>>>0]:oe[m++>>>1]),++m;return gt},Rt={},Ht=()=>{if(!Bt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Rt)Rt[m]===void 0?delete l[m]:l[m]=Rt[m];var g=[];for(m in l)g.push(`${m}=${l[m]}`);Bt=g}return Bt},Bt,fr=[null,[],[]],Ue=[31,29,31,30,31,30,31,31,30,31,30,31],Gt=[31,28,31,30,31,30,31,31,30,31,30,31];function Lt(l){var m=Array(Ot(l)+1);return Ut(l,m,0,m.length),m}function ue(l,m,g,x){function E(k,ie,ge){for(k=typeof k=="number"?k.toString():k||"";k.length<ie;)k=ge[0]+k;return k}function G(k,ie){return E(k,ie,"0")}function H(k,ie){function ge(tr){return 0>tr?-1:0<tr?1:0}var ht;return(ht=ge(k.getFullYear()-ie.getFullYear()))===0&&(ht=ge(k.getMonth()-ie.getMonth()))===0&&(ht=ge(k.getDate()-ie.getDate())),ht}function le(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function Z(k){var ie=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<ie;){var ge=k.getMonth(),ht=(pt(k.getFullYear())?Ue:Gt)[ge];if(ie>ht-k.getDate())ie-=ht-k.getDate()+1,k.setDate(1),11>ge?k.setMonth(ge+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ie);break}}return ge=new Date(k.getFullYear()+1,0,4),ie=le(new Date(k.getFullYear(),0,4)),ge=le(ge),0>=H(ie,k)?0>=H(ge,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}l>>>=0,m>>>=0,g>>>=0,x>>>=0;var re=D[x+40>>2>>>0];x={Wa:D[x>>2>>>0],Va:D[x+4>>2>>>0],Ea:D[x+8>>2>>>0],Ia:D[x+12>>2>>>0],Fa:D[x+16>>2>>>0],Ca:D[x+20>>2>>>0],wa:D[x+24>>2>>>0],Ba:D[x+28>>2>>>0],$a:D[x+32>>2>>>0],Ua:D[x+36>>2>>>0],Xa:re?Me(re):""},g=Me(g),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var Q in re)g=g.replace(new RegExp(Q,"g"),re[Q]);var me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),ye="January February March April May June July August September October November December".split(" ");re={"%a":k=>me[k.wa].substring(0,3),"%A":k=>me[k.wa],"%b":k=>ye[k.Fa].substring(0,3),"%B":k=>ye[k.Fa],"%C":k=>G((k.Ca+1900)/100|0,2),"%d":k=>G(k.Ia,2),"%e":k=>E(k.Ia,2," "),"%g":k=>Z(k).toString().substring(2),"%G":k=>Z(k),"%H":k=>G(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),G(k,2)),"%j":k=>{for(var ie=0,ge=0;ge<=k.Fa-1;ie+=(pt(k.Ca+1900)?Ue:Gt)[ge++]);return G(k.Ia+ie,3)},"%m":k=>G(k.Fa+1,2),"%M":k=>G(k.Va,2),"%n":()=>`\n`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>G(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>G(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var ie=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&ie++,ie)ie==53&&(ge=(k.wa+371-k.Ba)%7,ge==4||ge==3&&pt(k.Ca)||(ie=1));else{ie=52;var ge=(k.wa+7-k.Ba-1)%7;(ge==4||ge==5&&pt(k.Ca%400-1))&&ie++}return G(ie,2)},"%w":k=>k.wa,"%W":k=>G(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var ie=0<=k;return k=Math.abs(k)/60,(ie?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},g=g.replace(/%%/g,"\\0\\0");for(Q in re)g.includes(Q)&&(g=g.replace(new RegExp(Q,"g"),re[Q](x)));return g=g.replace(/\\0\\0/g,"%"),Q=Lt(g),Q.length>m?0:(K.set(Q,l>>>0),Q.length-1)}function ft(l){try{l()}catch(m){Ge(m)}}function hr(l){var m={},g;for(g in l)(function(x){var E=l[x];m[x]=typeof E=="function"?function(){xt.push(x);try{return E.apply(null,arguments)}finally{V||(xt.pop()===x||Ge(),Ke&&ot===1&&xt.length===0&&(ot=0,ft(Jt),typeof Fibers<"u"&&Fibers.ab()))}}:E})(g);return m}var ot=0,Ke=null,gr=0,xt=[],Ft={},jt={},yr=0,Ct=null,br=[];function wr(){return new Promise((l,m)=>{Ct={resolve:l,reject:m}})}function vr(){var l=Mt(65548),m=l+12;Y[l>>2>>>0]=m,Y[l+4>>2>>>0]=m+65536,m=xt[0];var g=Ft[m];return g===void 0&&(g=yr++,Ft[m]=g,jt[g]=m),D[l+8>>2>>>0]=g,l}function $r(l){if(!V){if(ot===0){var m=!1,g=!1;l((x=0)=>{if(!V&&(gr=x,m=!0,g)){ot=2,ft(()=>Dt(Ke)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),x=!1;try{var E=(0,O[jt[D[Ke+8>>2>>>0]]])()}catch(le){E=le,x=!0}var G=!1;if(!Ke){var H=Ct;H&&(Ct=null,(x?H.reject:H.resolve)(E),G=!0)}if(x&&!G)throw E}}),g=!0,m||(ot=1,Ke=vr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),ft(()=>Qt(Ke)))}else ot===2?(ot=0,ft(It),qt(Ke),Ke=null,br.forEach(x=>{if(!V)try{if(x(),!_)try{z=z=x=z,_||(r.onExit&&r.onExit(x),V=!0),d(x,new qe(x))}catch(E){E instanceof qe||E=="unwind"||d(1,E)}}catch(E){E instanceof qe||E=="unwind"||d(1,E)}})):Ge(`invalid state: ${ot}`);return gr}}function Sr(l){return $r(m=>{l().then(m)})}var xr={n:function(l,m,g){return Sr(async()=>{await r.Pa(l,m,g)})},a:function(l,m,g){throw l>>>=0,new St(l).Ya(m>>>0,g>>>0),Wt=l,pr++,Wt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(l,m,g){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,g>>>=0,l=new Date(1e3*l),D[g>>2>>>0]=l.getUTCSeconds(),D[g+4>>2>>>0]=l.getUTCMinutes(),D[g+8>>2>>>0]=l.getUTCHours(),D[g+12>>2>>>0]=l.getUTCDate(),D[g+16>>2>>>0]=l.getUTCMonth(),D[g+20>>2>>>0]=l.getUTCFullYear()-1900,D[g+24>>2>>>0]=l.getUTCDay(),D[g+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,m,g){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,g>>>=0,l=new Date(1e3*l),D[g>>2>>>0]=l.getSeconds(),D[g+4>>2>>>0]=l.getMinutes(),D[g+8>>2>>>0]=l.getHours(),D[g+12>>2>>>0]=l.getDate(),D[g+16>>2>>>0]=l.getMonth(),D[g+20>>2>>>0]=l.getFullYear()-1900,D[g+24>>2>>>0]=l.getDay(),D[g+28>>2>>>0]=(pt(l.getFullYear())?mr:mt)[l.getMonth()]+l.getDate()-1|0,D[g+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var x=new Date(l.getFullYear(),0,1).getTimezoneOffset();D[g+32>>2>>>0]=(m!=x&&l.getTimezoneOffset()==Math.min(x,m))|0},s:function(l){l>>>=0;var m=new Date(D[l+20>>2>>>0]+1900,D[l+16>>2>>>0],D[l+12>>2>>>0],D[l+8>>2>>>0],D[l+4>>2>>>0],D[l>>2>>>0],0),g=D[l+32>>2>>>0],x=m.getTimezoneOffset(),E=new Date(m.getFullYear(),6,1).getTimezoneOffset(),G=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(G,E);return 0>g?D[l+32>>2>>>0]=+(E!=G&&H==x):0<g!=(H==x)&&(E=Math.max(G,E),m.setTime(m.getTime()+6e4*((0<g?H:E)-x))),D[l+24>>2>>>0]=m.getDay(),D[l+28>>2>>>0]=(pt(m.getFullYear())?mr:mt)[m.getMonth()]+m.getDate()-1|0,D[l>>2>>>0]=m.getSeconds(),D[l+4>>2>>>0]=m.getMinutes(),D[l+8>>2>>>0]=m.getHours(),D[l+12>>2>>>0]=m.getDate(),D[l+16>>2>>>0]=m.getMonth(),D[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,Kt((Le=l,1<=+Math.abs(Le)?0<Le?+Math.floor(Le/4294967296)>>>0:~~+Math.ceil((Le-+(~~Le>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},v:function(l,m,g){function x(Z){return(Z=Z.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Z[1]:"GMT"}g>>>=0;var E=new Date().getFullYear(),G=new Date(E,0,1),H=new Date(E,6,1);E=G.getTimezoneOffset();var le=H.getTimezoneOffset();Y[l>>>0>>2>>>0]=60*Math.max(E,le),D[m>>>0>>2>>>0]=+(E!=le),l=x(G),m=x(H),l=kt(l),m=kt(m),le<E?(Y[g>>2>>>0]=l,Y[g+4>>2>>>0]=m):(Y[g>>2>>>0]=m,Y[g+4>>2>>>0]=l)},e:()=>{Ge("")},b:function(l,m,g){return l>>>=0,m=Pt(m>>>0,g>>>0),nt[l].apply(null,m)},i:function(l,m,g){return l>>>=0,m=Pt(m>>>0,g>>>0),nt[l].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(l,m,g){return m>>>=0,X.copyWithin(l>>>0>>>0,m>>>0,m+(g>>>0)>>>0)},u:function(l){l>>>=0;var m=X.length;if(4294901760<l)return!1;for(var g=1;4>=g;g*=2){var x=m*(1+.2/g);x=Math.min(x,l+100663296);var E=Math;x=Math.max(l,x);e:{E=E.min.call(E,4294901760,x+(65536-x%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(E),pe();var G=1;break e}catch{}G=void 0}if(G)return!0}return!1},D:function(l,m){l>>>=0,m>>>=0;var g=0;return Ht().forEach(function(x,E){var G=m+g;for(E=Y[l+4*E>>2>>>0]=G,G=0;G<x.length;++G)K[E++>>0>>>0]=x.charCodeAt(G);K[E>>0>>>0]=0,g+=x.length+1}),0},E:function(l,m){l>>>=0,m>>>=0;var g=Ht();Y[l>>2>>>0]=g.length;var x=0;return g.forEach(function(E){x+=E.length+1}),Y[m>>2>>>0]=x,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(l,m,g,x){m>>>=0,g>>>=0,x>>>=0;for(var E=0,G=0;G<g;G++){var H=Y[m>>2>>>0],le=Y[m+4>>2>>>0];m+=8;for(var Z=0;Z<le;Z++){var re=X[H+Z>>>0],Q=fr[l];re===0||re===10?((l===1?A:C)(Nt(Q,0)),Q.length=0):Q.push(re)}E+=le}return Y[x>>2>>>0]=E,0},F:ue,d:function(l,m,g,x){return ue(l>>>0,m>>>0,g>>>0,x>>>0)}};(function(){function l(g){if(g=g.exports,g=hr(g),O=g=yt(g),B=O.M,pe(),$e.unshift(O.N),ce--,r.monitorRunDependencies&&r.monitorRunDependencies(ce),ce==0&&(Fe!==null&&(clearInterval(Fe),Fe=null),Ve)){var x=Ve;Ve=null,x()}return g}var m={a:xr};if(ce++,r.monitorRunDependencies&&r.monitorRunDependencies(ce),r.instantiateWasm)try{return r.instantiateWasm(m,l)}catch(g){C("Module.instantiateWasm callback failed with error: "+g),n(g)}return ze(m,function(g){l(g.instance)}).catch(n),{}})(),r._OrtInit=(l,m)=>(r._OrtInit=O.O)(l,m),r._OrtGetLastError=(l,m)=>(r._OrtGetLastError=O.P)(l,m),r._OrtCreateSessionOptions=(l,m,g,x,E,G,H,le,Z,re)=>(r._OrtCreateSessionOptions=O.Q)(l,m,g,x,E,G,H,le,Z,re),r._OrtAppendExecutionProvider=(l,m)=>(r._OrtAppendExecutionProvider=O.R)(l,m),r._OrtAddFreeDimensionOverride=(l,m,g)=>(r._OrtAddFreeDimensionOverride=O.S)(l,m,g),r._OrtAddSessionConfigEntry=(l,m,g)=>(r._OrtAddSessionConfigEntry=O.T)(l,m,g),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=O.U)(l),r._OrtCreateSession=(l,m,g)=>(r._OrtCreateSession=O.V)(l,m,g),r._OrtReleaseSession=l=>(r._OrtReleaseSession=O.W)(l),r._OrtGetInputOutputCount=(l,m,g)=>(r._OrtGetInputOutputCount=O.X)(l,m,g),r._OrtGetInputName=(l,m)=>(r._OrtGetInputName=O.Y)(l,m),r._OrtGetOutputName=(l,m)=>(r._OrtGetOutputName=O.Z)(l,m),r._OrtFree=l=>(r._OrtFree=O._)(l),r._OrtCreateTensor=(l,m,g,x,E,G)=>(r._OrtCreateTensor=O.$)(l,m,g,x,E,G),r._OrtGetTensorData=(l,m,g,x,E)=>(r._OrtGetTensorData=O.aa)(l,m,g,x,E),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=O.ba)(l),r._OrtCreateRunOptions=(l,m,g,x)=>(r._OrtCreateRunOptions=O.ca)(l,m,g,x),r._OrtAddRunConfigEntry=(l,m,g)=>(r._OrtAddRunConfigEntry=O.da)(l,m,g),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=O.ea)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=O.fa)(l),r._OrtBindInput=(l,m,g)=>(r._OrtBindInput=O.ga)(l,m,g),r._OrtBindOutput=(l,m,g,x)=>(r._OrtBindOutput=O.ha)(l,m,g,x),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=O.ia)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=O.ja)(l),r._OrtRunWithBinding=(l,m,g,x,E)=>(r._OrtRunWithBinding=O.ka)(l,m,g,x,E),r._OrtRun=(l,m,g,x,E,G,H,le)=>(r._OrtRun=O.la)(l,m,g,x,E,G,H,le),r._OrtEndProfiling=l=>(r._OrtEndProfiling=O.ma)(l),r._JsepOutput=(l,m,g)=>(r._JsepOutput=O.na)(l,m,g),r._JsepGetNodeName=l=>(r._JsepGetNodeName=O.oa)(l);var Mt=r._malloc=l=>(Mt=r._malloc=O.pa)(l),qt=r._free=l=>(qt=r._free=O.qa)(l),Kt=l=>(Kt=O.sa)(l),Yt=()=>(Yt=O.ta)(),Zt=l=>(Zt=O.ua)(l),Xt=l=>(Xt=O.va)(l),Qt=l=>(Qt=O.xa)(l),Jt=()=>(Jt=O.ya)(),Dt=l=>(Dt=O.za)(l),It=()=>(It=O.Aa)();r.___start_em_js=924361,r.___stop_em_js=924522;function yt(l){l=Object.assign({},l);var m=x=>()=>x()>>>0,g=x=>E=>x(E)>>>0;return l.__errno_location=m(l.__errno_location),l.malloc=g(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=g(l.stackAlloc),l}r.stackAlloc=Xt,r.stackSave=Yt,r.stackRestore=Zt,r.UTF8ToString=Me,r.stringToUTF8=(l,m,g)=>Ut(l,X,m,g),r.lengthBytesUTF8=Ot;var At;Ve=function l(){At||er(),At||(Ve=l)};function er(){function l(){if(!At&&(At=!0,r.calledRun=!0,!V)){if($t($e),o(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();_e.unshift(m)}$t(_e)}}if(!(0<ce)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)Te();$t(q),0<ce||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return er(),t.ready}})();typeof mo=="object"&&typeof fn=="object"?fn.exports=po:typeof define=="function"&&define.amd&&define([],()=>po)});var ho=rr(()=>{});var go=rr(()=>{});var yo={};Er(yo,{cpus:()=>Vu});var Vu,bo=F(()=>{Vu=void 0});var $o=rr((vo,hn)=>{"use strict";var wo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return pe.buffer!=ce.buffer&&ae(),ce}function o(){return pe.buffer!=ce.buffer&&ae(),Fe}function n(){return pe.buffer!=ce.buffer&&ae(),Ve}function s(){return pe.buffer!=ce.buffer&&ae(),Ge}function u(){return pe.buffer!=ce.buffer&&ae(),Xe}function d(){return pe.buffer!=ce.buffer&&ae(),L}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.jsepInit=(i,c,f,$,T,M,U,ne)=>{a.Qb=i,a.wb=c,a.yb=f,a.jb=$,a.xb=T,a.Ea=M,a.zb=U,a.Ab=ne,c=(J,te,se)=>(...be)=>{let xe=at,P=te?.();be=J(...be);let de=te?.();return P!==de&&(J=de,se(P),te=se=null),at!=xe?Cu():be},f=J=>async(...te)=>{try{if(a.bb)throw Error("Session already started");let se=a.bb={Fb:te[0],errors:[]},be=await J(...te);if(a.bb!==se)throw Error("Session mismatch");i.flush();let xe=se.errors;if(0<xe.length){let P=await Promise.all(xe);if(P=P.filter(de=>de),0<P.length)throw Error(P.join(`\n`))}return be}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,J=>a._OrtRun=J)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,J=>a._OrtRunWithBinding=J)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,J=>a._OrtBindInput=J),a.jsepRegisterBuffer=(J,te,se,be)=>i.registerBuffer(J,te,se,be),a.jsepUnregisterBuffers=J=>{i.unregisterBuffers(J)},a.jsepGetBuffer=J=>i.getBuffer(J),a.jsepCreateDownloader=(J,te,se)=>i.createDownloader(J,te,se)};var w=Object.assign({},a),b="./this.program",y=(i,c)=>{throw c},S=typeof window=="object",v=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=a.ENVIRONMENT_IS_PTHREAD||!1,C="";function R(i){return a.locateFile?a.locateFile(i,C):C+i}var _,B,O;if(I){var V=(cn(),zt(dn)),z=(mn(),zt(pn));C=v?z.dirname(C)+"/":__dirname+"/",_=(c,f)=>(c=c.startsWith("file://")?new URL(c):z.normalize(c),V.readFileSync(c,f?void 0:"utf8")),O=c=>(c=_(c,!0),c.buffer||(c=new Uint8Array(c)),c),B=(c,f,$,T=!0)=>{c=c.startsWith("file://")?new URL(c):z.normalize(c),V.readFile(c,T?void 0:"utf8",(M,U)=>{M?$(M):f(T?U.buffer:U)})},!a.thisProgram&&1<process.argv.length&&(b=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),y=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=ho()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(S||v)&&(v?C=self.location.href:typeof document<"u"&&document.currentScript&&(C=document.currentScript.src),typeof e<"u"&&e&&(C=e),C.indexOf("blob:")!==0?C=C.substr(0,C.replace(/[?#].*/,"").lastIndexOf("/")+1):C="",I||(_=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},v&&(O=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),B=(i,c,f)=>{var $=new XMLHttpRequest;$.open("GET",i,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):f()},$.onerror=f,$.send(null)}));I&&typeof performance>"u"&&(global.performance=go().performance);var K=console.log.bind(console),X=console.error.bind(console);I&&(K=(...i)=>V.writeSync(1,i.join(" ")+`\n`),X=(...i)=>V.writeSync(2,i.join(" ")+`\n`));var D=a.print||K,Y=a.printErr||X;Object.assign(a,w),w=null,a.thisProgram&&(b=a.thisProgram),a.quit&&(y=a.quit);var Ae;a.wasmBinary&&(Ae=a.wasmBinary);var oe=a.noExitRuntime||!0;typeof WebAssembly!="object"&&Qe("no native wasm support detected");var pe,q,$e,_e=!1,Te,ce,Fe,Ve,Ge,Xe,L;function ae(){var i=pe.buffer;a.HEAP8=ce=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAP32=Ve=new Int32Array(i),a.HEAPU8=Fe=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAPU32=Ge=new Uint32Array(i),a.HEAPF32=Xe=new Float32Array(i),a.HEAPF64=L=new Float64Array(i)}var he=a.INITIAL_MEMORY||16777216;if(5242880<=he||Qe("INITIAL_MEMORY should be larger than STACK_SIZE, was "+he+"! (STACK_SIZE=5242880)"),A)pe=a.wasmMemory;else if(a.wasmMemory)pe=a.wasmMemory;else if(pe=new WebAssembly.Memory({initial:he/65536,maximum:65536,shared:!0}),!(pe.buffer instanceof SharedArrayBuffer))throw Y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&Y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");ae(),he=pe.buffer.byteLength;var Ye=[],Ee=[],ze=[],Le=0;function nt(){return oe||0<Le}var qe=0,$t=null,St=null;function Wt(){qe++,a.monitorRunDependencies&&a.monitorRunDependencies(qe)}function pr(){if(qe--,a.monitorRunDependencies&&a.monitorRunDependencies(qe),qe==0&&($t!==null&&(clearInterval($t),$t=null),St)){var i=St;St=null,i()}}function Qe(i){throw a.onAbort&&a.onAbort(i),i="Aborted("+i+")",Y(i),_e=!0,Te=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}function Nt(i){return i.startsWith("data:application/octet-stream;base64,")}var Me;Me="ort-wasm-simd-threaded.wasm",Nt(Me)||(Me=R(Me));function Ot(i){if(i==Me&&Ae)return new Uint8Array(Ae);if(O)return O(i);throw"both async and sync fetching of the wasm failed"}function Ut(i){if(!Ae&&(S||v)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>Ot(i));if(B)return new Promise((c,f)=>{B(i,$=>c(new Uint8Array($)),f)})}return Promise.resolve().then(()=>Ot(i))}function pt(i,c,f){return Ut(i).then($=>WebAssembly.instantiate($,c)).then($=>$).then(f,$=>{Y("failed to asynchronously prepare wasm: "+$),Qe($)})}function mr(i,c){var f=Me;return Ae||typeof WebAssembly.instantiateStreaming!="function"||Nt(f)||f.startsWith("file://")||I||typeof fetch!="function"?pt(f,i,c):fetch(f,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,i).then(c,function(T){return Y("wasm streaming compile failed: "+T),Y("falling back to ArrayBuffer instantiation"),pt(f,i,c)}))}var mt,kt={1428784:i=>{a.Ea("Abs",i,void 0)},1428835:i=>{a.Ea("Neg",i,void 0)},1428886:i=>{a.Ea("Floor",i,void 0)},1428939:i=>{a.Ea("Ceil",i,void 0)},1428991:i=>{a.Ea("Reciprocal",i,void 0)},1429049:i=>{a.Ea("Sqrt",i,void 0)},1429101:i=>{a.Ea("Exp",i,void 0)},1429152:i=>{a.Ea("Erf",i,void 0)},1429203:i=>{a.Ea("Sigmoid",i,void 0)},1429258:i=>{a.Ea("Log",i,void 0)},1429309:i=>{a.Ea("Sin",i,void 0)},1429360:i=>{a.Ea("Cos",i,void 0)},1429411:i=>{a.Ea("Tan",i,void 0)},1429462:i=>{a.Ea("Asin",i,void 0)},1429514:i=>{a.Ea("Acos",i,void 0)},1429566:i=>{a.Ea("Atan",i,void 0)},1429618:i=>{a.Ea("Sinh",i,void 0)},1429670:i=>{a.Ea("Cosh",i,void 0)},1429722:i=>{a.Ea("Asinh",i,void 0)},1429775:i=>{a.Ea("Acosh",i,void 0)},1429828:i=>{a.Ea("Atanh",i,void 0)},1429881:i=>{a.Ea("Tanh",i,void 0)},1429933:i=>{a.Ea("Not",i,void 0)},1429984:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},1430053:i=>{a.Ea("Clip",i,void 0)},1430105:(i,c)=>{a.Ea("Elu",i,{alpha:c})},1430163:i=>{a.Ea("Relu",i,void 0)},1430215:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},1430279:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},1430349:i=>{a.zb(i)},1430383:(i,c)=>a.Ab(i,c,a.bb.Fb,a.bb.errors),1430495:(i,c)=>{a.Ea("Cast",i,{to:c})},1430553:i=>{a.Ea("Add",i,void 0)},1430604:i=>{a.Ea("Sub",i,void 0)},1430655:i=>{a.Ea("Mul",i,void 0)},1430706:i=>{a.Ea("Div",i,void 0)},1430757:i=>{a.Ea("Pow",i,void 0)},1430808:i=>{a.Ea("Equal",i,void 0)},1430861:i=>{a.Ea("Greater",i,void 0)},1430916:i=>{a.Ea("GreaterOrEqual",i,void 0)},1430978:i=>{a.Ea("Less",i,void 0)},1431030:i=>{a.Ea("LessOrEqual",i,void 0)},1431089:(i,c,f,$,T)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431253:(i,c,f,$,T)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431416:(i,c,f,$,T)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431579:(i,c,f,$,T)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431743:(i,c,f,$,T)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1431906:(i,c,f,$,T)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432068:(i,c,f,$,T)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432230:(i,c,f,$,T)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432396:(i,c,f,$,T)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432565:(i,c,f,$,T)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1432734:i=>{a.Ea("Where",i,void 0)},1432787:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},1432900:(i,c,f,$,T,M,U,ne,J,te,se,be,xe)=>{a.Ea("Conv",i,{format:J?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:$,kernel_shape:[T],pads:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[],strides:[ne],w_is_const:()=>!!r()[te>>>0],activation:Ue(se),activation_params:be?Array.from(u().subarray(xe>>>0,xe+be>>>0)):[]})},1433281:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de,Se)=>{a.Ea("Conv",i,{format:be?"NHWC":"NCHW",auto_pad:c,dilations:[f,$],group:T,kernel_shape:[M,U],pads:ne?Array.from(n().subarray(J>>>0,J+ne>>>0)):[],strides:[te,se],w_is_const:()=>!!r()[xe>>>0],activation:Ue(P),activation_params:de?Array.from(u().subarray(Se>>>0,Se+de>>>0)):[]})},1433683:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de)=>{a.Ea("ConvTranspose",i,{format:J?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[T],pads:[M,U],strides:[ne],wIsConst:()=>!!r()[te>>>0],outputPadding:se?Array.from(n().subarray(be>>>0,be+se>>>0)):[],outputShape:xe?Array.from(n().subarray(P>>>0,P+xe>>>0)):[],activation:Ue(de)})},1434097:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P)=>{a.Ea("ConvTranspose",i,{format:ne?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[J>>>0],outputPadding:0<te?Array.from(n().subarray(se>>>0,se+te>>>0)):[],outputShape:0<be?Array.from(n().subarray(xe>>>0,xe+be>>>0)):[],activation:Ue(P)})},1434654:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de)=>{a.Ea("ConvTranspose",i,{format:J?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[T],pads:[M,U],strides:[ne],wIsConst:()=>!!r()[te>>>0],outputPadding:se?Array.from(n().subarray(be>>>0,be+se>>>0)):[],outputShape:xe?Array.from(n().subarray(P>>>0,P+xe>>>0)):[],activation:Ue(de)})},1435068:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P)=>{a.Ea("ConvTranspose",i,{format:ne?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(M>>>0,M+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[J>>>0],outputPadding:0<te?Array.from(n().subarray(se>>>0,se+te>>>0)):[],outputShape:0<be?Array.from(n().subarray(xe>>>0,xe+be>>>0)):[],activation:Ue(P)})},1435625:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1435716:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de,Se)=>{a.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1436e3:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},1436091:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de,Se)=>{a.Ea("AveragePool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1436375:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436462:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de,Se)=>{a.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1436742:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},1436829:(i,c,f,$,T,M,U,ne,J,te,se,be,xe,P,de,Se)=>{a.Ea("MaxPool",i,{format:Se?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:T,dilations:[M,U],kernel_shape:[ne,J],pads:[te,se,be,xe],strides:[P,de]})},1437109:(i,c,f,$,T)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:$,transB:T})},1437213:i=>{a.Ea("MatMul",i,void 0)},1437267:(i,c,f,$)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},1437375:(i,c,f,$)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},1437483:(i,c)=>{a.Ea("Softmax",i,{axis:c})},1437546:(i,c)=>{a.Ea("Concat",i,{axis:c})},1437606:(i,c,f,$,T)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1437751:i=>{a.Ea("Expand",i,void 0)},1437805:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},1437876:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},1437955:(i,c,f,$,T,M,U,ne,J,te,se)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray($>>>0,$+f>>>0)):[],coordinateTransformMode:Ue(T),cubicCoeffA:M,excludeOutside:U,extrapolationValue:ne,keepAspectRatioPolicy:Ue(J),mode:Ue(te),nearestMode:Ue(se)})},1438306:(i,c,f,$,T,M,U)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[],axes:M?Array.from(n().subarray(U>>>0,U+M>>>0)):[]})},1438537:i=>{a.Ea("Tile",i,void 0)},1438589:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},1438696:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438810:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},1438924:i=>{a.Ea("Range",i,void 0)},1438977:(i,c)=>{a.Ea("Einsum",i,{equation:Ue(c)})},1439058:(i,c,f,$,T)=>{a.Ea("Pad",i,{mode:c,value:f,pads:$?Array.from(n().subarray(T>>>0,T+$>>>0)):[]})},1439190:(i,c,f,$,T,M)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!$,format:M?"NHWC":"NCHW"})},1439359:(i,c,f,$,T,M)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!$,format:M?"NHWC":"NCHW"})},1439528:(i,c,f,$,T,M,U,ne,J)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:T,doRotary:M,qkvHiddenSizes:U?Array.from(n().subarray(Number(ne)>>>0,Number(ne)+U>>>0)):[],pastPresentShareBuffer:!!J})},1439800:i=>{a.Ea("Gelu",i,void 0)},1439852:(i,c,f,$,T,M)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:T,doRotary:M})},1440011:i=>{a.Ea("BiasAdd",i,void 0)},1440066:i=>{a.Ea("BiasSplitGelu",i,void 0)},1440127:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},1440208:i=>a.wb(i),1440241:i=>a.yb(i),1440273:(i,c,f)=>{a.jb(i,c,f,!0)},1440312:(i,c,f)=>{a.jb(i,c,f)}};function gt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Pt(i){i.terminate(),i.onmessage=()=>{}}function Rt(i){(i=ue.Qa[i])||Qe(),ue.Eb(i)}function Ht(i){var c=ue.tb();if(!c)return 6;ue.Ya.push(c),ue.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return I&&c.unref(),c.postMessage(f,i.Mb),0}var Bt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,fr=(i,c,f)=>{c>>>=0;var $=c+f;for(f=c;i[f]&&!(f>=$);)++f;if(16<f-c&&i.buffer&&Bt)return Bt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for($="";c<f;){var T=i[c++];if(T&128){var M=i[c++]&63;if((T&224)==192)$+=String.fromCharCode((T&31)<<6|M);else{var U=i[c++]&63;T=(T&240)==224?(T&15)<<12|M<<6|U:(T&7)<<18|M<<12|U<<6|i[c++]&63,65536>T?$+=String.fromCharCode(T):(T-=65536,$+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else $+=String.fromCharCode(T)}return $},Ue=(i,c)=>(i>>>=0)?fr(o(),i,c):"";function Gt(i){if(A)return H(1,1,i);Te=i,nt()||(ue.Hb(),a.onExit&&a.onExit(i),_e=!0),y(i,new gt(i))}var Lt=i=>{if(Te=i,A)throw hr(i),"unwind";Gt(i)},ue={ab:[],Ya:[],mb:[],Qa:{},gb:function(){A?ue.vb():ue.ub()},ub:function(){Ye.unshift(()=>{Wt(),ue.Bb(()=>pr())})},vb:function(){ue.receiveObjectTransfer=ue.Db,ue.threadInitTLS=ue.lb,ue.setExitStatus=ue.kb,oe=!1},kb:function(i){Te=i},Sb:["$terminateWorker"],Hb:function(){for(var i of ue.Ya)Pt(i);for(i of ue.ab)Pt(i);ue.ab=[],ue.Ya=[],ue.Qa=[]},Eb:function(i){var c=i.Xa;delete ue.Qa[c],ue.ab.push(i),ue.Ya.splice(ue.Ya.indexOf(i),1),i.Xa=0,on(c)},Db:function(){},lb:function(){ue.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=M=>{M=M.data;var U=M.cmd;if(M.targetThread&&M.targetThread!=Ar()){var ne=ue.Qa[M.Rb];ne?ne.postMessage(M,M.transferList):Y(\'Internal error! Worker sent a message "\'+U+\'" to target pthread \'+M.targetThread+", but that thread no longer exists!")}else U==="checkMailbox"?It():U==="spawnThread"?Ht(M):U==="cleanupThread"?Rt(M.thread):U==="killThread"?(M=M.thread,U=ue.Qa[M],delete ue.Qa[M],Pt(U),on(M),ue.Ya.splice(ue.Ya.indexOf(U),1),U.Xa=0):U==="cancelThread"?ue.Qa[M.thread].postMessage({cmd:"cancel"}):U==="loaded"?(i.loaded=!0,c(i)):U==="alert"?alert("Thread "+M.threadId+": "+M.text):M.target==="setimmediate"?i.postMessage(M):U==="callHandler"?a[M.handler](...M.args):U&&Y("worker sent an unknown command "+U)},i.onerror=M=>{throw Y("worker sent an error! "+M.filename+":"+M.lineno+": "+M.message),M},I&&(i.on("message",function(M){i.onmessage({data:M})}),i.on("error",function(M){i.onerror(M)}));var f=[],$=["onExit","onAbort","print","printErr"],T;for(T of $)a.hasOwnProperty(T)&&f.push(T);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:pe,wasmModule:$e})}),Bb:function(i){i()},qb:function(){var i=R("ort-wasm-simd-threaded.worker.js");i=new Worker(i),ue.ab.push(i)},tb:function(){return ue.ab.length==0&&(ue.qb(),ue.Cb(ue.ab[0])),ue.ab.pop()}};a.PThread=ue;var ft=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=function(){var i=Ar(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],no(c,c-i),_r(c)};function hr(i){if(A)return H(2,0,i);Lt(i)}a.invokeEntryPoint=function(i,c){i=oo.apply(null,[i,c]),nt()?ue.kb(i):an(i)};function ot(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.nb(),this.pb(c),this.ob(f)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Ke=0,gr=0;function xt(i,c,f,$){return A?H(3,1,i,c,f,$):Ft(i,c,f,$)}function Ft(i,c,f,$){if(i>>>=0,c>>>=0,f>>>=0,$>>>=0,typeof SharedArrayBuffer>"u")return Y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var T=[];return A&&T.length===0?xt(i,c,f,$):(i={Gb:f,Xa:i,rb:$,Mb:T},A?(i.Ob="spawnThread",postMessage(i,T),0):Ht(i))}function jt(i,c,f){return A?H(4,1,i,c,f):0}function yr(i,c){if(A)return H(5,1,i,c)}var Ct=i=>{for(var c=0,f=0;f<i.length;++f){var $=i.charCodeAt(f);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++f):c+=3}return c},br=(i,c,f,$)=>{if(f>>>=0,!(0<$))return 0;var T=f;$=f+$-1;for(var M=0;M<i.length;++M){var U=i.charCodeAt(M);if(55296<=U&&57343>=U){var ne=i.charCodeAt(++M);U=65536+((U&1023)<<10)|ne&1023}if(127>=U){if(f>=$)break;c[f++>>>0]=U}else{if(2047>=U){if(f+1>=$)break;c[f++>>>0]=192|U>>6}else{if(65535>=U){if(f+2>=$)break;c[f++>>>0]=224|U>>12}else{if(f+3>=$)break;c[f++>>>0]=240|U>>18,c[f++>>>0]=128|U>>12&63}c[f++>>>0]=128|U>>6&63}c[f++>>>0]=128|U&63}}return c[f>>>0]=0,f-T},wr=(i,c,f)=>br(i,o(),c,f);function vr(i,c){if(A)return H(6,1,i,c)}function $r(i,c,f){if(A)return H(7,1,i,c,f)}function Sr(i,c,f){return A?H(8,1,i,c,f):0}function xr(i,c){if(A)return H(9,1,i,c)}function Mt(i,c,f){if(A)return H(10,1,i,c,f)}function qt(i,c,f,$){if(A)return H(11,1,i,c,f,$)}function Kt(i,c,f,$){if(A)return H(12,1,i,c,f,$)}function Yt(i,c,f,$){if(A)return H(13,1,i,c,f,$)}function Zt(i){if(A)return H(14,1,i)}function Xt(i,c){if(A)return H(15,1,i,c)}function Qt(i,c,f){if(A)return H(16,1,i,c,f)}var Jt=i=>{if(!_e)try{if(i(),!nt())try{A?an(Te):Lt(Te)}catch(c){c instanceof gt||c=="unwind"||y(1,c)}}catch(c){c instanceof gt||c=="unwind"||y(1,c)}};function Dt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(It),i+=128,Atomics.store(n(),i>>2,1))}a.__emscripten_thread_mailbox_await=Dt;function It(){var i=Ar();i&&(Dt(i),Jt(()=>to()))}a.checkMailbox=It;var yt=i=>i%4===0&&(i%100!==0||i%400===0),At=[0,31,60,91,121,152,182,213,244,274,305,335],er=[0,31,59,90,120,151,181,212,243,273,304,334];function l(i,c,f,$,T,M,U,ne){return A?H(17,1,i,c,f,$,T,M,U,ne):-52}function m(i,c,f,$,T,M,U){if(A)return H(18,1,i,c,f,$,T,M,U)}var g=i=>{var c=Ct(i)+1,f=nn(c);return f&&wr(i,f,c),f},x=[],E=(i,c)=>{x.length=0;var f;for(c>>=2;f=o()[i++>>>0];)c+=f!=105&c,x.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return x},G=i=>{var c=sn();return i=i(),_r(c),i};function H(i,c){var f=arguments.length-2,$=arguments;return G(()=>{for(var T=un(8*f),M=T>>3,U=0;U<f;U++){var ne=$[2+U];d()[M+U>>>0]=ne}return eo(i,f,T,c)})}var le=[],Z={},re=()=>{if(!Q){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:b||"./this.program"},c;for(c in Z)Z[c]===void 0?delete i[c]:i[c]=Z[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);Q=f}return Q},Q;function me(i,c){if(A)return H(19,1,i,c);i>>>=0,c>>>=0;var f=0;return re().forEach(function($,T){var M=c+f;for(T=s()[i+4*T>>2>>>0]=M,M=0;M<$.length;++M)r()[T++>>0>>>0]=$.charCodeAt(M);r()[T>>0>>>0]=0,f+=$.length+1}),0}function ye(i,c){if(A)return H(20,1,i,c);i>>>=0,c>>>=0;var f=re();s()[i>>2>>>0]=f.length;var $=0;return f.forEach(function(T){$+=T.length+1}),s()[c>>2>>>0]=$,0}function k(i){return A?H(21,1,i):52}function ie(i,c,f,$){return A?H(22,1,i,c,f,$):52}function ge(i,c,f,$,T){return A?H(23,1,i,c,f,$,T):70}var ht=[null,[],[]];function tr(i,c,f,$){if(A)return H(24,1,i,c,f,$);c>>>=0,f>>>=0,$>>>=0;for(var T=0,M=0;M<f;M++){var U=s()[c>>2>>>0],ne=s()[c+4>>2>>>0];c+=8;for(var J=0;J<ne;J++){var te=o()[U+J>>>0],se=ht[i];te===0||te===10?((i===1?D:Y)(fr(se,0)),se.length=0):se.push(te)}T+=ne}return s()[$>>2>>>0]=T,0}var jn=[31,29,31,30,31,30,31,31,30,31,30,31],qn=[31,28,31,30,31,30,31,31,30,31,30,31];function wu(i){var c=Array(Ct(i)+1);return br(i,c,0,c.length),c}var vu=(i,c)=>{r().set(i,c>>>0)};function Kn(i,c,f,$){function T(P,de,Se){for(P=typeof P=="number"?P.toString():P||"";P.length<de;)P=Se[0]+P;return P}function M(P,de){return T(P,de,"0")}function U(P,de){function Se(co){return 0>co?-1:0<co?1:0}var _t;return(_t=Se(P.getFullYear()-de.getFullYear()))===0&&(_t=Se(P.getMonth()-de.getMonth()))===0&&(_t=Se(P.getDate()-de.getDate())),_t}function ne(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function J(P){var de=P.Za;for(P=new Date(new Date(P.$a+1900,0,1).getTime());0<de;){var Se=P.getMonth(),_t=(yt(P.getFullYear())?jn:qn)[Se];if(de>_t-P.getDate())de-=_t-P.getDate()+1,P.setDate(1),11>Se?P.setMonth(Se+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+de);break}}return Se=new Date(P.getFullYear()+1,0,4),de=ne(new Date(P.getFullYear(),0,4)),Se=ne(Se),0>=U(de,P)?0>=U(Se,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,$>>>=0;var te=n()[$+40>>2>>>0];$={Kb:n()[$>>2>>>0],Jb:n()[$+4>>2>>>0],cb:n()[$+8>>2>>>0],ib:n()[$+12>>2>>>0],eb:n()[$+16>>2>>>0],$a:n()[$+20>>2>>>0],Wa:n()[$+24>>2>>>0],Za:n()[$+28>>2>>>0],Tb:n()[$+32>>2>>>0],Ib:n()[$+36>>2>>>0],Lb:te?Ue(te):""},f=Ue(f),te={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var se in te)f=f.replace(new RegExp(se,"g"),te[se]);var be="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),xe="January February March April May June July August September October November December".split(" ");te={"%a":P=>be[P.Wa].substring(0,3),"%A":P=>be[P.Wa],"%b":P=>xe[P.eb].substring(0,3),"%B":P=>xe[P.eb],"%C":P=>M((P.$a+1900)/100|0,2),"%d":P=>M(P.ib,2),"%e":P=>T(P.ib,2," "),"%g":P=>J(P).toString().substring(2),"%G":P=>J(P),"%H":P=>M(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),M(P,2)),"%j":P=>{for(var de=0,Se=0;Se<=P.eb-1;de+=(yt(P.$a+1900)?jn:qn)[Se++]);return M(P.ib+de,3)},"%m":P=>M(P.eb+1,2),"%M":P=>M(P.Jb,2),"%n":()=>`\n`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>M(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>M(Math.floor((P.Za+7-P.Wa)/7),2),"%V":P=>{var de=Math.floor((P.Za+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.Za-2)%7&&de++,de)de==53&&(Se=(P.Wa+371-P.Za)%7,Se==4||Se==3&&yt(P.$a)||(de=1));else{de=52;var Se=(P.Wa+7-P.Za-1)%7;(Se==4||Se==5&&yt(P.$a%400-1))&&de++}return M(de,2)},"%w":P=>P.Wa,"%W":P=>M(Math.floor((P.Za+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.$a+1900).toString().substring(2),"%Y":P=>P.$a+1900,"%z":P=>{P=P.Ib;var de=0<=P;return P=Math.abs(P)/60,(de?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(se in te)f.includes(se)&&(f=f.replace(new RegExp(se,"g"),te[se]($)));return f=f.replace(/\\0\\0/g,"%"),se=wu(f),se.length>c?0:(vu(se,i),se.length-1)}function Cr(i){try{i()}catch(c){Qe(c)}}function $u(i){var c={},f;for(f in i)(function($){var T=i[$];c[$]=typeof T=="function"?function(){Ir.push($);try{return T.apply(null,arguments)}finally{_e||(Ir.pop()===$||Qe(),at&&bt===1&&Ir.length===0&&(bt=0,Le+=1,Cr(io),typeof Fibers<"u"&&Fibers.Ub()))}}:T})(f);return c}var bt=0,at=null,Yn=0,Ir=[],Zn={},Xn={},Su=0,rn=null,xu=[];function Cu(){return new Promise((i,c)=>{rn={resolve:i,reject:c}})}function Iu(){var i=nn(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Ir[0];var f=Zn[c];return f===void 0&&(f=Su++,Zn[c]=f,Xn[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function Au(){var i=n()[at+8>>2>>>0];return i=q[Xn[i]],--Le,i()}function _u(i){if(!_e){if(bt===0){var c=!1,f=!1;i(($=0)=>{if(!_e&&(Yn=$,c=!0,f)){bt=2,Cr(()=>so(at)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),$=!1;try{var T=Au()}catch(ne){T=ne,$=!0}var M=!1;if(!at){var U=rn;U&&(rn=null,($?U.reject:U.resolve)(T),M=!0)}if($&&!M)throw T}}),f=!0,c||(bt=1,at=Iu(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Cr(()=>ao(at)))}else bt===2?(bt=0,Cr(uo),Qn(at),at=null,xu.forEach($=>Jt($))):Qe(`invalid state: ${bt}`);return Yn}}function Tu(i){return _u(c=>{i().then(c)})}ue.gb();var Eu=[null,Gt,hr,xt,jt,yr,vr,$r,Sr,xr,Mt,qt,Kt,Yt,Zt,Xt,Qt,l,m,me,ye,k,ie,ge,tr],Ou={r:function(i,c,f){return Tu(async()=>{await a.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new ot(i).gb(c>>>0,f>>>0),Ke=i,gr++,Ke},P:function(i){Jn(i>>>0,!v,1,!S,131072,!1),ue.lb()},n:function(i){i>>>=0,A?postMessage({cmd:"cleanupThread",thread:i}):Rt(i)},K:Ft,g:jt,V:yr,F:vr,H:$r,y:Sr,T:xr,L:Mt,S:qt,p:Kt,G:Yt,D:Zt,U:Xt,E:Qt,q:()=>!0,B:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>It()):A?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=ue.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},N:function(){return-1},O:Dt,X:function(i){I&&ue.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(yt(i.getFullYear())?At:er)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var $=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=$&&i.getTimezoneOffset()==Math.min($,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],$=c.getTimezoneOffset(),T=new Date(c.getFullYear(),6,1).getTimezoneOffset(),M=new Date(c.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(M,T);return 0>f?n()[i+32>>2>>>0]=+(T!=M&&U==$):0<f!=(U==$)&&(T=Math.max(M,T),c.setTime(c.getTime()+6e4*((0<f?U:T)-$))),n()[i+24>>2>>>0]=c.getDay(),f=(yt(c.getFullYear())?At:er)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,ro((mt=i,1<=+Math.abs(mt)?0<mt?+Math.floor(mt/4294967296)>>>0:~~+Math.ceil((mt-+(~~mt>>>0))/4294967296)>>>0:0)),i>>>0},s:l,t:m,A:function(i,c,f){function $(te){return(te=te.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?te[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var T=new Date().getFullYear(),M=new Date(T,0,1),U=new Date(T,6,1);T=M.getTimezoneOffset();var ne=U.getTimezoneOffset(),J=Math.max(T,ne);s()[i>>2>>>0]=60*J,n()[c>>2>>>0]=+(T!=ne),i=$(M),c=$(U),i=g(i),c=g(c),ne<T?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},e:()=>{Qe("")},c:function(i,c,f){return i>>>=0,c=E(c>>>0,f>>>0),kt[i].apply(null,c)},l:function(i,c,f){return i>>>=0,c=E(c>>>0,f>>>0),kt[i].apply(null,c)},o:function(){},k:function(){return Date.now()},W:()=>{throw Le+=1,"unwind"},C:function(){return 4294901760},d:()=>performance.timeOrigin+performance.now(),i:function(){return I?(bo(),zt(yo)).cpus().length:navigator.hardwareConcurrency},M:function(i,c,f,$){for(ue.Pb=c>>>0,le.length=f,c=$>>>0>>3,$=0;$<f;$++)le[$]=d()[c+$>>>0];return(0>i?kt[-i-1]:Eu[i]).apply(null,le)},z:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var $=c*(1+.2/f);$=Math.min($,i+100663296);var T=Math;$=Math.max(i,$);e:{T=T.min.call(T,4294901760,$+(65536-$%65536)%65536)-pe.buffer.byteLength+65535>>>16;try{pe.grow(T),ae();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Q:me,R:ye,J:Lt,h:k,m:ie,x:ge,j:tr,a:pe||a.wasmMemory,I:Kn,f:function(i,c,f,$){return Kn(i>>>0,c>>>0,f>>>0,$>>>0)}};(function(){function i(f,$){return f=f.exports,f=$u(f),q=f=ku(f),ue.mb.push(q.Da),Ee.unshift(q.Y),$e=$,pr(),f}var c={a:Ou};if(Wt(),a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){Y("Module.instantiateWasm callback failed with error: "+f),h(f)}return mr(c,function(f){i(f.instance,f.module)}).catch(h),{}})(),a._OrtInit=(i,c)=>(a._OrtInit=q.Z)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=q._)(i,c),a._OrtCreateSessionOptions=(i,c,f,$,T,M,U,ne,J,te)=>(a._OrtCreateSessionOptions=q.$)(i,c,f,$,T,M,U,ne,J,te),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=q.aa)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=q.ba)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=q.ca)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=q.da)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=q.ea)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=q.fa)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=q.ga)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=q.ha)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=q.ia)(i,c),a._OrtFree=i=>(a._OrtFree=q.ja)(i),a._OrtCreateTensor=(i,c,f,$,T,M)=>(a._OrtCreateTensor=q.ka)(i,c,f,$,T,M),a._OrtGetTensorData=(i,c,f,$,T)=>(a._OrtGetTensorData=q.la)(i,c,f,$,T),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=q.ma)(i),a._OrtCreateRunOptions=(i,c,f,$)=>(a._OrtCreateRunOptions=q.na)(i,c,f,$),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=q.oa)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=q.pa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=q.qa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=q.ra)(i,c,f),a._OrtBindOutput=(i,c,f,$)=>(a._OrtBindOutput=q.sa)(i,c,f,$),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=q.ta)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=q.ua)(i),a._OrtRunWithBinding=(i,c,f,$,T)=>(a._OrtRunWithBinding=q.va)(i,c,f,$,T),a._OrtRun=(i,c,f,$,T,M,U,ne)=>(a._OrtRun=q.wa)(i,c,f,$,T,M,U,ne),a._OrtEndProfiling=i=>(a._OrtEndProfiling=q.xa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=q.ya)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=q.za)(i);var Ar=a._pthread_self=()=>(Ar=a._pthread_self=q.Aa)(),nn=a._malloc=i=>(nn=a._malloc=q.Ba)(i),Qn=a._free=i=>(Qn=a._free=q.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=q.Da)();var Jn=a.__emscripten_thread_init=(i,c,f,$,T,M)=>(Jn=a.__emscripten_thread_init=q.Fa)(i,c,f,$,T,M);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=q.Ga)();var eo=(i,c,f,$)=>(eo=q.Ha)(i,c,f,$),on=i=>(on=q.Ia)(i),an=a.__emscripten_thread_exit=i=>(an=a.__emscripten_thread_exit=q.Ja)(i),to=a.__emscripten_check_mailbox=()=>(to=a.__emscripten_check_mailbox=q.Ka)(),ro=i=>(ro=q.La)(i),no=(i,c)=>(no=q.Ma)(i,c),sn=()=>(sn=q.Na)(),_r=i=>(_r=q.Oa)(i),un=i=>(un=q.Pa)(i),oo=a.dynCall_ii=(i,c)=>(oo=a.dynCall_ii=q.Ra)(i,c),ao=i=>(ao=q.Sa)(i),io=()=>(io=q.Ta)(),so=i=>(so=q.Ua)(i),uo=()=>(uo=q.Va)();a.___start_em_js=1440345,a.___stop_em_js=1440506;function ku(i){i=Object.assign({},i);var c=$=>()=>$()>>>0,f=$=>T=>$(T)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}a.keepRuntimeAlive=nt,a.wasmMemory=pe,a.stackAlloc=un,a.stackSave=sn,a.stackRestore=_r,a.UTF8ToString=Ue,a.stringToUTF8=wr,a.lengthBytesUTF8=Ct,a.ExitStatus=gt,a.PThread=ue;var Tr;St=function i(){Tr||lo(),Tr||(St=i)};function lo(){function i(){if(!Tr&&(Tr=!0,a.calledRun=!0,!_e)&&(A||ft(Ee),p(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!A)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var c=a.postRun.shift();ze.unshift(c)}ft(ze)}}if(!(0<qe))if(A)p(a),A||ft(Ee),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)Ye.unshift(a.preRun.shift());ft(Ye),0<qe||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),i()},1)):i())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return lo(),t.ready}})();typeof vo=="object"&&typeof hn=="object"?hn.exports=wo:typeof define=="function"&&define.amd&&define([],()=>wo)});var So=rr((Rc,Wu)=>{Wu.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var bn,or,ar,kr,ir,To,wn,We=F(()=>{"use strict";bn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},or=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},ar=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],kr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},ir=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},To=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",wn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Ku,Yu,Eo,Oo,ko,Zu,Re,wt=F(()=>{"use strict";We();Ku=["V","I","W","E","F"],Yu=(e,t)=>{console.log(`[${Ku[e]},${new Date().toISOString()}]${t}`)},ko=(e,t)=>{Eo=e,Oo=t},Zu=(e,t)=>{let r=ir(e),o=ir(Eo);r>=o&&Yu(r,typeof t=="function"?t():t)},Re=(...e)=>{Oo&&Zu(...e)}});var Po,Ro=F(()=>{"use strict";We();Po=(e,t)=>new(kr(t))(e)});var Pr=F(()=>{"use strict"});var Rr,Xu,Bo,$n,vn,Do,zo=F(()=>{"use strict";wt();Pr();Rr=e=>Math.ceil(e/16)*16,Xu=1,Bo=()=>Xu++,$n=async(e,t,r,o)=>{let n=Rr(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(d,0,r)),a}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},vn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Rr(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,d.gpuData.buffer,0,u),Re("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Rr(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=Bo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Re("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Rr(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let d={id:Bo(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Re("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Re("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await $n(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Do=(...e)=>new vn(...e)});var Sn,ee,ke=F(()=>{"use strict";Sn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},ee=e=>new Sn(e)});var xn,it,W,Tt,Br,Mr,Dr,we=F(()=>{"use strict";xn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},it=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(o){if(n<2||s<2)return;let a=xn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[d[u-2],d[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;d[u-a]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},W=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Tt=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=o.length?o.push(r[d+2]):o[d]=r[d+2];for(let d=0;d<o.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<o.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<o.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<o.length;d++){if(o[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=o[d]||u[d+o.length]>=o[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,d)}}static computePoolOutputShape(t,r,o,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,d),a}static computeConvOutputShape(t,r,o,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,d),a}static computeShapeHelper(t,r,o,n,s,u,d,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,d,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let w=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(w+1)/2:w/2),s[d]=w-s[u],Math.floor((t+w-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},Br=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,d,a;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==d)throw new Error("dimension mismatch");if(u<=0||a<=0||d<=0)throw new Error("invalid shape specified");if(s&&!it.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,d]}},Mr=-34028234663852886e22,Dr=34028234663852886e22});var Qu,Vo,Ce,fe,je,He,Je,et,Wo,N,j,Cn,No,In,Pe,ve=F(()=>{"use strict";We();we();Qu=64,Vo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ce=(e,t=1)=>{let r=Vo(e,t);return typeof r=="string"?r:r[0]},fe=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:W.computeStrides(e)}],je=e=>e%4===0?4:e%2===0?2:1,He=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Je=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,et=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Wo=(e,t,r,o,n,s=!1)=>{let u=typeof r=="number",d=u?r:r.length,a=[...new Array(d).keys()],p=d<2?"u32":d<=4?`vec${d}<u32>`:`array<u32, ${d}>`,h=Vo(t,n),w=typeof h=="string"?h:h[1],b=typeof h=="string"?h:h[0],y={indices:p,value:w,storage:b,tensor:t},S=L=>typeof L=="string"?L:`${L}u`,v={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},I=u||s?"uniforms.":"",A=`${I}${e}_shape`,C=`${I}${e}_strides`,R="";for(let L=0;L<d-1;L++)R+=`\n    let dim${L} = current / ${C}[${L}];\n    let rest${L} = current % ${C}[${L}];\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;R+=`indices[${d-1}] = current;`;let _=d<2?"":`\n  fn o2i_${e}(offset: u32) -> ${y.indices} {\n    var indices: ${y.indices};\n    var current = offset;\n    ${R}\n    return indices;\n  }`,B=L=>(v.offsetToIndices=!0,d<2?L:`o2i_${e}(${L})`),O=[];if(d>=2)for(let L=d-1;L>=0;L--)O.push(`${C}[${L}] * (indices[${L}])`);let V=d<2?"":`\n  fn i2o_${e}(indices: ${y.indices}) -> u32 {\n    return ${O.join("+")};\n  }`,z=L=>(v.indicesToOffset=!0,d<2?L:`i2o_${e}(${L})`),K=(...L)=>d===0?"0u":`${y.indices}(${L.map(S).join(",")})`,X=(L,ae)=>d<2?`${L}`:`${L}[${ae}]`,D=(L,ae,he)=>d<2?`${L}=${he};`:`${L}[${ae}]=${he};`,Y={},Ae=(L,ae)=>{v.broadcastedIndicesToOffset=!0;let he=`${ae.name}broadcastedIndicesTo${e}Offset`;if(he in Y)return`${he}(${L})`;let Ye=[];for(let Ee=d-1;Ee>=0;Ee--){let ze=ae.indicesGet("outputIndices",Ee+ae.rank-d);Ye.push(`${X(C,Ee)} * (${ze} % ${X(A,Ee)})`)}return Y[he]=`fn ${he}(outputIndices: ${ae.type.indices}) -> u32 {\n             return ${Ye.length>0?Ye.join("+"):"0u"};\n           }`,`${he}(${L})`},oe=(L,ae)=>(()=>{if(y.storage===y.value)return`${e}[${L}]=${ae};`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${ae}), select(0u, 0xFFFFFFFFu, ${ae} < 0));`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${ae}), 0u);`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ae}));`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),pe=L=>(()=>{if(y.storage===y.value)return`${e}[${L}]`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`i32(${e}[${L}].x)`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`u32(${e}[${L}].x)`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),q=d<2?"":`\n  fn get_${e}ByIndices(indices: ${y.indices}) -> ${w} {\n    return ${pe(`i2o_${e}(indices)`)};\n  }`,$e=d<2?"":(()=>{let L=a.map(he=>`d${he}: u32`).join(", "),ae=a.map(he=>`d${he}`).join(", ");return`\n  fn get_${e}(${L}) -> ${w} {\n    return get_${e}ByIndices(${K(ae)});\n  }`})(),_e=(...L)=>{if(L.length!==d)throw new Error(`indices length must be ${d}`);let ae=L.map(S).join(",");return d===0?pe("0u"):d===1?pe(ae[0]):(v.get=!0,v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}(${ae})`)},Te=L=>d<2?pe(L):(v.getByIndices=!0,v.indicesToOffset=!0,`get_${e}ByIndices(${L})`),ce=d<2?"":`\n  fn set_${e}ByIndices(indices: ${y.indices}, value: ${w}) {\n    ${oe(`i2o_${e}(indices)`,"value")}\n  }`,Fe=d<2?"":(()=>{let L=a.map(he=>`d${he}: u32`).join(", "),ae=a.map(he=>`d${he}`).join(", ");return`\n  fn set_${e}(${L}, value: ${w}) {\n    set_${e}ByIndices(${K(ae)}, value);\n  }`})();return{impl:()=>{let L=[];return u||(L.push(`const ${A} = ${y.indices}(${r.join(",")});`),L.push(`const ${C} = ${y.indices}(${W.computeStrides(r).join(",")});`)),v.offsetToIndices&&L.push(_),v.indicesToOffset&&L.push(V),v.broadcastedIndicesToOffset&&Object.values(Y).forEach(ae=>L.push(ae)),v.set&&L.push(Fe),v.setByIndices&&L.push(ce),v.get&&L.push($e),v.getByIndices&&L.push(q),L.join(`\n`)},type:y,offsetToIndices:B,indicesToOffset:z,broadcastedIndicesToOffset:Ae,indices:K,indicesGet:X,indicesSet:D,set:(...L)=>{if(L.length!==d+1)throw new Error(`indices length must be ${d}`);let ae=L[d];if(typeof ae!="string")throw new Error("value must be string");let he=L.slice(0,d).map(S).join(",");return d===0?oe("0u",ae):d===1?oe(he[0],ae):(v.set=!0,v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}(${he}, ${ae})`)},setByOffset:oe,setByIndices:(L,ae)=>d<2?oe(L,ae):(v.setByIndices=!0,v.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${ae});`),get:_e,getByOffset:pe,getByIndices:Te,usage:o?"input":"output",name:e,strides:C,shape:A,rank:d,uniformOnly:s}},N=(e,t,r,o=1,n=!1)=>Wo(e,t,r,!0,o,n),j=(e,t,r,o=1)=>Wo(e,t,r,!1,o),Cn=class{constructor(t){this.normalizedDispatchGroup=t;this.indicesHelpers=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=Qu){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}declareVariable(t,r=-1){if(this.indicesHelpers.push(t),t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices})),t.uniformOnly)return"";let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>r.uniformOnly===!0?this.declareVariable(r):this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o}of this.uniforms)t.push(`${r}:${o}`);return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.indicesHelpers.map(t=>t.impl()).join(`\n`)}},No=e=>new Cn(e),In=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},Pe=e=>e<=4});var Ju,Uo,el,tl,tt,Ho,Go,Vt=F(()=>{"use strict";we();ke();ve();Ju=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Uo=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,el=(e,t)=>W.sortBasedOnPerm(e,Uo(e.length,t)),tl=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},tt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Uo(o,t),s=Pe(o),u=el(e.dims,n),d=s?u.length:u,a=s?o:e.dims,p=j("output",r,d),h=N("a",r,a),w=b=>`\n  ${b.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${tl(n,o,h,p)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:b=>{let y=W.size(u);return{outputs:[{dims:u,dataType:b[0].dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:s?[{type:"uint32",data:y},...fe(b[0].dims),...fe(u)]:[{type:"uint32",data:y}]}},getShaderSource:w}},Ho=(e,t)=>{Ju(e.inputs),e.compute(tt(e.inputs[0],t.perm))},Go=e=>ee({perm:e.perm})});var rl,nl,ol,al,il,sl,ul,ll,dl,cl,st,Lo,Fo,jo,qo,Ko,Yo,Zo,Xo,Qo,Jo,ea=F(()=>{"use strict";we();ve();zr();Vt();rl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},nl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},ol={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},al={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},il=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},sl=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},ul=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},ll=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},dl=(e,t)=>{let r=[];if(!ll(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},cl=(e,t,r,o,n,s,u)=>{let d=r[0].dims,a=W.size(s),p=W.size(u),h=N("_A",r[0].dataType,d),w=j("output",n,s),b=32,y=`\n          var<workgroup> aBestValues : array<${w.type.storage}, ${b}>;\n       `;return{name:e,shaderCache:t,getShaderSource:v=>`\n        ${v.registerUniform("reduceSize","u32").declareVariables(h,w)}\n        ${y}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${v.mainStart(b)}\n          let local_idx = local_id.x;\n\n          let outputIndex = global_idx / ${b};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${w.type.storage}(${ol[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${b}) {\n           let candidate = ${w.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${rl[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${b}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${nl[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${w.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${w.type.storage}(uniforms.reduceSize)`:`${al[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},st=(e,t,r,o)=>{let n=e.inputs.length===1?r:An(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((y,S)=>S));let u=W.normalizeAxes(s,e.inputs[0].dims.length),d=u,a=e.inputs[0],p=dl(d,e.inputs[0].dims.length);p.length>0&&(a=e.compute(tt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=il(d.length,a.dims.length));let[h,w]=sl(a.dims,d),b=h;n.keepDims&&(b=ul(h,u)),e.compute(cl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,b,w),{inputs:[a]})},Lo=(e,t)=>{st(e,"ReduceMeanShared",t,"mean")},Fo=(e,t)=>{st(e,"ReduceL1Shared",t,"l1")},jo=(e,t)=>{st(e,"ReduceL2Shared",t,"l2")},qo=(e,t)=>{st(e,"ReduceLogSumExpShared",t,"logSumExp")},Ko=(e,t)=>{st(e,"ReduceMaxShared",t,"max")},Yo=(e,t)=>{st(e,"ReduceMinShared",t,"min")},Zo=(e,t)=>{st(e,"ReduceProdShared",t,"prod")},Xo=(e,t)=>{st(e,"ReduceSumShared",t,"sum")},Qo=(e,t)=>{st(e,"ReduceSumSquareShared",t,"sumSquare")},Jo=(e,t)=>{st(e,"ReduceLogSumShared",t,"logSum")}});var ut,pl,Vr,An,lt,ml,fl,hl,gl,yl,bl,wl,vl,$l,Sl,dt,ta,ra,na,oa,aa,ia,sa,ua,la,da,rt,zr=F(()=>{"use strict";we();ke();ve();ea();ut=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},pl=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],Vr=(e,t,r,o,n,s,u=!1,d=!1)=>{let a=[],p=r[0].dims,h=W.normalizeAxes(n,r[0].dims.length),w=!d&&h.length===0;p.forEach((V,z)=>{w||h.indexOf(z)>=0?u&&a.push(1):a.push(V)});let b=[],y=N("_A",r[0].dataType,p),S=j("output",s,a),v=o(y,S,h),I=`inputOffset = ${y.indicesToOffset("inputIndices")};`,A=`let ${I};`,C=`var ${I};`,R=v[1]===""?"":C,_=(v[1]===""?A:I)+`\n`+v[2];for(let V=0,z=0;V<r[0].dims.length;V++)w||h.indexOf(V)>=0?(u&&z++,_=`for(var j${V}: u32 = 0; j${V} < ${r[0].dims[V]}; j${V}++) {\n                ${v[2].includes("lastIndex")?`let lastIndex = j${V};`:""}\n                ${y.indicesSet("inputIndices",V,`j${V}`)}\n                ${_}\n              }`):(b.push(`${y.indicesSet("inputIndices",V,S.indicesGet("outputIndices",z))};`),z++);let B=W.size(a);return{name:e,shaderCache:t,getShaderSource:V=>`\n        ${V.declareVariables(y,S)}\n\n        ${V.mainStart()}\n          ${V.guardAgainstOutOfBoundsWorkgroupSizes(B)}\n          var inputIndices: ${y.type.indices};\n          let outputIndices = ${S.offsetToIndices("global_idx")};\n\n          ${b.join(`\n`)}\n          ${v[0]}       // init ops for reduce max/min\n          ${R}\n          ${v[1]}\n          ${_}\n          ${v[3]}\n          ${v.length===4?S.setByOffset("global_idx","value"):v.slice(4).join(`\n`)}\n        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(B/64)}})}},An=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),ee({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},lt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:An(n,r);e.compute(Vr(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?pl:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},ml=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,"value = log(value);"])},fl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByOffset("inputOffset")});`,""])},hl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},gl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByOffset("inputOffset")});`,"value = log(value);"])},yl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(o.indicesSet("inputIndices",d,0));return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = max(value, ${o.getByOffset("inputOffset")});`,""]})},bl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${o.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},wl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = min(value, ${o.getByOffset("inputOffset")});`,""]})},vl=(e,t)=>{ut(e.inputs),lt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByOffset("inputOffset")};`,""])},$l=(e,t)=>{ut(e.inputs),lt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,""])},Sl=(e,t)=>{ut(e.inputs),lt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += t * t;`,""])},dt=(e,t,r)=>{if(t.length===0)return!!r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},ta=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bl(e,t):Lo(e,t)},ra=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?fl(e,t):Fo(e,t)},na=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?hl(e,t):jo(e,t)},oa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?gl(e,t):qo(e,t)},aa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yl(e,t):Ko(e,t)},ia=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wl(e,t):Yo(e,t)},sa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vl(e,t):Zo(e,t)},ua=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$l(e,t):Xo(e,t)},la=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sl(e,t):Qo(e,t)},da=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ml(e,t):Jo(e,t)},rt=e=>ee(e)});var ca,pa,ma,_n,fa=F(()=>{"use strict";We();ke();zr();ca=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},pa=(e,t)=>{ca(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Vr("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ma=(e,t)=>{ca(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Vr("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},_n=e=>ee(e)});var xl,ha,Cl,Il,Al,Wr,_l,ga,Tn=F(()=>{"use strict";ke();Pr();ve();xl=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let w=n.dims[0]/3,b=w,y=b;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let R of t.qkvHiddenSizes)if(R%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");w=t.qkvHiddenSizes[0],b=t.qkvHiddenSizes[1],y=t.qkvHiddenSizes[2]}let S=p;if(w!==b)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==w+b+y)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let v=0;if(u){if(b!==y)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==b/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(v=u.dims[3])}let I=S+v,A=-1,C=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:v,kvSequenceLength:S,totalSequenceLength:I,maxSequenceLength:A,inputHiddenSize:h,hiddenSize:w,vHiddenSize:y,headSize:Math.floor(w/t.numHeads),vHeadSize:Math.floor(y/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:C,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ha=e=>ee({...e}),Cl=(e,t,r,o)=>{let n=je(o),s=j("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let d=Ce(t.dataType),a=64,p=o/n;p<a?a=1:p/8<64&&(a=Math.ceil(p/8));let h=Math.ceil(o/n/a),w=b=>`\n  const dInv: ${d} = 1 / ${o};\n  const dComp = ${o/n};\n  var<workgroup> wgMax: array<f32, ${a}>;\n  var<workgroup> wgSum: array<f32, ${a}>;\n\n  ${b.declareVariables(s)}\n  @compute @workgroup_size(${a}, 1, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_index : u32) {\n    let localOffset = local_index * ${h};\n    let offset: u32 = workgroup_id.x * dComp + localOffset;\n\n    var threadMaxVector = ${He("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      threadMaxVector = max(${Je(d,n,"x[offset + i]")}, threadMaxVector);\n    }\n    wgMax[local_index] = ${u};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${a}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${He("f32",n,"0")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      sumVector += exp(${Je(d,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_index] = ${et("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${a}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        x[offset + i] = ${He(d,n,"dInv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        let f32input = ${Je(d,n,"x[offset + i]")};\n        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o}`},getShaderSource:w,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Il=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=Ce(t.dataType),p=je(n.headSize),h=N("q",t.dataType,t.dims,p),w=N("key",r.dataType,r.dims,p),b=j("output",t.dataType,u),y=n.headSize/p,S=n.sequenceLength,v=n.totalSequenceLength,I=y,A=12,C={x:Math.ceil(n.totalSequenceLength/A),y:Math.ceil(n.sequenceLength/A),z:n.batchSize*n.numHeads},R=[t,r],_=O=>`\n  const M: u32 = ${S}u;\n  const N: u32 = ${v}u;\n  const K: u32 = ${I}u;\n  const alpha: ${a} = ${d};\n  const beta: ${a} = 1.0;\n  const TILE_SIZE = ${A}u;\n\n  var<workgroup> tileQ: array<${h.type.storage}, ${A*A}>;\n  var<workgroup> tileK: array<${h.type.storage}, ${A*A}>;\n\n  ${O.declareVariables(h,w,b)}\n\n  @compute @workgroup_size(${A}, ${A}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${C.x*C.y}u +\n          workgroup_id.y * ${C.x}u + workgroup_id.x) * ${A*A}u + local_index;\n\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = ${n.sequenceLength*y} * headIdx + m * K;\n    let kOffset = ${n.kvSequenceLength*y} * headIdx + n * K;\n\n    var value = ${He(a,p)};\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m + local_id.y < M && w + local_id.x < K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];\n      }\n      if (n + local_id.y < N && w + local_id.x < K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * M * N;\n    if (lm < M && ln < N) {\n      let outputIdx = headOffset + lm * N + ln;\n      output[outputIdx] = ${et("value",p)} * alpha;\n    }\n  }`,B=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:C}),getShaderSource:_},{inputs:R,outputs:[-1]})[0];return Cl(e,B,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),B},Al=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=N("probs",t.dataType,t.dims),u=N("v",r.dataType,r.dims),d=j("output",t.dataType,n),a=Ce(t.dataType),p=12,h={x:Math.ceil(o.vHeadSize/p),y:Math.ceil(o.sequenceLength/p),z:o.batchSize*o.numHeads},w=b=>`\n  const M: u32 = ${o.sequenceLength}u;\n  const N: u32 = ${o.vHeadSize}u;\n  const K: u32 = ${o.totalSequenceLength}u;\n  const numHeads: u32 = ${o.numHeads}u;\n  const TILE_SIZE = ${p}u;\n\n  var<workgroup> tileQ: array<${s.type.storage}, ${p*p}>;\n  var<workgroup> tileK: array<${s.type.storage}, ${p*p}>;\n\n  ${b.declareVariables(s,u,d)}\n\n  @compute @workgroup_size(${p}, ${p}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${h.x*h.y}u +\n          workgroup_id.y * ${h.x}u + workgroup_id.x) * ${p*p}u + local_index;\n\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (M * K) + m * K;\n   let offsetB = headIdx * (N * K) + n;\n\n   var value = ${a}(0);\n   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n     if (m < M && w + local_id.x < K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < N && w + local_id.y < K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / ${o.numHeads};\n   let currentBatchHeadNumber = workgroup_id.z % ${o.numHeads};\n   let headOffset = (batchIdx * M * ${o.numHeads} + currentBatchHeadNumber) * ${o.vHeadSize};\n   if (m < M && n < N) {\n     let outputIdx = batchIdx * ${o.sequenceLength*o.vHiddenSize} + m * ${o.vHiddenSize}\n       + currentBatchHeadNumber * ${o.vHeadSize} + n;\n     output[outputIdx] = value;\n   }\n  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(o)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h}),getShaderSource:w},{inputs:[t,r],outputs:[0]})[0]},Wr=(e,t,r,o,n,s,u,d,a,p,h)=>{let w=Il(e,t,r,a,p,h);Al(e,w,o,p)},_l=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=Ce(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,d=12,a={x:Math.ceil(t.headSize/d),y:Math.ceil(t.sequenceLength/d),z:t.batchSize*t.numHeads},p=()=>`\n  const M: u32 = ${n}u;\n  const K: u32 = ${s}u;\n  const N: u32 = ${u}u;\n  const numHeads: u32 = ${t.numHeads};\n  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileInput: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightQ: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightK: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightV: array<${o}, ${d*d}>;\n\n  @group(0) @binding(0) var<storage, read> input: array<${o}>;\n  @group(0) @binding(1) var<storage, read> weight: array<${o}>;\n  @group(0) @binding(2) var<storage, read> bias: array<${o}>;\n  @group(0) @binding(3) var<storage, read_write> outputQ: array<${o}>;\n  @group(0) @binding(4) var<storage, read_write> outputK: array<${o}>;\n  @group(0) @binding(5) var<storage, read_write> outputV: array<${o}>;\n\n  @compute @workgroup_size(${d}, ${d}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${a.x*a.y}u +\n          workgroup_id.y * ${a.x}u + workgroup_id.x) * ${d*d}u + local_index;\n\n    let batchIndex = workgroup_id.z / ${t.numHeads};\n    let headNumber = workgroup_id.z % ${t.numHeads};\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (M * K) + m * K;\n    let biasOffsetQ = headNumber * ${t.headSize};\n    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;\n    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;\n\n    var valueQ = ${o}(0);\n    var valueK = ${o}(0);\n    var valueV = ${o}(0);\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m < M && w + local_id.x < K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < N && w + local_id.y < K) {\n        let offset = n + (w + local_id.y) * ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * N + n) % ${t.headSize};\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * M * N;\n    if (m < M && n < N) {\n      let outputIdx = offset + m * N + n;\n      outputQ[outputIdx] = valueQ;\n      outputK[outputIdx] = valueK;\n      outputV[outputIdx] = valueV;\n    }\n  }`,h=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a}),getShaderSource:p},{inputs:h,outputs:[-1,-1,-1]})},ga=(e,t)=>{let r=xl(e.inputs,t),[o,n,s]=_l(e,r);return Wr(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Nr=F(()=>{});var ya=F(()=>{Nr()});var ba,wa=F(()=>{ba="1.17.0"});var va,En,$a=F(()=>{wa();va="warning",En={wasm:{},webgl:{},webgpu:{},versions:{common:ba},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);va=e}},get logLevel(){return va}};Object.defineProperty(En,"logLevel",{enumerable:!0})});var Ur,Sa=F(()=>{$a();Ur=En});var xa=F(()=>{});var Ca=F(()=>{Hr()});var Aa=F(()=>{});var _a=F(()=>{Hr()});var Hr=F(()=>{xa();Ca();Aa();_a()});var Gr=F(()=>{Hr()});var Ta=F(()=>{Nr();Gr()});var Ea=F(()=>{Ta()});var Oa=F(()=>{});var ka=F(()=>{Nr();Gr()});var Pa=F(()=>{ka()});var On=F(()=>{ya();Sa();Ea();Gr();Oa();Pa()});var Ol,kl,Pl,Ra,Ba=F(()=>{"use strict";On();we();ke();ve();Ol=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,a)=>{if(d!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},kl=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?je(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,a=W.size(s)/u,p=Pe(s.length)&&o,h=p?s.length:s,w=N("x",e[0].dataType,e[0].dims,u),b=N("scale",e[1].dataType,e[1].dims,d),y=N("bias",e[2].dataType,e[2].dims,d),S=N("inputMean",e[3].dataType,e[3].dims,d),v=N("inputVar",e[4].dataType,e[4].dims,d),I=j("y",e[0].dataType,h,u),A=()=>{let R="";if(o)R=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")R=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{R=`var cIndices = ${b.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let _=1;_<b.rank;_++)R+=`cIndices[${_}] = outputIndices[${_}];`;R+=`let cOffset = ${b.indicesToOffset("cIndices")};`}return R},C=R=>`\n  const epsilon = ${r};\n  ${R.registerUniform("outputSize","u32").declareVariables(w,b,y,S,v,I)}\n  ${R.mainStart()}\n  ${R.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};\n    ${A()}\n    let scale = ${b.getByOffset("cOffset")};\n    let bias = ${y.getByOffset("cOffset")};\n    let inputMean = ${S.getByOffset("cOffset")};\n    let inputVar = ${v.getByOffset("cOffset")};\n    let x = ${w.getByOffset("global_idx")};\n    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:C,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...fe(s)]:[{type:"uint32",data:a}]})}},Pl=e=>ee(e),Ra=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Pl({...t,outputCount:o});if(Ur.webgpu.validateInputContent&&Ol(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(kl(r,n))}});var Rl,Bl,Ma,Da=F(()=>{"use strict";we();ve();Rl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Bl=e=>{let t=e[0].dims,r=e[0].dims[2],o=W.size(t)/4,n=e[0].dataType,s=N("input",n,t,4),u=N("bias",n,[r],4),d=N("residual",n,t,4),a=j("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,d,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},Ma=e=>{Rl(e.inputs),e.compute(Bl(e.inputs))}});var Ml,Ie,za,Va,Wa,Na,Ua,Ha,Ga,La,Fa,Dl,ja,qa,Ka,Ya,Lr,Za,Fr,Xa,Qa,Ja,ei,ti,ri,ni,oi,ai,ii,si,ui,li,di,ci,pi,mi,kn=F(()=>{"use strict";We();we();ke();ve();Ml=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let a=N("inputData",r,[u],4),p=j("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",d)}\n  }`},Ie=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Ml(u,W.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(W.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(e.dims)/4)}]})}),za=e=>{e.compute(Ie(e.inputs[0],"Abs","abs"))},Va=e=>{e.compute(Ie(e.inputs[0],"Acos","acos"))},Wa=e=>{e.compute(Ie(e.inputs[0],"Acosh","acosh"))},Na=e=>{e.compute(Ie(e.inputs[0],"Asin","asin"))},Ua=e=>{e.compute(Ie(e.inputs[0],"Asinh","asinh"))},Ha=e=>{e.compute(Ie(e.inputs[0],"Atan","atan"))},Ga=e=>{e.compute(Ie(e.inputs[0],"Atanh","atanh"))},La=e=>ee(e),Fa=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Ie(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Dl=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:Mr,r=e.length>=3?e[2].getFloat32Array()[0]:Dr;return ee({min:t,max:r})},ja=(e,t)=>{let r=e.inputs.length===1?t:Dl(e.inputs),o=Ce(e.inputs[0].dataType);e.compute(Ie(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},qa=e=>{e.compute(Ie(e.inputs[0],"Ceil","ceil"))},Ka=e=>{e.compute(Ie(e.inputs[0],"Cos","cos"))},Ya=e=>{e.compute(Ie(e.inputs[0],"Cosh","cosh"))},Lr=e=>ee(e),Za=(e,t)=>{e.compute(Ie(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`\n  const elu_alpha_: f32 = f32(${t.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Fr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,Xa=e=>{let t=Ce(e.inputs[0].dataType);e.compute(Ie(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Fr(`vec4<${t}>`,t)))},Qa=e=>{e.compute(Ie(e.inputs[0],"Exp","exp"))},Ja=e=>{e.compute(Ie(e.inputs[0],"Floor","floor"))},ei=e=>{let t=Ce(e.inputs[0].dataType);e.compute(Ie(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Fr(`vec4<${t}>`,t)))},ti=(e,t)=>{e.compute(Ie(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},ri=e=>{e.compute(Ie(e.inputs[0],"Not",t=>`!${t}`))},ni=e=>{e.compute(Ie(e.inputs[0],"Neg",t=>`-${t}`))},oi=e=>{e.compute(Ie(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ai=e=>{e.compute(Ie(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},ii=e=>{e.compute(Ie(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},si=e=>{e.compute(Ie(e.inputs[0],"Sin","sin"))},ui=e=>{e.compute(Ie(e.inputs[0],"Sinh","sinh"))},li=e=>{e.compute(Ie(e.inputs[0],"Sqrt","sqrt"))},di=e=>{e.compute(Ie(e.inputs[0],"Tan","tan"))},ci=e=>{e.compute(Ie(e.inputs[0],"Tanh","tanh"))},pi=(e,t)=>(e.compute(Ie(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),mi=e=>{e.compute(Ie(e.inputs[0],"Log","log"))}});var Vl,Wl,fi,hi=F(()=>{"use strict";we();ve();kn();Vl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Wl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=N("input",e[0].dataType,e[0].dims,4),o=N("bias",e[0].dataType,[e[0].dims[2]],4),n=j("output",e[0].dataType,t,4),s=W.size(t)/4,u=Ce(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${Fr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},fi=e=>{Vl(e.inputs),e.compute(Wl(e.inputs))}});var Nl,Ul,ct,gi,yi,bi,wi,vi,$i,Si,xi,Ci,Ii,Ai=F(()=>{"use strict";We();we();ve();Nl=(e,t,r,o,n,s,u,d,a,p,h,w,b)=>{let y,S;typeof d=="string"?y=S=(O,V)=>`${d}((${O}),(${V}))`:typeof d=="function"?y=S=d:(y=d.scalar,S=d.vector);let v=w?t.length:t,I=w?r.length:r,A=w?o.length:o,C=j("outputData",h,A,4),R=N("aData",a,v,4),_=N("bData",p,I,4),B;if(n)if(s){let O=W.size(t)===1,V=W.size(r)===1,z=t.length>0&&t[t.length-1]%4===0,K=r.length>0&&r[r.length-1]%4===0;O||V?B=C.setByOffset("global_idx",S(O?`${R.type.value}(${R.getByOffset("0")}.x)`:R.getByOffset("global_idx"),V?`${_.type.value}(${_.getByOffset("0")}.x)`:_.getByOffset("global_idx"))):B=`\n            let outputIndices = ${C.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${R.broadcastedIndicesToOffset("outputIndices",C)};\n            let offsetB = ${_.broadcastedIndicesToOffset("outputIndices",C)};\n            ${C.setByOffset("global_idx",S(u||z?R.getByOffset("offsetA / 4u"):`${R.type.value}(${R.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||K?_.getByOffset("offsetB / 4u"):`${_.type.value}(${_.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else B=C.setByOffset("global_idx",S(R.getByOffset("global_idx"),_.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let O=(V,z,K="")=>{let X=`aData[indexA${z}][componentA${z}]`,D=`bData[indexB${z}][componentB${z}]`;return`\n            let outputIndices${z} = ${C.offsetToIndices(`global_idx * 4u + ${z}u`)};\n            let offsetA${z} = ${R.broadcastedIndicesToOffset(`outputIndices${z}`,C)};\n            let offsetB${z} = ${_.broadcastedIndicesToOffset(`outputIndices${z}`,C)};\n            let indexA${z} = offsetA${z} / 4u;\n            let indexB${z} = offsetB${z} / 4u;\n            let componentA${z} = offsetA${z} % 4u;\n            let componentB${z} = offsetB${z} % 4u;\n            ${V}[${z}] = ${K}(${y(X,D)});\n          `};h===9?B=`\n            var data = vec4<u32>(0);\n            ${O("data",0,"u32")}\n            ${O("data",1,"u32")}\n            ${O("data",2,"u32")}\n            ${O("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`\n            ${O("outputData[global_idx]",0)}\n            ${O("outputData[global_idx]",1)}\n            ${O("outputData[global_idx]",2)}\n            ${O("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(R,_,C)}\n\n        ${b??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${B}\n      }`},Ul=(e,t,r,o,n,s,u=r.dataType)=>{let d=!W.areEqual(r.dims,o.dims),a=r.dims,p=W.size(r.dims),h=!1,w=!1,b=[d];if(d){let S=it.calcShape(r.dims,o.dims,!1);if(!S)throw new Error("Can\'t perform binary op on the given tensors");a=S,p=W.size(a);let v=W.size(r.dims)===1,I=W.size(o.dims)===1,A=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,C=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;b.push(v),b.push(I),b.push(A),b.push(C);let R=1;for(let _=1;_<a.length;_++){let B=r.dims[r.dims.length-_]??1,O=o.dims[o.dims.length-_]??1;if(B===O)R*=B;else break}R%4===0?(w=!0,h=!0):(v||I||A||C)&&(h=!0)}else h=!0;b.push(h);let y=Pe(r.dims.length)&&Pe(o.dims.length)&&Pe(a.length);return{name:e,shaderCache:{hint:t+b.map(S=>S.toString()).join("_"),inputDependencies:y?["rank","rank"]:["dims","dims"]},getShaderSource:S=>Nl(S,r.dims,o.dims,a,h,d,w,n,r.dataType,o.dataType,u,y,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:y?[{type:"uint32",data:Math.ceil(W.size(a)/4)},...fe(r.dims),...fe(o.dims),...fe(a)]:[{type:"uint32",data:Math.ceil(W.size(a)/4)}]})}},ct=(e,t,r,o,n,s)=>{e.compute(Ul(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},gi=e=>{ct(e,"Add",(t,r)=>`${t}+${r}`)},yi=e=>{ct(e,"Div",(t,r)=>`${t}/${r}`)},bi=e=>{ct(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},wi=e=>{ct(e,"Mul",(t,r)=>`${t}*${r}`)},vi=e=>{let t=N("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ct(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},$i=e=>{ct(e,"Sub",(t,r)=>`${t}-${r}`)},Si=e=>{ct(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},xi=e=>{ct(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ci=e=>{ct(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ii=e=>{ct(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Gl,Ll,Fl,jl,_i,Ti,Ei=F(()=>{"use strict";we();ke();ve();Gl=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Ll=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,Fl=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},jl=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let _=1;_<e.length;_++){let B=e[_].dims.slice();for(let O=0;O<r.length;O++)if(O===o)n[o]+=B[O];else if(r[O]!==B[O])throw new Error("non concat dimensions must match")}let s=W.size(n),u=new Array(e.length),d=new Array(e.length),a=e[0].dataType,p=0,h=[],w=[],b=[],y=[{type:"uint32",data:s}];for(let _=0;_<e.length;++_)p+=e[_].dims[o],u[_]=p,b.push(Pe(e[_].dims.length)),w.push(b[_]?e[_].dims.length:e[_].dims),d[_]=N(`input${_}`,a,w[_]),h.push(b[_]?"rank":"dims"),y.push({type:"uint32",data:u[_]});for(let _=0;_<e.length;++_)b[_]&&y.push(...fe(e[_].dims));let S=Pe(n.length);S&&y.push(...fe(n));let v=S?n.length:n,I=j("output",a,v),A=I.indicesGet("indices",o),C=Array.from(Array(u.length).keys()).map(_=>`uniforms.sizeInConcatAxis${_}`).join(","),R=_=>`\n\n  ${(()=>{_.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)_.registerUniform(`sizeInConcatAxis${B}`,"u32");return _.declareVariables(...d,I)})()}\n\n  ${Ll(u.length,C)}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${A});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${C});\n      ${A} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${Fl(d,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:y}),getShaderSource:R}},_i=(e,t)=>{Gl(e.inputs),e.compute(jl(e.inputs,t.axis))},Ti=e=>ee({axis:e.axis})});var vt,jr,Et=F(()=>{"use strict";we();vt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},jr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Mr,Dr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var Ne,qr,Kr=F(()=>{"use strict";Ne=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},qr=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Yr,Pn=F(()=>{"use strict";Yr=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var ql,Kl,sr,Oi,Yl,ur,Zl,Zr,lr=F(()=>{"use strict";we();ve();Et();Kr();ql=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Kl=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,sr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,w=n?s:a,b=h/t[0],y=s/t[1];if(!((n&&b===4&&e[1]===4||!n&&(b===3||b===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${b} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${h/b}>, ${w}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${b};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${y};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${ql(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Kl(n,b)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Oi=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Yl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ur=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],w=n?p:s,b=n?s:p;if(!(b%t[1]===0&&w%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${w} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let y=b/t[1],S=w/t[0],v=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${w}; inputCol = inputCol + ${t[0]}) {\n          ${Oi(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${y};\nlet tileColA = i32(localId.x) * ${S};\nlet tileRowB = i32(localId.y) * ${v};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${y}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${S}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Oi(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Yl(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${w}>, ${b}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},Zl=(e,t,r,o,n,s=!1)=>{let u=n[0],d=n[1],a=n[2],p=o[0],h=o[1],w=o[2],b=o[3],y=In(u,a),S=In(d,a),v=Ce(o[0].type.tensor),I=()=>{let R=h.rank,_=p.rank,B=`var aIndices: ${h.type.indices};`;for(let O=R-2-1,V=_-1;O>=0;O--,V--)B+=`\naIndices[${O}] = ${_>1?`batchIndices[${V}]`:"batchIndices"};`;return y.forEach(O=>{B+=`\naIndices[${O}] = 0;`}),B+=`\naIndices[${R-2}] = u32(row);\n                   aIndices[${R-1}] = u32(colIn);`,B},A=()=>{let R=w.rank,_=p.rank,B=`var bIndices: ${w.type.indices};`;for(let O=R-2-1,V=_-1;O>=0;O--,V--)B+=`\nbIndices[${O}] = ${_>1?`batchIndices[${V}]`:"batchIndices"};`;return S.forEach(O=>{B+=`\nbIndices[${O}] = 0;`}),B+=`\nbIndices[${R-2}] = u32(row);\n                   bIndices[${R-1}] = u32(colIn);`,B};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ne(e,v)} {\n      var value = ${Ne(e,v)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ne(e,v)} {\n      var value = ${Ne(e,v)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${A()}\n        value = ${w.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ne(e,v)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${Ne(e,v)}(bias[row])`};`:""}\n        ${r}\n        ${b.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Zr=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=Pe(p.length),w=h?p.length:p,b=N("batchDims",e[0].dataType,w,1,!0),y=[b],S=[d,a,p],v=W.size(p),I=s[s.length-2],A=s[s.length-1],C=u[u.length-1],R=A%4===0&&C%4===0,_=I<=8?[4,1,1]:[4,4,1],B=[8,8,1],O=[Math.ceil(C/B[0]/_[0]),Math.ceil(I/B[1]/_[1]),Math.ceil(v/B[2]/_[2])],V=Ce(e[0].dataType),z=R?4:1,K=[...d,I,A/z],X=Pe(K.length),D=X?K.length:K,Y=[...a,A,C/z],Ae=Pe(Y.length),oe=Ae?Y.length:Y,pe=[v,I,C/z],q=N("a",e[0].dataType,D,z),$e=N("b",e[1].dataType,oe,z),_e=j("result",e[0].dataType,pe.length,z);y.push(q),y.push($e),y.push(_e);let Te=[b,q,$e],ce=[{type:"int32",data:I},{type:"int32",data:C},{type:"int32",data:A}];h&&ce.push(...fe(p)),X&&ce.push(...fe(K)),Ae&&ce.push(...fe(Y));let Fe=[];Fe.push(X?"rank":"dims"),Fe.push(Ae?"rank":"dims");let Ve=e.length>2,{activationFunction:Ge,applyActivation:Xe}=vt(t,_e.type.value),L=Zl(z,Ve,Xe,y,S,n);if(Ve){let he=n?z:1;Te.push(N("bias",e[2].dataType,e[2].dims.length,he)),ce.push(...fe(e[2].dims)),Fe.push("rank")}ce.push(...fe(pe));let ae=he=>`\n  ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...Te,_e)}\n  ${Ge}\n  ${L}\n  ${R?sr(_,B,V,b):ur(_,B,V,b)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${_}${t.activation}${t.clipMax}${t.clipMin}${R}${Ve}${n}`,inputDependencies:Fe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:O[0],y:O[1],z:O[2]},programUniforms:ce}),getShaderSource:ae}}});var Xl,ki,Pi=F(()=>{"use strict";wt();ve();Et();Kr();Pn();lr();Xl=(e,t,r,o,n=!1,s,u=4,d=4,a=4,p="f32")=>{let h=D=>{switch(D){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},w=D=>{switch(D){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${D} is not supported.`)}},b=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,y=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,S=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",v=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",A=e?"col":"row",C=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${A} / (filterDims[1] * inChannels);\n    let WCol = ${A} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${A} % inChannels;\n    var resData = ${Ne(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${S} && xCol >= 0 && xCol < ${v}) {\n      ${b}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,R=e?t&&o?`\n    let col = colIn * ${u};\n    ${C}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${C}\n    }\n    return ${Ne(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${C}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${C}\n    }\n    return ${Ne(u,p)}(0.0);`,_=`${w(d)}`,B=Ne(a,p),O=e?Ne(u,p):Ne(d,p),V=e?Ne(d,p):Ne(u,p),{activationFunction:z,applyActivation:K}=vt(s,B);return`\n    ${z}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${O} {\n      ${e?R:_}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${V} {\n      ${e?_:R}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${y}\n      ${qr(n)}\n      ${K}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},ki=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],w=a?r[2]:r[3],b=a?r[1]:r[2],y=a?r[3]:r[1],S=a&&(p%4===0||p%3===0)&&y%4===0,v=a?y:w*b,I=a?w*b:y,A=[8,8,1],C=o<=8?[4,1,1]:[4,4,1],R=[Math.ceil(v/A[0]/C[0]),Math.ceil(I/A[1]/C[1]),Math.ceil(h/A[2]/C[2])];Re("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${R}`);let _=S?a&&p%4!==0?3:4:1,B=A[1]*C[1],O=A[0]*C[0],V=Math.max(A[0]*_,A[1]),z=o%B===0,K=n%O===0,X=s%V===0,D=S?[_,4,4]:[1,1,1],Y=Ce(e[0].dataType),Ae=S?4:1,oe=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],pe=N("x",e[0].dataType,e[0].dims.length,_===3?1:_),q=N("w",e[1].dataType,e[1].dims.length,Ae),$e=[pe,q];oe.push(...fe(e[0].dims)),oe.push(...fe(e[1].dims));let _e=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${S?`vec4<${Y}>`:Y}) {\n        result[flatIndex] = ${S?`vec4<${Y}>`:Y}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${S?`vec4<${Y}>`:Y}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${S?"/ 4":""}, value);\n      }`;if(u){let ce=N("bias",e[2].dataType,e[2].dims.length,Ae);$e.push(ce),oe.push(...fe(e[2].dims)),_e+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${S?`vec4<${Y}>`:Y} {\n          return bias[coords.${a?"w":"y"}${S?"/ 4":""}];\n        }`}let Te=j("result",e[0].dataType,r.length,Ae);return oe.push(...fe(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]},programUniforms:oe}),getShaderSource:ce=>`\n        ${Yr("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${ce.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...$e,Te)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${_e}\n        ${Xl(a,z,K,X,u,t,D[0],D[1],D[2],Y)}\n            ${S?sr(C,A,Y,void 0,!a,V):ur(C,A,Y,void 0,!a,V,!1,void 0,d)}`}}});var Rn,Ri=F(()=>{"use strict";we();ve();Mn();Et();Rn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,a=t.format==="NHWC",p=Bn(s,u,t.dilations,t.pads,t.strides,a),h=W.size(p),w=j("output",e[0].dataType,p),{activationFunction:b,applyActivation:y}=vt(t,w.type.value),S=N("x",e[0].dataType,s),v=N("w",e[1].dataType,u),I=[S,v];o&&I.push(N("b",e[2].dataType,e[2].dims));let A=C=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${C.declareVariables(...I,w)}\n\n  ${b}\n\n  ${C.mainStart()}\n    ${C.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${w.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${w.type.value} = ${w.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?S.get("batch","xHeight","xWidth","input_channel"):S.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${v.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${y}\n    ${w.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:A}}});var Bn,Bi,Ql,Mi,Dn,Jl,ed,zn,Mn=F(()=>{"use strict";we();ke();Pi();lr();Ri();Et();Vt();Bn=(e,t,r,o,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),a=d.length,p=t[0],w=t.slice(2).map((S,v)=>S+(S-1)*(r[v]-1)),y=d.map((S,v)=>S+o[v]+o[v+a]).map((S,v)=>Math.floor((S-w[v]+n[v])/n[v]));return y.splice(0,0,u),y.splice(s?3:1,0,p),y},Bi=[2,3,1,0],Ql=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Mi=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Tt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},Dn=e=>{let t=jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,a=e.strides,p=e.w_is_const();return ee({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:a,wIsConst:p,...t})},Jl=(e,t,r)=>{let o=Mi(r,t);if(r.group!==1){e.compute(Rn(t,o));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],w=Bn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),b=w[n?1:2],y=w[n?2:3],S=w[n?3:1],v=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(v||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let O=w[0],V,z,K,X=[];if(n){let D=e.kernelCustomData.wT??e.compute(tt(t[1],Bi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=D),v){let Y=u*d*a;V=t[0].reshape([1,O,Y]),z=D.reshape([1,Y,S]),K=[1,O,S]}else V=t[0].reshape([O,u*d,a]),z=D.reshape([1,a,S]),K=[O,b*y,S];X.push(V),X.push(z)}else V=t[0].reshape([O,a,u*d]),z=t[1].reshape([1,S,a]),K=[O,S,b*y],X.push(z),X.push(V);s&&X.push(t[2]),e.compute(Zr(X,o,w,K,n),{inputs:X});return}let I=!0,A=e.kernelCustomData.wT??e.compute(tt(t[1],Bi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let C=[t[0],A];s&&C.push(t[2]);let R=n?b*y:S,_=n?S:b*y,B=p*h*a;e.compute(ki(C,o,w,R,_,B,s,I),{inputs:C})},ed=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),a=Mi({...t,pads:n,strides:s,dilations:u,kernelShape:d},o);e.compute(Rn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},zn=(e,t)=>{Ql(e.inputs,t),e.inputs[0].dims.length===3?ed(e,t):Jl(e,e.inputs,t)}});var td,Di,zi=F(()=>{"use strict";wt();ve();Et();Kr();Pn();lr();td=(e,t=!1,r,o=4)=>{let n=Ne(o,"f32"),s=C=>{switch(C){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${C} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,d=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",w=e?"col":"row",b=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${w} / (filterDims[1] * inChannels);\n      let WCol = ${w} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${w} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,y=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${b}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${b}\n      }\n      return ${n}(0.0);`,S=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:v,applyActivation:I}=vt(r,n);return`\n      ${v}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?y:S}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?S:y}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${d}\n      ${qr(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Di=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],w=a?r[2]:r[3],b=a?r[1]:r[2],y=a?r[3]:r[1],S=a?p%4===0&&y%4===0:w%4===0&&y%4===0,v=a?y:w*b,I=a?w*b:y,A=S?[8,8,1]:[v<=4||I<=4?4:16,v>4&&I<=4?4:16,1],C=S?[4,4,1]:[v<=4?1:4,v>4&&I<=4?1:4,1],R=[Math.ceil(v/A[0]/C[0]),Math.ceil(I/A[1]/C[1]),Math.ceil(h/A[2]/C[2])];Re("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${R}`);let _=S?4:1,B=Math.max(A[0]*_,A[1]),O=S?4:1,V=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],z=N("x",e[0].dataType,e[0].dims.length,O),K=N("w",e[1].dataType,e[1].dims.length,1),X=j("result",e[0].dataType,r.length,O),D=[z,K];V.push(...fe(e[0].dims)),V.push(...fe(e[1].dims));let Y="";if(u){let Ae=N("bias",e[2].dataType,e[2].dims.length,O);D.push(Ae),V.push(...fe(e[2].dims)),Y+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${S?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${S?"/ 4":""}];\n        }`}return V.push(...fe(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:R[0],y:R[1],z:R[2]},programUniforms:V}),getShaderSource:Ae=>`\n        ${Yr("uniforms.result_strides")}\n        ${Ae.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...D,X)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${Y}\n        ${td(a,u,t,_)}\n        ${S?sr(C,A,"f32",void 0,!a,B):ur(C,A,"f32",void 0,!a,B,!1,void 0,d)}`}}});var rd,Vn,Vi=F(()=>{"use strict";wt();we();ve();rd=(e,t,r,o,n,s,u=!1,d)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,w=a?3:1,b=W.size(o),y=u?2:1,S=r.group,v=t[1].dims,I=v[0]/S,A=v[1],C=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(C+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let R=u?4:1,_=N("W",t[1].dataType,t[1].dims,R),B=N("Dy",t[0].dataType,t[0].dims,R),O=[B,_];n&&O.push(N("bias",t[2].dataType,[o[w]],R));let V=j("result",t[0].dataType,o,R),z=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${y};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${y}>;\n        for (var i = 0; i < ${y}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${B.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${w}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${y}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};\n          ${V.set("batch","r","c + i","d1","value")};\n        }\n      }`,K=`\n          let outputIndices = ${V.offsetToIndices("global_idx")};\n          let batch = ${V.indicesGet("outputIndices",0)};\n          let d1 = ${V.indicesGet("outputIndices",w)};\n          let r = ${V.indicesGet("outputIndices",p)};\n          let c = ${V.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${A};\n          let wOutChannel = d1 - groupId * ${A};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?B.get("batch","idyR","idyC","inputChannel"):B.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${_.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":"0.0"};\n          ${V.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...O,V)}\n  ${C}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)};\n  ${u?z:K}}`},Vn=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=W.size(n),u=[Math.ceil(s/64),1,1];Re("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=Ce(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>rd(a,e,t,n,o,u[1]===1&&u[2]===1,!1,d)}}});var nd,od,ad,Wi,Ni,id,sd,ud,ld,Ui,Hi=F(()=>{"use strict";ke();zi();Vi();Et();Vt();nd=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,od=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},ad=(e,t,r,o,n,s,u,d,a,p)=>{let h=e.length-2,w=p.length===0;if(a.length===0)for(let S=0;S<h;++S)a.push(0);let b=e[0],y=t[d?3:1]*n;for(let S=0,v=e.length-h-(d?1:0);S<h;++S,++v){let I=e[v],A=w?I*u[S]:p[S],C=nd(I,u[S],s[S],t[v],r[S],A);od(C,o,s,S,S+h),w&&p.push(u[S]*(I-1)+a[S]+(t[v]-1)*r[S]+1-s[S]-s[S+h])}p.splice(0,0,b),p.splice(d?3:1,0,y)},Wi=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((b,y)=>b*y,1)===0){r.length=0;for(let b=2;b<t[1].dims.length;++b)r.push(t[1].dims[b])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,a=e.dilations.slice();if(a.reduce((b,y)=>b+y,0)===0){let b=t[0].dims.length-2;a=new Array(b).fill(1)}let p=e.strides.slice();if(p.reduce((b,y)=>b+y,0)===0){let b=t[0].dims.length-2;p=new Array(b).fill(1)}ad(d,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),w=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:w}),h},Ni=e=>{let t=jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,w=e.outputShape;return ee({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:w,pads:d,strides:a,wIsConst:p,...t})},id=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,w)=>h+w,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,w)=>h+w,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,w)=>h+w,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,w)=>h+w,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},sd=[2,3,1,0],ud=(e,t,r)=>{let o=Wi(r,t),n=r.format==="NHWC",s=t.length===3;if(o.group!==1){e.compute(Vn(t,o));return}let u=o.outputShape,d=u[n?1:2],a=u[n?2:3],p=u[n?3:1],h=t[1].dims[2],w=t[1].dims[3],b=t[0].dims[n?3:1],y=n?d*a:p,S=n?p:d*a,v=h*w*b,I=!0,A=e.kernelCustomData.wT??e.compute(tt(t[1],sd),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let C=[t[0],A];s&&(!n&&t[2].dims.length===1?C.push(t[2].reshape([t[2].dims[0],1,1])):C.push(t[2])),e.compute(Di(C,o,u,y,S,v,s,I),{inputs:C})},ld=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=Wi({...t,pads:d,strides:u,dilations:s,kernelShape:n},o);e.compute(Vn(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Ui=(e,t)=>{id(e.inputs,t),e.inputs[0].dims.length===3?ld(e,t):ud(e,e.inputs,t)}});var Wn,Xr,Gi,dd,cd,Nn,Un,pd,Li,Fi,ji=F(()=>{"use strict";we();ke();ve();Wn="[a-zA-Z]|\\\\.\\\\.\\\\.",Xr="("+Wn+")+",Gi="^"+Xr+"$",dd="("+Xr+",)*"+Xr,cd="^"+dd+"$",Nn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Un=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(cd)))throw new Error("Invalid LHS term");if(o.split(",").forEach((d,a)=>{let p=t[a].dims.slice();if(!d.match(RegExp(Gi)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,a])=>a.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(Xr)))throw new Error("Invalid RHS");n.match(RegExp(Wn,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(d);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!0,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,d=[],a=0;if(!t.match(RegExp(Gi))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Wn,"g")),h=new Nn(n);return p?.forEach((w,b)=>{if(w==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let y=s-p.length+1;if(y<0)throw new Error("Ellipsis out of bounds");if(d=o.slice(a,a+y),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let S=0;S<d.length;S++){let v=String.fromCharCode("0".charCodeAt(0)+b);h.addSymbol(v,b+S),this.addSymbol(v,o[a++],n)}}else h.addSymbol(w,b),this.addSymbol(w,o[a++],n)}),h}},pd=(e,t)=>{let r=e[0].dataType,o=new Array(e.length);for(let R=0;R<e.length;++R)o[R]=N(`input${R}`,r,e[R].dims);let n=t.outputDims,s=W.size(n),u=j("output",r,n),d=[],a=Array.from(t.rhs.symbolToIndices.keys()),p="var prod = 1.0;",h="var sum = 0.0;",w="sum += prod;",b=[],y=[],S=[],v=[],I=t.symbolToInfo.size===a.length;t.symbolToInfo.forEach((R,_)=>{if(a.includes(_)){let B=a.indexOf(_);t.lhs.forEach((O,V)=>{if(R.inputIndices.includes(V)){let z=O.symbolToIndices.get(_);if(z===void 0)throw new Error("Invalid symbol error");z.forEach(K=>{d.push(`${o[V].indicesSet(`input${V}Indices`,K,u.indicesGet("outputIndices",B))}`)})}})}else t.lhs.forEach((B,O)=>{let V=t.symbolToInfo.get(_);if(V===void 0)throw new Error("Invalid symbol error");if(V.inputIndices.includes(O)){let z=B.symbolToIndices.get(_);if(z===void 0)throw new Error("Invalid symbol error");z.forEach(K=>{b.push(`${o[O].indicesSet(`input${O}Indices`,K,`${_}`)}`)}),v.push(`prod *= ${o[O].getByIndices(`input${O}Indices`)};`)}}),y.push(`for(var ${_}: u32 = 0; ${_} < ${t.symbolToInfo.get(_)?.dimValue}; ${_}++) {`),S.push("}")});let A=I?[...d,`let sum = ${o.map((R,_)=>R.getByIndices(`input${_}Indices`)).join(" * ")};`]:[...d,h,...y,...b,p,...v,w,...S],C=R=>`\n      ${R.declareVariables(...o,u)}\n\n      ${R.mainStart()}\n        ${R.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n        var outputIndices = ${u.offsetToIndices("global_idx")};\n        ${o.map((_,B)=>`var input${B}Indices: ${o[B].type.indices};`).join(`\n`)}\n        ${A.join(`\n`)};\n        ${u.setByOffset("global_idx","sum")};\n      }`;return{name:"Einsum",shaderCache:{hint:t.equation},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:C}},Li=(e,t)=>{let r=new Un(e.inputs,t.equation);e.compute(pd(e.inputs,r))},Fi=e=>{let t=e.equation.replace(/\\s+/g,"");return ee({equation:t})}});var md,qi,fd,hd,Ki,Yi=F(()=>{"use strict";we();ve();md=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},qi=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},fd=(e,t)=>e.length>t.length?qi(e,t):qi(t,e),hd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=fd(t,r),n=W.size(o),s=e[0].dataType,u=Pe(t.length),d=u?t.length:t,a=N("input",s,d),p=Pe(o.length),h=p?o.length:o,w=j("output",s,h),b=S=>`\n  const inputShape = ${a.indices(...t)};\n  ${S.registerUniform("vec_size","u32").declareVariables(a,w)}\n  ${S.mainStart()}\n  ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    let outputIndices = ${w.offsetToIndices("global_idx")};\n    var inputIndices: ${a.type.indices};\n    for (var i = 0; i < ${t.length}; i++) {\n      if (${a.indicesGet("inputShape","i")} == 1) {\n        ${a.indicesSet("inputIndices","i",0)}\n      } else {\n        ${a.indicesSet("inputIndices","i",w.indicesGet("outputIndices",`i + ${o.length-t.length}`))}\n      }\n    }\n    ${w.setByOffset("global_idx",a.getByIndices("inputIndices"))}\n  }`,y=[{type:"uint32",data:n}];return u&&y.push(...fe(t)),p&&y.push(...fe(o)),{name:"Expand",shaderCache:{hint:`${o}`,inputDependencies:[u?"rank":"dims"]},getShaderSource:b,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:y})}},Ki=e=>{md(e.inputs),e.compute(hd(e.inputs),{inputs:[0]})}});var gd,yd,Zi,Xi,Qi=F(()=>{"use strict";we();ke();ve();gd=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},yd=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=W.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let d=r[s],a=W.size(u),p=Pe(e[0].dims.length),h=p?e[0].dims.length:e[0].dims,w=Pe(e[1].dims.length),b=w?e[1].dims.length:e[1].dims,y=Pe(u.length),S=y?u.length:u,v=N("data",e[0].dataType,h),I=N("inputIndices",e[1].dataType,b),A=j("output",e[0].dataType,S),C=[{type:"uint32",data:a},{type:"int32",data:d},{type:"uint32",data:s}];p&&C.push(...fe(e[0].dims)),w&&C.push(...fe(e[1].dims)),y&&C.push(...fe(u));let R=[];R.push(p?"rank":"dims"),R.push(w?"rank":"dims");let _=()=>{let O=o.length,V=`var indicesIndices  = ${I.type.indices}(0);`;for(let z=0;z<O;z++)V+=`${O>1?`indicesIndices[${z}]`:"indicesIndices"} = ${u.length>1?`outputIndices[uniforms.axis + ${z}]`:"outputIndices"};`;V+=`\n        var idx = ${I.getByIndices("indicesIndices")};\n        if (idx < 0) {\n          idx = idx + uniforms.axisDimLimit;\n        }\n        var dataIndices = ${v.type.indices}(0);\n      `;for(let z=0,K=0;z<n;z++)z===s?(V+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = u32(idx);`,K+=O):(V+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = ${u.length>1?`outputIndices[${K}]`:"outputIndices"};`,K++);return V},B=O=>`\n      ${O.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(v,I,A)}\n      ${O.mainStart()}\n        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        let outputIndices = ${A.offsetToIndices("global_idx")};\n        ${_()};\n        let value = ${v.getByIndices("dataIndices")};\n        ${A.setByOffset("global_idx","value")};\n      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:R},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:C}),getShaderSource:B}},Zi=e=>ee({axis:e.axis}),Xi=(e,t)=>{let r=e.inputs;gd(r),e.compute(yd(e.inputs,t))}});var bd,wd,Ji,es,ts=F(()=>{"use strict";we();ke();ve();bd=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},wd=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=W.computeStrides(r),u=W.size(r),d=e[1].dims,a=e[1].dataType,p=W.size(d),h=W.normalizeAxis(t.axis,n),w=r[h],b=d.slice(0),y=W.size(b),S=N("input",o,r),v=N("indices",a,[p]),I=j("output",o,b),A=C=>`\n      const inputStrides = array<u32, ${s.length}>(${s.map(R=>`${R}u`).join(",")});\n      ${C.declareVariables(S,v,I)}\n      ${C.mainStart()}\n      ${C.guardAgainstOutOfBoundsWorkgroupSizes(y)}\n\n      let outputIndices = ${I.offsetToIndices("global_idx")};\n\n      var idx = ${v.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + ${w};\n      }\n\n      var srcOffset = u32(0);\n\n      for (var i = 0; i < ${r.length}; i++) {\n        if (i == ${h}) {\n          srcOffset +=  u32(idx) * inputStrides[i];\n        } else {\n          srcOffset += ${I.indicesGet("outputIndices","i")} * inputStrides[i];\n        }\n      }\n\n      // Should never hit this with valid values in indices\n      // This is a guard against malicious data in the indices input\n      if (srcOffset < 0 || srcOffset >= ${u}) {\n        return;\n      }\n\n      output[global_idx] = input[srcOffset];\n  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:b,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(y/64)}}),getShaderSource:A}},Ji=e=>ee({axis:e.axis}),es=(e,t)=>{let r=e.inputs;bd(r),e.compute(wd(e.inputs,t))}});var vd,$d,Sd,rs,ns,os=F(()=>{"use strict";we();ke();ve();vd=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},$d=(e,t,r)=>{if(r.length===0)return"0u";let o=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return o||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},Sd=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Br.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let a=W.size(d),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let h=Ce(e[0].dataType),w=t.alpha===1?"":"value *= alpha;",b=e.length===3?`value += beta * c[${$d(n,s,e[2].dims)}];`:"",y=[`@group(0) @binding(0) var<storage, read> a : array<${h}>;`,`@group(0) @binding(1) var<storage, read> b : array<${h}>;`];e.length===3&&y.push(`@group(0) @binding(2) var<storage, read> c : array<${h}>;`);let S=v=>`\n  const M: u32 = ${n}u;\n  const N: u32 = ${s}u;\n  const K: u32 = ${u}u;\n  const alpha = ${h}(${t.alpha});\n  const beta = ${h}(${t.beta});\n\n  ${y.join(`\n`)}\n  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${h}>;\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${h}(0);\n    for (var k: u32 = 0u; k<${u}u; k++) {\n      ${p}\n    }\n\n    ${w}\n    ${b}\n    output[global_id.x] = value;\n\n  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:S}},rs=(e,t)=>{vd(e.inputs),e.compute(Sd(e.inputs,t))},ns=e=>ee(e)});var xd,Cd,Id,Ad,as,is,ss=F(()=>{"use strict";We();we();ke();ve();xd={name:"InstanceNormalization"},Cd=(e,t)=>{let r=e[0].dims,o=r,n=2,s=W.sizeToDimension(r,n),u=W.sizeFromDimension(r,n),d=r[1],a=N("x",e[0].dataType,[r[0],r[1],u]),p=N("scale",e[1].dataType,e[1].dims),h=N("bias",e[2].dataType,e[2].dims),w=j("output",e[0].dataType,[r[0],r[1],u]),b=[a,p,h,w],y=a.type.value,S=64,v=I=>`\n\n  const C: u32 = ${d};\n  const normSize: u32 = ${u};\n  const epsilon: f32 = ${t.epsilon};\n  var<workgroup> meanShared : ${y};\n  var<workgroup> squaredNormShared : ${y};\n  var<workgroup> workgroupShared : array<${y}, ${S}>;\n  const workgroupSize = ${S}u;\n  ${I.declareVariables(...b)}\n  ${I.mainStart(S)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${y} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${a.get("batch","channel","h")};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${y}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${a.get("batch","channel","h")} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${y}(normSize) + epsilon);\n    let channelScale = invStdDev * ${p.getByOffset("channel")};\n    let channelShift = ${h.getByOffset("channel")} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${a.get("batch","channel","h")} * channelScale + channelShift;\n      ${w.set("batch","channel","h","value")};\n    }\n  }`;return{...xd,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:v}},Id=(e,t,r,o,n,s,u,d)=>{let a=je(u),p=N("input",t.dataType,t.dims,a),h=N("scale",r.dataType,r.dims,a),w=N("bias",o.dataType,o.dims,a),b=64,y=a===1?"vec2f":`mat2x${a}f`,S=a===1?"f32":`vec${a}f`,v=(B,O)=>`${y}(${B}, ${O})`,I=n*u/a,A=Math.ceil(s/b),C=B=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${s*u/a};\n\n  ${B.declareVariables(p)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${y}>;\n\n  ${B.mainStart(b)}\n    let currentImageNumber = global_idx / ${b} / C;\n    let currentChannelNumber = (global_idx / ${b}) % C;\n    let wgId = global_idx % ${b};\n    let wgOffset = wgId * ${A};\n    if (wgOffset >= H) {\n        return;\n    }\n    let wgMax = min(wgOffset + ${A}, H);\n\n    let offset = currentImageNumber * imageSize + currentChannelNumber;\n    var sum = ${He("f32",a)};\n    var squaredSum = ${He("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${S}(input[offset + i * C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${v("sum","squaredSum")};\n  }`,R=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,b,2],dataType:1}],dispatchGroup:{x:n*u/a}}),getShaderSource:C},{inputs:[t],outputs:[-1]})[0],_=B=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${b*u/a};\n  const epsilon: f32 = ${d};\n\n  @group(0) @binding(0) var<storage, read> input : array<${y}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${h.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${w.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${y}>;\n\n  ${B.mainStart()}\n    ${B.guardAgainstOutOfBoundsWorkgroupSizes(I)}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    let offset = currentImageNumber * imageSize;\n    var sum = ${He("f32",a)};\n    var squaredSum = ${He("f32",a)};\n    for (var i: u32 = 0; i < ${b}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${b}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(H);\n    squaredSum = squaredSum / f32(H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);\n    let channelScale = invStdDev * ${S}(scale[currentChannelNumber]);\n    let channelShift = ${S}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${v("channelScale","channelShift")};\n  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u,epsilon:d})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:_},{inputs:[R,r,o],outputs:[-1]})[0]},Ad=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],d=W.sizeFromDimension(o,1)/u,a=je(u),p=W.size(n)/a,h=N("input",t[0].dataType,t[0].dims,a),w=j("output",t[0].dataType,n,a),b=Ce(t[0].dataType),y=a===1?"vec2f":`mat2x${a}f`,S=a===1?b:`vec${a}<${b}>`,v=Id(e,t[0],t[1],t[2],s,d,u,r.epsilon),I=A=>`\n  const H: u32 = ${d};\n  const C: u32 = ${u/a};\n\n  @group(0) @binding(0) var<storage, read> input : array<${h.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${y}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${w.type.storage}>;\n\n  ${A.mainStart()}\n    let currentImageNumber = global_idx / (C * H);\n    let currentChannelNumber = global_idx % C;\n\n    let scaleOffset = currentImageNumber * C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${S}(scale[0]), ${S}(scale[1]));\n  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:I},{inputs:[t[0],v]})},as=e=>ee({epsilon:e.epsilon,format:e.format}),is=(e,t)=>{t.format==="NHWC"?Ad(e,e.inputs,t):e.compute(Cd(e.inputs,t))}});var _d,Td,us,ls,ds=F(()=>{"use strict";We();we();ke();ve();_d=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Td=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,d=W.normalizeAxis(t.axis,o.length),a=W.sizeToDimension(o,d),p=W.sizeFromDimension(o,d),h=W.size(n.dims),w=s?W.size(s.dims):0;if(h!==p||s&&w!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${w}`);let b=[];for(let _=0;_<o.length;++_)_<d?b.push(o[_]):b.push(1);let y=je(p),S=Ce(e[0].dataType),v=[N("x",e[0].dataType,e[0].dims,y),N("scale",n.dataType,n.dims,y)];s&&v.push(N("bias",s.dataType,s.dims,y)),v.push(j("output",e[0].dataType,u,y));let I=r>1,A=r>2;I&&v.push(j("meanDataOutput",1,b)),A&&v.push(j("invStdOutput",1,b));let C=_=>`\n  const normSize: f32 = ${p};\n  const normSizeVectorized: u32 = ${p/y};\n  const epsilon: f32 = ${t.epsilon};\n\n  ${_.declareVariables(...v)}\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let offset = global_idx * normSizeVectorized;\n    var meanVector = ${He("f32",y)};\n    var meanSquareVector = ${He("f32",y)};\n\n    for (var h: u32 = 0u; h < normSizeVectorized; h++) {\n      let value = ${Je(S,y,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${et("meanVector",y)} / normSize;\n    let meanSquare = sqrt(${et("meanSquareVector",y)} \n      / normSize - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSizeVectorized; j++) {\n      let f32input = ${Je(S,y,"x[j + offset]")};\n      let f32scale = ${Je(S,y,"scale[j]")};\n      output[j + offset] = ${v[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${Je(S,y,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"meanDataOutput[global_idx] = mean":""};\n    ${A?"invStdOutput[global_idx] = 1 / meanSquare":""};\n  }`,R=[{dims:u,dataType:e[0].dataType}];return I&&R.push({dims:b,dataType:1}),A&&R.push({dims:b,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:R,dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:C}},us=e=>ee({axis:e.axis,epsilon:e.epsilon}),ls=(e,t)=>{_d(e.inputs),e.compute(Td(e.inputs,t,e.outputCount))}});var Ed,cs,ps=F(()=>{"use strict";we();lr();Ed=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},cs=e=>{Ed(e.inputs);let t=it.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");e.compute(Zr(e.inputs,{activation:"",activationCacheKey:""},t))}});var Od,fs,ms,kd,Hn,hs,gs=F(()=>{"use strict";we();ke();Pr();Tn();ve();Vt();Od=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,w=r.dims[0],b=r.dims[1],y=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],S=b,v=0,I=0,A=Math.floor(y/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');v=a.dims[2],I=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let C;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');C=2,S=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==A)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');C=5,S=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==A)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');C=0,S=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');C=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let R=0;if(u){R=8;let z=u.dims;throw z.length===1?z[0]===w?R=1:z[0]===3*w+2&&(R=3):z.length===2&&z[0]===w&&z[1]===S&&(R=5),R===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let _=!1,B=y;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(S!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');B=n.dims[2]}else{if(S!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');B=n.dims[1]*n.dims[3],_=!0}}let O=v+S,V=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:w,sequenceLength:b,pastSequenceLength:v,kvSequenceLength:S,totalSequenceLength:O,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:y,vHiddenSize:B,headSize:A,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:R,scale:t.scale,broadcastResPosBias:V,passPastInKv:_,qkvFormat:C}},fs=e=>ee({...e}),ms=ee({perm:[0,2,1,3]}),kd=(e,t,r,o,n,s,u)=>{let d=[o,n,s],a=W.size(d),p=Ce(t.dataType),h=w=>`\n  const biasOffset = ${u}u;\n  const hiddenSize = ${s}u;\n\n  @group(0) @binding(0) var<storage, read> qkv: array<${p}>;\n  @group(0) @binding(1) var<storage, read> bias: array<${p}>;\n  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${p}>;\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];\n  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:o,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Hn=(e,t,r,o,n,s,u,d)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=kd(e,s,u,t,o,r*n,d),a=a.reshape([t,o,r,n]),e.compute(tt(a,ms.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(tt(a,ms.perm),{inputs:[a],outputs:[-1]})[0]},hs=(e,t)=>{let r=Od(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Hn(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Wr(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Hn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Hn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Wr(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Pd,Rd,Bd,Md,Dd,zd,Vd,Wd,Nd,ys,bs,ws=F(()=>{"use strict";We();we();ke();ve();Pd=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Rd=(e,t,r,o,n,s)=>{let u=t.length,d="";for(let a=u-1;a>=0;--a)d+=`\n            k = i32(${e.indicesGet("indices",a)}) - ${o[a]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${t[a]}) {\n              break;\n            }\n            offset += k * ${r[a]};\n        `;return`\n          value = ${n}(${s});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${d}\n            value = x[offset];\n          }\n      `},Bd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2*(t[u]-1)};\n                  k = k % _2n_1;\n                  if(k >= ${t[u]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Md=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${t[u]}) {\n                  k = ${t[u]-1};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Dd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0)  {\n                  k += ${t[u]};\n                }\n                if (k >= ${t[u]}) {\n                  k -= ${t[u]};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},zd=(e,t,r,o,n)=>{switch(o.mode){case 0:return Rd(e,t,r,o.pads,n,o.value);case 1:return Bd(e,t,r,o.pads);case 2:return Md(e,t,r,o.pads);case 3:return Dd(e,t,r,o.pads);default:throw new Error("Invalid mode")}},Vd=(e,t,r,o)=>{let n=t[0].dims,s=W.padShape(n.slice(),r.pads),u=W.size(s),d=W.computeStrides(n),a=j("output",t[0].dataType,s),p=N("x",t[0].dataType,n),h=zd(a,n,d,r,o);return`\n              ${e.declareVariables(p,a)}\n              ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n\n              let indices = ${a.offsetToIndices("global_idx")};\n\n              var value = ${o}(0);\n              ${h}\n              output[global_idx] = value;\n          }`},Wd=(e,t)=>{let r=W.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(W.size(r)/64)}}),getShaderSource:o=>Vd(o,e,t,"f32")}},Nd=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let a=0;a<d.length;a++)s[Number(d[a])]=Number(r[a]),s[Number(d[a])+n]=Number(r[a+d.length])}else r.forEach((d,a)=>s[Number(a)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),ee({mode:t.mode,value:o,pads:u})}else return t},ys=(e,t)=>{Pd(e.inputs);let r=Nd(e.inputs,t);e.compute(Wd(e.inputs,r),{inputs:[0]})},bs=e=>{let t=e.mode,r=e.value,o=e.pads;return ee({mode:t,value:r,pads:o})}});var Qr,vs,$s,Ss,xs,Cs,Is,As,_s,Ts,Es,Os,ks,Ps,Rs,Bs=F(()=>{"use strict";we();ke();ve();Qr=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},vs=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();Tt.adjustPoolAttributes(r,n,u,d,a,p);let h=Tt.computePoolOutputShape(r,n,d,a,u,p,t.autoPad),w=Object.assign({},t);s?Object.assign(w,{kernelShape:u,strides:d,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign(w,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let b=h.slice();return b.push(b.splice(1,1)[0]),[w,o?b:h]},$s=(e,t,r,o,n,s,u,d)=>{let a=n.format==="NHWC",p=r,h=t.type.value,w=p.length,b=W.size(o),y=j("output",t.type.tensor,o);if(n.kernelShape.length<=2){let S=n.kernelShape[n.kernelShape.length-1],v=n.strides[n.strides.length-1],I=n.pads[n.pads.length/2-1],A=n.pads[n.pads.length-1],C=w-(a?2:1),R="",_="",B="";if(I+A!==0?R=`\n                for (var i: u32 = 0u; i < ${S}u; i++) {\n                  xIndices[${C}] = indices[${C}] * ${v} - ${I} + i;\n                  if (xIndices[${C}] < 0 || xIndices[${C}] >= ${p[C]}) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:R=`\n                for (var i: u32 = 0u; i < ${S}u; i++) {\n                  xIndices[${C}] = indices[${C}] * ${v} - ${I} + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let V=n.kernelShape[n.kernelShape.length-2],z=n.strides[n.strides.length-2],K=n.pads[n.pads.length/2-2],X=n.pads[n.pads.length-2],D=w-(a?3:2),Y=p[D];K+X!==0?_=`\n                for (var j: u32 = 0u; j < ${V}u; j++) {\n                  xIndices[${D}] = indices[${D}] * ${z} - ${K} + j;\n                  if (xIndices[${D}] < 0 || xIndices[${D}] >= ${Y}) {\n                    pad+= ${S};\n                    continue;\n                  }\n              `:_=`\n                for (var j: u32 = 0u; j < ${V}u; j++) {\n                  xIndices[${D}] = indices[${D}] * ${z} - ${K} + j;\n                `,B=`\n              }\n            `}return`\n            ${e.declareVariables(t,y)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n\n              let indices = ${y.offsetToIndices("global_idx")};\n              var xIndices = ${y.offsetToIndices("global_idx")};\n\n              var value: ${h} = ${h}(${d});\n              var pad = 0;\n              ${_}\n              ${R}\n              ${B}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(a)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let S=W.size(n.kernelShape),v=W.computeStrides(n.kernelShape),I=v.length,A=n.pads.length,C=n.pads.reduce((B,O)=>B+O),R="";return C?R=`\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:R=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.declareVariables(t,y)}\n\n            const pads = array<u32, ${A}>(${n.pads.map(B=>`${B}u`).join(",")});\n            const inputDims = array<u32, ${w}>(${p.map(B=>`${B}u`).join(",")});\n            const kernelStrides = array<u32, ${I}>(${v.map(B=>`${B}u`).join(",")});\n            const strides = array<u32, ${I}>(${n.strides.map(B=>`${B}u`).join(",")});\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n\n              let indices = ${y.offsetToIndices("global_idx")};\n              let xIndices = ${y.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${I}>;\n\n              var value = ${y.type.value}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${S}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${I-1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${I-1}] = offset;\n\n                isPad = false;\n                for (var j = ${w-I}u; j < ${w}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${w-I}u]\n                    + offsets[j - ${w-I}u] - pads[j - 2u];\n                  ${R}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},Ss=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),xs=(e,t,r,o)=>{let[n,s]=vs(t,o,r),u=W.size(n.kernelShape),d=N("x",t.dataType,t.dims),a=d.type.value,p="value += x_val;",h="";return n.countIncludePad?h+=`value /= ${a}(${u});`:h+=`value /= ${a}(${u} - pad);`,{name:e,shaderCache:{hint:o.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:w=>$s(w,d,t.dims,s,n,p,h,"0.0")}},Cs=e=>{let t=e.count_include_pad!==0,r=Ss(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return ee({countIncludePad:t,...r})},Is=(e,t)=>{Qr(e.inputs),e.compute(xs("AveragePool",e.inputs[0],!1,t))},As={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},_s=e=>{let t=e.format;return{format:t,...As,cacheKey:t}},Ts=(e,t)=>{Qr(e.inputs),e.compute(xs("GlobalAveragePool",e.inputs[0],!0,t))},Es=(e,t,r,o)=>{let[n,s]=vs(t,o,r),u=`\n      value = max(x_val, value);\n    `,d="",a=N("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:o.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:p=>$s(p,a,t.dims,s,n,u,d,"-1e5")}},Os=(e,t)=>{Qr(e.inputs),e.compute(Es("MaxPool",e.inputs[0],!1,t))},ks=e=>{let t=e.storage_order,r=e.dilations,o=Ss(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return ee({storageOrder:t,dilations:r,...o})},Ps=e=>{let t=e.format;return{format:t,...As,cacheKey:t}},Rs=(e,t)=>{Qr(e.inputs),e.compute(Es("GlobalMaxPool",e.inputs[0],!0,t))}});var Hd,Gd,Ms,Ds=F(()=>{"use strict";On();We();ve();Hd=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},Gd=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=j("output",o,s),a=d.type.storage,p=h=>`\n        ${h.declareVariables(d)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        output[global_idx] = ${a}(${e}) + ${a}(global_idx) * ${a}(${r});\n      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(h=>h.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)}})}},Ms=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Ur.webgpu.validateInputContent&&Hd(t,r,o),e.compute(Gd(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Ld,Fd,jd,qd,Kd,Yd,Zd,Xd,Qd,Jd,ec,tc,rc,nc,oc,zs,Vs,Ws=F(()=>{"use strict";we();ke();ve();Ld=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Fd=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},jd=(e,t,r,o,n,s)=>{let[u,d,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Ld(o,t),t.axes.length>0&&Fd(o,t.axes,p).forEach((h,w)=>o[w]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},qd=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},\n     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`\n`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Kd=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Yd=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},Zd=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},Xd=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},Qd=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});\n      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});\n      const scales = array<${e.type.value}, ${o.length}>(${o.map(s=>`${s}f`).join(",")});\n      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});\n      var originalIndices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = ${e.type.value}(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);\n        }\n      }\n      return originalIndices;\n    }`,Jd=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n        const inputShape = array<u32, ${r.length}>(${r.map(d=>`${d}u`).join(",")});\n        const outputShape = array<u32, ${o.length}>(${o.map(d=>`${d}u`).join(",")});\n        const scales = array<${e.type.value}, ${n.length}>(${n.map(d=>`${d}`).join(",")});\n        const roi = array<${e.type.value}, ${s.length}>(${s.map(d=>`${d}`).join(",")});\n        var inputIndices: ${e.type.indices};\n        for (var i:u32 = 0; i < ${o.length}; i++) {\n          var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);\n            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${e.indicesSet("inputIndices","i","inputIndex")}\n        }\n        return inputIndices;\n    }`,ec=(e,t)=>`\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\n      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`,tc=(e,t,r,o,n,s)=>{let[u,d,a,p]=r.length===2?[-1,0,1,-1]:o[1]===1?[0,2,3,1]:[0,1,2,3],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var inputIndices: ${e.type.indices};\n      inputIndices[${d}] = max(0, min(row, ${r[d]} - 1));\n      inputIndices[${a}] = max(0, min(col, ${r[a]} - 1));\n      if (${r.length} > 2) {\n        inputIndices[${p}] = channel;\n        inputIndices[${u}] = batch;\n      };\n      return input[${e.indicesToOffset("inputIndices")}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:${h} = originalIndices[${d}];\n      var col:${h} = originalIndices[${a}];\n      if (${n} && (row < 0 || row > (${r[d]} - 1) || col < 0 || col > ${r[a]} - 1)) {\n        return ${s};\n      }\n      row = max(0, min(row, ${r[d]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${r.length>2}) {\n        channel = u32(originalIndices[${p}]);\n        batch = u32(originalIndices[${u}]);\n      }\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = row - ${h}(row1);\n      var dx2: ${h} = ${h}(row2) - row;\n      var dy1 = col - ${h}(col1);\n      var dy2 = ${h}(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},rc=(e,t,r,o,n,s,u,d,a,p)=>{let[h,w]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],b=e.type.value,y=S=>{let v=S===h?"row":"col";return`\n      fn ${v}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${b} {\n        var outputIndex = ${o.length===1?"outputIndices":`outputIndices[${S}]`};\n        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(${b}(outputIndex), ${n[S]},\n        ${b}(${o[S]}), ${b}(${r[S]}), ${s[S]}, ${s[S]} + ${r.length});\n        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[S]} - 1))) {\n          return ${a};\n        }\n        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${v}: ${b} = originalIdx + ${b}(i);\n          if (${v} < 0 || ${v} >= ${r[S]}) {\n            if (${p}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${d}) {\n              return ${a};\n            } else {\n              ${v} = max(0, min(${v}, ${r[S]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\n          inputIndicesCopy[${S}] = u32(${v});\n          data[i + 1] = ${S===h?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${y(h)};\n    ${y(w)};\n  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${b} = 1.0 - absS;\n    var twoMinusAbsS: ${b} = 2.0 - absS;\n    var onePlusAbsS: ${b} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {\n    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${b} {\n    var inputIndices: ${e.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `},nc=(e,t,r,o,n,s)=>{let u=e.dims,d=Yd(s,t.axes,u.length),a=Zd(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((A,C)=>A===0?1:a[C]/A),t.keepAspectRatioPolicy!=="stretch"&&(a=Xd(u,p,t)));let h=j("output",e.dataType,a),w=N("input",e.dataType,u),b=W.size(a),y=u.length===a.length&&u.every((A,C)=>A===a[C]),S=t.coordinateTransformMode==="tf_crop_and_resize",v=w.type.value,I=A=>`\n      ${y?"":`\n      ${qd(t.coordinateTransformMode,v)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${ec(w,u)};\n              ${Kd(t.nearestMode,r,v)};\n              ${Jd(w,h,u,a,p,d,S)};\n              `;case"linear":return`\n              ${Qd(h,u,a,p,d)};\n              ${tc(w,h,u,p,S,t.extrapolationValue)};\n              `;case"cubic":return`\n            ${rc(w,h,u,a,p,d,t.cubicCoeffA,S,t.extrapolationValue,t.excludeOutside)};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${A.declareVariables(w,h)}\n      ${A.mainStart()}\n        ${A.guardAgainstOutOfBoundsWorkgroupSizes(b)}\n        ${y?"output[global_idx] = input[global_idx];":`\n        let outputIndices = ${h.offsetToIndices("global_idx")};\n        var inputIndices: ${w.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                if (checkInputIndices(inputIndices)) {\n                  output[global_idx] = input[${w.indicesToOffset("inputIndices")}];\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n        `}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${y}`},getShaderSource:I,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)}})}},oc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},zs=(e,t)=>{let r=[],o=[],n=[],s=oc(e);jd(e.inputs,t,s,r,o,n),e.compute(nc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},Vs=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return ee({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:a,nearestMode:p})}});var ac,ic,Ns,Us,Hs=F(()=>{"use strict";We();we();ke();ve();ac=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},ic=(e,t,r,o)=>{let n=e[0].dims,s=W.size(n),u=n,d=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,w=e.length>4,b=o&&r>1,y=o&&r>2,S=r>3,v=je(a),I=[N("x",e[0].dataType,e[0].dims,v),N("skip",e[1].dataType,e[1].dims,v),N("gamma",e[2].dataType,e[2].dims,v)];h&&I.push(N("beta",e[3].dataType,e[3].dims,v)),w&&I.push(N("bias",e[4].dataType,e[4].dims,v)),I.push(j("output",e[0].dataType,u,v)),b&&I.push(j("meanOutput",1,p)),y&&I.push(j("invStdOutput",1,p)),S&&I.push(j("inputSkipBiasSum",e[0].dataType,u,v));let A=Ce(e[0].dataType),C=_=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/v};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${_.declareVariables(...I)}\n\n      ${_.mainStart()}\n        ${_.guardAgainstOutOfBoundsWorkgroupSizes(d/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${He("f32",v)};\n        var squareSum = ${He("f32",v)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${w?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${S?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${Je(A,v,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${et("sum",v)} / hiddenSize;\n        let variance = sqrt(${et("squareSum",v)} / hiddenSize - mean * mean + epsilon);\n        ${b?"meanOutput[global_idx] = mean;":""}\n        ${y?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${A}(mean)) / ${A}(variance) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,R=[{dims:u,dataType:e[0].dataType}];return r>1&&R.push({dims:p,dataType:1}),r>2&&R.push({dims:p,dataType:1}),r>3&&R.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:C,getRunData:()=>({outputs:R,dispatchGroup:{x:Math.ceil(d/a/64)}})}},Ns=(e,t)=>{ac(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(ic(e.inputs,t,e.outputCount,!1),{outputs:o})},Us=e=>{let t=e.epsilon;return ee({epsilon:t})}});var sc,Jr,uc,Gs,lc,dc,Ls,Fs,js=F(()=>{"use strict";We();we();ke();ve();sc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Jr=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},uc=(e,t)=>{if(e.length>1){let r=Jr(e,1),o=Jr(e,2),n=Jr(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),ee({starts:r,ends:o,axes:n})}else return t},Gs=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},lc=(e,t,r,o,n)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n          var inputIndices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${n?`uniforms.input_shape${r.length>1?"[i]":""}`:"inputShape[i]"};\n            let steps_i  = ${n?`uniforms.steps${r.length>1?"[i]":""}`:"steps[i]"};\n            let signs_i  = ${n?`uniforms.signs${r.length>1?"[i]":""}`:"signs[i]"};\n            let starts_i  = ${n?`uniforms.starts${r.length>1?"[i]":""}`:"starts[i]"};\n            var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n            var inputIndex = outputIndex * steps_i + starts_i + carry;\n            carry = inputIndex / input_shape_i;\n            inputIndex = inputIndex % input_shape_i;\n            if (signs_i < 0) {\n              inputIndex = input_shape_i - inputIndex - 1u + starts_i;\n            }\n            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;\n          }\n          return inputIndices;\n      }`,dc=(e,t)=>{let r=e[0].dims,o=W.size(r),n=t.axes.length>0?W.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=Jr(e,4);s.forEach(_=>_!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((_,B)=>Gs(_,B,r,n,s)),d=t.ends.map((_,B)=>Gs(_,B,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let _=0;_<r.length;++_)n.includes(_)||(u.splice(_,0,0),d.splice(_,0,r[_]),s.splice(_,0,1));let a=s.map(_=>Math.sign(_));s.forEach((_,B,O)=>{if(_<0){let V=(d[B]-u[B])/_,z=u[B],K=z+V*s[B];u[B]=K,d[B]=z,O[B]=-_}});let p=Pe(e[0].dims.length),h=p?e[0].dims.length:e[0].dims,w=r.slice(0);n.forEach((_,B)=>{w[_]=Math.ceil((d[_]-u[_])/s[_])});let b=p?w.length:w,y={dims:w,dataType:e[0].dataType},S=j("output",e[0].dataType,b),v=N("input",e[0].dataType,h),I=W.size(w),A=[],C=[];p&&(C.push({name:"starts",type:u.length>1?`vec${u.length}<u32>`:"u32"}),C.push({name:"signs",type:a.length>1?`vec${a.length}<i32>`:"i32"}),C.push({name:"steps",type:s.length>1?`vec${s.length}<u32>`:"u32"}),A.push({type:"uint32",data:u}),A.push({type:"int32",data:a}),A.push({type:"uint32",data:s})),C.push({name:"outputSize",type:"u32"}),A.push({type:"uint32",data:I}),p&&(A.push(...fe(e[0].dims)),A.push(...fe(w)));let R=_=>`\n      ${_.registerUniforms(C).declareVariables(v,S)}\n        ${p?"":[`const signs = array<i32, ${a.length}>(${a.map(B=>`${B}i`).join(",")});`,`const starts = array<u32, ${u.length}>(${u.map(B=>`${B}u`).join(",")});`,`const steps = array<u32, ${s.length}>(${s.map(B=>`${B}u`).join(",")});`,`const inputShape = array<u32, ${r.length}>(${r.map(B=>`${B}u`).join(",")});`].join(`\n`)}\n\n        ${lc(v,S,r,w,p)}\n        ${_.mainStart()}\n          ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let outputIndices = ${S.offsetToIndices("global_idx")};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${S.setByOffset("global_idx",v.getByIndices("inputIndices"))}\n      }`;return{name:"Slice",shaderCache:{hint:p?`${a.length}_${u.length}_${s.length}`:`${t.cacheKey} | ${e[4]?.dims??""}`,inputDependencies:[p?"rank":"dims"]},getShaderSource:R,getRunData:()=>({outputs:[y],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:A})}},Ls=(e,t)=>{sc(e.inputs,t);let r=uc(e.inputs,t);e.compute(dc(e.inputs,r),{inputs:[0]})},Fs=e=>{let t=e.starts,r=e.ends,o=e.axes;return ee({starts:t,ends:r,axes:o})}});var cc,pc,qs,Ks,Ys=F(()=>{"use strict";we();ke();ve();cc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},pc=(e,t)=>{let r=e.dims,o=W.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=o/u,a=je(u),p=u/a,h=(I,A)=>A===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:A===2?`max(${I}.x, ${I}.y)`:A===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,w=N("x",e.dataType,e.dims,a),b=j("result",e.dataType,e.dims,a),y=w.type.value,S=Ce(e.dataType)==="f32"?`var threadMax = ${y}(-3.402823e+38f);`:`var threadMax = ${y}(-65504.0h);`,v=I=>`\n      var<workgroup> rowMaxShared : ${y};\n      var<workgroup> rowSumShared : ${y};\n      var<workgroup> threadShared : array<${y}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${y} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${y}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(w,b)}\n      ${I.mainStart()}\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${S}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${y}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${y}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${y}(${et("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:v}},qs=(e,t)=>{cc(e.inputs),e.compute(pc(e.inputs[0],t))},Ks=e=>ee({axis:e.axis})});var mc,fc,hc,gc,yc,Zs,Xs,Qs=F(()=>{"use strict";we();ke();ve();mc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},fc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),ee({numOutputs:o,axis:t.axis,splitSizes:r})},hc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,gc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (outputNumber == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${o}) { ${n} }`)}return`\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},yc=(e,t)=>{let r=e[0].dims,o=W.size(r),n=e[0].dataType,s=r.length,u=t.axis,d=u<0?r.length+u:u,a=new Array(t.numOutputs),p=N("input",n,r),h=new Array(t.numOutputs),w=[],b=[],y=0;for(let I=0;I<t.numOutputs;I++){y+=t.splitSizes[I],h[I]=y;let A=r.slice();A[t.axis]=t.splitSizes[I],b.push(A),a[I]=j(`output${I}`,n,b[I]),w.push({dims:b[I],dataType:e[0].dataType})}let S=s<2?"indices":`indices[${d}]`,v=I=>`\n  ${I.declareVariables(p,...a)}\n  const sizeInConcatAxis = array<u32, ${h.length}>(${h.map(A=>`${A}u`).join(",")});\n  ${hc(h.length)}\n  ${gc(a)}\n\n  ${I.mainStart()}\n    ${I.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n\n    var indices = ${p.offsetToIndices("global_idx")};\n    let outputNumber = calculateOutputIndex(${S});\n    if (outputNumber != 0) {\n        ${S} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:v,getRunData:()=>({outputs:w,dispatchGroup:{x:Math.ceil(o/64)}})}},Zs=(e,t)=>{mc(e.inputs);let r=e.inputs.length===1?t:fc(e.inputs,t);e.compute(yc(e.inputs,r),{inputs:[0]})},Xs=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ee({axis:t,numOutputs:o,splitSizes:r})}});var Js,bc,wc,vc,eu,tu=F(()=>{"use strict";We();we();ve();Js=e=>Array.from(e.getBigInt64Array(),Number),bc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Js(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},wc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},vc=e=>{let t=e[0].dims,r=Js(e[1]),o=wc(t,r),n=W.size(o),s=e[0].dataType,u=N("input",s,t),d=j("output",s,o),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.declareVariables(u,d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      var inputIndices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let inputDimValue = ${d.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};\n\n        ${u.indicesSet("inputIndices","i","inputDimValue")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("inputIndices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:a}},eu=e=>{bc(e.inputs),e.compute(vc(e.inputs),{inputs:[0]})}});var $c,Sc,ru,nu=F(()=>{"use strict";We();we();ve();$c=(e,t,r,o,n)=>{let s=W.size(r),u=Math.ceil(s/4),d=j("outputData",n,r,4),a=N("aData",t[1].dataType,t[1].dims,4),p=N("bData",t[2].dataType,t[2].dims,4),h=N("cData",t[0].dataType,t[0].dims,4),w,b=(y,S,v)=>`select(${S}, ${y}, ${v})`;if(!o)w=d.setByOffset("global_idx",b(a.getByOffset("global_idx"),p.getByOffset("global_idx"),h.getByOffset("global_idx")));else{let y=(S,v,I="")=>{let A=`aData[indexA${v}][componentA${v}]`,C=`bData[indexB${v}][componentB${v}]`,R=`bool(cData[indexC${v}] & ${4278190080>>>(3-v)*8}u)`;return`\n            let outputIndices${v} = ${d.offsetToIndices(`global_idx * 4u + ${v}u`)};\n            let offsetA${v} = ${a.broadcastedIndicesToOffset(`outputIndices${v}`,d)};\n            let offsetB${v} = ${p.broadcastedIndicesToOffset(`outputIndices${v}`,d)};\n            let offsetC${v} = ${h.broadcastedIndicesToOffset(`outputIndices${v}`,d)};\n            let indexA${v} = offsetA${v} / 4u;\n            let indexB${v} = offsetB${v} / 4u;\n            let indexC${v} = offsetC${v} / 4u;\n            let componentA${v} = offsetA${v} % 4u;\n            let componentB${v} = offsetB${v} % 4u;\n            ${S}[${v}] = ${I}(${b(A,C,R)});\n          `};n===9?w=`\n            var data = vec4<u32>(0);\n            ${y("data",0,"u32")}\n            ${y("data",1,"u32")}\n            ${y("data",2,"u32")}\n            ${y("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:w=`\n            ${y("outputData[global_idx]",0)}\n            ${y("outputData[global_idx]",1)}\n            ${y("outputData[global_idx]",2)}\n            ${y("outputData[global_idx]",3)}\n          `}return`\n        ${e.declareVariables(h,a,p,d)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        ${w}\n      }`},Sc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(W.areEqual(t,r)&&W.areEqual(r,o)),u=t,d=W.size(t);if(s){let a=it.calcShape(it.calcShape(t,r,!1),o,!1);if(!a)throw new Error("Can\'t perform where op on the given tensors");u=a,d=W.size(u)}return{name:"Where",getShaderSource:a=>$c(a,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)}})}},ru=e=>{e.compute(Sc(e.inputs))}});var ou,au=F(()=>{"use strict";fa();Tn();Ba();Da();hi();Ai();Ei();Mn();Hi();ji();Yi();Qi();ts();os();ss();ds();ps();gs();ws();Bs();Ds();zr();Ws();Hs();js();Ys();Qs();tu();Vt();kn();nu();ou=new Map([["Abs",[za]],["Acos",[Va]],["Acosh",[Wa]],["Add",[gi]],["ArgMax",[ma,_n]],["ArgMin",[pa,_n]],["Asin",[Na]],["Asinh",[Ua]],["Atan",[Ha]],["Atanh",[Ga]],["Attention",[ga,ha]],["AveragePool",[Is,Cs]],["BatchNormalization",[Ra]],["BiasAdd",[Ma]],["BiasSplitGelu",[fi]],["Cast",[Fa,La]],["Ceil",[qa]],["Clip",[ja]],["Concat",[_i,Ti]],["Conv",[zn,Dn]],["ConvTranspose",[Ui,Ni]],["Cos",[Ka]],["Cosh",[Ya]],["Div",[yi]],["Einsum",[Li,Fi]],["Elu",[Za,Lr]],["Equal",[bi]],["Erf",[Xa]],["Exp",[Qa]],["Expand",[Ki]],["Floor",[Ja]],["FusedConv",[zn,Dn]],["Gather",[Xi,Zi]],["GatherElements",[es,Ji]],["Gelu",[ei]],["Gemm",[rs,ns]],["GlobalAveragePool",[Ts,_s]],["GlobalMaxPool",[Rs,Ps]],["Greater",[Si]],["GreaterOrEqual",[Ci]],["InstanceNormalization",[is,as]],["LayerNormalization",[ls,us]],["LeakyRelu",[ti,Lr]],["Less",[xi]],["LessOrEqual",[Ii]],["Log",[mi]],["MatMul",[cs]],["MaxPool",[Os,ks]],["Mul",[wi]],["MultiHeadAttention",[hs,fs]],["Neg",[ni]],["Not",[ri]],["Pad",[ys,bs]],["Pow",[vi]],["Range",[Ms]],["Reciprocal",[oi]],["ReduceMin",[ia,rt]],["ReduceMean",[ta,rt]],["ReduceMax",[aa,rt]],["ReduceSum",[ua,rt]],["ReduceProd",[sa,rt]],["ReduceL1",[ra,rt]],["ReduceL2",[na,rt]],["ReduceLogSum",[da,rt]],["ReduceLogSumExp",[oa,rt]],["ReduceSumSquare",[la,rt]],["Relu",[ai]],["Resize",[zs,Vs]],["Sigmoid",[ii]],["Sin",[si]],["Sinh",[ui]],["Slice",[Ls,Fs]],["SkipLayerNormalization",[Ns,Us]],["Split",[Zs,Xs]],["Sqrt",[li]],["Softmax",[qs,Ks]],["Sub",[$i]],["Tan",[di]],["Tanh",[ci]],["ThresholdedRelu",[pi,Lr]],["Tile",[eu]],["Transpose",[Ho,Go]],["Where",[ru]]])});var en,iu=F(()=>{"use strict";We();wt();ve();en=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s,u,d){let a=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let h=[];for(let b of n)h.push({binding:h.length,resource:{buffer:b.buffer}});for(let b of s)h.push({binding:h.length,resource:{buffer:b.buffer}});d&&h.push({binding:h.length,resource:d});let w=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:h,label:t.programInfo.name});if(p.setBindGroup(0,w),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let b=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,b.buffer,0,this.backend.querySetCount*8),this.backend.flush();let y=this.backend.currentKernelId,S=this.backend.kernels.get(y),v=`[${S[0]}] ${S[1]}`;b.buffer.mapAsync(GPUMapMode.READ).then(()=>{let I=new BigUint64Array(b.buffer.getMappedRange()),A=I[0],C=I[1];b.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=A);let R=Number(A-this.backend.queryTimeBase),_=Number(C-this.backend.queryTimeBase);if(!Number.isSafeInteger(R)||!Number.isSafeInteger(_))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(b.id);let B="";r.forEach((V,z)=>{B+=`input[${z}]: [${V.dims}] | ${or(V.dataType)}, `});let O="";o.forEach((V,z)=>{O+=`output[${z}]: [${V.dims}] | ${or(V.dataType)}, `}),console.log(`[profiling] kernel "${y}|${v}" ${B}${O}execution time: ${_-R} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=No(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:d,label:t.name});Re("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var xc,Cc,tn,su=F(()=>{"use strict";wt();Ro();zo();au();iu();xc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Cc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${xc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},tn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Do(this),this.programManager=new en(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ko(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,o,n,s){let u=[];for(let C=0;C<r.length;++C){let R=this.gpuDataManager.get(r[C].data);if(!R)throw new Error(`no GPU data for input: ${r[C].data}`);u[C]=R}let{outputs:d,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?d.map((C,R)=>R):o;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let w=[],b=[];for(let C=0;C<d.length;++C){if(!Number.isInteger(h[C])||h[C]<-3||h[C]>=d.length)throw new Error(`Invalid output index: ${h[C]}`);if(h[C]===-3)continue;let R=h[C]===-1,_=h[C]===-2,B=R||_?s(d[C].dataType,d[C].dims):n(h[C],d[C].dataType,d[C].dims),O=this.gpuDataManager.get(B.data);if(!O)throw new Error(`no GPU data for output: ${B.data}`);if(R&&this.temporaryData.push(O),_){let V=this.kernelPersistentData.get(this.currentKernelId);V||(V=[],this.kernelPersistentData.set(this.currentKernelId,V)),V.push(O)}w.push(B),b.push(O)}let y;if(p){let C=0,R=0,_=[],B=1;p.forEach(z=>{let K=typeof z.data=="number"?[z.data]:z.data;if(K.length===0)return;let X;switch(K.length){case 1:X=4;break;case 2:X=8;break;case 3:X=16;break;case 4:X=16;break;case 5:X=16;break;case 6:X=16;break;default:throw new Error(`unsupported data length: ${K.length}`)}(R===5||R===6)&&(X=16),X>B&&(B=X),C=Math.ceil(C/X)*X,R=K.length,_.push(C),C+=K.length*4}),C=Math.ceil(C/B)*B;let O=new ArrayBuffer(C);p.forEach((z,K)=>{let X=_[K],D=typeof z.data=="number"?[z.data]:z.data;z.type==="int32"?new Int32Array(O,X,D.length).set(D):z.type==="uint32"?new Uint32Array(O,X,D.length).set(D):new Float32Array(O,X,D.length).set(D)});let V=this.gpuDataManager.create(C,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(V.buffer,0,O,0,C),this.gpuDataManager.release(V.id),y={offset:0,size:C,buffer:V.buffer}}let S=this.programManager.normalizeDispatchGroupSize(a),v=S[1]===1&&S[2]===1,I=Cc(t,r,v),A=this.programManager.getArtifact(I);return A||(A=this.programManager.build(t,S),this.programManager.setArtifact(I,A)),Re("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${S[0]}x${S[1]}x${S[2]}`),this.programManager.run(A,r,w,u,b,S,y),w}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=ou.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],o]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,a]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Re("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[d,o]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await $n(this,t,r);return Po(n.buffer,o)}}}});var uu={};Er(uu,{init:()=>Ic});var dr,Gn,Ic,lu=F(()=>{"use strict";We();su();wt();we();dr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(W.size(t)!==W.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Gn=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],w=n[s++],b=[];for(let y=0;y<w;y++)b.push(n[s++]);d.push(new dr(t,p,h,b))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,a,p)=>new dr(this.module,a,this.output(d,p),p),u=(d,a)=>{let p=ar(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*W.size(a);return new dr(this.module,d,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Ic=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let o=new tn;await o.initialize(t),r(o,n=>o.alloc(n),n=>o.free(n),(n,s,u,d=!1)=>{if(d)Re("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),o.memcpy(n,s);else{Re("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let a=e.HEAPU8.subarray(n,n+u);o.upload(s,a)}},async(n,s,u)=>{Re("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await o.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>o.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>o.releaseKernel(n),(n,s,u,d)=>{Re("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let a=new Gn(e,o,s);return o.computeKernel(n,a,d)})}}});var Co;Co=fo();var Nu=$o(),gn,yn=!1,Or=!1,xo=!1,Uu=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Hu=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Gu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Io=async e=>{if(yn)return Promise.resolve();if(Or)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(xo)throw new Error("previous call to \'initializeWebAssembly()\' failed.");Or=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=r>1&&Uu(),s=o&&Hu(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,a=Gu(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,w=[];if(t>0&&w.push(new Promise(b=>{setTimeout(()=>{h=!0,b()},t)})),w.push(new Promise((b,y)=>{let S=n?Nu:Co,v={locateFile:(I,A)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([So()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let C=d??A;return a==="ort-wasm-simd.wasm"?C+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?C+"ort-wasm-simd-threaded.jsep.wasm":C+a}return A+I}};if(n)if(typeof Blob>"u")v.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${S.toString()};`;v.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}S(v).then(I=>{Or=!1,yn=!0,gn=I,b()},I=>{Or=!1,xo=!0,y(I)})})),await Promise.race(w),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Be=()=>{if(yn&&gn)return gn;throw new Error("WebAssembly is not initialized yet.")};var De=(e,t)=>{let r=Be(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},nr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")nr(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Oe=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Ao=e=>{let t=Be(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=De(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Oe("Can\'t create run options."),e?.extra!==void 0&&nr(e.extra,"",new WeakSet,(u,d)=>{let a=De(u,o),p=De(d,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&Oe(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Lu=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Fu=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},ju=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},qu=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let d=De("deviceType",r),a=De(u.deviceType,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let a=De("numThreads",r),p=De(d.toString(),r);Be()._OrtAddSessionConfigEntry(e,a,p)!==0&&Oe(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let d=De("powerPreference",r),a=De(u.powerPreference,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=De("preferredLayout",r),a=De(u.preferredLayout,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=De(n,r);Be()._OrtAppendExecutionProvider(e,s)!==0&&Oe(`Can\'t append execution provider: ${n}.`)}},_o=e=>{let t=Be(),r=0,o=[],n=e||{};ju(n);try{let s=Lu(n.graphOptimizationLevel??"all"),u=Fu(n.executionMode??"sequential"),d=typeof n.logId=="string"?De(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?De(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,a,p,h),r===0&&Oe("Can\'t create session options."),n.executionProviders&&qu(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[w,b]of Object.entries(n.freeDimensionOverrides)){if(typeof w!="string")throw new Error(`free dimension override name must be a string: ${w}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let y=De(w,o);t._OrtAddFreeDimensionOverride(r,y,b)!==0&&Oe(`Can\'t set a free dimension override: ${w} - ${b}.`)}return n.extra!==void 0&&nr(n.extra,"",new WeakSet,(w,b)=>{let y=De(w,o),S=De(b,o);t._OrtAddSessionConfigEntry(r,y,S)!==0&&Oe(`Can\'t set a session config entry: ${w} - ${b}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};We();var cu=!1,Ac=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Oe("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},_c=(e,t)=>{Be()._OrtInit(e,t)!==0&&Oe("Can\'t initialize onnxruntime.")},pu=async e=>{_c(e.wasm.numThreads,ir(e.logLevel));{let t=(lu(),zt(uu)).init;await t(Be(),e)}cu=!0},cr=new Map,mu=()=>cu,Ln=e=>{let t=Be(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Fn=(e,t)=>{let r=Be(),o=0,n=0,s=0,u=[],d=[],a=[];try{[n,u]=_o(t),o=r._OrtCreateSession(e[0],e[1],n),o===0&&Oe("Can\'t create a session.");let[p,h]=Ac(o),w=[],b=[],y=[];for(let v=0;v<p;v++){let I=r._OrtGetInputName(o,v);I===0&&Oe("Can\'t get an input name."),d.push(I),w.push(r.UTF8ToString(I))}for(let v=0;v<h;v++){let I=r._OrtGetOutputName(o,v);I===0&&Oe("Can\'t get an output name."),a.push(I);let A=r.UTF8ToString(I);b.push(A);{let C=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[A]??"cpu";if(C!=="cpu"&&C!=="cpu-pinned"&&C!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${C}.`);y.push(C)}}let S=null;return y.some(v=>v==="gpu-buffer")&&(s=r._OrtCreateBinding(o),s===0&&Oe("Can\'t create IO binding."),S={handle:s,outputPreferredLocations:y,outputPreferredLocationsEncoded:y.map(v=>wn(v))}),cr.set(o,[o,d,a,S]),[o,w,b]}catch(p){throw d.forEach(h=>r._OrtFree(h)),a.forEach(h=>r._OrtFree(h)),s!==0&&r._OrtReleaseBinding(s),o!==0&&r._OrtReleaseSession(o),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},fu=(e,t)=>{let r=Ln(e);return Fn(r,t)},hu=e=>{let t=Be(),r=cr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(o),cr.delete(e)},du=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Be(),u=e[0],d=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let y=e[2].gpuBuffer,S=ar(bn(u));h=d.reduce((v,I)=>v*I,1)*S,p=s.jsepRegisterBuffer(o,n,y,h)}else{let y=e[2];if(Array.isArray(y)){h=4*y.length,p=s._malloc(h),r.push(p);let S=p/4;for(let v=0;v<y.length;v++){if(typeof y[v]!="string")throw new TypeError(`tensor data at index ${v} is not a string`);s.HEAPU32[S++]=De(y[v],r)}}else h=y.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,h),p)}let w=s.stackSave(),b=s.stackAlloc(4*d.length);try{let y=b/4;d.forEach(v=>s.HEAP32[y++]=v);let S=s._OrtCreateTensor(bn(u),p,h,b,d.length,wn(a));S===0&&Oe(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(S)}finally{s.stackRestore(w)}},gu=async(e,t,r,o,n,s)=>{let u=Be(),d=cr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,w]=d,b=t.length,y=o.length,S=0,v=[],I=[],A=[],C=[],R=u.stackSave(),_=u.stackAlloc(b*4),B=u.stackAlloc(b*4),O=u.stackAlloc(y*4),V=u.stackAlloc(y*4);try{[S,v]=Ao(s);for(let oe=0;oe<b;oe++)du(r[oe],I,C,e,t[oe]);for(let oe=0;oe<y;oe++)du(n[oe],A,C,e,b+o[oe]);let z=_/4,K=B/4,X=O/4,D=V/4;for(let oe=0;oe<b;oe++)u.HEAPU32[z++]=I[oe],u.HEAPU32[K++]=p[t[oe]];for(let oe=0;oe<y;oe++)u.HEAPU32[X++]=A[oe],u.HEAPU32[D++]=h[o[oe]];if(w){let{handle:oe,outputPreferredLocations:pe,outputPreferredLocationsEncoded:q}=w;if(p.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model\'s input count (${p.length}).`);for(let $e=0;$e<b;$e++){let _e=t[$e];await u._OrtBindInput(oe,p[_e],I[$e])!==0&&Oe(`Can\'t bind input[${$e}] for session=${e}.`)}for(let $e=0;$e<y;$e++){let _e=o[$e];n[$e]?.[3]?u._OrtBindOutput(oe,h[_e],A[$e],0)!==0&&Oe(`Can\'t bind pre-allocated output[${$e}] for session=${e}.`):u._OrtBindOutput(oe,h[_e],0,q[_e])!==0&&Oe(`Can\'t bind output[${$e}] to ${pe[$e]} for session=${e}.`)}}let Y;w?Y=await u._OrtRunWithBinding(a,w.handle,y,O,S):Y=await u._OrtRun(a,B,_,b,V,y,O,S),Y!==0&&Oe("failed to call OrtRun().");let Ae=[];for(let oe=0;oe<y;oe++){let pe=u.HEAPU32[O/4+oe];if(pe===A[oe]){Ae.push(n[oe]);continue}let q=u.stackSave(),$e=u.stackAlloc(4*4),_e=!1,Te,ce=0;try{u._OrtGetTensorData(pe,$e,$e+4,$e+8,$e+12)!==0&&Oe(`Can\'t access output tensor data on index ${oe}.`);let Ve=$e/4,Ge=u.HEAPU32[Ve++];ce=u.HEAPU32[Ve++];let Xe=u.HEAPU32[Ve++],L=u.HEAPU32[Ve++],ae=[];for(let Ee=0;Ee<L;Ee++)ae.push(u.HEAPU32[Xe/4+Ee]);u._OrtFree(Xe);let he=ae.reduce((Ee,ze)=>Ee*ze,1);Te=or(Ge);let Ye=w?.outputPreferredLocations[o[oe]];if(Te==="string"){if(Ye==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Ee=[],ze=ce/4;for(let Le=0;Le<he;Le++){let nt=u.HEAPU32[ze++],qe=Le===he-1?void 0:u.HEAPU32[ze]-nt;Ee.push(u.UTF8ToString(nt,qe))}Ae.push([Te,ae,Ee,"cpu"])}else if(Ye==="gpu-buffer"&&he>0){let Ee=u.jsepGetBuffer(ce),ze=ar(Ge);if(ze===void 0||!To(Te))throw new Error(`Unsupported data type: ${Te}`);_e=!0,Ae.push([Te,ae,{gpuBuffer:Ee,download:u.jsepCreateDownloader(Ee,he*ze,Te),dispose:()=>{u._OrtReleaseTensor(pe)}},"gpu-buffer"])}else{let Ee=kr(Te),ze=new Ee(he);new Uint8Array(ze.buffer,ze.byteOffset,ze.byteLength).set(u.HEAPU8.subarray(ce,ce+ze.byteLength)),Ae.push([Te,ae,ze,"cpu"])}}finally{u.stackRestore(q),Te==="string"&&ce&&u._free(ce),_e||u._OrtReleaseTensor(pe)}}return w&&u._OrtClearBoundOutputs(w.handle),Ae}finally{u.stackRestore(R),I.forEach(z=>u._OrtReleaseTensor(z)),A.forEach(z=>u._OrtReleaseTensor(z)),C.forEach(z=>u._free(z)),S!==0&&u._OrtReleaseRunOptions(S),v.forEach(z=>u._free(z))}},yu=e=>{let t=Be(),r=cr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Oe("Can\'t get an profile file name."),t._OrtFree(n)},bu=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{switch(e.data.type){case"init-wasm":try{Io(e.data.in).then(()=>postMessage({type:"init-wasm"}),t=>postMessage({type:"init-wasm",err:t}))}catch(t){postMessage({type:"init-wasm",err:t})}break;case"init-ort":try{pu(e.data.in).then(()=>postMessage({type:"init-ort"}),t=>postMessage({type:"init-ort",err:t}))}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{let{model:t}=e.data.in,r=Ln(t);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{let{modeldata:t,options:r}=e.data.in,o=Fn(t,r);postMessage({type:"create_finalize",out:o})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{let{model:t,options:r}=e.data.in,o=fu(t,r);postMessage({type:"create",out:o})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{hu(e.data.in),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{let{sessionId:t,inputIndices:r,inputs:o,outputIndices:n,options:s}=e.data.in;gu(t,r,o,n,new Array(n.length).fill(null),s).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:"run",err:"Proxy does not support non-cpu tensor location."}):postMessage({type:"run",out:u},bu(u))},u=>{postMessage({type:"run",err:u})})}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{let t=e.data.in;yu(t),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}break;case"is-ort-env-initialized":try{let t=mu();postMessage({type:"is-ort-env-initialized",out:t})}catch(t){postMessage({type:"is-ort-env-initialized",err:t})}break;default:}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var St,Ze,$n,Ia,_a,ha,ga,ya,ba,wa,va,$a,Sa,xa,Ot,Vp,vn,gl,yl,bl,wl,Ca,vl,$l,Sl,xl,Aa=F(()=>{"use strict";$t();ml();Yt();St=()=>!!Oe.wasm.proxy&&typeof document<"u",$n=!1,Ia=!1,_a=!1,ya=[],ba=[],wa=[],va=[],$a=[],Sa=[],xa=[],Ot=()=>{if($n||!Ia||_a||!Ze)throw new Error("worker not ready")},Vp=e=>{switch(e.data.type){case"init-wasm":$n=!1,e.data.err?(_a=!0,ha[1](e.data.err)):(Ia=!0,ha[0]());break;case"init-ort":e.data.err?ga[1](e.data.err):ga[0]();break;case"create_allocate":e.data.err?ya.shift()[1](e.data.err):ya.shift()[0](e.data.out);break;case"create_finalize":e.data.err?ba.shift()[1](e.data.err):ba.shift()[0](e.data.out);break;case"create":e.data.err?wa.shift()[1](e.data.err):wa.shift()[0](e.data.out);break;case"release":e.data.err?va.shift()[1](e.data.err):va.shift()[0]();break;case"run":e.data.err?$a.shift()[1](e.data.err):$a.shift()[0](e.data.out);break;case"end-profiling":e.data.err?Sa.shift()[1](e.data.err):Sa.shift()[0]();break;case"is-ort-env-initialized":e.data.err?xa.shift()[1](e.data.err):xa.shift()[0](e.data.out);break;default:}},vn=typeof document<"u"?document?.currentScript?.src:void 0,gl=async()=>{if(St()){if(Ia)return;if($n)throw new Error("multiple calls to 'initWasm()' detected.");if(_a)throw new Error("previous call to 'initWasm()' failed.");return $n=!0,Oe.wasm.wasmPaths===void 0&&vn&&vn.indexOf("blob:")!==0&&(Oe.wasm.wasmPaths=vn.substr(0,+vn.lastIndexOf("/")+1)),new Promise((e,t)=>{Ze?.terminate();let r=URL.createObjectURL(new Blob([hl()],{type:"text/javascript"}));Ze=new Worker(r,{name:"ort-wasm-proxy-worker"}),Ze.onerror=n=>t(n),Ze.onmessage=Vp,URL.revokeObjectURL(r),ha=[e,t];let a={type:"init-wasm",in:Oe.wasm};Ze.postMessage(a)})}else return Mo(Oe.wasm)},yl=async e=>{if(St())return Ot(),new Promise((t,r)=>{ga=[t,r];let a={type:"init-ort",in:e};Ze.postMessage(a)});await sl(e)},bl=async e=>St()?(Ot(),new Promise((t,r)=>{ya.push([t,r]);let a={type:"create_allocate",in:{model:e}};Ze.postMessage(a,[e.buffer])})):fa(e),wl=async(e,t)=>St()?(Ot(),new Promise((r,a)=>{ba.push([r,a]);let n={type:"create_finalize",in:{modeldata:e,options:t}};Ze.postMessage(n)})):ma(e,t),Ca=async(e,t)=>{if(St()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Ot(),new Promise((r,a)=>{wa.push([r,a]);let n={type:"create",in:{model:e,options:t}};Ze.postMessage(n,[e.buffer])})}else return ll(e,t)},vl=async e=>{if(St())return Ot(),new Promise((t,r)=>{va.push([t,r]);let a={type:"release",in:e};Ze.postMessage(a)});dl(e)},$l=async(e,t,r,a,n,s)=>{if(St()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return Ot(),new Promise((u,l)=>{$a.push([u,l]);let o=r,p={type:"run",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:a,options:s}};Ze.postMessage(p,fl(o))})}else return cl(e,t,r,a,n,s)},Sl=async e=>{if(St())return Ot(),new Promise((t,r)=>{Sa.push([t,r]);let a={type:"end-profiling",in:e};Ze.postMessage(a)});pl(e)},xl=async()=>St()?(Ot(),new Promise((e,t)=>{xa.push([e,t]);let r={type:"is-ort-env-initialized"};Ze.postMessage(r)})):ul()});var Sn,Il,Np,xn,_l=F(()=>{"use strict";$t();Aa();Ve();Il=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Np=e=>{switch(e[3]){case"cpu":return new Le(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Qr(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Le.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},xn=class{async createSessionAllocate(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return bl(new Uint8Array(a))}async loadModel(t,r){if(await xl()||(Sn||(Sn=yl(Oe)),await Sn,Sn=void 0),typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node){let a=await(void 0)(t);[this.sessionId,this.inputNames,this.outputNames]=await Ca(a,r)}else{let a=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await wl(a,r)}else[this.sessionId,this.inputNames,this.outputNames]=await Ca(t,r)}async dispose(){return vl(this.sessionId)}async run(t,r,a){let n=[],s=[];Object.entries(t).forEach(g=>{let b=g[0],$=g[1],v=this.inputNames.indexOf(b);if(v===-1)throw new Error(`invalid input '${b}'`);n.push($),s.push(v)});let u=[],l=[];Object.entries(r).forEach(g=>{let b=g[0],$=g[1],v=this.outputNames.indexOf(b);if(v===-1)throw new Error(`invalid output '${b}'`);u.push($),l.push(v)});let o=n.map((g,b)=>Il(g,()=>`input "${this.inputNames[s[b]]}"`)),p=u.map((g,b)=>g?Il(g,()=>`output "${this.outputNames[l[b]]}"`):null),f=await $l(this.sessionId,s,o,l,p,a),y={};for(let g=0;g<f.length;g++)y[this.outputNames[l[g]]]=u[g]??Np(f[g]);return y}startProfiling(){}endProfiling(){Sl(this.sessionId)}}});var Up,In,Cl=F(()=>{"use strict";$t();Aa();_l();Up=()=>{if((typeof Oe.wasm.initTimeout!="number"||Oe.wasm.initTimeout<0)&&(Oe.wasm.initTimeout=0),typeof Oe.wasm.simd!="boolean"&&(Oe.wasm.simd=!0),typeof Oe.wasm.proxy!="boolean"&&(Oe.wasm.proxy=!1),typeof Oe.wasm.numThreads!="number"||!Number.isInteger(Oe.wasm.numThreads)||Oe.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Oe.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},In=class{async init(){Up(),await gl()}async createInferenceSessionHandler(t,r){let a=new xn;return await a.loadModel(t,r),Promise.resolve(a)}}});var Al={};zt(Al,{wasmBackend:()=>Hp});var Hp,El=F(()=>{"use strict";Cl();Hp=new In});var Gp={};zt(Gp,{InferenceSession:()=>ho,Tensor:()=>Le,TrainingSession:()=>wo,default:()=>Lp,env:()=>Oe,registerBackend:()=>vt});$t();$t();$t();var $o="1.17.0";var Lp=Bn;{let e=(El(),Ct(Al)).wasmBackend;typeof navigator<"u"&&navigator.gpu&&vt("webgpu",e,5),vt("cpu",e,10),vt("wasm",e,10),vt("xnnpack",e,9),vt("webnn",e,9)}Object.defineProperty(Oe.versions,"web",{value:$o,enumerable:!0});return Ct(Gp);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
