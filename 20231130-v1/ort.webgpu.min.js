/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var Rn=Object.defineProperty;var jl=Object.getOwnPropertyDescriptor;var ql=Object.getOwnPropertyNames;var Kl=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var Kt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Wt=(e,t)=>{for(var r in t)Rn(e,r,{get:t[r],enumerable:!0})},Yl=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of ql(t))!Kl.call(e,n)&&n!==r&&Rn(e,n,{get:()=>t[n],enumerable:!(a=jl(t,n))||a.enumerable});return e};var At=e=>Yl(Rn({},"__esModule",{value:!0}),e);var Hr,Vt,$t,Lr,Gr=j(()=>{"use strict";Hr=new Map,Vt=[],$t=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Hr.get(e);if(a===void 0)Hr.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Vt.indexOf(e);n!==-1&&Vt.splice(n,1);for(let s=0;s<Vt.length;s++)if(Hr.get(Vt[s]).priority<=r){Vt.splice(s,0,e);return}Vt.push(e)}return}throw new TypeError("not a valid backend")},Lr=async e=>{let t=e.length===0?Vt:e,r=[];for(let a of t){let n=Hr.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let s=!!n.initPromise;try{return s||(n.initPromise=n.backend.init()),await n.initPromise,n.initialized=!0,n.backend}catch(u){s||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var Za=j(()=>{"use strict";Gr()});var Qa,Xa=j(()=>{"use strict";Qa="1.17.0"});var Ja,Pn,eo=j(()=>{"use strict";Xa();Ja="warning",Pn={wasm:{},webgl:{},webgpu:{},versions:{common:Qa},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Ja=e}},get logLevel(){return Ja}};Object.defineProperty(Pn,"logLevel",{enumerable:!0})});var Te,to=j(()=>{"use strict";eo();Te=Pn});var ro,no,ao=j(()=>{"use strict";ro=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,s;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[3]):(n=e.dims[3],s=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,o,c;l===void 0||l.mean===void 0?o=[255,255,255,255]:typeof l.mean=="number"?o=[l.mean,l.mean,l.mean,l.mean]:(o=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(o[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));let f=s*n,y=0,m=f,b=f*2,w=-1;u==="RGBA"?(y=0,m=f,b=f*2,w=f*3):u==="RGB"?(y=0,m=f,b=f*2):u==="RBG"&&(y=0,b=f,m=f*2);for(let $=0;$<s;$++)for(let I=0;I<n;I++){let _=(e.data[y++]-c[0])*o[0],x=(e.data[m++]-c[1])*o[1],P=(e.data[b++]-c[2])*o[2],A=w===-1?255:(e.data[w++]-c[3])*o[3];a.fillStyle="rgba("+_+","+x+","+P+","+A+")",a.fillRect(I,$,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},no=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,s,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],s=e.dims[1],u=e.dims[3]):(n=e.dims[3],s=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",o=t?.norm,c,f;o===void 0||o.mean===void 0?c=[255,255,255,255]:typeof o.mean=="number"?c=[o.mean,o.mean,o.mean,o.mean]:(c=[o.mean[0],o.mean[1],o.mean[2],255],o.mean[3]!==void 0&&(c[3]=o.mean[3])),o===void 0||o.bias===void 0?f=[0,0,0,0]:typeof o.bias=="number"?f=[o.bias,o.bias,o.bias,o.bias]:(f=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(f[3]=o.bias[3]));let y=s*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let m=4,b=0,w=1,$=2,I=3,_=0,x=y,P=y*2,A=-1;l==="RGBA"?(_=0,x=y,P=y*2,A=y*3):l==="RGB"?(_=0,x=y,P=y*2):l==="RBG"&&(_=0,P=y,x=y*2),a=r.createImageData(n,s);for(let B=0;B<s*n;b+=m,w+=m,$+=m,I+=m,B++)a.data[b]=(e.data[_++]-f[0])*c[0],a.data[w]=(e.data[x++]-f[1])*c[1],a.data[$]=(e.data[P++]-f[2])*c[2],a.data[I]=A===-1?255:(e.data[A++]-f[3])*c[3]}else throw new Error("Can not access image data");return a}});var Bn,oo,io,so,uo,lo=j(()=>{"use strict";Fr();Bn=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},s,u;typeof n.mean=="number"?s=[n.mean,n.mean,n.mean,n.mean]:s=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",o=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",c=r*a,f=o==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),y=4,m=0,b=1,w=2,$=3,I=0,_=c,x=c*2,P=-1;l==="RGB"&&(y=3,m=0,b=1,w=2,$=-1),o==="RGBA"?P=c*3:o==="RBG"?(I=0,x=c,_=c*2):o==="BGR"&&(x=0,_=c,I=c*2);for(let B=0;B<c;B++,m+=y,w+=y,b+=y,$+=y)f[I++]=(e[m]+u[0])/s[0],f[_++]=(e[b]+u[1])/s[1],f[x++]=(e[w]+u[2])/s[2],P!==-1&&$!==-1&&(f[P++]=(e[$]+u[3])/s[3]);return o==="RGBA"?new Ye("float32",f,[1,4,r,a]):new Ye("float32",f,[1,3,r,a])},oo=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",u,l=t??{};if(r){let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let c=o.getContext("2d");if(c!=null){let f=e.height,y=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(f=t.resizedHeight,y=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=f,l.width=y}else l.tensorFormat="RGBA",l.height=f,l.width=y;c.drawImage(e,0,0),u=c.getImageData(0,0,y,f).data}else throw new Error("Can not access image data")}else if(a){let o,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(o=t.resizedHeight,c=t.resizedWidth):(o=e.height,c=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=o,l.width=c,t!==void 0){let f=document.createElement("canvas");f.width=c,f.height=o;let y=f.getContext("2d");if(y!=null)y.putImageData(e,0,0),u=y.getImageData(0,0,c,o).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let o=document.createElement("canvas");o.width=e.width,o.height=e.height;let c=o.getContext("2d");if(c!=null){let f=e.height,y=e.width;return c.drawImage(e,0,0,y,f),u=c.getImageData(0,0,y,f).data,l.height=f,l.width=y,Bn(u,l)}else throw new Error("Can not access image data")}else{if(s)return new Promise((o,c)=>{let f=document.createElement("canvas"),y=f.getContext("2d");if(!e||!y)return c();let m=new Image;m.crossOrigin="Anonymous",m.src=e,m.onload=()=>{f.width=m.width,f.height=m.height,y.drawImage(m,0,0,f.width,f.height);let b=y.getImageData(0,0,f.width,f.height);l.height=f.height,l.width=f.width,o(Bn(b.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Bn(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},io=(e,t)=>{let{width:r,height:a,download:n,dispose:s}=t,u=[1,a,r,4];return new Ye({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:s})},so=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:s}=t;return new Ye({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:s})},uo=(e,t,r)=>new Ye({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var hr,jr,co,po,fo=j(()=>{"use strict";hr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),jr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),co=!1,po=()=>{if(!co){co=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(hr.set("int64",BigInt64Array),jr.set(BigInt64Array,"int64")),t&&(hr.set("uint64",BigUint64Array),jr.set(BigUint64Array,"uint64"))}}});var mo,ho,go=j(()=>{"use strict";Fr();mo=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},ho=(e,t)=>{switch(e.location){case"cpu":return new Ye(e.type,e.data,t);case"cpu-pinned":return new Ye({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Ye({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Ye({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Ye,Fr=j(()=>{"use strict";ao();lo();fo();go();Ye=class{constructor(t,r,a){po();let n,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,s=t.dims,t.location){case"cpu-pinned":{let l=hr.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,o;if(typeof t=="string")if(n=t,o=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let c=hr.get(t);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=c.from(r,BigInt):l=c.from(r)}else if(r instanceof c)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(o=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof t[0];if(c==="string")n="string",l=t;else if(c==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=jr.get(t.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=c,l=t}if(o===void 0)o=[l.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");s=o,this.cpuData=l,this.dataLocation="cpu"}let u=mo(s);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=s,this.size=u}static async fromImage(t,r){return oo(t,r)}static fromTexture(t,r){return io(t,r)}static fromGpuBuffer(t,r){return so(t,r)}static fromPinnedBuffer(t,r,a){return uo(t,r,a)}toDataURL(t){return ro(this,t)}toImageData(t){return no(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ho(this,t)}}});var Fe,qr=j(()=>{"use strict";Fr();Fe=Ye});var Kr,yo=j(()=>{"use strict";Gr();qr();Kr=class e{constructor(t){this.handler=t}async run(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Fe||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Fe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let c of r){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,f=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(f.indexOf(y)!==-1){let m=r[y];(m===null||m instanceof Fe)&&(c=!0,u=!1,n[y]=m)}if(c){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof t[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(u)for(let c of this.outputNames)n[c]=null;let l=await this.handler.run(t,n,s),o={};for(let c in l)if(Object.hasOwnProperty.call(l,c)){let f=l[c];f instanceof Fe?o[c]=f:o[c]=new Fe(f.type,f.data,f.dims)}return o}async release(){return this.handler.dispose()}static async create(t,r,a,n){let s,u={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let y=t,m=0,b=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(m=r,!Number.isSafeInteger(m))throw new RangeError("'byteOffset' must be an integer.");if(m<0||m>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(b=t.byteLength-m,typeof a=="number"){if(b=a,!Number.isSafeInteger(b))throw new RangeError("'byteLength' must be an integer.");if(b<=0||m+b>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-m}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(y,m,b)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let o=(u.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),f=await(await Lr(o)).createInferenceSessionHandler(s,u);return new e(f)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var bo,wo=j(()=>{"use strict";yo();bo=Kr});var vo=j(()=>{"use strict"});var Zl,Yr,$o=j(()=>{"use strict";Gr();qr();Zl="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Yr=class e{constructor(t){this.handler=t}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",s=r||{},l=(s.executionProviders||[]).map(c=>typeof c=="string"?c:c.name),o=await Lr(l);if(o.createTrainingSessionHandler){let c=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,s);return new e(c)}else throw new Error(Zl)}typeNarrowingForRunStep(t,r,a){let n={},s={};if(typeof t!="object"||t===null||t instanceof Fe||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Fe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let l of r){if(typeof l!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(l)===-1)throw new RangeError(`'fetches' contains invalid output name: ${l}.`);n[l]=null}if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let l=!1,o=Object.getOwnPropertyNames(r);for(let c of this.outputNames)if(o.indexOf(c)!==-1){let f=r[c];(f===null||f instanceof Fe)&&(l=!0,u=!1,n[c]=f)}if(l){if(typeof a=="object"&&a!==null)s=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let l of this.inputNames)if(typeof t[l]>"u")throw new Error(`input '${l}' is missing in 'feeds'.`);if(u)for(let l of this.outputNames)n[l]=null;return[n,s]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Fe?r[a]=n:r[a]=new Fe(n.type,n.data,n.dims)}return r}async runTrainStep(t,r,a){let[n,s]=this.typeNarrowingForRunStep(t,r,a),u=await this.handler.runTrainStep(t,n,s);return this.convertHandlerReturnTypeToMapOfTensors(u)}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var So,xo=j(()=>{"use strict";$o();So=Yr});var Mn={};Wt(Mn,{InferenceSession:()=>bo,Tensor:()=>Fe,TrainingSession:()=>So,env:()=>Te,registerBackend:()=>$t});var St=j(()=>{"use strict";Za();to();wo();qr();vo();xo()});var Dn={};Wt(Dn,{readFile:()=>Ql});var Ql,zn=j(()=>{Ql=void 0});var Wn={};Wt(Wn,{join:()=>Xl});var Xl,Vn=j(()=>{Xl=void 0});var Ao=Kt((_o,Nn)=>{"use strict";var Co=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,h)=>{a=d,n=h}),r.jsepInit=(d,h,v,C,T,L,H,ue)=>{r.Za=d,r.Oa=h,r.Qa=v,r.Ja=C,r.Pa=T,r.ra=L,r.Ra=H,r.Sa=ue,h=(Q,ne,J)=>(...ge)=>{let Se=et,k=ne?.();ge=Q(...ge);let oe=ne?.();return k!==oe&&(Q=oe,J(k),ne=J=null),et!=Se?Rr():ge},v=Q=>async(...ne)=>{try{if(r.Da)throw Error("Session already started");let J=r.Da={Ta:ne[0],errors:[]},ge=await Q(...ne);if(r.Da!==J)throw Error("Session mismatch");d.flush();let Se=J.errors;if(0<Se.length){let k=await Promise.all(Se);if(k=k.filter(oe=>oe),0<k.length)throw Error(k.join(`
`))}return ge}finally{r.Da=null}},r._OrtRun=v(h(r._OrtRun,()=>r._OrtRun,Q=>r._OrtRun=Q)),r._OrtRunWithBinding=v(h(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Q=>r._OrtRunWithBinding=Q)),r._OrtBindInput=h(r._OrtBindInput,()=>r._OrtBindInput,Q=>r._OrtBindInput=Q),r.jsepRegisterBuffer=(Q,ne,J,ge)=>d.registerBuffer(Q,ne,J,ge),r.jsepUnregisterBuffers=Q=>{d.unregisterBuffers(Q)},r.jsepGetBuffer=Q=>d.getBuffer(Q),r.jsepCreateDownloader=(Q,ne,J)=>d.createDownloader(Q,ne,J)};var s=Object.assign({},r),u="./this.program",l=(d,h)=>{throw h},o=typeof window=="object",c=typeof importScripts=="function",f=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",m,b,w;if(f){var $=(zn(),At(Dn)),I=(Vn(),At(Wn));y=c?I.dirname(y)+"/":__dirname+"/",m=(d,h)=>(d=d.startsWith("file://")?new URL(d):I.normalize(d),$.readFileSync(d,h?void 0:"utf8")),w=d=>(d=m(d,!0),d.buffer||(d=new Uint8Array(d)),d),b=(d,h,v,C=!0)=>{d=d.startsWith("file://")?new URL(d):I.normalize(d),$.readFile(d,C?void 0:"utf8",(T,L)=>{T?v(T):h(C?L.buffer:L)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,h)=>{throw process.exitCode=d,h},r.inspect=()=>"[Emscripten Module object]"}else(o||c)&&(c?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",m=d=>{var h=new XMLHttpRequest;return h.open("GET",d,!1),h.send(null),h.responseText},c&&(w=d=>{var h=new XMLHttpRequest;return h.open("GET",d,!1),h.responseType="arraybuffer",h.send(null),new Uint8Array(h.response)}),b=(d,h,v)=>{var C=new XMLHttpRequest;C.open("GET",d,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?h(C.response):v()},C.onerror=v,C.send(null)});var _=r.print||console.log.bind(console),x=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var P;r.wasmBinary&&(P=r.wasmBinary);var A=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Ne("no native wasm support detected");var B,O,V=!1,z,q,Z,M,Y,me,X;function we(){var d=B.buffer;r.HEAP8=q=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=M=new Int32Array(d),r.HEAPU8=Z=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=Y=new Uint32Array(d),r.HEAPF32=me=new Float32Array(d),r.HEAPF64=X=new Float64Array(d)}var F=[],le=[],pe=[];function ye(){var d=r.preRun.shift();F.unshift(d)}var he=0,qe=null,Be=null;function Ne(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",x(d),V=!0,z=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function G(d){return d.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!G(de)){var be=de;de=r.locateFile?r.locateFile(be,y):y+be}function Le(d){if(d==de&&P)return new Uint8Array(P);if(w)return w(d);throw"both async and sync fetching of the wasm failed"}function Ze(d){if(!P&&(o||c)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(h=>{if(!h.ok)throw"failed to load wasm binary file at '"+d+"'";return h.arrayBuffer()}).catch(()=>Le(d));if(b)return new Promise((h,v)=>{b(d,C=>h(new Uint8Array(C)),v)})}return Promise.resolve().then(()=>Le(d))}function Me(d,h,v){return Ze(d).then(C=>WebAssembly.instantiate(C,h)).then(C=>C).then(v,C=>{x("failed to asynchronously prepare wasm: "+C),Ne(C)})}function Ue(d,h){var v=de;return P||typeof WebAssembly.instantiateStreaming!="function"||G(v)||v.startsWith("file://")||f||typeof fetch!="function"?Me(v,d,h):fetch(v,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,d).then(h,function(T){return x("wasm streaming compile failed: "+T),x("falling back to ArrayBuffer instantiation"),Me(v,d,h)}))}var Ke,st={1425272:d=>{r.ra("Abs",d,void 0)},1425323:d=>{r.ra("Neg",d,void 0)},1425374:d=>{r.ra("Floor",d,void 0)},1425427:d=>{r.ra("Ceil",d,void 0)},1425479:d=>{r.ra("Reciprocal",d,void 0)},1425537:d=>{r.ra("Sqrt",d,void 0)},1425589:d=>{r.ra("Exp",d,void 0)},1425640:d=>{r.ra("Erf",d,void 0)},1425691:d=>{r.ra("Sigmoid",d,void 0)},1425746:d=>{r.ra("Log",d,void 0)},1425797:d=>{r.ra("Sin",d,void 0)},1425848:d=>{r.ra("Cos",d,void 0)},1425899:d=>{r.ra("Tan",d,void 0)},1425950:d=>{r.ra("Asin",d,void 0)},1426002:d=>{r.ra("Acos",d,void 0)},1426054:d=>{r.ra("Atan",d,void 0)},1426106:d=>{r.ra("Sinh",d,void 0)},1426158:d=>{r.ra("Cosh",d,void 0)},1426210:d=>{r.ra("Asinh",d,void 0)},1426263:d=>{r.ra("Acosh",d,void 0)},1426316:d=>{r.ra("Atanh",d,void 0)},1426369:d=>{r.ra("Tanh",d,void 0)},1426421:d=>{r.ra("Not",d,void 0)},1426472:(d,h,v)=>{r.ra("Clip",d,{min:h,max:v})},1426541:d=>{r.ra("Clip",d,void 0)},1426593:(d,h)=>{r.ra("Elu",d,{alpha:h})},1426651:d=>{r.ra("Relu",d,void 0)},1426703:(d,h)=>{r.ra("LeakyRelu",d,{alpha:h})},1426767:(d,h)=>{r.ra("ThresholdedRelu",d,{alpha:h})},1426837:d=>{r.Ra(d)},1426871:(d,h)=>r.Sa(d,h,r.Da.Ta,r.Da.errors),1426983:(d,h)=>{r.ra("Cast",d,{to:h})},1427041:d=>{r.ra("Add",d,void 0)},1427092:d=>{r.ra("Sub",d,void 0)},1427143:d=>{r.ra("Mul",d,void 0)},1427194:d=>{r.ra("Div",d,void 0)},1427245:d=>{r.ra("Pow",d,void 0)},1427296:d=>{r.ra("Equal",d,void 0)},1427349:d=>{r.ra("Greater",d,void 0)},1427404:d=>{r.ra("GreaterOrEqual",d,void 0)},1427466:d=>{r.ra("Less",d,void 0)},1427518:d=>{r.ra("LessOrEqual",d,void 0)},1427577:(d,h,v,C,T)=>{r.ra("ReduceMean",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1427741:(d,h,v,C,T)=>{r.ra("ReduceMax",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1427904:(d,h,v,C,T)=>{r.ra("ReduceMin",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1428067:(d,h,v,C,T)=>{r.ra("ReduceProd",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1428231:(d,h,v,C,T)=>{r.ra("ReduceSum",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1428394:(d,h,v,C,T)=>{r.ra("ReduceL1",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1428556:(d,h,v,C,T)=>{r.ra("ReduceL2",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1428718:(d,h,v,C,T)=>{r.ra("ReduceLogSum",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1428884:(d,h,v,C,T)=>{r.ra("ReduceSumSquare",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1429053:(d,h,v,C,T)=>{r.ra("ReduceLogSumExp",d,{keepDims:!!h,noopWithEmptyAxes:!!v,axes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1429222:d=>{r.ra("Where",d,void 0)},1429275:(d,h,v)=>{r.ra("Transpose",d,{perm:h?Array.from(M.subarray(v>>>0,v+h>>>0)):[]})},1429388:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se)=>{r.ra("Conv",d,{format:Q?"NHWC":"NCHW",auto_pad:h,dilations:[v],group:C,kernel_shape:[T],pads:L?Array.from(M.subarray(H>>>0,H+L>>>0)):[],strides:[ue],w_is_const:()=>!!q[ne>>>0],activation:ze(J),activation_params:ge?Array.from(me.subarray(Se>>>0,Se+ge>>>0)):[]})},1429769:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe,ve)=>{r.ra("Conv",d,{format:ge?"NHWC":"NCHW",auto_pad:h,dilations:[v,C],group:T,kernel_shape:[L,H],pads:ue?Array.from(M.subarray(Q>>>0,Q+ue>>>0)):[],strides:[ne,J],w_is_const:()=>!!q[Se>>>0],activation:ze(k),activation_params:oe?Array.from(me.subarray(ve>>>0,ve+oe>>>0)):[]})},1430171:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe)=>{r.ra("ConvTranspose",d,{format:Q?"NHWC":"NCHW",autoPad:h,dilations:[v],group:C,kernel_shape:[T],pads:[L,H],strides:[ue],wIsConst:()=>!!q[ne>>>0],outputPadding:J?Array.from(M.subarray(ge>>>0,ge+J>>>0)):[],outputShape:Se?Array.from(M.subarray(k>>>0,k+Se>>>0)):[],activation:ze(oe)})},1430585:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k)=>{r.ra("ConvTranspose",d,{format:ue?"NHWC":"NCHW",autoPad:h,dilations:Array.from(M.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(M.subarray(T>>>0,T+2>>>0)),pads:Array.from(M.subarray(L>>>0,L+4>>>0)),strides:Array.from(M.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!q[Q>>>0],outputPadding:0<ne?Array.from(M.subarray(J>>>0,J+ne>>>0)):[],outputShape:0<ge?Array.from(M.subarray(Se>>>0,Se+ge>>>0)):[],activation:ze(k)})},1431142:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe)=>{r.ra("ConvTranspose",d,{format:Q?"NHWC":"NCHW",autoPad:h,dilations:[v],group:C,kernel_shape:[T],pads:[L,H],strides:[ue],wIsConst:()=>!!q[ne>>>0],outputPadding:J?Array.from(M.subarray(ge>>>0,ge+J>>>0)):[],outputShape:Se?Array.from(M.subarray(k>>>0,k+Se>>>0)):[],activation:ze(oe)})},1431556:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k)=>{r.ra("ConvTranspose",d,{format:ue?"NHWC":"NCHW",autoPad:h,dilations:Array.from(M.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(M.subarray(T>>>0,T+2>>>0)),pads:Array.from(M.subarray(L>>>0,L+4>>>0)),strides:Array.from(M.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!q[Q>>>0],outputPadding:0<ne?Array.from(M.subarray(J>>>0,J+ne>>>0)):[],outputShape:0<ge?Array.from(M.subarray(Se>>>0,Se+ge>>>0)):[],activation:ze(k)})},1432113:(d,h)=>{r.ra("GlobalAveragePool",d,{format:h?"NHWC":"NCHW"})},1432204:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe,ve)=>{r.ra("AveragePool",d,{format:ve?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[ue,Q],pads:[ne,J,ge,Se],strides:[k,oe]})},1432488:(d,h)=>{r.ra("GlobalAveragePool",d,{format:h?"NHWC":"NCHW"})},1432579:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe,ve)=>{r.ra("AveragePool",d,{format:ve?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[ue,Q],pads:[ne,J,ge,Se],strides:[k,oe]})},1432863:(d,h)=>{r.ra("GlobalMaxPool",d,{format:h?"NHWC":"NCHW"})},1432950:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe,ve)=>{r.ra("MaxPool",d,{format:ve?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[ue,Q],pads:[ne,J,ge,Se],strides:[k,oe]})},1433230:(d,h)=>{r.ra("GlobalMaxPool",d,{format:h?"NHWC":"NCHW"})},1433317:(d,h,v,C,T,L,H,ue,Q,ne,J,ge,Se,k,oe,ve)=>{r.ra("MaxPool",d,{format:ve?"NHWC":"NCHW",auto_pad:h,ceil_mode:v,count_include_pad:C,storage_order:T,dilations:[L,H],kernel_shape:[ue,Q],pads:[ne,J,ge,Se],strides:[k,oe]})},1433597:(d,h,v,C,T)=>{r.ra("Gemm",d,{alpha:h,beta:v,transA:C,transB:T})},1433701:d=>{r.ra("MatMul",d,void 0)},1433755:(d,h,v,C)=>{r.ra("ArgMax",d,{keepDims:!!h,selectLastIndex:!!v,axis:C})},1433863:(d,h,v,C)=>{r.ra("ArgMin",d,{keepDims:!!h,selectLastIndex:!!v,axis:C})},1433971:(d,h)=>{r.ra("Softmax",d,{axis:h})},1434034:(d,h)=>{r.ra("Concat",d,{axis:h})},1434094:(d,h,v,C,T)=>{r.ra("Split",d,{axis:h,numOutputs:v,splitSizes:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1434239:d=>{r.ra("Expand",d,void 0)},1434293:(d,h)=>{r.ra("Gather",d,{axis:Number(h)})},1434364:(d,h)=>{r.ra("GatherElements",d,{axis:Number(h)})},1434443:(d,h,v,C,T,L,H,ue,Q,ne,J)=>{r.ra("Resize",d,{antialias:h,axes:v?Array.from(M.subarray(C>>>0,C+v>>>0)):[],coordinateTransformMode:ze(T),cubicCoeffA:L,excludeOutside:H,extrapolationValue:ue,keepAspectRatioPolicy:ze(Q),mode:ze(ne),nearestMode:ze(J)})},1434794:(d,h,v,C,T,L,H)=>{r.ra("Slice",d,{starts:h?Array.from(M.subarray(v>>>0,v+h>>>0)):[],ends:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[],axes:L?Array.from(M.subarray(H>>>0,H+L>>>0)):[]})},1435025:d=>{r.ra("Tile",d,void 0)},1435077:(d,h,v)=>{r.ra("LayerNormalization",d,{axis:Number(h),epsilon:Number(v)})},1435184:(d,h,v)=>{r.ra("InstanceNormalization",d,{epsilon:h,format:v?"NHWC":"NCHW"})},1435298:(d,h,v)=>{r.ra("InstanceNormalization",d,{epsilon:h,format:v?"NHWC":"NCHW"})},1435412:d=>{r.ra("Range",d,void 0)},1435465:(d,h)=>{r.ra("Einsum",d,{equation:ze(h)})},1435546:(d,h,v,C,T)=>{r.ra("Pad",d,{mode:h,value:v,pads:C?Array.from(M.subarray(T>>>0,T+C>>>0)):[]})},1435678:(d,h,v,C,T,L)=>{r.ra("BatchNormalization",d,{epsilon:h,momentum:v,spatial:!!T,trainingMode:!!C,format:L?"NHWC":"NCHW"})},1435847:(d,h,v,C,T,L)=>{r.ra("BatchNormalization",d,{epsilon:h,momentum:v,spatial:!!T,trainingMode:!!C,format:L?"NHWC":"NCHW"})},1436016:(d,h,v,C,T,L,H,ue,Q)=>{r.ra("Attention",d,{numHeads:h,isUnidirectional:v,maskFilterValue:C,scale:T,doRotary:L,qkvHiddenSizes:H?Array.from(M.subarray(Number(ue)>>>0,Number(ue)+H>>>0)):[],pastPresentShareBuffer:!!Q})},1436288:d=>{r.ra("Gelu",d,void 0)},1436340:(d,h,v,C,T,L)=>{r.ra("MultiHeadAttention",d,{numHeads:h,isUnidirectional:v,maskFilterValue:C,scale:T,doRotary:L})},1436499:d=>{r.ra("BiasAdd",d,void 0)},1436554:d=>{r.ra("BiasSplitGelu",d,void 0)},1436615:(d,h)=>{r.ra("SkipLayerNormalization",d,{epsilon:h})},1436696:d=>r.Oa(d),1436729:d=>r.Qa(d),1436761:(d,h,v)=>{r.Ja(d,h,v,!0)},1436800:(d,h,v)=>{r.Ja(d,h,v)}};function Je(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var kt=d=>{for(;0<d.length;)d.shift()(r)};function Rt(d){this.Ha=d-24,this.Ma=function(h){Y[this.Ha+4>>2>>>0]=h},this.La=function(h){Y[this.Ha+8>>2>>>0]=h},this.Ya=function(h,v){this.Ka(),this.Ma(h),this.La(v)},this.Ka=function(){Y[this.Ha+16>>2>>>0]=0}}var Xt=0,Cr=0,rt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Jt=(d,h,v)=>{h>>>=0;var C=h+v;for(v=h;d[v]&&!(v>=C);)++v;if(16<v-h&&d.buffer&&rt)return rt.decode(d.subarray(h,v));for(C="";h<v;){var T=d[h++];if(T&128){var L=d[h++]&63;if((T&224)==192)C+=String.fromCharCode((T&31)<<6|L);else{var H=d[h++]&63;T=(T&240)==224?(T&15)<<12|L<<6|H:(T&7)<<18|L<<12|H<<6|d[h++]&63,65536>T?C+=String.fromCharCode(T):(T-=65536,C+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else C+=String.fromCharCode(T)}return C},ze=(d,h)=>(d>>>=0)?Jt(Z,d,h):"",Ut=d=>{for(var h=0,v=0;v<d.length;++v){var C=d.charCodeAt(v);127>=C?h++:2047>=C?h+=2:55296<=C&&57343>=C?(h+=4,++v):h+=3}return h},er=(d,h,v,C)=>{if(v>>>=0,!(0<C))return 0;var T=v;C=v+C-1;for(var L=0;L<d.length;++L){var H=d.charCodeAt(L);if(55296<=H&&57343>=H){var ue=d.charCodeAt(++L);H=65536+((H&1023)<<10)|ue&1023}if(127>=H){if(v>=C)break;h[v++>>>0]=H}else{if(2047>=H){if(v+1>=C)break;h[v++>>>0]=192|H>>6}else{if(65535>=H){if(v+2>=C)break;h[v++>>>0]=224|H>>12}else{if(v+3>=C)break;h[v++>>>0]=240|H>>18,h[v++>>>0]=128|H>>12&63}h[v++>>>0]=128|H>>6&63}h[v++>>>0]=128|H&63}}return h[v>>>0]=0,v-T},yt=d=>d%4===0&&(d%100!==0||d%400===0),_r=[0,31,60,91,121,152,182,213,244,274,305,335],bt=[0,31,59,90,120,151,181,212,243,273,304,334],Ht=d=>{var h=Ut(d)+1,v=jt(h);return v&&er(d,Z,v,h),v},It=[],Lt=(d,h)=>{It.length=0;var v;for(h>>=2;v=Z[d++>>>0];)h+=v!=105&h,It.push(v==105?M[h>>>0]:X[h++>>>1]),++h;return It},Gt={},tr=()=>{if(!Ft){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},h;for(h in Gt)Gt[h]===void 0?delete d[h]:d[h]=Gt[h];var v=[];for(h in d)v.push(`${h}=${d[h]}`);Ft=v}return Ft},Ft,Ar=[null,[],[]],Ge=[31,29,31,30,31,30,31,31,30,31,30,31],rr=[31,28,31,30,31,30,31,31,30,31,30,31];function nr(d){var h=Array(Ut(d)+1);return er(d,h,0,h.length),h}function se(d,h,v,C){function T(k,oe,ve){for(k=typeof k=="number"?k.toString():k||"";k.length<oe;)k=ve[0]+k;return k}function L(k,oe){return T(k,oe,"0")}function H(k,oe){function ve(mr){return 0>mr?-1:0<mr?1:0}var vt;return(vt=ve(k.getFullYear()-oe.getFullYear()))===0&&(vt=ve(k.getMonth()-oe.getMonth()))===0&&(vt=ve(k.getDate()-oe.getDate())),vt}function ue(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function Q(k){var oe=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<oe;){var ve=k.getMonth(),vt=(yt(k.getFullYear())?Ge:rr)[ve];if(oe>vt-k.getDate())oe-=vt-k.getDate()+1,k.setDate(1),11>ve?k.setMonth(ve+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+oe);break}}return ve=new Date(k.getFullYear()+1,0,4),oe=ue(new Date(k.getFullYear(),0,4)),ve=ue(ve),0>=H(oe,k)?0>=H(ve,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}d>>>=0,h>>>=0,v>>>=0,C>>>=0;var ne=M[C+40>>2>>>0];C={Wa:M[C>>2>>>0],Va:M[C+4>>2>>>0],Ea:M[C+8>>2>>>0],Ia:M[C+12>>2>>>0],Fa:M[C+16>>2>>>0],Ca:M[C+20>>2>>>0],wa:M[C+24>>2>>>0],Ba:M[C+28>>2>>>0],$a:M[C+32>>2>>>0],Ua:M[C+36>>2>>>0],Xa:ne?ze(ne):""},v=ze(v),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var J in ne)v=v.replace(new RegExp(J,"g"),ne[J]);var ge="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Se="January February March April May June July August September October November December".split(" ");ne={"%a":k=>ge[k.wa].substring(0,3),"%A":k=>ge[k.wa],"%b":k=>Se[k.Fa].substring(0,3),"%B":k=>Se[k.Fa],"%C":k=>L((k.Ca+1900)/100|0,2),"%d":k=>L(k.Ia,2),"%e":k=>T(k.Ia,2," "),"%g":k=>Q(k).toString().substring(2),"%G":k=>Q(k),"%H":k=>L(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),L(k,2)),"%j":k=>{for(var oe=0,ve=0;ve<=k.Fa-1;oe+=(yt(k.Ca+1900)?Ge:rr)[ve++]);return L(k.Ia+oe,3)},"%m":k=>L(k.Fa+1,2),"%M":k=>L(k.Va,2),"%n":()=>`
`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>L(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>L(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var oe=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&oe++,oe)oe==53&&(ve=(k.wa+371-k.Ba)%7,ve==4||ve==3&&yt(k.Ca)||(oe=1));else{oe=52;var ve=(k.wa+7-k.Ba-1)%7;(ve==4||ve==5&&yt(k.Ca%400-1))&&oe++}return L(oe,2)},"%w":k=>k.wa,"%W":k=>L(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var oe=0<=k;return k=Math.abs(k)/60,(oe?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},v=v.replace(/%%/g,"\0\0");for(J in ne)v.includes(J)&&(v=v.replace(new RegExp(J,"g"),ne[J](C)));return v=v.replace(/\0\0/g,"%"),J=nr(v),J.length>h?0:(q.set(J,d>>>0),J.length-1)}function wt(d){try{d()}catch(h){Ne(h)}}function Er(d){var h={},v;for(v in d)(function(C){var T=d[C];h[C]=typeof T=="function"?function(){Pt.push(C);try{return T.apply(null,arguments)}finally{V||(Pt.pop()===C||Ne(),et&&ut===1&&Pt.length===0&&(ut=0,wt(pr),typeof Fibers<"u"&&Fibers.ab()))}}:T})(v);return h}var ut=0,et=null,Tr=0,Pt=[],ar={},or={},Or=0,Bt=null,kr=[];function Rr(){return new Promise((d,h)=>{Bt={resolve:d,reject:h}})}function Pr(){var d=jt(65548),h=d+12;Y[d>>2>>>0]=h,Y[d+4>>2>>>0]=h+65536,h=Pt[0];var v=ar[h];return v===void 0&&(v=Or++,ar[h]=v,or[v]=h),M[d+8>>2>>>0]=v,d}function Br(d){if(!V){if(ut===0){var h=!1,v=!1;d((C=0)=>{if(!V&&(Tr=C,h=!0,v)){ut=2,wt(()=>qt(et)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),C=!1;try{var T=(0,O[or[M[et+8>>2>>>0]]])()}catch(ue){T=ue,C=!0}var L=!1;if(!et){var H=Bt;H&&(Bt=null,(C?H.reject:H.resolve)(T),L=!0)}if(C&&!L)throw T}}),v=!0,h||(ut=1,et=Pr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),wt(()=>cr(et)))}else ut===2?(ut=0,wt(Mt),ir(et),et=null,kr.forEach(C=>{if(!V)try{if(C(),!A)try{z=z=C=z,A||(r.onExit&&r.onExit(C),V=!0),l(C,new Je(C))}catch(T){T instanceof Je||T=="unwind"||l(1,T)}}catch(T){T instanceof Je||T=="unwind"||l(1,T)}})):Ne(`invalid state: ${ut}`);return Tr}}function Mr(d){return Br(h=>{d().then(h)})}var Dr={n:function(d,h,v){return Mr(async()=>{await r.Pa(d,h,v)})},a:function(d,h,v){throw d>>>=0,new Rt(d).Ya(h>>>0,v>>>0),Xt=d,Cr++,Xt},d:function(){return 0},L:function(){},A:function(){},C:function(){},u:function(){return 0},J:function(){},E:function(){},I:function(){},l:function(){},B:function(){},y:function(){},K:function(){},z:function(){},m:()=>!0,q:function(d,h,v){d=h+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*h:NaN,v>>>=0,d=new Date(1e3*d),M[v>>2>>>0]=d.getUTCSeconds(),M[v+4>>2>>>0]=d.getUTCMinutes(),M[v+8>>2>>>0]=d.getUTCHours(),M[v+12>>2>>>0]=d.getUTCDate(),M[v+16>>2>>>0]=d.getUTCMonth(),M[v+20>>2>>>0]=d.getUTCFullYear()-1900,M[v+24>>2>>>0]=d.getUTCDay(),M[v+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,h,v){d=h+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*h:NaN,v>>>=0,d=new Date(1e3*d),M[v>>2>>>0]=d.getSeconds(),M[v+4>>2>>>0]=d.getMinutes(),M[v+8>>2>>>0]=d.getHours(),M[v+12>>2>>>0]=d.getDate(),M[v+16>>2>>>0]=d.getMonth(),M[v+20>>2>>>0]=d.getFullYear()-1900,M[v+24>>2>>>0]=d.getDay(),M[v+28>>2>>>0]=(yt(d.getFullYear())?_r:bt)[d.getMonth()]+d.getDate()-1|0,M[v+36>>2>>>0]=-(60*d.getTimezoneOffset()),h=new Date(d.getFullYear(),6,1).getTimezoneOffset();var C=new Date(d.getFullYear(),0,1).getTimezoneOffset();M[v+32>>2>>>0]=(h!=C&&d.getTimezoneOffset()==Math.min(C,h))|0},s:function(d){d>>>=0;var h=new Date(M[d+20>>2>>>0]+1900,M[d+16>>2>>>0],M[d+12>>2>>>0],M[d+8>>2>>>0],M[d+4>>2>>>0],M[d>>2>>>0],0),v=M[d+32>>2>>>0],C=h.getTimezoneOffset(),T=new Date(h.getFullYear(),6,1).getTimezoneOffset(),L=new Date(h.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(L,T);return 0>v?M[d+32>>2>>>0]=+(T!=L&&H==C):0<v!=(H==C)&&(T=Math.max(L,T),h.setTime(h.getTime()+6e4*((0<v?H:T)-C))),M[d+24>>2>>>0]=h.getDay(),M[d+28>>2>>>0]=(yt(h.getFullYear())?_r:bt)[h.getMonth()]+h.getDate()-1|0,M[d>>2>>>0]=h.getSeconds(),M[d+4>>2>>>0]=h.getMinutes(),M[d+8>>2>>>0]=h.getHours(),M[d+12>>2>>>0]=h.getDate(),M[d+16>>2>>>0]=h.getMonth(),M[d+20>>2>>>0]=h.getYear(),d=h.getTime()/1e3,sr((Ke=d,1<=+Math.abs(Ke)?0<Ke?+Math.floor(Ke/4294967296)>>>0:~~+Math.ceil((Ke-+(~~Ke>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},w:function(d,h,v){function C(Q){return(Q=Q.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Q[1]:"GMT"}v>>>=0;var T=new Date().getFullYear(),L=new Date(T,0,1),H=new Date(T,6,1);T=L.getTimezoneOffset();var ue=H.getTimezoneOffset();Y[d>>>0>>2>>>0]=60*Math.max(T,ue),M[h>>>0>>2>>>0]=+(T!=ue),d=C(L),h=C(H),d=Ht(d),h=Ht(h),ue<T?(Y[v>>2>>>0]=d,Y[v+4>>2>>>0]=h):(Y[v>>2>>>0]=h,Y[v+4>>2>>>0]=d)},e:()=>{Ne("")},b:function(d,h,v){return d>>>=0,h=Lt(h>>>0,v>>>0),st[d].apply(null,h)},j:function(d,h,v){return d>>>=0,h=Lt(h>>>0,v>>>0),st[d].apply(null,h)},i:function(){return Date.now()},x:function(){return 4294901760},f:()=>performance.now(),H:function(d,h,v){return h>>>=0,Z.copyWithin(d>>>0>>>0,h>>>0,h+(v>>>0)>>>0)},v:function(d){d>>>=0;var h=Z.length;if(4294901760<d)return!1;for(var v=1;4>=v;v*=2){var C=h*(1+.2/v);C=Math.min(C,d+100663296);var T=Math;C=Math.max(d,C);e:{T=T.min.call(T,4294901760,C+(65536-C%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(T),we();var L=1;break e}catch{}L=void 0}if(L)return!0}return!1},F:function(d,h){d>>>=0,h>>>=0;var v=0;return tr().forEach(function(C,T){var L=h+v;for(T=Y[d+4*T>>2>>>0]=L,L=0;L<C.length;++L)q[T++>>0>>>0]=C.charCodeAt(L);q[T>>0>>>0]=0,v+=C.length+1}),0},G:function(d,h){d>>>=0,h>>>=0;var v=tr();Y[d>>2>>>0]=v.length;var C=0;return v.forEach(function(T){C+=T.length+1}),Y[h>>2>>>0]=C,0},g:()=>52,k:function(){return 52},t:function(){return 70},h:function(d,h,v,C){h>>>=0,v>>>=0,C>>>=0;for(var T=0,L=0;L<v;L++){var H=Y[h>>2>>>0],ue=Y[h+4>>2>>>0];h+=8;for(var Q=0;Q<ue;Q++){var ne=Z[H+Q>>>0],J=Ar[d];ne===0||ne===10?((d===1?_:x)(Jt(J,0)),J.length=0):J.push(ne)}T+=ue}return Y[C>>2>>>0]=T,0},D:se,c:function(d,h,v,C){return se(d>>>0,h>>>0,v>>>0,C>>>0)}};(function(){function d(v){if(v=v.exports,v=Er(v),O=v=Ct(v),B=O.M,we(),le.unshift(O.N),he--,r.monitorRunDependencies&&r.monitorRunDependencies(he),he==0&&(qe!==null&&(clearInterval(qe),qe=null),Be)){var C=Be;Be=null,C()}return v}var h={a:Dr};if(he++,r.monitorRunDependencies&&r.monitorRunDependencies(he),r.instantiateWasm)try{return r.instantiateWasm(h,d)}catch(v){x("Module.instantiateWasm callback failed with error: "+v),n(v)}return Ue(h,function(v){d(v.instance)}).catch(n),{}})(),r._OrtInit=(d,h)=>(r._OrtInit=O.O)(d,h),r._OrtGetLastError=(d,h)=>(r._OrtGetLastError=O.P)(d,h),r._OrtCreateSessionOptions=(d,h,v,C,T,L,H,ue,Q,ne)=>(r._OrtCreateSessionOptions=O.Q)(d,h,v,C,T,L,H,ue,Q,ne),r._OrtAppendExecutionProvider=(d,h)=>(r._OrtAppendExecutionProvider=O.R)(d,h),r._OrtAddFreeDimensionOverride=(d,h,v)=>(r._OrtAddFreeDimensionOverride=O.S)(d,h,v),r._OrtAddSessionConfigEntry=(d,h,v)=>(r._OrtAddSessionConfigEntry=O.T)(d,h,v),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=O.U)(d),r._OrtCreateSession=(d,h,v)=>(r._OrtCreateSession=O.V)(d,h,v),r._OrtReleaseSession=d=>(r._OrtReleaseSession=O.W)(d),r._OrtGetInputOutputCount=(d,h,v)=>(r._OrtGetInputOutputCount=O.X)(d,h,v),r._OrtGetInputName=(d,h)=>(r._OrtGetInputName=O.Y)(d,h),r._OrtGetOutputName=(d,h)=>(r._OrtGetOutputName=O.Z)(d,h),r._OrtFree=d=>(r._OrtFree=O._)(d),r._OrtCreateTensor=(d,h,v,C,T,L)=>(r._OrtCreateTensor=O.$)(d,h,v,C,T,L),r._OrtGetTensorData=(d,h,v,C,T)=>(r._OrtGetTensorData=O.aa)(d,h,v,C,T),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=O.ba)(d),r._OrtCreateRunOptions=(d,h,v,C)=>(r._OrtCreateRunOptions=O.ca)(d,h,v,C),r._OrtAddRunConfigEntry=(d,h,v)=>(r._OrtAddRunConfigEntry=O.da)(d,h,v),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=O.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=O.fa)(d),r._OrtBindInput=(d,h,v)=>(r._OrtBindInput=O.ga)(d,h,v),r._OrtBindOutput=(d,h,v,C)=>(r._OrtBindOutput=O.ha)(d,h,v,C),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=O.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=O.ja)(d),r._OrtRunWithBinding=(d,h,v,C,T)=>(r._OrtRunWithBinding=O.ka)(d,h,v,C,T),r._OrtRun=(d,h,v,C,T,L,H,ue)=>(r._OrtRun=O.la)(d,h,v,C,T,L,H,ue),r._OrtEndProfiling=d=>(r._OrtEndProfiling=O.ma)(d),r._JsepOutput=(d,h,v)=>(r._JsepOutput=O.na)(d,h,v),r._JsepGetNodeName=d=>(r._JsepGetNodeName=O.oa)(d);var jt=r._malloc=d=>(jt=r._malloc=O.pa)(d),ir=r._free=d=>(ir=r._free=O.qa)(d),sr=d=>(sr=O.sa)(d),ur=()=>(ur=O.ta)(),lr=d=>(lr=O.ua)(d),dr=d=>(dr=O.va)(d),cr=d=>(cr=O.xa)(d),pr=()=>(pr=O.ya)(),qt=d=>(qt=O.za)(d),Mt=()=>(Mt=O.Aa)();r.___start_em_js=1436833,r.___stop_em_js=1436994;function Ct(d){d=Object.assign({},d);var h=C=>()=>C()>>>0,v=C=>T=>C(T)>>>0;return d.__errno_location=h(d.__errno_location),d.malloc=v(d.malloc),d.stackSave=h(d.stackSave),d.stackAlloc=v(d.stackAlloc),d}r.stackAlloc=dr,r.stackSave=ur,r.stackRestore=lr,r.UTF8ToString=ze,r.stringToUTF8=(d,h,v)=>er(d,Z,h,v),r.lengthBytesUTF8=Ut;var Dt;Be=function d(){Dt||fr(),Dt||(Be=d)};function fr(){function d(){if(!Dt&&(Dt=!0,r.calledRun=!0,!V)){if(kt(le),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var h=r.postRun.shift();pe.unshift(h)}kt(pe)}}if(!(0<he)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)ye();kt(F),0<he||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return fr(),t.ready}})();typeof _o=="object"&&typeof Nn=="object"?Nn.exports=Co:typeof define=="function"&&define.amd&&define([],()=>Co)});var Eo=Kt(()=>{});var To=Kt(()=>{});var Oo={};Wt(Oo,{cpus:()=>Jl});var Jl,ko=j(()=>{Jl=void 0});var Bo=Kt((Po,Un)=>{"use strict";var Ro=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return we.buffer!=he.buffer&&be(),he}function a(){return we.buffer!=he.buffer&&be(),qe}function n(){return we.buffer!=he.buffer&&be(),Be}function s(){return we.buffer!=he.buffer&&be(),Ne}function u(){return we.buffer!=he.buffer&&be(),G}function l(){return we.buffer!=he.buffer&&be(),de}var o=t,c,f;o.ready=new Promise((i,p)=>{c=i,f=p}),o.jsepInit=(i,p,g,S,E,D,U,ae)=>{o.Qb=i,o.wb=p,o.yb=g,o.jb=S,o.xb=E,o.Ea=D,o.zb=U,o.Ab=ae,p=(ee,re,ie)=>(...xe)=>{let _e=lt,R=re?.();xe=ee(...xe);let ce=re?.();return R!==ce&&(ee=ce,ie(R),re=ie=null),lt!=_e?Wl():xe},g=ee=>async(...re)=>{try{if(o.bb)throw Error("Session already started");let ie=o.bb={Fb:re[0],errors:[]},xe=await ee(...re);if(o.bb!==ie)throw Error("Session mismatch");i.flush();let _e=ie.errors;if(0<_e.length){let R=await Promise.all(_e);if(R=R.filter(ce=>ce),0<R.length)throw Error(R.join(`
`))}return xe}finally{o.bb=null}},o._OrtRun=g(p(o._OrtRun,()=>o._OrtRun,ee=>o._OrtRun=ee)),o._OrtRunWithBinding=g(p(o._OrtRunWithBinding,()=>o._OrtRunWithBinding,ee=>o._OrtRunWithBinding=ee)),o._OrtBindInput=p(o._OrtBindInput,()=>o._OrtBindInput,ee=>o._OrtBindInput=ee),o.jsepRegisterBuffer=(ee,re,ie,xe)=>i.registerBuffer(ee,re,ie,xe),o.jsepUnregisterBuffers=ee=>{i.unregisterBuffers(ee)},o.jsepGetBuffer=ee=>i.getBuffer(ee),o.jsepCreateDownloader=(ee,re,ie)=>i.createDownloader(ee,re,ie)};var y=Object.assign({},o),m="./this.program",b=(i,p)=>{throw p},w=typeof window=="object",$=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",_=o.ENVIRONMENT_IS_PTHREAD||!1,x="";function P(i){return o.locateFile?o.locateFile(i,x):x+i}var A,B,O;if(I){var V=(zn(),At(Dn)),z=(Vn(),At(Wn));x=$?z.dirname(x)+"/":__dirname+"/",A=(p,g)=>(p=p.startsWith("file://")?new URL(p):z.normalize(p),V.readFileSync(p,g?void 0:"utf8")),O=p=>(p=A(p,!0),p.buffer||(p=new Uint8Array(p)),p),B=(p,g,S,E=!0)=>{p=p.startsWith("file://")?new URL(p):z.normalize(p),V.readFile(p,E?void 0:"utf8",(D,U)=>{D?S(D):g(E?U.buffer:U)})},!o.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),b=(p,g)=>{throw process.exitCode=p,g},o.inspect=()=>"[Emscripten Module object]";let i;try{i=Eo()}catch(p){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),p}global.Worker=i.Worker}else(w||$)&&($?x=self.location.href:typeof document<"u"&&document.currentScript&&(x=document.currentScript.src),typeof e<"u"&&e&&(x=e),x.indexOf("blob:")!==0?x=x.substr(0,x.replace(/[?#].*/,"").lastIndexOf("/")+1):x="",I||(A=i=>{var p=new XMLHttpRequest;return p.open("GET",i,!1),p.send(null),p.responseText},$&&(O=i=>{var p=new XMLHttpRequest;return p.open("GET",i,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),B=(i,p,g)=>{var S=new XMLHttpRequest;S.open("GET",i,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?p(S.response):g()},S.onerror=g,S.send(null)}));I&&typeof performance>"u"&&(global.performance=To().performance);var q=console.log.bind(console),Z=console.error.bind(console);I&&(q=(...i)=>V.writeSync(1,i.join(" ")+`
`),Z=(...i)=>V.writeSync(2,i.join(" ")+`
`));var M=o.print||q,Y=o.printErr||Z;Object.assign(o,y),y=null,o.thisProgram&&(m=o.thisProgram),o.quit&&(b=o.quit);var me;o.wasmBinary&&(me=o.wasmBinary);var X=o.noExitRuntime||!0;typeof WebAssembly!="object"&&rt("no native wasm support detected");var we,F,le,pe=!1,ye,he,qe,Be,Ne,G,de;function be(){var i=we.buffer;o.HEAP8=he=new Int8Array(i),o.HEAP16=new Int16Array(i),o.HEAP32=Be=new Int32Array(i),o.HEAPU8=qe=new Uint8Array(i),o.HEAPU16=new Uint16Array(i),o.HEAPU32=Ne=new Uint32Array(i),o.HEAPF32=G=new Float32Array(i),o.HEAPF64=de=new Float64Array(i)}var Le=o.INITIAL_MEMORY||16777216;if(5242880<=Le||rt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Le+"! (STACK_SIZE=5242880)"),_)we=o.wasmMemory;else if(o.wasmMemory)we=o.wasmMemory;else if(we=new WebAssembly.Memory({initial:Le/65536,maximum:65536,shared:!0}),!(we.buffer instanceof SharedArrayBuffer))throw Y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&Y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");be(),Le=we.buffer.byteLength;var Ze=[],Me=[],Ue=[],Ke=0;function st(){return X||0<Ke}var Je=0,kt=null,Rt=null;function Xt(){Je++,o.monitorRunDependencies&&o.monitorRunDependencies(Je)}function Cr(){if(Je--,o.monitorRunDependencies&&o.monitorRunDependencies(Je),Je==0&&(kt!==null&&(clearInterval(kt),kt=null),Rt)){var i=Rt;Rt=null,i()}}function rt(i){throw o.onAbort&&o.onAbort(i),i="Aborted("+i+")",Y(i),pe=!0,ye=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),f(i),i}function Jt(i){return i.startsWith("data:application/octet-stream;base64,")}var ze;ze="ort-wasm-simd-threaded.wasm",Jt(ze)||(ze=P(ze));function Ut(i){if(i==ze&&me)return new Uint8Array(me);if(O)return O(i);throw"both async and sync fetching of the wasm failed"}function er(i){if(!me&&(w||$)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at '"+i+"'";return p.arrayBuffer()}).catch(()=>Ut(i));if(B)return new Promise((p,g)=>{B(i,S=>p(new Uint8Array(S)),g)})}return Promise.resolve().then(()=>Ut(i))}function yt(i,p,g){return er(i).then(S=>WebAssembly.instantiate(S,p)).then(S=>S).then(g,S=>{Y("failed to asynchronously prepare wasm: "+S),rt(S)})}function _r(i,p){var g=ze;return me||typeof WebAssembly.instantiateStreaming!="function"||Jt(g)||g.startsWith("file://")||I||typeof fetch!="function"?yt(g,i,p):fetch(g,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,i).then(p,function(E){return Y("wasm streaming compile failed: "+E),Y("falling back to ArrayBuffer instantiation"),yt(g,i,p)}))}var bt,Ht={913548:i=>{o.Ea("Abs",i,void 0)},913599:i=>{o.Ea("Neg",i,void 0)},913650:i=>{o.Ea("Floor",i,void 0)},913703:i=>{o.Ea("Ceil",i,void 0)},913755:i=>{o.Ea("Reciprocal",i,void 0)},913813:i=>{o.Ea("Sqrt",i,void 0)},913865:i=>{o.Ea("Exp",i,void 0)},913916:i=>{o.Ea("Erf",i,void 0)},913967:i=>{o.Ea("Sigmoid",i,void 0)},914022:i=>{o.Ea("Log",i,void 0)},914073:i=>{o.Ea("Sin",i,void 0)},914124:i=>{o.Ea("Cos",i,void 0)},914175:i=>{o.Ea("Tan",i,void 0)},914226:i=>{o.Ea("Asin",i,void 0)},914278:i=>{o.Ea("Acos",i,void 0)},914330:i=>{o.Ea("Atan",i,void 0)},914382:i=>{o.Ea("Sinh",i,void 0)},914434:i=>{o.Ea("Cosh",i,void 0)},914486:i=>{o.Ea("Asinh",i,void 0)},914539:i=>{o.Ea("Acosh",i,void 0)},914592:i=>{o.Ea("Atanh",i,void 0)},914645:i=>{o.Ea("Tanh",i,void 0)},914697:i=>{o.Ea("Not",i,void 0)},914748:(i,p,g)=>{o.Ea("Clip",i,{min:p,max:g})},914817:i=>{o.Ea("Clip",i,void 0)},914869:(i,p)=>{o.Ea("Elu",i,{alpha:p})},914927:i=>{o.Ea("Relu",i,void 0)},914979:(i,p)=>{o.Ea("LeakyRelu",i,{alpha:p})},915043:(i,p)=>{o.Ea("ThresholdedRelu",i,{alpha:p})},915113:(i,p)=>{o.Ea("Cast",i,{to:p})},915171:i=>{o.Ea("Add",i,void 0)},915222:i=>{o.Ea("Sub",i,void 0)},915273:i=>{o.Ea("Mul",i,void 0)},915324:i=>{o.Ea("Div",i,void 0)},915375:i=>{o.Ea("Pow",i,void 0)},915426:i=>{o.Ea("Equal",i,void 0)},915479:i=>{o.Ea("Greater",i,void 0)},915534:i=>{o.Ea("GreaterOrEqual",i,void 0)},915596:i=>{o.Ea("Less",i,void 0)},915648:i=>{o.Ea("LessOrEqual",i,void 0)},915707:(i,p,g,S,E)=>{o.Ea("ReduceMean",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},915871:(i,p,g,S,E)=>{o.Ea("ReduceMax",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},916034:(i,p,g,S,E)=>{o.Ea("ReduceMin",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},916197:(i,p,g,S,E)=>{o.Ea("ReduceProd",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},916361:(i,p,g,S,E)=>{o.Ea("ReduceSum",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},916524:(i,p,g,S,E)=>{o.Ea("ReduceL1",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},916686:(i,p,g,S,E)=>{o.Ea("ReduceL2",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},916848:(i,p,g,S,E)=>{o.Ea("ReduceLogSum",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},917014:(i,p,g,S,E)=>{o.Ea("ReduceSumSquare",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},917183:(i,p,g,S,E)=>{o.Ea("ReduceLogSumExp",i,{keepDims:!!p,noopWithEmptyAxes:!!g,axes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},917352:i=>{o.Ea("Where",i,void 0)},917405:(i,p,g)=>{o.Ea("Transpose",i,{perm:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[]})},917518:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce)=>{o.Ea("ConvTranspose",i,{format:ee?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[E],pads:[D,U],strides:[ae],wIsConst:()=>!!r()[re>>>0],outputPadding:ie?Array.from(n().subarray(xe>>>0,xe+ie>>>0)):[],outputShape:_e?Array.from(n().subarray(R>>>0,R+_e>>>0)):[],activation:Ge(ce)})},917932:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R)=>{o.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(ie>>>0,ie+re>>>0)):[],outputShape:0<xe?Array.from(n().subarray(_e>>>0,_e+xe>>>0)):[],activation:Ge(R)})},918489:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce)=>{o.Ea("ConvTranspose",i,{format:ee?"NHWC":"NCHW",autoPad:p,dilations:[g],group:S,kernel_shape:[E],pads:[D,U],strides:[ae],wIsConst:()=>!!r()[re>>>0],outputPadding:ie?Array.from(n().subarray(xe>>>0,xe+ie>>>0)):[],outputShape:_e?Array.from(n().subarray(R>>>0,R+_e>>>0)):[],activation:Ge(ce)})},918903:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R)=>{o.Ea("ConvTranspose",i,{format:ae?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(g>>>0,g+2>>>0)),group:S,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(ie>>>0,ie+re>>>0)):[],outputShape:0<xe?Array.from(n().subarray(_e>>>0,_e+xe>>>0)):[],activation:Ge(R)})},919460:(i,p)=>{o.Ea("GlobalAveragePool",i,{format:p?"NHWC":"NCHW"})},919551:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce,Ce)=>{o.Ea("AveragePool",i,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,U],kernel_shape:[ae,ee],pads:[re,ie,xe,_e],strides:[R,ce]})},919835:(i,p)=>{o.Ea("GlobalAveragePool",i,{format:p?"NHWC":"NCHW"})},919926:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce,Ce)=>{o.Ea("AveragePool",i,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,U],kernel_shape:[ae,ee],pads:[re,ie,xe,_e],strides:[R,ce]})},920210:(i,p)=>{o.Ea("GlobalMaxPool",i,{format:p?"NHWC":"NCHW"})},920297:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce,Ce)=>{o.Ea("MaxPool",i,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,U],kernel_shape:[ae,ee],pads:[re,ie,xe,_e],strides:[R,ce]})},920577:(i,p)=>{o.Ea("GlobalMaxPool",i,{format:p?"NHWC":"NCHW"})},920664:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce,Ce)=>{o.Ea("MaxPool",i,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:g,count_include_pad:S,storage_order:E,dilations:[D,U],kernel_shape:[ae,ee],pads:[re,ie,xe,_e],strides:[R,ce]})},920944:(i,p,g,S,E)=>{o.Ea("Gemm",i,{alpha:p,beta:g,transA:S,transB:E})},921048:i=>{o.Ea("MatMul",i,void 0)},921102:(i,p,g,S)=>{o.Ea("ArgMax",i,{keepDims:!!p,selectLastIndex:!!g,axis:S})},921210:(i,p,g,S)=>{o.Ea("ArgMin",i,{keepDims:!!p,selectLastIndex:!!g,axis:S})},921318:(i,p)=>{o.Ea("Softmax",i,{axis:p})},921381:(i,p)=>{o.Ea("Concat",i,{axis:p})},921441:(i,p,g,S,E)=>{o.Ea("Split",i,{axis:p,numOutputs:g,splitSizes:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},921586:i=>{o.Ea("Expand",i,void 0)},921640:(i,p)=>{o.Ea("Gather",i,{axis:Number(p)})},921711:(i,p)=>{o.Ea("GatherElements",i,{axis:Number(p)})},921790:(i,p,g,S,E,D,U,ae,ee,re,ie)=>{o.Ea("Resize",i,{antialias:p,axes:g?Array.from(n().subarray(S>>>0,S+g>>>0)):[],coordinateTransformMode:Ge(E),cubicCoeffA:D,excludeOutside:U,extrapolationValue:ae,keepAspectRatioPolicy:Ge(ee),mode:Ge(re),nearestMode:Ge(ie)})},922141:(i,p,g,S,E,D,U)=>{o.Ea("Slice",i,{starts:p?Array.from(n().subarray(g>>>0,g+p>>>0)):[],ends:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[],axes:D?Array.from(n().subarray(U>>>0,U+D>>>0)):[]})},922372:i=>{o.Ea("Tile",i,void 0)},922424:(i,p,g)=>{o.Ea("LayerNormalization",i,{axis:Number(p),epsilon:Number(g)})},922531:(i,p,g)=>{o.Ea("InstanceNormalization",i,{epsilon:p,format:g?"NHWC":"NCHW"})},922645:(i,p,g)=>{o.Ea("InstanceNormalization",i,{epsilon:p,format:g?"NHWC":"NCHW"})},922759:i=>{o.Ea("Range",i,void 0)},922812:(i,p)=>{o.Ea("Einsum",i,{equation:Ge(p)})},922893:(i,p,g,S,E)=>{o.Ea("Pad",i,{mode:p,value:g,pads:S?Array.from(n().subarray(E>>>0,E+S>>>0)):[]})},923025:(i,p,g,S,E,D)=>{o.Ea("BatchNormalization",i,{epsilon:p,momentum:g,spatial:!!E,trainingMode:!!S,format:D?"NHWC":"NCHW"})},923194:(i,p,g,S,E,D)=>{o.Ea("BatchNormalization",i,{epsilon:p,momentum:g,spatial:!!E,trainingMode:!!S,format:D?"NHWC":"NCHW"})},923363:(i,p,g,S,E,D,U,ae,ee)=>{o.Ea("Attention",i,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:E,doRotary:D,qkvHiddenSizes:U?Array.from(n().subarray(Number(ae)>>>0,Number(ae)+U>>>0)):[],pastPresentShareBuffer:!!ee})},923635:i=>{o.Ea("Gelu",i,void 0)},923687:(i,p,g,S,E,D)=>{o.Ea("MultiHeadAttention",i,{numHeads:p,isUnidirectional:g,maskFilterValue:S,scale:E,doRotary:D})},923846:i=>{o.Ea("BiasAdd",i,void 0)},923901:i=>{o.Ea("BiasSplitGelu",i,void 0)},923962:(i,p)=>{o.Ea("SkipLayerNormalization",i,{epsilon:p})},924043:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e)=>{o.Ea("Conv",i,{format:ee?"NHWC":"NCHW",auto_pad:p,dilations:[g],group:S,kernel_shape:[E],pads:D?Array.from(n().subarray(U>>>0,U+D>>>0)):[],strides:[ae],w_is_const:()=>!!r()[re>>>0],activation:Ge(ie),activation_params:xe?Array.from(u().subarray(_e>>>0,_e+xe>>>0)):[]})},924424:(i,p,g,S,E,D,U,ae,ee,re,ie,xe,_e,R,ce,Ce)=>{o.Ea("Conv",i,{format:xe?"NHWC":"NCHW",auto_pad:p,dilations:[g,S],group:E,kernel_shape:[D,U],pads:ae?Array.from(n().subarray(ee>>>0,ee+ae>>>0)):[],strides:[re,ie],w_is_const:()=>!!r()[_e>>>0],activation:Ge(R),activation_params:ce?Array.from(u().subarray(Ce>>>0,Ce+ce>>>0)):[]})},924826:i=>{o.zb(i)},924860:(i,p)=>o.Ab(i,p,o.bb.Fb,o.bb.errors),924972:i=>o.wb(i),925005:i=>o.yb(i),925037:(i,p,g)=>{o.jb(i,p,g,!0)},925076:(i,p,g)=>{o.jb(i,p,g)}};function It(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Lt(i){i.terminate(),i.onmessage=()=>{}}function Gt(i){(i=se.Qa[i])||rt(),se.Eb(i)}function tr(i){var p=se.tb();if(!p)return 6;se.Ya.push(p),se.Qa[i.Xa]=p,p.Xa=i.Xa;var g={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return I&&p.unref(),p.postMessage(g,i.Mb),0}var Ft=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ar=(i,p,g)=>{p>>>=0;var S=p+g;for(g=p;i[g]&&!(g>=S);)++g;if(16<g-p&&i.buffer&&Ft)return Ft.decode(i.buffer instanceof SharedArrayBuffer?i.slice(p,g):i.subarray(p,g));for(S="";p<g;){var E=i[p++];if(E&128){var D=i[p++]&63;if((E&224)==192)S+=String.fromCharCode((E&31)<<6|D);else{var U=i[p++]&63;E=(E&240)==224?(E&15)<<12|D<<6|U:(E&7)<<18|D<<12|U<<6|i[p++]&63,65536>E?S+=String.fromCharCode(E):(E-=65536,S+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else S+=String.fromCharCode(E)}return S},Ge=(i,p)=>(i>>>=0)?Ar(a(),i,p):"";function rr(i){if(_)return H(1,1,i);ye=i,st()||(se.Hb(),o.onExit&&o.onExit(i),pe=!0),b(i,new It(i))}var nr=i=>{if(ye=i,_)throw Er(i),"unwind";rr(i)},se={ab:[],Ya:[],mb:[],Qa:{},gb:function(){_?se.vb():se.ub()},ub:function(){Ze.unshift(()=>{Xt(),se.Bb(()=>Cr())})},vb:function(){se.receiveObjectTransfer=se.Db,se.threadInitTLS=se.lb,se.setExitStatus=se.kb,X=!1},kb:function(i){ye=i},Sb:["$terminateWorker"],Hb:function(){for(var i of se.Ya)Lt(i);for(i of se.ab)Lt(i);se.ab=[],se.Ya=[],se.Qa=[]},Eb:function(i){var p=i.Xa;delete se.Qa[p],se.ab.push(i),se.Ya.splice(se.Ya.indexOf(i),1),i.Xa=0,En(p)},Db:function(){},lb:function(){se.mb.forEach(i=>i())},Cb:i=>new Promise(p=>{i.onmessage=D=>{D=D.data;var U=D.cmd;if(D.targetThread&&D.targetThread!=Vr()){var ae=se.Qa[D.Rb];ae?ae.postMessage(D,D.transferList):Y('Internal error! Worker sent a message "'+U+'" to target pthread '+D.targetThread+", but that thread no longer exists!")}else U==="checkMailbox"?Mt():U==="spawnThread"?tr(D):U==="cleanupThread"?Gt(D.thread):U==="killThread"?(D=D.thread,U=se.Qa[D],delete se.Qa[D],Lt(U),En(D),se.Ya.splice(se.Ya.indexOf(U),1),U.Xa=0):U==="cancelThread"?se.Qa[D.thread].postMessage({cmd:"cancel"}):U==="loaded"?(i.loaded=!0,p(i)):U==="alert"?alert("Thread "+D.threadId+": "+D.text):D.target==="setimmediate"?i.postMessage(D):U==="callHandler"?o[D.handler](...D.args):U&&Y("worker sent an unknown command "+U)},i.onerror=D=>{throw Y("worker sent an error! "+D.filename+":"+D.lineno+": "+D.message),D},I&&(i.on("message",function(D){i.onmessage({data:D})}),i.on("error",function(D){i.onerror(D)}));var g=[],S=["onExit","onAbort","print","printErr"],E;for(E of S)o.hasOwnProperty(E)&&g.push(E);i.postMessage({cmd:"load",handlers:g,urlOrBlob:o.mainScriptUrlOrBlob||e,wasmMemory:we,wasmModule:le})}),Bb:function(i){i()},qb:function(){var i=P("ort-wasm-simd-threaded.worker.js");i=new Worker(i),se.ab.push(i)},tb:function(){return se.ab.length==0&&(se.qb(),se.Cb(se.ab[0])),se.ab.pop()}};o.PThread=se;var wt=i=>{for(;0<i.length;)i.shift()(o)};o.establishStackSpace=function(){var i=Vr(),p=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],Ha(p,p-i),Nr(p)};function Er(i){if(_)return H(2,0,i);nr(i)}o.invokeEntryPoint=function(i,p){i=La.apply(null,[i,p]),st()?se.kb(i):Tn(i)};function ut(i){this.fb=i-24,this.pb=function(p){s()[this.fb+4>>2>>>0]=p},this.ob=function(p){s()[this.fb+8>>2>>>0]=p},this.gb=function(p,g){this.nb(),this.pb(p),this.ob(g)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var et=0,Tr=0;function Pt(i,p,g,S){return _?H(3,1,i,p,g,S):ar(i,p,g,S)}function ar(i,p,g,S){if(i>>>=0,p>>>=0,g>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return Y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var E=[];return _&&E.length===0?Pt(i,p,g,S):(i={Gb:g,Xa:i,rb:S,Mb:E},_?(i.Ob="spawnThread",postMessage(i,E),0):tr(i))}function or(i,p,g){return _?H(4,1,i,p,g):0}function Or(i,p){if(_)return H(5,1,i,p)}var Bt=i=>{for(var p=0,g=0;g<i.length;++g){var S=i.charCodeAt(g);127>=S?p++:2047>=S?p+=2:55296<=S&&57343>=S?(p+=4,++g):p+=3}return p},kr=(i,p,g,S)=>{if(g>>>=0,!(0<S))return 0;var E=g;S=g+S-1;for(var D=0;D<i.length;++D){var U=i.charCodeAt(D);if(55296<=U&&57343>=U){var ae=i.charCodeAt(++D);U=65536+((U&1023)<<10)|ae&1023}if(127>=U){if(g>=S)break;p[g++>>>0]=U}else{if(2047>=U){if(g+1>=S)break;p[g++>>>0]=192|U>>6}else{if(65535>=U){if(g+2>=S)break;p[g++>>>0]=224|U>>12}else{if(g+3>=S)break;p[g++>>>0]=240|U>>18,p[g++>>>0]=128|U>>12&63}p[g++>>>0]=128|U>>6&63}p[g++>>>0]=128|U&63}}return p[g>>>0]=0,g-E},Rr=(i,p,g)=>kr(i,a(),p,g);function Pr(i,p){if(_)return H(6,1,i,p)}function Br(i,p,g){if(_)return H(7,1,i,p,g)}function Mr(i,p,g){return _?H(8,1,i,p,g):0}function Dr(i,p){if(_)return H(9,1,i,p)}function jt(i,p,g){if(_)return H(10,1,i,p,g)}function ir(i,p,g,S){if(_)return H(11,1,i,p,g,S)}function sr(i,p,g,S){if(_)return H(12,1,i,p,g,S)}function ur(i,p,g,S){if(_)return H(13,1,i,p,g,S)}function lr(i){if(_)return H(14,1,i)}function dr(i,p){if(_)return H(15,1,i,p)}function cr(i,p,g){if(_)return H(16,1,i,p,g)}var pr=i=>{if(!pe)try{if(i(),!st())try{_?Tn(ye):nr(ye)}catch(p){p instanceof It||p=="unwind"||b(1,p)}}catch(p){p instanceof It||p=="unwind"||b(1,p)}};function qt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(Mt),i+=128,Atomics.store(n(),i>>2,1))}o.__emscripten_thread_mailbox_await=qt;function Mt(){var i=Vr();i&&(qt(i),pr(()=>Na()))}o.checkMailbox=Mt;var Ct=i=>i%4===0&&(i%100!==0||i%400===0),Dt=[0,31,60,91,121,152,182,213,244,274,305,335],fr=[0,31,59,90,120,151,181,212,243,273,304,334];function d(i,p,g,S,E,D,U,ae){return _?H(17,1,i,p,g,S,E,D,U,ae):-52}function h(i,p,g,S,E,D,U){if(_)return H(18,1,i,p,g,S,E,D,U)}var v=i=>{var p=Bt(i)+1,g=An(p);return g&&Rr(i,g,p),g},C=[],T=(i,p)=>{C.length=0;var g;for(p>>=2;g=a()[i++>>>0];)p+=g!=105&p,C.push(g==105?n()[p>>>0]:l()[p++>>>1]),++p;return C},L=i=>{var p=On();return i=i(),Nr(p),i};function H(i,p){var g=arguments.length-2,S=arguments;return L(()=>{for(var E=kn(8*g),D=E>>3,U=0;U<g;U++){var ae=S[2+U];l()[D+U>>>0]=ae}return Va(i,g,E,p)})}var ue=[],Q={},ne=()=>{if(!J){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"},p;for(p in Q)Q[p]===void 0?delete i[p]:i[p]=Q[p];var g=[];for(p in i)g.push(`${p}=${i[p]}`);J=g}return J},J;function ge(i,p){if(_)return H(19,1,i,p);i>>>=0,p>>>=0;var g=0;return ne().forEach(function(S,E){var D=p+g;for(E=s()[i+4*E>>2>>>0]=D,D=0;D<S.length;++D)r()[E++>>0>>>0]=S.charCodeAt(D);r()[E>>0>>>0]=0,g+=S.length+1}),0}function Se(i,p){if(_)return H(20,1,i,p);i>>>=0,p>>>=0;var g=ne();s()[i>>2>>>0]=g.length;var S=0;return g.forEach(function(E){S+=E.length+1}),s()[p>>2>>>0]=S,0}function k(i){return _?H(21,1,i):52}function oe(i,p,g,S){return _?H(22,1,i,p,g,S):52}function ve(i,p,g,S,E){return _?H(23,1,i,p,g,S,E):70}var vt=[null,[],[]];function mr(i,p,g,S){if(_)return H(24,1,i,p,g,S);p>>>=0,g>>>=0,S>>>=0;for(var E=0,D=0;D<g;D++){var U=s()[p>>2>>>0],ae=s()[p+4>>2>>>0];p+=8;for(var ee=0;ee<ae;ee++){var re=a()[U+ee>>>0],ie=vt[i];re===0||re===10?((i===1?M:Y)(Ar(ie,0)),ie.length=0):ie.push(re)}E+=ae}return s()[S>>2>>>0]=E,0}var ka=[31,29,31,30,31,30,31,31,30,31,30,31],Ra=[31,28,31,30,31,30,31,31,30,31,30,31];function Pl(i){var p=Array(Bt(i)+1);return kr(i,p,0,p.length),p}var Bl=(i,p)=>{r().set(i,p>>>0)};function Pa(i,p,g,S){function E(R,ce,Ce){for(R=typeof R=="number"?R.toString():R||"";R.length<ce;)R=Ce[0]+R;return R}function D(R,ce){return E(R,ce,"0")}function U(R,ce){function Ce(Ya){return 0>Ya?-1:0<Ya?1:0}var zt;return(zt=Ce(R.getFullYear()-ce.getFullYear()))===0&&(zt=Ce(R.getMonth()-ce.getMonth()))===0&&(zt=Ce(R.getDate()-ce.getDate())),zt}function ae(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function ee(R){var ce=R.Za;for(R=new Date(new Date(R.$a+1900,0,1).getTime());0<ce;){var Ce=R.getMonth(),zt=(Ct(R.getFullYear())?ka:Ra)[Ce];if(ce>zt-R.getDate())ce-=zt-R.getDate()+1,R.setDate(1),11>Ce?R.setMonth(Ce+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+ce);break}}return Ce=new Date(R.getFullYear()+1,0,4),ce=ae(new Date(R.getFullYear(),0,4)),Ce=ae(Ce),0>=U(ce,R)?0>=U(Ce,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}i>>>=0,p>>>=0,g>>>=0,S>>>=0;var re=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:re?Ge(re):""},g=Ge(g),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ie in re)g=g.replace(new RegExp(ie,"g"),re[ie]);var xe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),_e="January February March April May June July August September October November December".split(" ");re={"%a":R=>xe[R.Wa].substring(0,3),"%A":R=>xe[R.Wa],"%b":R=>_e[R.eb].substring(0,3),"%B":R=>_e[R.eb],"%C":R=>D((R.$a+1900)/100|0,2),"%d":R=>D(R.ib,2),"%e":R=>E(R.ib,2," "),"%g":R=>ee(R).toString().substring(2),"%G":R=>ee(R),"%H":R=>D(R.cb,2),"%I":R=>(R=R.cb,R==0?R=12:12<R&&(R-=12),D(R,2)),"%j":R=>{for(var ce=0,Ce=0;Ce<=R.eb-1;ce+=(Ct(R.$a+1900)?ka:Ra)[Ce++]);return D(R.ib+ce,3)},"%m":R=>D(R.eb+1,2),"%M":R=>D(R.Jb,2),"%n":()=>`
`,"%p":R=>0<=R.cb&&12>R.cb?"AM":"PM","%S":R=>D(R.Kb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>D(Math.floor((R.Za+7-R.Wa)/7),2),"%V":R=>{var ce=Math.floor((R.Za+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.Za-2)%7&&ce++,ce)ce==53&&(Ce=(R.Wa+371-R.Za)%7,Ce==4||Ce==3&&Ct(R.$a)||(ce=1));else{ce=52;var Ce=(R.Wa+7-R.Za-1)%7;(Ce==4||Ce==5&&Ct(R.$a%400-1))&&ce++}return D(ce,2)},"%w":R=>R.Wa,"%W":R=>D(Math.floor((R.Za+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.$a+1900).toString().substring(2),"%Y":R=>R.$a+1900,"%z":R=>{R=R.Ib;var ce=0<=R;return R=Math.abs(R)/60,(ce?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Lb,"%%":()=>"%"},g=g.replace(/%%/g,"\0\0");for(ie in re)g.includes(ie)&&(g=g.replace(new RegExp(ie,"g"),re[ie](S)));return g=g.replace(/\0\0/g,"%"),ie=Pl(g),ie.length>p?0:(Bl(ie,i),ie.length-1)}function zr(i){try{i()}catch(p){rt(p)}}function Ml(i){var p={},g;for(g in i)(function(S){var E=i[S];p[S]=typeof E=="function"?function(){Wr.push(S);try{return E.apply(null,arguments)}finally{pe||(Wr.pop()===S||rt(),lt&&_t===1&&Wr.length===0&&(_t=0,Ke+=1,zr(Fa),typeof Fibers<"u"&&Fibers.Ub()))}}:E})(g);return p}var _t=0,lt=null,Ba=0,Wr=[],Ma={},Da={},Dl=0,_n=null,zl=[];function Wl(){return new Promise((i,p)=>{_n={resolve:i,reject:p}})}function Vl(){var i=An(65548),p=i+12;s()[i>>2>>>0]=p,s()[i+4>>2>>>0]=p+65536,p=Wr[0];var g=Ma[p];return g===void 0&&(g=Dl++,Ma[p]=g,Da[g]=p),p=g,n()[i+8>>2>>>0]=p,i}function Nl(){var i=n()[lt+8>>2>>>0];return i=F[Da[i]],--Ke,i()}function Ul(i){if(!pe){if(_t===0){var p=!1,g=!1;i((S=0)=>{if(!pe&&(Ba=S,p=!0,g)){_t=2,zr(()=>ja(lt)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var E=Nl()}catch(ae){E=ae,S=!0}var D=!1;if(!lt){var U=_n;U&&(_n=null,(S?U.reject:U.resolve)(E),D=!0)}if(S&&!D)throw E}}),g=!0,p||(_t=1,lt=Vl(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),zr(()=>Ga(lt)))}else _t===2?(_t=0,zr(qa),za(lt),lt=null,zl.forEach(S=>pr(S))):rt(`invalid state: ${_t}`);return Ba}}function Hl(i){return Ul(p=>{i().then(p)})}se.gb();var Ll=[null,rr,Er,Pt,or,Or,Pr,Br,Mr,Dr,jt,ir,sr,ur,lr,dr,cr,d,h,ge,Se,k,oe,ve,mr],Gl={r:function(i,p,g){return Hl(async()=>{await o.xb(i,p,g)})},b:function(i,p,g){throw i>>>=0,new ut(i).gb(p>>>0,g>>>0),et=i,Tr++,et},O:function(i){Wa(i>>>0,!$,1,!w,131072,!1),se.lb()},l:function(i){i>>>=0,_?postMessage({cmd:"cleanupThread",thread:i}):Gt(i)},I:ar,i:or,U:Or,E:Pr,G:Br,V:Mr,S:Dr,K:jt,R:ir,p:sr,F:ur,C:lr,T:dr,D:cr,q:()=>!0,A:function(i,p){i>>>=0,i==p>>>0?setTimeout(()=>Mt()):_?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=se.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:qt,X:function(i){I&&se.Qa[i>>>0].ref()},u:function(i,p,g){i=p+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*p:NaN,g>>>=0,i=new Date(1e3*i),n()[g>>2>>>0]=i.getUTCSeconds(),n()[g+4>>2>>>0]=i.getUTCMinutes(),n()[g+8>>2>>>0]=i.getUTCHours(),n()[g+12>>2>>>0]=i.getUTCDate(),n()[g+16>>2>>>0]=i.getUTCMonth(),n()[g+20>>2>>>0]=i.getUTCFullYear()-1900,n()[g+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[g+28>>2>>>0]=i},v:function(i,p,g){i=p+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*p:NaN,g>>>=0,i=new Date(1e3*i),n()[g>>2>>>0]=i.getSeconds(),n()[g+4>>2>>>0]=i.getMinutes(),n()[g+8>>2>>>0]=i.getHours(),n()[g+12>>2>>>0]=i.getDate(),n()[g+16>>2>>>0]=i.getMonth(),n()[g+20>>2>>>0]=i.getFullYear()-1900,n()[g+24>>2>>>0]=i.getDay(),p=(Ct(i.getFullYear())?Dt:fr)[i.getMonth()]+i.getDate()-1|0,n()[g+28>>2>>>0]=p,n()[g+36>>2>>>0]=-(60*i.getTimezoneOffset()),p=new Date(i.getFullYear(),6,1).getTimezoneOffset();var S=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(p!=S&&i.getTimezoneOffset()==Math.min(S,p))|0,n()[g+32>>2>>>0]=i},w:function(i){i>>>=0;var p=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),g=n()[i+32>>2>>>0],S=p.getTimezoneOffset(),E=new Date(p.getFullYear(),6,1).getTimezoneOffset(),D=new Date(p.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(D,E);return 0>g?n()[i+32>>2>>>0]=+(E!=D&&U==S):0<g!=(U==S)&&(E=Math.max(D,E),p.setTime(p.getTime()+6e4*((0<g?U:E)-S))),n()[i+24>>2>>>0]=p.getDay(),g=(Ct(p.getFullYear())?Dt:fr)[p.getMonth()]+p.getDate()-1|0,n()[i+28>>2>>>0]=g,n()[i>>2>>>0]=p.getSeconds(),n()[i+4>>2>>>0]=p.getMinutes(),n()[i+8>>2>>>0]=p.getHours(),n()[i+12>>2>>>0]=p.getDate(),n()[i+16>>2>>>0]=p.getMonth(),n()[i+20>>2>>>0]=p.getYear(),i=p.getTime()/1e3,Ua((bt=i,1<=+Math.abs(bt)?0<bt?+Math.floor(bt/4294967296)>>>0:~~+Math.ceil((bt-+(~~bt>>>0))/4294967296)>>>0:0)),i>>>0},s:d,t:h,z:function(i,p,g){function S(re){return(re=re.toTimeString().match(/\(([A-Za-z ]+)\)$/))?re[1]:"GMT"}i>>>=0,p>>>=0,g>>>=0;var E=new Date().getFullYear(),D=new Date(E,0,1),U=new Date(E,6,1);E=D.getTimezoneOffset();var ae=U.getTimezoneOffset(),ee=Math.max(E,ae);s()[i>>2>>>0]=60*ee,n()[p>>2>>>0]=+(E!=ae),i=S(D),p=S(U),i=v(i),p=v(p),ae<E?(s()[g>>2>>>0]=i,s()[g+4>>2>>>0]=p):(s()[g>>2>>>0]=p,s()[g+4>>2>>>0]=i)},d:()=>{rt("")},c:function(i,p,g){return i>>>=0,p=T(p>>>0,g>>>0),Ht[i].apply(null,p)},k:function(i,p,g){return i>>>=0,p=T(p>>>0,g>>>0),Ht[i].apply(null,p)},m:function(){},j:function(){return Date.now()},W:()=>{throw Ke+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return I?(ko(),At(Oo)).cpus().length:navigator.hardwareConcurrency},L:function(i,p,g,S){for(se.Pb=p>>>0,ue.length=g,p=S>>>0>>3,S=0;S<g;S++)ue[S]=l()[p+S>>>0];return(0>i?Ht[-i-1]:Ll[i]).apply(null,ue)},y:function(i){i>>>=0;var p=a().length;if(i<=p||4294901760<i)return!1;for(var g=1;4>=g;g*=2){var S=p*(1+.2/g);S=Math.min(S,i+100663296);var E=Math;S=Math.max(i,S);e:{E=E.min.call(E,4294901760,S+(65536-S%65536)%65536)-we.buffer.byteLength+65535>>>16;try{we.grow(E),be();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},P:ge,Q:Se,H:nr,h:k,o:oe,x:ve,n:mr,a:we||o.wasmMemory,J:Pa,e:function(i,p,g,S){return Pa(i>>>0,p>>>0,g>>>0,S>>>0)}};(function(){function i(g,S){return g=g.exports,g=Ml(g),F=g=Fl(g),se.mb.push(F.Da),Me.unshift(F.Y),le=S,Cr(),g}var p={a:Gl};if(Xt(),o.instantiateWasm)try{return o.instantiateWasm(p,i)}catch(g){Y("Module.instantiateWasm callback failed with error: "+g),f(g)}return _r(p,function(g){i(g.instance,g.module)}).catch(f),{}})(),o._OrtInit=(i,p)=>(o._OrtInit=F.Z)(i,p),o._OrtGetLastError=(i,p)=>(o._OrtGetLastError=F._)(i,p),o._OrtCreateSessionOptions=(i,p,g,S,E,D,U,ae,ee,re)=>(o._OrtCreateSessionOptions=F.$)(i,p,g,S,E,D,U,ae,ee,re),o._OrtAppendExecutionProvider=(i,p)=>(o._OrtAppendExecutionProvider=F.aa)(i,p),o._OrtAddFreeDimensionOverride=(i,p,g)=>(o._OrtAddFreeDimensionOverride=F.ba)(i,p,g),o._OrtAddSessionConfigEntry=(i,p,g)=>(o._OrtAddSessionConfigEntry=F.ca)(i,p,g),o._OrtReleaseSessionOptions=i=>(o._OrtReleaseSessionOptions=F.da)(i),o._OrtCreateSession=(i,p,g)=>(o._OrtCreateSession=F.ea)(i,p,g),o._OrtReleaseSession=i=>(o._OrtReleaseSession=F.fa)(i),o._OrtGetInputOutputCount=(i,p,g)=>(o._OrtGetInputOutputCount=F.ga)(i,p,g),o._OrtGetInputName=(i,p)=>(o._OrtGetInputName=F.ha)(i,p),o._OrtGetOutputName=(i,p)=>(o._OrtGetOutputName=F.ia)(i,p),o._OrtFree=i=>(o._OrtFree=F.ja)(i),o._OrtCreateTensor=(i,p,g,S,E,D)=>(o._OrtCreateTensor=F.ka)(i,p,g,S,E,D),o._OrtGetTensorData=(i,p,g,S,E)=>(o._OrtGetTensorData=F.la)(i,p,g,S,E),o._OrtReleaseTensor=i=>(o._OrtReleaseTensor=F.ma)(i),o._OrtCreateRunOptions=(i,p,g,S)=>(o._OrtCreateRunOptions=F.na)(i,p,g,S),o._OrtAddRunConfigEntry=(i,p,g)=>(o._OrtAddRunConfigEntry=F.oa)(i,p,g),o._OrtReleaseRunOptions=i=>(o._OrtReleaseRunOptions=F.pa)(i),o._OrtCreateBinding=i=>(o._OrtCreateBinding=F.qa)(i),o._OrtBindInput=(i,p,g)=>(o._OrtBindInput=F.ra)(i,p,g),o._OrtBindOutput=(i,p,g,S)=>(o._OrtBindOutput=F.sa)(i,p,g,S),o._OrtClearBoundOutputs=i=>(o._OrtClearBoundOutputs=F.ta)(i),o._OrtReleaseBinding=i=>(o._OrtReleaseBinding=F.ua)(i),o._OrtRunWithBinding=(i,p,g,S,E)=>(o._OrtRunWithBinding=F.va)(i,p,g,S,E),o._OrtRun=(i,p,g,S,E,D,U,ae)=>(o._OrtRun=F.wa)(i,p,g,S,E,D,U,ae),o._OrtEndProfiling=i=>(o._OrtEndProfiling=F.xa)(i),o._JsepOutput=(i,p,g)=>(o._JsepOutput=F.ya)(i,p,g),o._JsepGetNodeName=i=>(o._JsepGetNodeName=F.za)(i);var Vr=o._pthread_self=()=>(Vr=o._pthread_self=F.Aa)(),An=o._malloc=i=>(An=o._malloc=F.Ba)(i),za=o._free=i=>(za=o._free=F.Ca)(i);o.__emscripten_tls_init=()=>(o.__emscripten_tls_init=F.Da)();var Wa=o.__emscripten_thread_init=(i,p,g,S,E,D)=>(Wa=o.__emscripten_thread_init=F.Fa)(i,p,g,S,E,D);o.__emscripten_thread_crashed=()=>(o.__emscripten_thread_crashed=F.Ga)();var Va=(i,p,g,S)=>(Va=F.Ha)(i,p,g,S),En=i=>(En=F.Ia)(i),Tn=o.__emscripten_thread_exit=i=>(Tn=o.__emscripten_thread_exit=F.Ja)(i),Na=o.__emscripten_check_mailbox=()=>(Na=o.__emscripten_check_mailbox=F.Ka)(),Ua=i=>(Ua=F.La)(i),Ha=(i,p)=>(Ha=F.Ma)(i,p),On=()=>(On=F.Na)(),Nr=i=>(Nr=F.Oa)(i),kn=i=>(kn=F.Pa)(i),La=o.dynCall_ii=(i,p)=>(La=o.dynCall_ii=F.Ra)(i,p),Ga=i=>(Ga=F.Sa)(i),Fa=()=>(Fa=F.Ta)(),ja=i=>(ja=F.Ua)(i),qa=()=>(qa=F.Va)();o.___start_em_js=925109,o.___stop_em_js=925270;function Fl(i){i=Object.assign({},i);var p=S=>()=>S()>>>0,g=S=>E=>S(E)>>>0;return i.__errno_location=p(i.__errno_location),i.pthread_self=p(i.pthread_self),i.malloc=g(i.malloc),i.stackSave=p(i.stackSave),i.stackAlloc=g(i.stackAlloc),i}o.keepRuntimeAlive=st,o.wasmMemory=we,o.stackAlloc=kn,o.stackSave=On,o.stackRestore=Nr,o.UTF8ToString=Ge,o.stringToUTF8=Rr,o.lengthBytesUTF8=Bt,o.ExitStatus=It,o.PThread=se;var Ur;Rt=function i(){Ur||Ka(),Ur||(Rt=i)};function Ka(){function i(){if(!Ur&&(Ur=!0,o.calledRun=!0,!pe)&&(_||wt(Me),c(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),!_)){if(o.postRun)for(typeof o.postRun=="function"&&(o.postRun=[o.postRun]);o.postRun.length;){var p=o.postRun.shift();Ue.unshift(p)}wt(Ue)}}if(!(0<Je))if(_)c(o),_||wt(Me),startWorker(o);else{if(o.preRun)for(typeof o.preRun=="function"&&(o.preRun=[o.preRun]);o.preRun.length;)Ze.unshift(o.preRun.shift());wt(Ze),0<Je||(o.setStatus?(o.setStatus("Running..."),setTimeout(function(){setTimeout(function(){o.setStatus("")},1),i()},1)):i())}}if(o.preInit)for(typeof o.preInit=="function"&&(o.preInit=[o.preInit]);0<o.preInit.length;)o.preInit.pop()();return Ka(),t.ready}})();typeof Po=="object"&&typeof Un=="object"?Un.exports=Ro:typeof define=="function"&&define.amd&&define([],()=>Ro)});var Mo=Kt((Vf,ed)=>{ed.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var zo,td,Hn,Ln,Zr,Do,rd,nd,ad,Wo,De,Yt=j(()=>{"use strict";zo=Ao();td=Bo(),Ln=!1,Zr=!1,Do=!1,rd=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},nd=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},ad=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Wo=async e=>{if(Ln)return Promise.resolve();if(Zr)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Do)throw new Error("previous call to 'initializeWebAssembly()' failed.");Zr=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&rd(),s=a&&nd(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,o=ad(s,n),c=typeof u=="object"?u[o]:void 0,f=!1,y=[];if(t>0&&y.push(new Promise(m=>{setTimeout(()=>{f=!0,m()},t)})),y.push(new Promise((m,b)=>{let w=n?td:zo,$={locateFile:(I,_)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Mo()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(c)return c;let x=l??_;return o==="ort-wasm-simd.wasm"?x+"ort-wasm-simd.jsep.wasm":o==="ort-wasm-simd-threaded.wasm"?x+"ort-wasm-simd-threaded.jsep.wasm":x+o}return _+I}};if(n)if(typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${w.toString()};`;$.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}w($).then(I=>{Zr=!1,Ln=!0,Hn=I,m()},I=>{Zr=!1,Do=!0,b(I)})})),await Promise.race(y),f)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},De=()=>{if(Ln&&Hn)return Hn;throw new Error("WebAssembly is not initialized yet.")}});var We,gr,ke,Qr=j(()=>{"use strict";Yt();We=(e,t)=>{let r=De(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},gr=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")gr(s,u+".",r,a);else if(typeof s=="string"||typeof s=="number")a(u,s.toString());else if(typeof s=="boolean")a(u,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},ke=e=>{let t=De(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],s=t.HEAPU32[a/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var Vo,No=j(()=>{"use strict";Yt();Qr();Vo=e=>{let t=De(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=We(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&ke("Can't create run options."),e?.extra!==void 0&&gr(e.extra,"",new WeakSet,(u,l)=>{let o=We(u,a),c=We(l,a);t._OrtAddRunConfigEntry(r,o,c)!==0&&ke(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),s}}});var od,id,sd,ud,Uo,Ho=j(()=>{"use strict";Yt();Qr();od=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},id=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},sd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},ud=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=We("deviceType",r),o=We(u.deviceType,r);De()._OrtAddSessionConfigEntry(e,l,o)!==0&&ke(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let o=We("numThreads",r),c=We(l.toString(),r);De()._OrtAddSessionConfigEntry(e,o,c)!==0&&ke(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let l=We("powerPreference",r),o=We(u.powerPreference,r);De()._OrtAddSessionConfigEntry(e,l,o)!==0&&ke(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=We("preferredLayout",r),o=We(u.preferredLayout,r);De()._OrtAddSessionConfigEntry(e,l,o)!==0&&ke(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=We(n,r);De()._OrtAppendExecutionProvider(e,s)!==0&&ke(`Can't append execution provider: ${n}.`)}},Uo=e=>{let t=De(),r=0,a=[],n=e||{};sd(n);try{let s=od(n.graphOptimizationLevel??"all"),u=id(n.executionMode??"sequential"),l=typeof n.logId=="string"?We(n.logId,a):0,o=n.logSeverityLevel??2;if(!Number.isInteger(o)||o<0||o>4)throw new Error(`log serverity level is not valid: ${o}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let f=typeof n.optimizedModelFilePath=="string"?We(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,o,c,f),r===0&&ke("Can't create session options."),n.executionProviders&&ud(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[y,m]of Object.entries(n.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof m!="number"||!Number.isInteger(m)||m<0)throw new Error(`free dimension override value must be a non-negative integer: ${m}`);let b=We(y,a);t._OrtAddFreeDimensionOverride(r,b,m)!==0&&ke(`Can't set a free dimension override: ${y} - ${m}.`)}return n.extra!==void 0&&gr(n.extra,"",new WeakSet,(y,m)=>{let b=We(y,a),w=We(m,a);t._OrtAddSessionConfigEntry(r,b,w)!==0&&ke(`Can't set a session config entry: ${y} - ${m}.`)}),[r,a]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),s}}});var Gn,yr,br,Xr,wr,Jr,Fn,Ve=j(()=>{"use strict";Gn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},yr=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},br=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Xr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},wr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Jr=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Fn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var ld,dd,Lo,Go,Fo,cd,Re,Et=j(()=>{"use strict";Ve();ld=["V","I","W","E","F"],dd=(e,t)=>{console.log(`[${ld[e]},${new Date().toISOString()}]${t}`)},Fo=(e,t)=>{Lo=e,Go=t},cd=(e,t)=>{let r=wr(e),a=wr(Lo);r>=a&&dd(r,typeof t=="function"?t():t)},Re=(...e)=>{Go&&cd(...e)}});var jo,qo=j(()=>{"use strict";Ve();jo=(e,t)=>new(Xr(t))(e)});var en=j(()=>{"use strict"});var tn,pd,Ko,qn,jn,Zo,Qo=j(()=>{"use strict";Et();en();tn=e=>Math.ceil(e/16)*16,pd=1,Ko=()=>pd++,qn=async(e,t,r,a)=>{let n=tn(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let l=s.getMappedRange();if(a){let o=a();return o.set(new Uint8Array(l,0,r)),o}else return new Uint8Array(l.slice(0,r))}finally{s.destroy()}},jn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,s=r.byteLength,u=tn(s),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${s}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=o.getMappedRange();new Uint8Array(c).set(new Uint8Array(a,n,s)),o.unmap();let f=this.backend.getCommandEncoder();this.backend.endComputePass(),f.copyBufferToBuffer(o,0,l.gpuData.buffer,0,u),Re("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(o)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=tn(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=Ko();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Re("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=tn(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let o=s?this.freeBuffers:this.freeUniformBuffers,c=o.get(a);c||(c=[],o.set(a,c)),c.length>0?n=c.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:Ko(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Re("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Re("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await qn(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Zo=(...e)=>new jn(...e)});var Kn,te,Pe=j(()=>{"use strict";Kn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},te=e=>new Kn(e)});var Yn,dt,W,Nt,rn,nn,an,Ie=j(()=>{"use strict";Yn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},dt=class{static calcShape(t,r,a=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||s<2)return;let o=Yn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(o===void 0)return;[l[u-2],l[u-1]]=o}for(let o=a?3:1;o<=u;o++){let c=n-o<0?1:t[n-o],f=s-o<0?1:r[s-o];if(c!==f&&c>1&&f>1)return;l[u-o]=Math.max(c,f)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let s=1;s<=a;s++)if(t[a-s]!==1&&t[a-s]!==r[n-s])return!1;return!0}},W=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let s=r;s<a;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,s)=>n+r[s]+r[s+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Nt=class e{static adjustPoolAttributes(t,r,a,n,s,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<s.length){if(s[l]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,s,u,l){if(l){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let o=0;o<t.length-2;o++)e.adjustPadAndReturnShape(t[o+(u?1:2)],r[o],a[o],n[o],s,o,o+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,s,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let o=[r[0],r[1]];return e.computeShapeHelper(t,r,o,a,n,s,u,l),o}static computeConvOutputShape(t,r,a,n,s,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let o=[t[0],r[0]];return e.computeShapeHelper(!1,t,o,a,n,s,u,l),o}static computeShapeHelper(t,r,a,n,s,u,l,o){if(t)for(let c=0;c<r.length-2;c++)a.push(1);else for(let c=0;c<r.length-2;c++)a.push(e.adjustPadAndReturnShape(r[c+2],n[c],s[c],u[c],l,c,c+r.length-2,o))}static adjustPadAndReturnShape(t,r,a,n,s,u,l,o){let c=a*(n-1)+1;if(o&&o!=="NOTSET")switch(o){case"VALID":return s[u]=0,s[l]=0,Math.floor((t-c)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(o==="SAME_LOWER"?(y+1)/2:y/2),s[l]=y-s[u],Math.floor((t+y-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[l]-c)/r+1)}},rn=class{static getShapeOfGemmResult(t,r,a,n,s){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,o;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let c=-1;if(n?(o=a[0],c=1):(o=a[1],c=0),a[c]!==l)throw new Error("dimension mismatch");if(u<=0||o<=0||l<=0)throw new Error("invalid shape specified");if(s&&!dt.isValidBroadcast(s,[u,o]))throw new Error("gemm: invalid bias shape for broadcast");return[u,o,l]}},nn=-34028234663852886e22,an=34028234663852886e22});var fd,Xo,Ae,fe,Qe,je,nt,at,Qn,N,K,Jo,Zn,ei,Zt,Oe,$e=j(()=>{"use strict";Ve();Ie();fd=64,Xo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ae=(e,t=1)=>{let r=Xo(e,t);return typeof r=="string"?r:r[0]},fe=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:W.computeStrides(e)}],Qe=e=>e%4===0?4:e%2===0?2:1,je=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,nt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,at=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,Qn=(e,t,r,a,n)=>{let s=typeof r=="number",u=s?r:r.length,l=[...new Array(u).keys()],o=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,c=Xo(t,n),f=typeof c=="string"?c:c[1],y=typeof c=="string"?c:c[0],m={indices:o,value:f,storage:y,tensor:t},b=G=>typeof G=="string"?G:`${G}u`,w={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=s?"uniforms.":"",I=`${$}${e}_shape`,_=`${$}${e}_strides`,x="";for(let G=0;G<u-1;G++)x+=`
    let dim${G} = current / ${_}[${G}];
    let rest${G} = current % ${_}[${G}];
    indices[${G}] = dim${G};
    current = rest${G};
    `;x+=`indices[${u-1}] = current;`;let P=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${m.indices} {
    var indices: ${m.indices};
    var current = offset;
    ${x}
    return indices;
  }`,A=G=>(w.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),B=[];if(u>=2)for(let G=u-1;G>=0;G--)B.push(`${_}[${G}] * (indices[${G}])`);let O=u<2?"":`
  fn i2o_${e}(indices: ${m.indices}) -> u32 {
    return ${B.join("+")};
  }`,V=G=>(w.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),z=(...G)=>u===0?"0u":`${m.indices}(${G.map(b).join(",")})`,q=(G,de)=>u<2?`${G}`:`${G}[${de}]`,Z=(G,de,be)=>u<2?`${G}=${be};`:`${G}[${de}]=${be};`,M={},Y=(G,de)=>{w.broadcastedIndicesToOffset=!0;let be=`${de.name}broadcastedIndicesTo${e}Offset`;if(be in M)return`${be}(${G})`;let Le=[];for(let Ze=u-1;Ze>=0;Ze--){let Me=de.indicesGet("outputIndices",Ze+de.rank-u);Le.push(`${q(_,Ze)} * (${Me} % ${q(I,Ze)})`)}return M[be]=`fn ${be}(outputIndices: ${de.type.indices}) -> u32 {
             return ${Le.length>0?Le.join("+"):"0u"};
           }`,`${be}(${G})`},me=(G,de)=>(()=>{if(m.storage===m.value)return`${e}[${G}]=${de};`;if(m.storage==="vec2<u32>"&&m.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${de}), select(0u, 0xFFFFFFFFu, ${de} < 0));`;if(m.storage==="vec2<u32>"&&m.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${de}), 0u);`;if(m.storage==="u32"&&m.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${de}));`;throw new Error(`not supported combination of storage type ${m.storage} and value type ${m.value} yet`)})(),X=G=>(()=>{if(m.storage===m.value)return`${e}[${G}]`;if(m.storage==="vec2<u32>"&&m.value==="i32")return`i32(${e}[${G}].x)`;if(m.storage==="vec2<u32>"&&m.value==="u32")return`u32(${e}[${G}].x)`;if(m.storage==="u32"&&m.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${m.storage} and value type ${m.value} yet`)})(),we=u<2?"":`
  fn get_${e}ByIndices(indices: ${m.indices}) -> ${f} {
    return ${X(`i2o_${e}(indices)`)};
  }`,F=u<2?"":(()=>{let G=l.map(be=>`d${be}: u32`).join(", "),de=l.map(be=>`d${be}`).join(", ");return`
  fn get_${e}(${G}) -> ${f} {
    return get_${e}ByIndices(${z(de)});
  }`})(),le=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let de=G.map(b).join(",");return u===0?X("0u"):u===1?X(de[0]):(w.get=!0,w.getByIndices=!0,w.indicesToOffset=!0,`get_${e}(${de})`)},pe=G=>u<2?X(G):(w.getByIndices=!0,w.indicesToOffset=!0,`get_${e}ByIndices(${G})`),ye=u<2?"":`
  fn set_${e}ByIndices(indices: ${m.indices}, value: ${f}) {
    ${me(`i2o_${e}(indices)`,"value")}
  }`,he=u<2?"":(()=>{let G=l.map(be=>`d${be}: u32`).join(", "),de=l.map(be=>`d${be}`).join(", ");return`
  fn set_${e}(${G}, value: ${f}) {
    set_${e}ByIndices(${z(de)}, value);
  }`})();return{impl:()=>{let G=[];return s||(G.push(`const ${I} = ${m.indices}(${r.join(",")});`),G.push(`const ${_} = ${m.indices}(${W.computeStrides(r).join(",")});`)),w.offsetToIndices&&G.push(P),w.indicesToOffset&&G.push(O),w.broadcastedIndicesToOffset&&Object.values(M).forEach(de=>G.push(de)),w.set&&G.push(he),w.setByIndices&&G.push(ye),w.get&&G.push(F),w.getByIndices&&G.push(we),G.join(`
`)},type:m,offsetToIndices:A,indicesToOffset:V,broadcastedIndicesToOffset:Y,indices:z,indicesGet:q,indicesSet:Z,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let de=G[u];if(typeof de!="string")throw new Error("value must be string");let be=G.slice(0,u).map(b).join(",");return u===0?me("0u",de):u===1?me(be[0],de):(w.set=!0,w.setByIndices=!0,w.indicesToOffset=!0,`set_${e}(${be}, ${de})`)},setByOffset:me,setByIndices:(G,de)=>u<2?me(G,de):(w.setByIndices=!0,w.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${de});`),get:le,getByOffset:X,getByIndices:pe,usage:a,name:e,strides:_,shape:I,rank:u}},N=(e,t,r,a=1)=>Qn(e,t,r,"input",a),K=(e,t,r,a=1)=>Qn(e,t,r,"output",a),Jo=(e,t,r,a=1)=>Qn(e,t,r,"internal",a),Zn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=fd){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a}of this.uniforms)t.push(`${r}:${a}`);return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},ei=e=>new Zn(e),Zt=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(s)}return a},Oe=e=>e<=4});var md,ti,hd,gd,ot,ri,ni,Qt=j(()=>{"use strict";Ie();Pe();$e();md=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},ti=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,hd=(e,t)=>W.sortBasedOnPerm(e,ti(e.length,t)),gd=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`
`)},ot=(e,t)=>{let r=e.dataType,a=e.dims.length,n=ti(a,t),s=Oe(a),u=hd(e.dims,n),l=s?u.length:u,o=s?a:e.dims,c=K("output",r,l),f=N("a",r,o),y=m=>`
  ${m.registerUniform("output_size","u32").declareVariables(f,c)}

  ${gd(n,a,f,c)}

  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${c.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${c.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:m=>{let b=W.size(u);return{outputs:[{dims:u,dataType:m[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:s?[{type:"uint32",data:b},...fe(m[0].dims),...fe(u)]:[{type:"uint32",data:b}]}},getShaderSource:y}},ri=(e,t)=>{md(e.inputs),e.compute(ot(e.inputs[0],t.perm))},ni=e=>te({perm:e.perm})});var yd,bd,wd,vd,$d,Sd,xd,Id,Cd,_d,ct,ai,oi,ii,si,ui,li,di,ci,pi,fi,mi=j(()=>{"use strict";Ie();$e();on();Qt();yd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},bd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},wd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},vd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},$d=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},Sd=(e,t)=>{let r=[],a=e.length;for(let s=0;s<a;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},xd=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?a.push(e[n++]):a.push(1);return a},Id=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Cd=(e,t)=>{let r=[];if(!Id(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},_d=(e,t,r,a,n,s,u)=>{let l=r[0].dims,o=W.size(s),c=W.size(u),f=N("_A",r[0].dataType,l),y=K("output",n,s),m=32,b=`
          var<workgroup> aBestValues : array<${y.type.storage}, ${m}>;
       `;return{name:e,shaderCache:t,getShaderSource:$=>`
        ${$.registerUniform("reduceSize","u32").declareVariables(f,y)}
        ${b}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${$.mainStart(m)}
          let local_idx = local_id.x;

          let outputIndex = global_idx / ${m};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${y.type.storage}(${wd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${m}) {
           let candidate = ${y.type.storage}(${f.getByOffset("offset + k")});
           bestValue = ${yd[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${m}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${bd[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${vd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:o},programUniforms:[{type:"uint32",data:c}]})}},ct=(e,t,r,a)=>{let n=e.inputs.length===1?r:Xn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((b,w)=>w));let u=W.normalizeAxes(s,e.inputs[0].dims.length),l=u,o=e.inputs[0],c=Cd(l,e.inputs[0].dims.length);c.length>0&&(o=e.compute(ot(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],l=$d(l.length,o.dims.length));let[f,y]=Sd(o.dims,l),m=f;n.keepDims&&(m=xd(f,u)),e.compute(_d(t,{hint:n.cacheKey,inputDependencies:["type"]},[o],a,e.inputs[0].dataType,m,y),{inputs:[o]})},ai=(e,t)=>{ct(e,"ReduceMeanShared",t,"mean")},oi=(e,t)=>{ct(e,"ReduceL1Shared",t,"l1")},ii=(e,t)=>{ct(e,"ReduceL2Shared",t,"l2")},si=(e,t)=>{ct(e,"ReduceLogSumExpShared",t,"logSumExp")},ui=(e,t)=>{ct(e,"ReduceMaxShared",t,"max")},li=(e,t)=>{ct(e,"ReduceMinShared",t,"min")},di=(e,t)=>{ct(e,"ReduceProdShared",t,"prod")},ci=(e,t)=>{ct(e,"ReduceSumShared",t,"sum")},pi=(e,t)=>{ct(e,"ReduceSumSquareShared",t,"sumSquare")},fi=(e,t)=>{ct(e,"ReduceLogSumShared",t,"logSum")}});var pt,Ad,sn,Xn,ft,Ed,Td,Od,kd,Rd,Pd,Bd,Md,Dd,zd,mt,hi,gi,yi,bi,wi,vi,$i,Si,xi,Ii,it,on=j(()=>{"use strict";Ie();Pe();$e();mi();pt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Ad=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],sn=(e,t,r,a,n,s,u=!1,l=!1)=>{let o=[],c=r[0].dims,f=W.normalizeAxes(n,r[0].dims.length),y=!l&&f.length===0;c.forEach((V,z)=>{y||f.indexOf(z)>=0?u&&o.push(1):o.push(V)});let m=[],b=N("_A",r[0].dataType,c),w=K("output",s,o),$=a(b,w,f),I=`inputOffset = ${b.indicesToOffset("inputIndices")};`,_=`let ${I};`,x=`var ${I};`,P=$[1]===""?"":x,A=($[1]===""?_:I)+`
`+$[2];for(let V=0,z=0;V<r[0].dims.length;V++)y||f.indexOf(V)>=0?(u&&z++,A=`for(var j${V}: u32 = 0; j${V} < ${r[0].dims[V]}; j${V}++) {
                ${$[2].includes("lastIndex")?`let lastIndex = j${V};`:""}
                ${b.indicesSet("inputIndices",V,`j${V}`)}
                ${A}
              }`):(m.push(`${b.indicesSet("inputIndices",V,w.indicesGet("outputIndices",z))};`),z++);let B=W.size(o);return{name:e,shaderCache:t,getShaderSource:V=>`
        ${V.declareVariables(b,w)}

        ${V.mainStart()}
          ${V.guardAgainstOutOfBoundsWorkgroupSizes(B)}
          var inputIndices: ${b.type.indices};
          let outputIndices = ${w.offsetToIndices("global_idx")};

          ${m.join(`
`)}
          ${$[0]}       // init ops for reduce max/min
          ${P}
          ${$[1]}
          ${A}
          ${$[3]}
          ${$.length===4?w.setByOffset("global_idx","value"):$.slice(4).join(`
`)}
        }`,getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(B/64)}})}},Xn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),te({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ft=(e,t,r,a)=>{let n=e.inputs,s=n.length===1?r:Xn(n,r);e.compute(sn(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?Ad:a,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Ed=(e,t)=>{pt(e.inputs),ft(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,"value = log(value);"])},Td=(e,t)=>{pt(e.inputs),ft(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByOffset("inputOffset")});`,""])},Od=(e,t)=>{pt(e.inputs),ft(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},kd=(e,t)=>{pt(e.inputs),ft(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByOffset("inputOffset")});`,"value = log(value);"])},Rd=(e,t)=>{pt(e.inputs),ft(e,"ReduceMax",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(a.indicesSet("inputIndices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = max(value, ${a.getByOffset("inputOffset")});`,""]})},Pd=(e,t)=>{pt(e.inputs),ft(e,"ReduceMean",t,(a,n,s)=>{let u=1;for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},Bd=(e,t)=>{pt(e.inputs),ft(e,"ReduceMin",t,(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};`,`value = min(value, ${a.getByOffset("inputOffset")});`,""]})},Md=(e,t)=>{pt(e.inputs),ft(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByOffset("inputOffset")};`,""])},Dd=(e,t)=>{pt(e.inputs),ft(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByOffset("inputOffset")};`,""])},zd=(e,t)=>{pt(e.inputs),ft(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByOffset("inputOffset")}; value += t * t;`,""])},mt=(e,t,r)=>{if(t.length===0)return!!r;let a=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?a*=e[s]:n*=e[s];return n<32&&a>1024},hi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):ai(e,t)},gi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Td(e,t):oi(e,t)},yi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):ii(e,t)},bi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):si(e,t)},wi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):ui(e,t)},vi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bd(e,t):li(e,t)},$i=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Md(e,t):di(e,t)},Si=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dd(e,t):ci(e,t)},xi=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zd(e,t):pi(e,t)},Ii=(e,t)=>{mt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ed(e,t):fi(e,t)},it=e=>te(e)});var Ci,_i,Ai,Jn,Ei=j(()=>{"use strict";Ve();Pe();on();Ci=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},_i=(e,t)=>{Ci(e.inputs);let r=(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(sn("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ai=(e,t)=>{Ci(e.inputs);let r=(a,n,s)=>{let u=[];for(let l=0;l<a.rank;l++)(s.indexOf(l)>=0||s.length===0)&&u.push(`inputIndices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByOffset("inputOffset")};
var bestIndex : i32 = 0;`,`if (${a.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByOffset("inputOffset")};
         bestIndex = i32(lastIndex);
       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(sn("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Jn=e=>te(e)});var Wd,Ti,Vd,Nd,Ud,un,Hd,Oi,ea=j(()=>{"use strict";Pe();en();$e();Wd=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let o=r.dims[0],c=r.dims[1],f=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==f)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=n.dims[0]/3,m=y,b=m;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let P of t.qkvHiddenSizes)if(P%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],m=t.qkvHiddenSizes[1],b=t.qkvHiddenSizes[2]}let w=c;if(y!==m)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==y+m+b)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let $=0;if(u){if(m!==b)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==o)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==m/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||($=u.dims[3])}let I=w+$,_=-1,x=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:o,sequenceLength:c,pastSequenceLength:$,kvSequenceLength:w,totalSequenceLength:I,maxSequenceLength:_,inputHiddenSize:f,hiddenSize:y,vHiddenSize:b,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(b/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:x,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ti=e=>te({...e}),Vd=(e,t,r,a)=>{let n=Qe(a),s=K("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let l=Ae(t.dataType),o=64,c=a/n;c<o?o=1:c/8<64&&(o=Math.ceil(c/8));let f=Math.ceil(a/n/o),y=m=>`
  const dInv: ${l} = 1 / ${a};
  const dComp = ${a/n};
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;

  ${m.declareVariables(s)}
  @compute @workgroup_size(${o}, 1, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_index : u32) {
    let localOffset = local_index * ${f};
    let offset: u32 = workgroup_id.x * dComp + localOffset;

    var threadMaxVector = ${je("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      threadMaxVector = max(${nt(l,n,"x[offset + i]")}, threadMaxVector);
    }
    wgMax[local_index] = ${u};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${je("f32",n,"0")};
    for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
      sumVector += exp(${nt(l,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_index] = ${at("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        x[offset + i] = ${je(l,n,"dInv")};
      }
    } else {
      for (var i: u32 = 0; i < ${f} && i + localOffset < dComp; i++) {
        let f32input = ${nt(l,n,"x[offset + i]")};
        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${a}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},Nd=(e,t,r,a,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=s.scale===0?1/Math.sqrt(n.headSize):s.scale,o=Ae(t.dataType),c=Qe(n.headSize),f=N("q",t.dataType,t.dims,c),y=N("key",r.dataType,r.dims,c),m=K("output",t.dataType,u),b=n.headSize/c,w=n.sequenceLength,$=n.totalSequenceLength,I=b,_=12,x={x:Math.ceil(n.totalSequenceLength/_),y:Math.ceil(n.sequenceLength/_),z:n.batchSize*n.numHeads},P=[t,r],A=O=>`
  const M: u32 = ${w}u;
  const N: u32 = ${$}u;
  const K: u32 = ${I}u;
  const alpha: ${o} = ${l};
  const beta: ${o} = 1.0;
  const TILE_SIZE = ${_}u;

  var<workgroup> tileQ: array<${f.type.storage}, ${_*_}>;
  var<workgroup> tileK: array<${f.type.storage}, ${_*_}>;

  ${O.declareVariables(f,y,m)}

  @compute @workgroup_size(${_}, ${_}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${x.x*x.y}u +
          workgroup_id.y * ${x.x}u + workgroup_id.x) * ${_*_}u + local_index;

    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = ${n.sequenceLength*b} * headIdx + m * K;
    let kOffset = ${n.kvSequenceLength*b} * headIdx + n * K;

    var value = ${je(o,c)};
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m + local_id.y < M && w + local_id.x < K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];
      }
      if (n + local_id.y < N && w + local_id.x < K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * M * N;
    if (lm < M && ln < N) {
      let outputIdx = headOffset + lm * N + ln;
      output[outputIdx] = ${at("value",c)} * alpha;
    }
  }`,B=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:x}),getShaderSource:A},{inputs:P,outputs:[-1]})[0];return Vd(e,B,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),B},Ud=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],s=N("probs",t.dataType,t.dims),u=N("v",r.dataType,r.dims),l=K("output",t.dataType,n),o=Ae(t.dataType),c=12,f={x:Math.ceil(a.vHeadSize/c),y:Math.ceil(a.sequenceLength/c),z:a.batchSize*a.numHeads},y=m=>`
  const M: u32 = ${a.sequenceLength}u;
  const N: u32 = ${a.vHeadSize}u;
  const K: u32 = ${a.totalSequenceLength}u;
  const numHeads: u32 = ${a.numHeads}u;
  const TILE_SIZE = ${c}u;

  var<workgroup> tileQ: array<${s.type.storage}, ${c*c}>;
  var<workgroup> tileK: array<${s.type.storage}, ${c*c}>;

  ${m.declareVariables(s,u,l)}

  @compute @workgroup_size(${c}, ${c}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${f.x*f.y}u +
          workgroup_id.y * ${f.x}u + workgroup_id.x) * ${c*c}u + local_index;

   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (M * K) + m * K;
   let offsetB = headIdx * (N * K) + n;

   var value = ${o}(0);
   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
     if (m < M && w + local_id.x < K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < N && w + local_id.y < K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / ${a.numHeads};
   let currentBatchHeadNumber = workgroup_id.z % ${a.numHeads};
   let headOffset = (batchIdx * M * ${a.numHeads} + currentBatchHeadNumber) * ${a.vHeadSize};
   if (m < M && n < N) {
     let outputIdx = batchIdx * ${a.sequenceLength*a.vHiddenSize} + m * ${a.vHiddenSize}
       + currentBatchHeadNumber * ${a.vHeadSize} + n;
     output[outputIdx] = value;
   }
  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(a)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:f}),getShaderSource:y},{inputs:[t,r],outputs:[0]})[0]},un=(e,t,r,a,n,s,u,l,o,c,f)=>{let y=Nd(e,t,r,o,c,f);Ud(e,y,a,c)},Hd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=Ae(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,l=12,o={x:Math.ceil(t.headSize/l),y:Math.ceil(t.sequenceLength/l),z:t.batchSize*t.numHeads},c=()=>`
  const M: u32 = ${n}u;
  const K: u32 = ${s}u;
  const N: u32 = ${u}u;
  const numHeads: u32 = ${t.numHeads};
  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileInput: array<${a}, ${l*l}>;
  var<workgroup> tileWeightQ: array<${a}, ${l*l}>;
  var<workgroup> tileWeightK: array<${a}, ${l*l}>;
  var<workgroup> tileWeightV: array<${a}, ${l*l}>;

  @group(0) @binding(0) var<storage, read> input: array<${a}>;
  @group(0) @binding(1) var<storage, read> weight: array<${a}>;
  @group(0) @binding(2) var<storage, read> bias: array<${a}>;
  @group(0) @binding(3) var<storage, read_write> outputQ: array<${a}>;
  @group(0) @binding(4) var<storage, read_write> outputK: array<${a}>;
  @group(0) @binding(5) var<storage, read_write> outputV: array<${a}>;

  @compute @workgroup_size(${l}, ${l}, 1)
  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,
   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {
   let global_idx = (workgroup_id.z * ${o.x*o.y}u +
          workgroup_id.y * ${o.x}u + workgroup_id.x) * ${l*l}u + local_index;

    let batchIndex = workgroup_id.z / ${t.numHeads};
    let headNumber = workgroup_id.z % ${t.numHeads};
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (M * K) + m * K;
    let biasOffsetQ = headNumber * ${t.headSize};
    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;
    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;

    var valueQ = ${a}(0);
    var valueK = ${a}(0);
    var valueV = ${a}(0);
    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {
      if (m < M && w + local_id.x < K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < N && w + local_id.y < K) {
        let offset = n + (w + local_id.y) * ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * N + n) % ${t.headSize};
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * M * N;
    if (m < M && n < N) {
      let outputIdx = offset + m * N + n;
      outputQ[outputIdx] = valueQ;
      outputK[outputIdx] = valueK;
      outputV[outputIdx] = valueV;
    }
  }`,f=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o}),getShaderSource:c},{inputs:f,outputs:[-1,-1,-1]})},Oi=(e,t)=>{let r=Wd(e.inputs,t),[a,n,s]=Hd(e,r);return un(e,a,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Ld,Gd,Fd,ki,Ri=j(()=>{"use strict";St();Ie();Pe();$e();Ld=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,s)=>{let u=n.length;if(u!==a.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((l,o)=>{if(l!==a[o])throw new Error(`${s}: dim[${o}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Gd=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,s=e[0].dims,u=a?Qe(s[s.length-1]):1,l=n==="NHWC"&&s.length>1?u:1,o=W.size(s)/u,c=Oe(s.length)&&a,f=c?s.length:s,y=N("x",e[0].dataType,e[0].dims,u),m=N("scale",e[1].dataType,e[1].dims,l),b=N("bias",e[2].dataType,e[2].dims,l),w=N("inputMean",e[3].dataType,e[3].dims,l),$=N("inputVar",e[4].dataType,e[4].dims,l),I=K("y",e[0].dataType,f,u),_=()=>{let P="";if(a)P=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")P=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{P=`var cIndices = ${m.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let A=1;A<m.rank;A++)P+=`cIndices[${A}] = outputIndices[${A}];`;P+=`let cOffset = ${m.indicesToOffset("cIndices")};`}return P},x=P=>`
  const epsilon = ${r};
  ${P.registerUniform("outputSize","u32").declareVariables(y,m,b,w,$,I)}
  ${P.mainStart()}
  ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};
    ${_()}
    let scale = ${m.getByOffset("cOffset")};
    let bias = ${b.getByOffset("cOffset")};
    let inputMean = ${w.getByOffset("cOffset")};
    let inputVar = ${$.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:x,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c?[{type:"uint32",data:o},...fe(s)]:[{type:"uint32",data:o}]})}},Fd=e=>te(e),ki=(e,t)=>{let{inputs:r,outputCount:a}=e,n=Fd({...t,outputCount:a});if(Te.webgpu.validateInputContent&&Ld(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Gd(r,n))}});var jd,qd,Pi,Bi=j(()=>{"use strict";Ie();$e();jd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},qd=e=>{let t=e[0].dims,r=e[0].dims[2],a=W.size(t)/4,n=e[0].dataType,s=N("input",n,t,4),u=N("bias",n,[r],4),l=N("residual",n,t,4),o=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:f=>`
  const channels = ${r}u / 4;
  ${f.declareVariables(s,u,l,o)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${s.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${o.setByOffset("global_idx","value")}
  }`}},Pi=e=>{jd(e.inputs),e.compute(qd(e.inputs))}});var Kd,Ee,Mi,Di,zi,Wi,Vi,Ni,Ui,Hi,Li,Yd,Gi,Fi,ji,qi,ln,Ki,dn,Yi,Zi,Qi,Xi,Ji,es,ts,rs,ns,as,os,is,ss,us,ls,ds,cs,ta=j(()=>{"use strict";Ve();Ie();Pe();$e();Kd=(e,t,r,a,n,s)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let o=N("inputData",r,[u],4),c=K("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(o,c)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${o.getByOffset("global_idx")};
    ${c.setByOffset("global_idx",l)}
  }`},Ee=(e,t,r,a,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Kd(u,W.size(e.dims),e.dataType,s,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(W.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(W.size(e.dims)/4)}]})}),Mi=e=>{e.compute(Ee(e.inputs[0],"Abs","abs"))},Di=e=>{e.compute(Ee(e.inputs[0],"Acos","acos"))},zi=e=>{e.compute(Ee(e.inputs[0],"Acosh","acosh"))},Wi=e=>{e.compute(Ee(e.inputs[0],"Asin","asin"))},Vi=e=>{e.compute(Ee(e.inputs[0],"Asinh","asinh"))},Ni=e=>{e.compute(Ee(e.inputs[0],"Atan","atan"))},Ui=e=>{e.compute(Ee(e.inputs[0],"Atanh","atanh"))},Hi=e=>te(e),Li=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Ee(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Yd=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:nn,r=e.length>=3?e[2].getFloat32Array()[0]:an;return te({min:t,max:r})},Gi=(e,t)=>{let r=e.inputs.length===1?t:Yd(e.inputs),a=Ae(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Fi=e=>{e.compute(Ee(e.inputs[0],"Ceil","ceil"))},ji=e=>{e.compute(Ee(e.inputs[0],"Cos","cos"))},qi=e=>{e.compute(Ee(e.inputs[0],"Cosh","cosh"))},ln=e=>te(e),Ki=(e,t)=>{e.compute(Ee(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_: f32 = f32(${t.alpha});

  fn elu_f32(a: f32) -> f32 {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},dn=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Yi=e=>{let t=Ae(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,dn(`vec4<${t}>`,t)))},Zi=e=>{e.compute(Ee(e.inputs[0],"Exp","exp"))},Qi=e=>{e.compute(Ee(e.inputs[0],"Floor","floor"))},Xi=e=>{let t=Ae(e.inputs[0].dataType);e.compute(Ee(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,dn(`vec4<${t}>`,t)))},Ji=(e,t)=>{e.compute(Ee(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},es=e=>{e.compute(Ee(e.inputs[0],"Not",t=>`!${t}`))},ts=e=>{e.compute(Ee(e.inputs[0],"Neg",t=>`-${t}`))},rs=e=>{e.compute(Ee(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ns=e=>{e.compute(Ee(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},as=e=>{e.compute(Ee(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},os=e=>{e.compute(Ee(e.inputs[0],"Sin","sin"))},is=e=>{e.compute(Ee(e.inputs[0],"Sinh","sinh"))},ss=e=>{e.compute(Ee(e.inputs[0],"Sqrt","sqrt"))},us=e=>{e.compute(Ee(e.inputs[0],"Tan","tan"))},ls=e=>{e.compute(Ee(e.inputs[0],"Tanh","tanh"))},ds=(e,t)=>(e.compute(Ee(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),cs=e=>{e.compute(Ee(e.inputs[0],"Log","log"))}});var Qd,Xd,ps,fs=j(()=>{"use strict";Ie();$e();ta();Qd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Xd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=N("input",e[0].dataType,e[0].dims,4),a=N("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),s=W.size(t)/4,u=Ae(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${o.declareVariables(r,a,n)}

  ${dn(`vec4<${u}>`,u)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},ps=e=>{Qd(e.inputs),e.compute(Xd(e.inputs))}});var Jd,ec,ht,ms,hs,gs,ys,bs,ws,vs,$s,Ss,xs,Is=j(()=>{"use strict";Ve();Ie();$e();Jd=(e,t,r,a,n,s,u,l,o,c,f,y,m)=>{let b,w;typeof l=="string"?b=w=(O,V)=>`${l}((${O}),(${V}))`:typeof l=="function"?b=w=l:(b=l.scalar,w=l.vector);let $=y?t.length:t,I=y?r.length:r,_=y?a.length:a,x=K("outputData",f,_,4),P=N("aData",o,$,4),A=N("bData",c,I,4),B;if(n)if(s){let O=W.size(t)===1,V=W.size(r)===1,z=t.length>0&&t[t.length-1]%4===0,q=r.length>0&&r[r.length-1]%4===0;O||V?B=x.setByOffset("global_idx",w(O?`${P.type.value}(${P.getByOffset("0")}.x)`:P.getByOffset("global_idx"),V?`${A.type.value}(${A.getByOffset("0")}.x)`:A.getByOffset("global_idx"))):B=`
            let outputIndices = ${x.offsetToIndices("global_idx * 4u")};
            let offsetA = ${P.broadcastedIndicesToOffset("outputIndices",x)};
            let offsetB = ${A.broadcastedIndicesToOffset("outputIndices",x)};
            ${x.setByOffset("global_idx",w(u||z?P.getByOffset("offsetA / 4u"):`${P.type.value}(${P.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||q?A.getByOffset("offsetB / 4u"):`${A.type.value}(${A.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else B=x.setByOffset("global_idx",w(P.getByOffset("global_idx"),A.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let O=(V,z,q="")=>{let Z=`aData[indexA${z}][componentA${z}]`,M=`bData[indexB${z}][componentB${z}]`;return`
            let outputIndices${z} = ${x.offsetToIndices(`global_idx * 4u + ${z}u`)};
            let offsetA${z} = ${P.broadcastedIndicesToOffset(`outputIndices${z}`,x)};
            let offsetB${z} = ${A.broadcastedIndicesToOffset(`outputIndices${z}`,x)};
            let indexA${z} = offsetA${z} / 4u;
            let indexB${z} = offsetB${z} / 4u;
            let componentA${z} = offsetA${z} % 4u;
            let componentB${z} = offsetB${z} % 4u;
            ${V}[${z}] = ${q}(${b(Z,M)});
          `};f===9?B=`
            var data = vec4<u32>(0);
            ${O("data",0,"u32")}
            ${O("data",1,"u32")}
            ${O("data",2,"u32")}
            ${O("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`
            ${O("outputData[global_idx]",0)}
            ${O("outputData[global_idx]",1)}
            ${O("outputData[global_idx]",2)}
            ${O("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(P,A,x)}

        ${m??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${B}
      }`},ec=(e,t,r,a,n,s,u=r.dataType)=>{let l=!W.areEqual(r.dims,a.dims),o=r.dims,c=W.size(r.dims),f=!1,y=!1,m=[l];if(l){let w=dt.calcShape(r.dims,a.dims,!1);if(!w)throw new Error("Can't perform binary op on the given tensors");o=w,c=W.size(o);let $=W.size(r.dims)===1,I=W.size(a.dims)===1,_=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,x=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;m.push($),m.push(I),m.push(_),m.push(x);let P=1;for(let A=1;A<o.length;A++){let B=r.dims[r.dims.length-A]??1,O=a.dims[a.dims.length-A]??1;if(B===O)P*=B;else break}P%4===0?(y=!0,f=!0):($||I||_||x)&&(f=!0)}else f=!0;m.push(f);let b=Oe(r.dims.length)&&Oe(a.dims.length)&&Oe(o.length);return{name:e,shaderCache:{hint:t+m.map(w=>w.toString()).join("_"),inputDependencies:b?["rank","rank"]:["dims","dims"]},getShaderSource:w=>Jd(w,r.dims,a.dims,o,f,l,y,n,r.dataType,a.dataType,u,b,s),getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:b?[{type:"uint32",data:Math.ceil(W.size(o)/4)},...fe(r.dims),...fe(a.dims),...fe(o)]:[{type:"uint32",data:Math.ceil(W.size(o)/4)}]})}},ht=(e,t,r,a,n,s)=>{e.compute(ec(t,n??"",e.inputs[0],e.inputs[1],r,a,s))},ms=e=>{ht(e,"Add",(t,r)=>`${t}+${r}`)},hs=e=>{ht(e,"Div",(t,r)=>`${t}/${r}`)},gs=e=>{ht(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},ys=e=>{ht(e,"Mul",(t,r)=>`${t}*${r}`)},bs=e=>{let t=N("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ht(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},ws=e=>{ht(e,"Sub",(t,r)=>`${t}-${r}`)},vs=e=>{ht(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},$s=e=>{ht(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ss=e=>{ht(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},xs=e=>{ht(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var rc,nc,ac,oc,Cs,_s,As=j(()=>{"use strict";Ie();Pe();$e();rc=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},nc=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,ac=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(s):n===0?a.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?a.push(`else { ${s} }`):a.push(`else if (inputIndex == ${n}) { ${s} }`)}return a.join(`
`)},oc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let A=1;A<e.length;A++){let B=e[A].dims.slice();for(let O=0;O<r.length;O++)if(O===a)n[a]+=B[O];else if(r[O]!==B[O])throw new Error("non concat dimensions must match")}let s=W.size(n),u=new Array(e.length),l=new Array(e.length),o=e[0].dataType,c=0,f=[],y=[],m=[],b=[{type:"uint32",data:s}];for(let A=0;A<e.length;++A)c+=e[A].dims[a],u[A]=c,m.push(Oe(e[A].dims.length)),y.push(m[A]?e[A].dims.length:e[A].dims),l[A]=N(`input${A}`,o,y[A]),f.push(m[A]?"rank":"dims"),b.push({type:"uint32",data:u[A]});for(let A=0;A<e.length;++A)m[A]&&b.push(...fe(e[A].dims));let w=Oe(n.length);w&&b.push(...fe(n));let $=w?n.length:n,I=K("output",o,$),_=I.indicesGet("indices",a),x=Array.from(Array(u.length).keys()).map(A=>`uniforms.sizeInConcatAxis${A}`).join(","),P=A=>`

  ${(()=>{A.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)A.registerUniform(`sizeInConcatAxis${B}`,"u32");return A.declareVariables(...l,I)})()}

  ${nc(u.length,x)}

  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${I.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${_});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${x});
      ${_} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${ac(l,I)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:b}),getShaderSource:P}},Cs=(e,t)=>{rc(e.inputs),e.compute(oc(e.inputs,t.axis))},_s=e=>te({axis:e.axis})});var gt,cn,Tt=j(()=>{"use strict";Ie();gt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},cn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[nn,an];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var He,pn,fn=j(()=>{"use strict";He=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},pn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var mn,ra=j(()=>{"use strict";mn=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var ic,sc,vr,Es,uc,$r,lc,hn,Sr=j(()=>{"use strict";Ie();$e();Tt();fn();ic=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,sc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,vr=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32)=>{let o=t[1]*e[1],c=t[0]*e[0],f=n?o:s,y=n?s:o,m=f/t[0],b=s/t[1];if(!((n&&m===4&&e[1]===4||!n&&(m===3||m===4))&&f%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${m} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${m} must be 3 or 4.
  tileAWidth ${f} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${m}<${r}>, ${f/m}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${m};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${o};

  let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${b};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${ic(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${m===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${sc(n,m)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Es=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,uc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",$r=(e,t,r="f32",a,n=!1,s=32,u=!1,l=32,o=!1)=>{let c=e[1]*t[1],f=e[0]*t[0],y=n?c:s,m=n?s:c;if(!(m%t[1]===0&&y%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${m} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let b=m/t[1],w=y/t[0],$=s/t[1],I=o?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${f};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${m}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${Es(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${b};
let tileColA = i32(localId.x) * ${w};
let tileRowB = i32(localId.y) * ${$};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${w}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Es(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${uc(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${m}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${f}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${I}
  }
`},lc=(e,t,r,a,n,s=!1)=>{let[u,l,o]=n,[c,f,y,m]=a,b=Zt(u,o),w=Zt(l,o),$=Ae(a[0].type.tensor),I=()=>{let P=f.rank,A=c.rank,B=`var aIndices: ${f.type.indices};`;for(let O=P-2-1,V=A-1;O>=0;O--,V--)B+=`
aIndices[${O}] = ${A>1?`batchIndices[${V}]`:"batchIndices"};`;return b.forEach(O=>{B+=`
aIndices[${O}] = 0;`}),B+=`
aIndices[${P-2}] = u32(row);
                   aIndices[${P-1}] = u32(colIn);`,B},_=()=>{let P=y.rank,A=c.rank,B=`var bIndices: ${y.type.indices};`;for(let O=P-2-1,V=A-1;O>=0;O--,V--)B+=`
bIndices[${O}] = ${A>1?`batchIndices[${V}]`:"batchIndices"};`;return w.forEach(O=>{B+=`
bIndices[${O}] = 0;`}),B+=`
bIndices[${P-2}] = u32(row);
                   bIndices[${P-1}] = u32(colIn);`,B};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${He(e,$)} {
      var value = ${He(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${I()}
        value = ${f.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${He(e,$)} {
      var value = ${He(e,$)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${_()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${He(e,$)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${s?"bias[colIn]":`${He(e,$)}(bias[row])`};`:""}
        ${r}
        ${m.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},hn=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s.slice(0,-2),o=u.slice(0,-2),c=a?a.slice(0,-2):r.slice(0,-2),f=Oe(c.length),y=f?c.length:c,m=Jo("batchDims",e[0].dataType,y,1),b=W.size(c),w=s[s.length-2],$=s[s.length-1],I=u[u.length-1],_=$%4===0&&I%4===0,x=w<=8?[4,1,1]:[4,4,1],P=[8,8,1],A=[Math.ceil(I/P[0]/x[0]),Math.ceil(w/P[1]/x[1]),Math.ceil(b/P[2]/x[2])],B=Ae(e[0].dataType),O=_?4:1,V=[...l,w,$/O],z=Oe(V.length),q=z?V.length:V,Z=[...o,$,I/O],M=Oe(Z.length),Y=M?Z.length:Z,me=[b,w,I/O],X=N("a",e[0].dataType,q,O),we=N("b",e[1].dataType,Y,O),F=K("result",e[0].dataType,me.length,O),le=[X,we],pe=[{type:"int32",data:w},{type:"int32",data:I},{type:"int32",data:$}];f&&pe.push(...fe(c)),z&&pe.push(...fe(V)),M&&pe.push(...fe(Z));let ye=[];ye.push(z?"rank":"dims"),ye.push(M?"rank":"dims");let he=e.length>2,{activationFunction:qe,applyActivation:Be}=gt(t,F.type.value),Ne=lc(O,he,Be,[m,X,we,F],[l,o,c],n);if(he){let de=n?O:1;le.push(N("bias",e[2].dataType,e[2].dims.length,de)),pe.push(...fe(e[2].dims)),ye.push("rank")}pe.push(...fe(me));let G=de=>`
  ${de.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(m).declareVariables(...le,F)}
  ${qe}
  ${Ne}
  ${_?vr(x,P,B,m):$r(x,P,B,m)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${x}${t.activation}${t.clipMax}${t.clipMin}${_}${he}${n}`,inputDependencies:ye},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:A[0],y:A[1],z:A[2]},programUniforms:pe}),getShaderSource:G}}});var dc,Ts,Os=j(()=>{"use strict";Et();$e();Tt();fn();ra();Sr();dc=(e,t,r,a,n=!1,s,u=4,l=4,o=4,c="f32")=>{let f=M=>{switch(M){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${M} is not supported.`)}},y=M=>{switch(M){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${M} is not supported.`)}},m=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,b=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,w=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",_=e?"col":"row",x=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${_} / (filterDims[1] * inChannels);
    let WCol = ${_} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${_} % inChannels;
    var resData = ${He(u,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${w} && xCol >= 0 && xCol < ${$}) {
      ${m}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${f(u)}
    }
    return resData;`,P=e?t&&a?`
    let col = colIn * ${u};
    ${x}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${x}
    }
    return ${He(u,c)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${x}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${x}
    }
    return ${He(u,c)}(0.0);`,A=`${y(l)}`,B=He(o,c),O=e?He(u,c):He(l,c),V=e?He(l,c):He(u,c),{activationFunction:z,applyActivation:q}=gt(s,B);return`
    ${z}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${O} {
      ${e?P:A}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${V} {
      ${e?A:P}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {
      let col = colIn * ${o};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${b}
      ${pn(n)}
      ${q}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Ts=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",c=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],m=o?r[1]:r[2],b=o?r[3]:r[1],w=o&&(c%4===0||c%3===0)&&b%4===0,$=o?b:y*m,I=o?y*m:b,_=[8,8,1],x=a<=8?[4,1,1]:[4,4,1],P=[Math.ceil($/_[0]/x[0]),Math.ceil(I/_[1]/x[1]),Math.ceil(f/_[2]/x[2])];Re("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${P}`);let A=w?o&&c%4!==0?3:4:1,B=_[1]*x[1],O=_[0]*x[0],V=Math.max(_[0]*A,_[1]),z=a%B===0,q=n%O===0,Z=s%V===0,M=w?[A,4,4]:[1,1,1],Y=Ae(e[0].dataType),me=w?4:1,X=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:s}],we=N("x",e[0].dataType,e[0].dims.length,A===3?1:A),F=N("w",e[1].dataType,e[1].dims.length,me),le=[we,F];X.push(...fe(e[0].dims)),X.push(...fe(e[1].dims));let pe=`
      fn setOutputAtIndex(flatIndex : i32, value : ${w?`vec4<${Y}>`:Y}) {
        result[flatIndex] = ${w?`vec4<${Y}>`:Y}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${w?`vec4<${Y}>`:Y}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${w?"/ 4":""}, value);
      }`;if(u){let he=N("bias",e[2].dataType,e[2].dims.length,me);le.push(he),X.push(...fe(e[2].dims)),pe+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?`vec4<${Y}>`:Y} {
          return bias[coords.${o?"w":"y"}${w?"/ 4":""}];
        }`}let ye=K("result",e[0].dataType,r.length,me);return X.push(...fe(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]},programUniforms:X}),getShaderSource:he=>`
        ${mn("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...le,ye)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${pe}
        ${dc(o,z,q,Z,u,t,M[0],M[1],M[2],Y)}
            ${w?vr(x,_,Y,void 0,!o,V):$r(x,_,Y,void 0,!o,V,!1,void 0,l)}`}}});var na,ks,cc,Rs,aa=j(()=>{"use strict";Sr();Ie();$e();Tt();na=e=>e%4===0?4:e%2===0?2:1,ks=(e,t,r,a,n=!1)=>{let s=e[0].dims,u=e[1].dims,l=s[s.length-2],o=u[u.length-1],c=s[s.length-1],f=a?a.slice(0,-2):r.slice(0,-2),y=W.size(f),m=na(o),b=na(c),w=na(l),$=W.size(r)/m/w,I=N("a",e[0].dataType,s,b),_=N("b",e[1].dataType,u,m),x=K("output",e[0].dataType,[y,l,o],m),{activationFunction:P,applyActivation:A}=gt(t,x.type.value),B=[I,_],O=e.length>2,V="";if(O){let F=n?m:1;B.push(N("bias",e[2].dataType,e[2].dims,F)),V=`${n?`value += bias[col / ${F}];`:`value += ${x.type.value}(bias[row + i]);`}`}let z=s.slice(0,-2),q=u.slice(0,-2),Z=N("batchDims",e[0].dataType,f),M=Zt(z,f),Y=Zt(q,f),me=(F,le)=>{let pe=F.rank,ye=F.name;if(pe===2)return`var ${ye}Indices = ${F.type.indices}(0u, 0u);`;let he=Z.rank,qe=`var ${ye}Indices: ${F.type.indices};`;for(let Be=pe-2-1,Ne=he-1;Be>=0;Be--,Ne--)qe+=`
${ye}Indices[${Be}] = ${he>1?`batchIndices[${Ne}]`:"batchIndices"};`;return le.forEach(Be=>{qe+=`
${ye}Indices[${Be}] = 0;`}),qe+=`${ye}Indices[${pe-2}] = 0u;
                   ${ye}Indices[${pe-1}] = 0u;`,qe},X=()=>{let F=`var aData: ${I.type.value};`;for(let le=0;le<b;le++)F+=`
            let bData${le} = b[(offsetB + (k + ${le}) * N + col) / ${m}];`;for(let le=0;le<w;le++){F+=`aData = a[(offsetA + (row + ${le}) * K + k) / ${b}];`;for(let pe=0;pe<b;pe++)F+=`
          values[${le}] = fma(${_.type.value}(aData${b===1?"":`[${pe}]`}), bData${pe}, values[${le}]);
`}return F},we=F=>`
  const M: u32 = ${l}u;
  const N: u32 = ${o}u;
  const K: u32 = ${c}u;
  ${F.declareVariables(...B,x)}
  ${P}
  ${F.mainStart()}
    ${F.guardAgainstOutOfBoundsWorkgroupSizes($)}
    let col = (global_idx % ${o/m}u) * ${m}u;
    var index1 = global_idx / ${o/m}u;
    let stride1 = ${l/w}u;
    let row = (index1 % stride1) * ${w}u;
    let batch = index1 / stride1;

    ${r.length===2?"":`let batchIndices = ${Z.offsetToIndices("batch")};`}
    ${me(I,M)}
    let offsetA = ${I.indicesToOffset("aIndices")};
    ${me(_,Y)}
    let offsetB = ${_.indicesToOffset("bIndices")};
    var values: array<${x.type.value}, ${w}>;
    for (var k: u32 = 0u; k < K; k = k + ${b}) {
      ${X()}
    }
    for (var i = 0u; i < ${w}u; i++) {
      var value = values[i];
      ${V}
      ${A}
      let curIndices = ${x.type.indices}(batch, row + i, col);
      let offset = ${x.indicesToOffset("curIndices")};
      ${x.setByOffset(`offset / ${m}`,"value")};
    }
  }
  ${Z.impl()}
  `;return{name:"MatMulNaive",shaderCache:{hint:t.activationCacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil($/64)}}),getShaderSource:we}},cc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Rs=e=>{cc(e.inputs);let t=dt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");e.compute(hn(e.inputs,{activation:"",activationCacheKey:""},t))}});var oa,Ps=j(()=>{"use strict";Ie();$e();sa();Tt();oa=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,l=u[0]/t.group,o=t.format==="NHWC",c=ia(s,u,t.dilations,t.pads,t.strides,o),f=W.size(c),y=K("output",e[0].dataType,c),{activationFunction:m,applyActivation:b}=gt(t,y.type.value),w=N("x",e[0].dataType,s),$=N("w",e[1].dataType,u),I=[w,$];a&&I.push(N("b",e[2].dataType,e[2].dims));let _=x=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${x.declareVariables(...I,y)}

  ${m}

  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes(f)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${o?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${o?1:2}], outputIndices[${o?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${s[o?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${s[o?2:3]}u) {
            continue;
          }

          let xVal = ${o?w.get("batch","xHeight","xWidth","input_channel"):w.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${$.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${b}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(c):c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)}}),getShaderSource:_}}});var ia,Bs,pc,Ms,ua,fc,mc,la,sa=j(()=>{"use strict";Ie();Pe();Os();Sr();aa();Ps();Tt();Qt();ia=(e,t,r,a,n,s)=>{let u=e[0],l=e.slice(s?1:2,s?3:4),o=l.length,c=t[0],y=t.slice(2).map((w,$)=>w+(w-1)*(r[$]-1)),b=l.map((w,$)=>w+a[$]+a[$+o]).map((w,$)=>Math.floor((w-y[$]+n[$])/n[$]));return b.splice(0,0,u),b.splice(s?3:1,0,c),b},Bs=[2,3,1,0],pc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ms=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let a=e.pads.slice();Nt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},ua=e=>{let t=cn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,l=e.pads,o=e.strides,c=e.w_is_const();return te({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,pads:l,strides:o,wIsConst:c,...t})},fc=(e,t,r)=>{let a=Ms(r,t);if(r.group!==1){e.compute(oa(t,a));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],o=t[0].dims[n?3:1],c=t[1].dims[2],f=t[1].dims[3],y=ia(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),m=y[n?1:2],b=y[n?2:3],w=y[n?3:1],$=n&&c===u&&f===l&&r.pads[0]===0&&r.pads[1]===0;if($||c===1&&f===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let O=y[0],V,z,q,Z=[];if(n){let M=e.kernelCustomData.wT??e.compute(ot(t[1],Bs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=M),$){let Y=u*l*o;V=t[0].reshape([1,O,Y]),z=M.reshape([1,Y,w]),q=[1,O,w]}else V=t[0].reshape([O,u*l,o]),z=M.reshape([1,o,w]),q=[O,m*b,w];Z.push(V),Z.push(z)}else V=t[0].reshape([O,o,u*l]),z=t[1].reshape([1,w,o]),q=[O,w,m*b],Z.push(z),Z.push(V);s&&Z.push(t[2]),o===3&&w===3?e.compute(ks(Z,a,y,q,n),{inputs:Z}):e.compute(hn(Z,a,y,q,n),{inputs:Z});return}let I=!0,_=e.kernelCustomData.wT??e.compute(ot(t[1],Bs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_);let x=[t[0],_];s&&x.push(t[2]);let P=n?m*b:w,A=n?w:m*b,B=c*f*o;e.compute(Ts(x,a,y,P,A,B,s,I),{inputs:x})},mc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),o=Ms({...t,pads:n,strides:s,dilations:u,kernelShape:l},a);e.compute(oa(a,o,c=>r?[c[0],c[2],c[3]]:[]))},la=(e,t)=>{pc(e.inputs,t),e.inputs[0].dims.length===3?mc(e,t):fc(e,e.inputs,t)}});var hc,Ds,zs=j(()=>{"use strict";Et();$e();Tt();fn();ra();Sr();hc=(e,t=!1,r,a=4)=>{let n=He(a,"f32"),s=x=>{switch(x){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${x} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,l=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,o=e?"outBackprop[1]":"outBackprop[2]",c=e?"outBackprop[2]":"outBackprop[3]",f=e?"row":"col",y=e?"col":"row",m=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${f} / outWidth;
      let outCol = ${f} % outWidth;

      let WRow = ${y} / (filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${o}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${c}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,b=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${m}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${m}
      }
      return ${n}(0.0);`,w=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${s(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:$,applyActivation:I}=gt(r,n);return`
      ${$}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:w}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?w:b}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${l}
      ${pn(t)}
      ${I}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},Ds=(e,t,r,a,n,s,u,l)=>{let o=t.format==="NHWC",c=o?e[0].dims[3]:e[0].dims[1],f=r[0],y=o?r[2]:r[3],m=o?r[1]:r[2],b=o?r[3]:r[1],w=o?c%4===0&&b%4===0:y%4===0&&b%4===0,$=o?b:y*m,I=o?y*m:b,_=w?[8,8,1]:[$<=4||I<=4?4:16,$>4&&I<=4?4:16,1],x=w?[4,4,1]:[$<=4?1:4,$>4&&I<=4?1:4,1],P=[Math.ceil($/_[0]/x[0]),Math.ceil(I/_[1]/x[1]),Math.ceil(f/_[2]/x[2])];Re("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${P}`);let A=w?4:1,B=Math.max(_[0]*A,_[1]),O=w?4:1,V=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:s}],z=N("x",e[0].dataType,e[0].dims.length,O),q=N("w",e[1].dataType,e[1].dims.length,1),Z=K("result",e[0].dataType,r.length,O),M=[z,q];V.push(...fe(e[0].dims)),V.push(...fe(e[1].dims));let Y="";if(u){let me=N("bias",e[2].dataType,e[2].dims.length,O);M.push(me),V.push(...fe(e[2].dims)),Y+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?"vec4<f32>":"f32"} {
          return bias[coords.${o?"w":"y"}${w?"/ 4":""}];
        }`}return V.push(...fe(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:P[0],y:P[1],z:P[2]},programUniforms:V}),getShaderSource:me=>`
        ${mn("uniforms.result_strides")}
        ${me.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...M,Z)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[o?1:2]}, ${t.kernelShape[o?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[o?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[o?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${s};
        ${Y}
        ${hc(o,u,t,A)}
        ${w?vr(x,_,"f32",void 0,!o,B):$r(x,_,"f32",void 0,!o,B,!1,void 0,l)}`}}});var gc,da,Ws=j(()=>{"use strict";Et();Ie();$e();gc=(e,t,r,a,n,s,u=!1,l)=>{let o=r.format==="NHWC",c=o?1:2,f=o?2:3,y=o?3:1,m=W.size(a),b=u?2:1,w=r.group,$=t[1].dims,I=$[0]/w,_=$[1],x=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(x+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${o?"w":"y"}${u?"/ 4":""}];
    }`);let P=u?4:1,A=N("W",t[1].dataType,t[1].dims,P),B=N("Dy",t[0].dataType,t[0].dims,P),O=[B,A];n&&O.push(N("bias",t[2].dataType,[a[y]],P));let V=K("result",t[0].dataType,a,P),z=`{
        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${s?"global_id.y":"workgroup_id.y"} * ${b};
        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${b}>;
        for (var i = 0; i < ${b}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${B.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${A.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${B.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${b}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};
          ${V.set("batch","r","c + i","d1","value")};
        }
      }`,q=`
          let outputIndices = ${V.offsetToIndices("global_idx")};
          let batch = ${V.indicesGet("outputIndices",0)};
          let d1 = ${V.indicesGet("outputIndices",y)};
          let r = ${V.indicesGet("outputIndices",c)};
          let c = ${V.indicesGet("outputIndices",f)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${_};
          let wOutChannel = d1 - groupId * ${_};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = 0.0;
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${c}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${f}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${I};
              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {
                let xValue = ${o?B.get("batch","idyR","idyC","inputChannel"):B.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${A.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":"0.0"};
          ${V.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...O,V)}
  ${x}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[o?1:2]}, ${r.kernelShape[o?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[o?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[o?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)};
  ${u?z:q}}`},da=(e,t,r)=>{let a=e.length>2,n=t.outputShape,s=W.size(n),u=[Math.ceil(s/64),1,1];Re("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Ae(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:o=>gc(o,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var yc,bc,wc,Vs,Ns,vc,$c,Sc,xc,Us,Hs=j(()=>{"use strict";Pe();zs();Ws();Tt();Qt();yc=(e,t,r,a,n,s)=>(e-1)*t+r+(a-1)*n+1-s,bc=(e,t,r,a,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[a]=e-s,r[n]=s)},wc=(e,t,r,a,n,s,u,l,o,c)=>{let f=e.length-2,y=c.length===0;if(o.length===0)for(let w=0;w<f;++w)o.push(0);let m=e[0],b=t[l?3:1]*n;for(let w=0,$=e.length-f-(l?1:0);w<f;++w,++$){let I=e[$],_=y?I*u[w]:c[w],x=yc(I,u[w],s[w],t[$],r[w],_);bc(x,a,s,w,w+f),y&&c.push(u[w]*(I-1)+o[w]+(t[$]-1)*r[w]+1-s[w]-s[w+f])}c.splice(0,0,m),c.splice(l?3:1,0,b)},Vs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((m,b)=>m*b,1)===0){r.length=0;for(let m=2;m<t[1].dims.length;++m)r.push(t[1].dims[m])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,o=e.dilations.slice();if(o.reduce((m,b)=>m+b,0)===0){let m=t[0].dims.length-2;o=new Array(m).fill(1)}let c=e.strides.slice();if(c.reduce((m,b)=>m+b,0)===0){let m=t[0].dims.length-2;c=new Array(m).fill(1)}wc(l,r,o,e.autoPad,e.group,n,c,a,u,s);let f=Object.assign({},e),y=e.cacheKey+[r.join("n,"),n.join(","),c.join(","),u.join(","),s.join(","),o.join(",")].join("_");return Object.assign(f,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:o,strides:c,cacheKey:y}),f},Ns=e=>{let t=cn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,l=e.pads,o=e.strides,c=e.wIsConst(),f=e.outputPadding,y=e.outputShape;return te({autoPad:a,format:r,dilations:n,group:s,kernelShape:u,outputPadding:f,outputShape:y,pads:l,strides:o,wIsConst:c,...t})},vc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((f,y)=>f+y,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((f,y)=>f+y,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((f,y)=>f+y,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((f,y)=>f+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},$c=[2,3,1,0],Sc=(e,t,r)=>{let a=Vs(r,t),n=r.format==="NHWC",s=t.length===3;if(a.group!==1||a.group===1){e.compute(da(t,a));return}let u=a.outputShape,l=u[n?1:2],o=u[n?2:3],c=u[n?3:1],f=t[1].dims[2],y=t[1].dims[3],m=t[0].dims[n?3:1],b=n?l*o:c,w=n?c:l*o,$=f*y*m,I=!0,_=e.kernelCustomData.wT??e.compute(ot(t[1],$c),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_);let x=[t[0],_];s&&(!n&&t[2].dims.length===1?x.push(t[2].reshape([t[2].dims[0],1,1])):x.push(t[2])),e.compute(Ds(x,a,u,b,w,$,s,I),{inputs:x})},xc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let o=Vs({...t,pads:l,strides:u,dilations:s,kernelShape:n},a);e.compute(da(a,o,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]]))},Us=(e,t)=>{vc(e.inputs,t),e.inputs[0].dims.length===3?xc(e,t):Sc(e,e.inputs,t)}});var ca,gn,Ls,Ic,Cc,pa,fa,Gs,_c,Fs,js,qs=j(()=>{"use strict";Ie();Pe();$e();ca="[a-zA-Z]|\\.\\.\\.",gn="("+ca+")+",Ls="^"+gn+"$",Ic="("+gn+",)*"+gn,Cc="^"+Ic+"$",pa=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},fa=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(Cc)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,o)=>{let c=t[o].dims.slice();if(!l.match(RegExp(Ls)))throw new Error("Invalid LHS term");let f=this.processTerm(l,!0,c,o);this.lhs.push(f)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,o])=>o.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(gn)))throw new Error("Invalid RHS");n.match(RegExp(ca,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let o=this.symbolToInfo.get(l);if(o===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(o.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let s=a.length,u=!1,l=[],o=0;if(!t.match(RegExp(Ls))&&!r&&t!=="")throw new Error("Invalid LHS term");let c=t.match(RegExp(ca,"g")),f=new pa(n);return c?.forEach((y,m)=>{if(y==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let b=s-c.length+1;if(b<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(o,o+b),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let w=0;w<l.length;w++){let $=String.fromCharCode("0".charCodeAt(0)+w);f.addSymbol($,m+w),this.addSymbol($,a[o++],n)}}else f.addSymbol(y,m+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,a[o++],n)}),f}},Gs=e=>e+"_max",_c=(e,t,r,a,n)=>{let u=t.map((b,w)=>e[w]?b.length:b).map((b,w)=>N(`input${w}`,r,b)),l=W.size(n),o=Oe(n.length),c=o?n.length:n,f=K("output",r,c),y=[...a.symbolToInfo.keys()].filter(b=>!a.rhs.symbolToIndices.has(b)),m=b=>{let w=[],$="var prod = 1.0;",I="var sum = 0.0;",_="sum += prod;",x=[],P=[],A=[],B=[],O=a.symbolToInfo.size===a.rhs.symbolToIndices.size;a.symbolToInfo.forEach((z,q)=>{if(a.rhs.symbolToIndices.has(q)){let Z=a.rhs.symbolToIndices.get(q)?.[0];Z!==void 0&&a.lhs.forEach((M,Y)=>{if(z.inputIndices.includes(Y)){let me=M.symbolToIndices.get(q);if(me===void 0)throw new Error("Invalid symbol error");me.forEach(X=>{w.push(`${u[Y].indicesSet(`input${Y}Indices`,X,f.indicesGet("outputIndices",Z))}`)})}})}else a.lhs.forEach((Z,M)=>{if(z.inputIndices.includes(M)){let Y=Z.symbolToIndices.get(q);if(Y===void 0)throw new Error("Invalid symbol error");Y.forEach(me=>{x.push(`${u[M].indicesSet(`input${M}Indices`,me,`${q}`)}`)}),B.push(`prod *= ${u[M].getByIndices(`input${M}Indices`)};`)}}),P.push(`for(var ${q}: u32 = 0; ${q} < uniforms.${Gs(q)}; ${q}++) {`),A.push("}")});let V=O?[...w,`let sum = ${u.map((z,q)=>z.getByIndices(`input${q}Indices`)).join(" * ")};`]:[...w,I,...P,...x,$,...B,_,...A];return`
            ${b.registerUniforms(y.map(z=>({name:`${Gs(z)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,f)}

            ${b.mainStart()}
            ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${f.offsetToIndices("global_idx")};
            ${u.map((z,q)=>`var input${q}Indices: ${u[q].type.indices};`).join(`
`)}
            ${V.join(`
`)};
            ${f.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:a.equation,inputDependencies:e.map(b=>b?"rank":"dims")},getRunData:()=>{let b=y.filter($=>a.symbolToInfo.has($)).map($=>({type:"uint32",data:a.symbolToInfo.get($)?.dimValue||0}));b.push({type:"uint32",data:l});let w=t.filter(($,I)=>e[I]).map(($,I)=>[...fe($)]).reduce(($,I)=>$.concat(I),b);return o&&w.push(...fe(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:w}},getShaderSource:m}},Fs=(e,t)=>{let r=new fa(e.inputs,t.equation),a=e.inputs.map((u,l)=>Oe(u.dims.length)),n=r.outputDims,s=e.inputs.map((u,l)=>u.dims);e.compute(_c(a,s,e.inputs[0].dataType,r,n))},js=e=>{let t=e.equation.replace(/\s+/g,"");return te({equation:t})}});var Ac,Ks,Ec,Tc,Ys,Zs=j(()=>{"use strict";Ie();$e();Ac=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ks=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Ec=(e,t)=>e.length>t.length?Ks(e,t):Ks(t,e),Tc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Ec(t,r),n=W.size(a),s=e[0].dataType,u=Oe(t.length),l=u?t.length:t,o=N("input",s,l),c=Oe(a.length),f=c?a.length:a,y=K("output",s,f),m=w=>`
  const inputShape = ${o.indices(...t)};
  ${w.registerUniform("vec_size","u32").declareVariables(o,y)}
  ${w.mainStart()}
  ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    let outputIndices = ${y.offsetToIndices("global_idx")};
    var inputIndices: ${o.type.indices};
    for (var i = 0; i < ${t.length}; i++) {
      if (${o.indicesGet("inputShape","i")} == 1) {
        ${o.indicesSet("inputIndices","i",0)}
      } else {
        ${o.indicesSet("inputIndices","i",y.indicesGet("outputIndices",`i + ${a.length-t.length}`))}
      }
    }
    ${y.setByOffset("global_idx",o.getByIndices("inputIndices"))}
  }`,b=[{type:"uint32",data:n}];return u&&b.push(...fe(t)),c&&b.push(...fe(a)),{name:"Expand",shaderCache:{hint:`${a}`,inputDependencies:[u?"rank":"dims"]},getShaderSource:m,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},Ys=e=>{Ac(e.inputs),e.compute(Tc(e.inputs),{inputs:[0]})}});var Oc,kc,Qs,Xs,Js=j(()=>{"use strict";Ie();Pe();$e();Oc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},kc=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,s=W.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...a);let l=r[s],o=W.size(u),c=Oe(e[0].dims.length),f=c?e[0].dims.length:e[0].dims,y=Oe(e[1].dims.length),m=y?e[1].dims.length:e[1].dims,b=Oe(u.length),w=b?u.length:u,$=N("data",e[0].dataType,f),I=N("inputIndices",e[1].dataType,m),_=K("output",e[0].dataType,w),x=[{type:"uint32",data:o},{type:"int32",data:l},{type:"uint32",data:s}];c&&x.push(...fe(e[0].dims)),y&&x.push(...fe(e[1].dims)),b&&x.push(...fe(u));let P=[];P.push(c?"rank":"dims"),P.push(y?"rank":"dims");let A=()=>{let O=a.length,V=`var indicesIndices  = ${I.type.indices}(0);`;for(let z=0;z<O;z++)V+=`${O>1?`indicesIndices[${z}]`:"indicesIndices"} = ${u.length>1?`outputIndices[uniforms.axis + ${z}]`:"outputIndices"};`;V+=`
        var idx = ${I.getByIndices("indicesIndices")};
        if (idx < 0) {
          idx = idx + uniforms.axisDimLimit;
        }
        var dataIndices = ${$.type.indices}(0);
      `;for(let z=0,q=0;z<n;z++)z===s?(V+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = u32(idx);`,q+=O):(V+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = ${u.length>1?`outputIndices[${q}]`:"outputIndices"};`,q++);return V},B=O=>`
      ${O.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables($,I,_)}
      ${O.mainStart()}
        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        let outputIndices = ${_.offsetToIndices("global_idx")};
        ${A()};
        let value = ${$.getByIndices("dataIndices")};
        ${_.setByOffset("global_idx","value")};
      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:P},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:x}),getShaderSource:B}},Qs=e=>te({axis:e.axis}),Xs=(e,t)=>{let r=e.inputs;Oc(r),e.compute(kc(e.inputs,t))}});var Rc,Pc,eu,tu,ru=j(()=>{"use strict";Ie();Pe();$e();Rc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Pc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,s=W.computeStrides(r),u=W.size(r),l=e[1].dims,o=e[1].dataType,c=W.size(l),f=W.normalizeAxis(t.axis,n),y=r[f],m=l.slice(0),b=W.size(m),w=N("input",a,r),$=N("indices",o,[c]),I=K("output",a,m),_=x=>`
      const inputStrides = array<u32, ${s.length}>(${s.map(P=>`${P}u`).join(",")});
      ${x.declareVariables(w,$,I)}
      ${x.mainStart()}
      ${x.guardAgainstOutOfBoundsWorkgroupSizes(b)}

      let outputIndices = ${I.offsetToIndices("global_idx")};

      var idx = ${$.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + ${y};
      }

      var srcOffset = u32(0);

      for (var i = 0; i < ${r.length}; i++) {
        if (i == ${f}) {
          srcOffset +=  u32(idx) * inputStrides[i];
        } else {
          srcOffset += ${I.indicesGet("outputIndices","i")} * inputStrides[i];
        }
      }

      // Should never hit this with valid values in indices
      // This is a guard against malicious data in the indices input
      if (srcOffset < 0 || srcOffset >= ${u}) {
        return;
      }

      output[global_idx] = input[srcOffset];
  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)}}),getShaderSource:_}},eu=e=>te({axis:e.axis}),tu=(e,t)=>{let r=e.inputs;Rc(r),e.compute(Pc(e.inputs,t))}});var Bc,Mc,Dc,nu,au,ou=j(()=>{"use strict";Ie();Pe();$e();Bc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Mc=(e,t,r)=>{if(r.length===0)return"0u";let a=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return a||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},Dc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,s,u]=rn.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,s];if(!l)throw new Error("Can't use gemm on the given tensors");let o=W.size(l),c="";t.transA&&t.transB?c="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?c="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?c="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(c="value += a[m * K + k] * b[k * N + n];");let f=Ae(e[0].dataType),y=t.alpha===1?"":"value *= alpha;",m=e.length===3?`value += beta * c[${Mc(n,s,e[2].dims)}];`:"",b=[`@group(0) @binding(0) var<storage, read> a : array<${f}>;`,`@group(0) @binding(1) var<storage, read> b : array<${f}>;`];e.length===3&&b.push(`@group(0) @binding(2) var<storage, read> c : array<${f}>;`);let w=$=>`
  const M: u32 = ${n}u;
  const N: u32 = ${s}u;
  const K: u32 = ${u}u;
  const alpha = ${f}(${t.alpha});
  const beta = ${f}(${t.beta});

  ${b.join(`
`)}
  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${f}>;

  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes(o)}

    let m = global_id.x / N;
    let n = global_id.x % N;

    var value = ${f}(0);
    for (var k: u32 = 0u; k<${u}u; k++) {
      ${c}
    }

    ${y}
    ${m}
    output[global_id.x] = value;

  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:w}},nu=(e,t)=>{Bc(e.inputs),e.compute(Dc(e.inputs,t))},au=e=>te(e)});var zc,Wc,Vc,Nc,iu,su,uu=j(()=>{"use strict";Ve();Ie();Pe();$e();zc={name:"InstanceNormalization"},Wc=(e,t)=>{let r=e[0].dims,a=r,n=2,s=W.sizeToDimension(r,n),u=W.sizeFromDimension(r,n),l=r[1],o=N("x",e[0].dataType,[r[0],r[1],u]),c=N("scale",e[1].dataType,e[1].dims),f=N("bias",e[2].dataType,e[2].dims),y=K("output",e[0].dataType,[r[0],r[1],u]),m=[o,c,f,y],b=o.type.value,w=64,$=I=>`

  const C: u32 = ${l};
  const normSize: u32 = ${u};
  const epsilon: f32 = ${t.epsilon};
  var<workgroup> meanShared : ${b};
  var<workgroup> squaredNormShared : ${b};
  var<workgroup> workgroupShared : array<${b}, ${w}>;
  const workgroupSize = ${w}u;
  ${I.declareVariables(...m)}
  ${I.mainStart(w)}
    let norm = global_idx / workgroupSize;
    let batch = norm / C;
    let channel = norm % C;
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial: ${b} = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      initial = initial + ${o.get("batch","channel","h")};
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = workgroupShared[0] / ${b}(normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = 0;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let deviation =  ${o.get("batch","channel","h")} - meanShared;
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = workgroupShared[0];
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / ${b}(normSize) + epsilon);
    let channelScale = invStdDev * ${c.getByOffset("channel")};
    let channelShift = ${f.getByOffset("channel")} - meanShared * channelScale;
    for (var h = localIndex; h < normSize; h += workgroupSize) {
      let value = ${o.get("batch","channel","h")} * channelScale + channelShift;
      ${y.set("batch","channel","h","value")};
    }
  }`;return{...zc,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:$}},Vc=(e,t,r,a,n,s,u,l)=>{let o=Qe(u),c=N("input",t.dataType,t.dims,o),f=N("scale",r.dataType,r.dims,o),y=N("bias",a.dataType,a.dims,o),m=64,b=o===1?"vec2f":`mat2x${o}f`,w=o===1?"f32":`vec${o}f`,$=(B,O)=>`${b}(${B}, ${O})`,I=n*u/o,_=Math.ceil(s/m),x=B=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${s*u/o};

  ${B.declareVariables(c)}
  @group(0) @binding(1) var<storage, read_write> output : array<${b}>;

  ${B.mainStart(m)}
    let currentImageNumber = global_idx / ${m} / C;
    let currentChannelNumber = (global_idx / ${m}) % C;
    let wgId = global_idx % ${m};
    let wgOffset = wgId * ${_};
    if (wgOffset >= H) {
        return;
    }
    let wgMax = min(wgOffset + ${_}, H);

    let offset = currentImageNumber * imageSize + currentChannelNumber;
    var sum = ${je("f32",o)};
    var squaredSum = ${je("f32",o)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${w}(input[offset + i * C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${$("sum","squaredSum")};
  }`,P=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,m,2],dataType:1}],dispatchGroup:{x:n*u/o}}),getShaderSource:x},{inputs:[t],outputs:[-1]})[0],A=B=>`
  const H: u32 = ${s};
  const C: u32 = ${u/o};
  const imageSize: u32 = ${m*u/o};
  const epsilon: f32 = ${l};

  @group(0) @binding(0) var<storage, read> input : array<${b}>;
  @group(0) @binding(1) var<storage, read> scale : array<${f.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${y.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${b}>;

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes(I)}
    let currentImageNumber = global_idx / C;
    let currentChannelNumber = global_idx % C;

    let offset = currentImageNumber * imageSize;
    var sum = ${je("f32",o)};
    var squaredSum = ${je("f32",o)};
    for (var i: u32 = 0; i < ${m}; i++) {
        let value = input[offset + i + currentChannelNumber * ${m}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(H);
    squaredSum = squaredSum / f32(H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);
    let channelScale = invStdDev * ${w}(scale[currentChannelNumber]);
    let channelShift = ${w}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${$("channelScale","channelShift")};
  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:o,n,h:s,c:u,epsilon:l})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(I/64)}}),getShaderSource:A},{inputs:[P,r,a],outputs:[-1]})[0]},Nc=(e,t,r)=>{let a=t[0].dims,n=a,s=a[0],u=a[a.length-1],l=W.sizeFromDimension(a,1)/u,o=Qe(u),c=W.size(n)/o,f=N("input",t[0].dataType,t[0].dims,o),y=K("output",t[0].dataType,n,o),m=Ae(t[0].dataType),b=o===1?"vec2f":`mat2x${o}f`,w=o===1?m:`vec${o}<${m}>`,$=Vc(e,t[0],t[1],t[2],s,l,u,r.epsilon),I=_=>`
  const H: u32 = ${l};
  const C: u32 = ${u/o};

  @group(0) @binding(0) var<storage, read> input : array<${f.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${b}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${y.type.storage}>;

  ${_.mainStart()}
    let currentImageNumber = global_idx / (C * H);
    let currentChannelNumber = global_idx % C;

    let scaleOffset = currentImageNumber * C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${w}(scale[0]), ${w}(scale[1]));
  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)}}),getShaderSource:I},{inputs:[t[0],$]})},iu=e=>te({epsilon:e.epsilon,format:e.format}),su=(e,t)=>{t.format==="NHWC"?Nc(e,e.inputs,t):e.compute(Wc(e.inputs,t))}});var Uc,Hc,lu,du,cu=j(()=>{"use strict";Ve();Ie();Pe();$e();Uc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Hc=(e,t,r)=>{let a=e[0].dims,n=e[1],s=e[2],u=a,l=W.normalizeAxis(t.axis,a.length),o=W.sizeToDimension(a,l),c=W.sizeFromDimension(a,l),f=W.size(n.dims),y=s?W.size(s.dims):0;if(f!==c||s&&y!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${f} and bias size of ${y}`);let m=[];for(let A=0;A<a.length;++A)A<l?m.push(a[A]):m.push(1);let b=Qe(c),w=Ae(e[0].dataType),$=[N("x",e[0].dataType,e[0].dims,b),N("scale",n.dataType,n.dims,b)];s&&$.push(N("bias",s.dataType,s.dims,b)),$.push(K("output",e[0].dataType,u,b));let I=r>1,_=r>2;I&&$.push(K("meanDataOutput",1,m)),_&&$.push(K("invStdOutput",1,m));let x=A=>`
  const normSize: f32 = ${c};
  const normSizeVectorized: u32 = ${c/b};
  const epsilon: f32 = ${t.epsilon};

  ${A.declareVariables(...$)}
  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let offset = global_idx * normSizeVectorized;
    var meanVector = ${je("f32",b)};
    var meanSquareVector = ${je("f32",b)};

    for (var h: u32 = 0u; h < normSizeVectorized; h++) {
      let value = ${nt(w,b,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${at("meanVector",b)} / normSize;
    let meanSquare = sqrt(${at("meanSquareVector",b)} 
      / normSize - mean * mean + epsilon);

    for (var j: u32 = 0; j < normSizeVectorized; j++) {
      let f32input = ${nt(w,b,"x[j + offset]")};
      let f32scale = ${nt(w,b,"scale[j]")};
      output[j + offset] = ${$[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${s?`+ ${nt(w,b,"bias[j]")}`:""}
      );
    }

    ${I?"meanDataOutput[global_idx] = mean":""};
    ${_?"invStdOutput[global_idx] = 1 / meanSquare":""};
  }`,P=[{dims:u,dataType:e[0].dataType}];return I&&P.push({dims:m,dataType:1}),_&&P.push({dims:m,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:x}},lu=e=>te({axis:e.axis,epsilon:e.epsilon}),du=(e,t)=>{Uc(e.inputs),e.compute(Hc(e.inputs,t,e.outputCount))}});var Lc,fu,pu,Gc,ma,mu,hu=j(()=>{"use strict";Ie();Pe();en();ea();$e();Qt();Lc=(e,t)=>{let r=e[0],a=e[1],n=e[2],s=e[3],u=e[4],l=e[5],o=e[6],c=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let f=!1,y=r.dims[0],m=r.dims[1],b=r.dims.length===3?f?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],w=m,$=0,I=0,_=Math.floor(b/t.numHeads);if(o&&c){if(o.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');$=o.dims[2],I=o.dims[2]}else if(o||c)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let x;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');x=2,w=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==_)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');x=5,w=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==_)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');x=0,w=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');x=3}if(s){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let P=0;if(u){P=8;let z=u.dims;throw z.length===1?z[0]===y?P=1:z[0]===3*y+2&&(P=3):z.length===2&&z[0]===y&&z[1]===w&&(P=5),P===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let A=!1,B=b;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(w!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');B=n.dims[2]}else{if(w!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');B=n.dims[1]*n.dims[3],A=!0}}let O=$+w,V=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(o)throw new Error("pastKey is not supported");if(c)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:m,pastSequenceLength:$,kvSequenceLength:w,totalSequenceLength:O,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:b,vHiddenSize:B,headSize:_,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:P,scale:t.scale,broadcastResPosBias:V,passPastInKv:A,qkvFormat:x}},fu=e=>te({...e}),pu=te({perm:[0,2,1,3]}),Gc=(e,t,r,a,n,s,u)=>{let l=[a,n,s],o=W.size(l),c=Ae(t.dataType),f=y=>`
  const biasOffset = ${u}u;
  const hiddenSize = ${s}u;

  @group(0) @binding(0) var<storage, read> qkv: array<${c}>;
  @group(0) @binding(1) var<storage, read> bias: array<${c}>;
  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${c}>;

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];
  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:a,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:f},{inputs:[t,r],outputs:[-1]})[0]},ma=(e,t,r,a,n,s,u,l)=>{let o=s;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return o=Gc(e,s,u,t,a,r*n,l),o=o.reshape([t,a,r,n]),e.compute(ot(o,pu.perm),{inputs:[o],outputs:[-1]})[0]}else return s.dims.length===3&&(o=s.reshape([t,a,r,n])),e.compute(ot(o,pu.perm),{inputs:[o],outputs:[-1]})[0]},mu=(e,t)=>{let r=Lc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=ma(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return un(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=ma(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=ma(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);un(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Fc,jc,qc,Kc,Yc,Zc,Qc,Xc,Jc,gu,yu,bu=j(()=>{"use strict";Ve();Ie();Pe();$e();Fc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},jc=(e,t,r,a,n,s)=>{let u=t.length,l="";for(let o=u-1;o>=0;--o)l+=`
            k = i32(${e.indicesGet("indices",o)}) - ${a[o]};
            if (k < 0) {
              break;
            }
            if (k >= ${t[o]}) {
              break;
            }
            offset += k * ${r[o]};
        `;return`
          value = ${n}(${s});
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${l}
            value = x[offset];
          }
      `},qc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = ${2*(t[u]-1)};
                  k = k % _2n_1;
                  if(k >= ${t[u]}) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},Kc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0) {
                  k = 0;
                }
                if (k >= ${t[u]}) {
                  k = ${t[u]-1};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},Yc=(e,t,r,a)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`
                k = i32(${e.indicesGet("indices",u)}) - ${a[u]};
                if (k < 0)  {
                  k += ${t[u]};
                }
                if (k >= ${t[u]}) {
                  k -= ${t[u]};
                }
                offset += k * ${r[u]};
            `;return`
              var offset = 0;
              var k = 0;
              ${s}
              value = x[offset];
          `},Zc=(e,t,r,a,n)=>{switch(a.mode){case 0:return jc(e,t,r,a.pads,n,a.value);case 1:return qc(e,t,r,a.pads);case 2:return Kc(e,t,r,a.pads);case 3:return Yc(e,t,r,a.pads);default:throw new Error("Invalid mode")}},Qc=(e,t,r,a)=>{let n=t[0].dims,s=W.padShape(n.slice(),r.pads),u=W.size(s),l=W.computeStrides(n),o=K("output",t[0].dataType,s),c=N("x",t[0].dataType,n),f=Zc(o,n,l,r,a);return`
              ${e.declareVariables(c,o)}
              ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}

              let indices = ${o.offsetToIndices("global_idx")};

              var value = ${a}(0);
              ${f}
              output[global_idx] = value;
          }`},Xc=(e,t)=>{let r=W.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(W.size(r)/64)}}),getShaderSource:a=>Qc(a,e,t,"f32")}},Jc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let o=0;o<l.length;o++)s[Number(l[o])]=Number(r[o]),s[Number(l[o])+n]=Number(r[o+l.length])}else r.forEach((l,o)=>s[Number(o)]=Number(l));let u=[];return s.forEach(l=>u.push(l)),te({mode:t.mode,value:a,pads:u})}else return t},gu=(e,t)=>{Fc(e.inputs);let r=Jc(e.inputs,t);e.compute(Xc(e.inputs,r),{inputs:[0]})},yu=e=>{let t=e.mode,r=e.value,a=e.pads;return te({mode:t,value:r,pads:a})}});var yn,wu,vu,$u,Su,xu,Iu,Cu,_u,Au,Eu,Tu,Ou,ku,Ru,Pu=j(()=>{"use strict";Ie();Pe();$e();yn=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},wu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),o=s?t.dilations.slice():[],c=t.pads.slice();Nt.adjustPoolAttributes(r,n,u,l,o,c);let f=Nt.computePoolOutputShape(r,n,l,o,u,c,t.autoPad),y=Object.assign({},t);s?Object.assign(y,{kernelShape:u,strides:l,pads:c,dilations:o,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:u,strides:l,pads:c,cacheKey:t.cacheKey});let m=f.slice();return m.push(m.splice(1,1)[0]),[y,a?m:f]},vu=(e,t,r,a,n,s,u,l)=>{let o=n.format==="NHWC",c=r,f=t.type.value,y=c.length,m=W.size(a),b=K("output",t.type.tensor,a);if(n.kernelShape.length<=2){let w=n.kernelShape[n.kernelShape.length-1],$=n.strides[n.strides.length-1],I=n.pads[n.pads.length/2-1],_=n.pads[n.pads.length-1],x=y-(o?2:1),P="",A="",B="";if(I+_!==0?P=`
                for (var i: u32 = 0u; i < ${w}u; i++) {
                  xIndices[${x}] = indices[${x}] * ${$} - ${I} + i;
                  if (xIndices[${x}] < 0 || xIndices[${x}] >= ${c[x]}) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:P=`
                for (var i: u32 = 0u; i < ${w}u; i++) {
                  xIndices[${x}] = indices[${x}] * ${$} - ${I} + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,n.kernelShape.length===2){let V=n.kernelShape[n.kernelShape.length-2],z=n.strides[n.strides.length-2],q=n.pads[n.pads.length/2-2],Z=n.pads[n.pads.length-2],M=y-(o?3:2),Y=c[M];q+Z!==0?A=`
                for (var j: u32 = 0u; j < ${V}u; j++) {
                  xIndices[${M}] = indices[${M}] * ${z} - ${q} + j;
                  if (xIndices[${M}] < 0 || xIndices[${M}] >= ${Y}) {
                    pad+= ${w};
                    continue;
                  }
              `:A=`
                for (var j: u32 = 0u; j < ${V}u; j++) {
                  xIndices[${M}] = indices[${M}] * ${z} - ${q} + j;
                `,B=`
              }
            `}return`
            ${e.declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)}

              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var value: ${f} = ${f}(${l});
              var pad = 0;
              ${A}
              ${P}
              ${B}
              ${u}

              output[global_idx] = value;
            }`}else{if(o)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let w=W.size(n.kernelShape),$=W.computeStrides(n.kernelShape),I=$.length,_=n.pads.length,x=n.pads.reduce((B,O)=>B+O),P="";return x?P=`
                if (xIndices[j] >= inputDims[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:P=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.declareVariables(t,b)}

            const pads = array<u32, ${_}>(${n.pads.map(B=>`${B}u`).join(",")});
            const inputDims = array<u32, ${y}>(${c.map(B=>`${B}u`).join(",")});
            const kernelStrides = array<u32, ${I}>(${$.map(B=>`${B}u`).join(",")});
            const strides = array<u32, ${I}>(${n.strides.map(B=>`${B}u`).join(",")});

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes(m)}

              let indices = ${b.offsetToIndices("global_idx")};
              let xIndices = ${b.offsetToIndices("global_idx")};

              var offsets: array<u32, ${I}>;

              var value = ${b.type.value}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < ${w}u; i++) {
                var offset = i;
                for (var j = 0u; j < ${I-1}u; j++) {
                  offsets[j] = offset / kernelStrides[j];
                  offset -= offsets[j] * kernelStrides[j];
                }
                offsets[${I-1}] = offset;

                isPad = false;
                for (var j = ${y-I}u; j < ${y}u; j++) {
                  xIndices[j] = indices[j] * strides[j - ${y-I}u]
                    + offsets[j - ${y-I}u] - pads[j - 2u];
                  ${P}
              }
              ${u}

              output[global_idx] = value;
            }`}},$u=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Su=(e,t,r,a)=>{let[n,s]=wu(t,a,r),u=W.size(n.kernelShape),l=N("x",t.dataType,t.dims),o=l.type.value,c="value += x_val;",f="";return n.countIncludePad?f+=`value /= ${o}(${u});`:f+=`value /= ${o}(${u} - pad);`,{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:y=>vu(y,l,t.dims,s,n,c,f,"0.0")}},xu=e=>{let t=e.count_include_pad!==0,r=$u(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return te({countIncludePad:t,...r})},Iu=(e,t)=>{yn(e.inputs),e.compute(Su("AveragePool",e.inputs[0],!1,t))},Cu={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},_u=e=>{let t=e.format;return{format:t,...Cu,cacheKey:t}},Au=(e,t)=>{yn(e.inputs),e.compute(Su("GlobalAveragePool",e.inputs[0],!0,t))},Eu=(e,t,r,a)=>{let[n,s]=wu(t,a,r),u=`
      value = max(x_val, value);
    `,l="",o=N("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:a.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(W.size(s)/64)}}),getShaderSource:c=>vu(c,o,t.dims,s,n,u,l,"-1e5")}},Tu=(e,t)=>{yn(e.inputs),e.compute(Eu("MaxPool",e.inputs[0],!1,t))},Ou=e=>{let t=e.storage_order,r=e.dilations,a=$u(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return te({storageOrder:t,dilations:r,...a})},ku=e=>{let t=e.format;return{format:t,...Cu,cacheKey:t}},Ru=(e,t)=>{yn(e.inputs),e.compute(Eu("GlobalMaxPool",e.inputs[0],!0,t))}});var tp,rp,Bu,Mu=j(()=>{"use strict";St();Ve();$e();tp=(e,t,r)=>{let a=e===t,n=e<t&&r<0,s=e>t&&r>0;if(a||n||s)throw new Error("Range these inputs' contents are invalid.")},rp=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,l=K("output",a,s),o=l.type.storage,c=f=>`
        ${f.declareVariables(l)}
        ${f.mainStart()}
        ${f.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        output[global_idx] = ${o}(${e}) + ${o}(global_idx) * ${o}(${r});
      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(f=>f.toString()).join("_")},getShaderSource:c,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)}})}},Bu=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Te.webgpu.validateInputContent&&tp(t,r,a),e.compute(rp(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var np,ap,op,ip,sp,up,lp,dp,cp,pp,fp,mp,hp,gp,yp,Du,zu,Wu=j(()=>{"use strict";Ie();Pe();$e();np=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},ap=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,s)=>a[n]=e[s]),a},op=(e,t,r,a,n,s)=>{let[u,l,o]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(f=>s.push(f));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(f=>a.push(f)),a.length!==0&&a.length!==c&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");np(a,t),t.axes.length>0&&ap(a,t.axes,c).forEach((f,y)=>a[y]=f)}if(o>0&&e.length>o&&(e[o].getBigInt64Array().forEach(f=>n.push(Number(f))),n.length!==c||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},ip=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},
     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`
`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",sp=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",up=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((s,u)=>{a[s]=n[u],a[u+r]=n[t.length+u]}),a):n},lp=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(s=>n.push(s)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},dp=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=a),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(a,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},cp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});
      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});
      const scales = array<${e.type.value}, ${a.length}>(${a.map(s=>`${s}f`).join(",")});
      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});
      var originalIndices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};
        if (scales[i] == 1.0) {
          originalIndices[i] = ${e.type.value}(outputIndex);
        } else {
          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);
        }
      }
      return originalIndices;
    }`,pp=(e,t,r,a,n,s,u)=>`
    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
        const inputShape = array<u32, ${r.length}>(${r.map(l=>`${l}u`).join(",")});
        const outputShape = array<u32, ${a.length}>(${a.map(l=>`${l}u`).join(",")});
        const scales = array<${e.type.value}, ${n.length}>(${n.map(l=>`${l}`).join(",")});
        const roi = array<${e.type.value}, ${s.length}>(${s.map(l=>`${l}`).join(",")});
        var inputIndices: ${e.type.indices};
        for (var i:u32 = 0; i < ${a.length}; i++) {
          var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
          var inputIndex: u32;
          if (scales[i] == 1.0) {
            inputIndex = outputIndex;
          } else {
            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],
                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);
            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {
              if (original_idx < 0) {
                inputIndex = 0;
              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {
                inputIndex = inputShape[i] - 1;
              } else {
                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));
              }
            } else {
              inputIndex = u32(original_idx);
            }
          }
          ${e.indicesSet("inputIndices","i","inputIndex")}
        }
        return inputIndices;
    }`,fp=(e,t)=>`
    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {
      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};
        if (inputIndex < 0 || inputIndex >= inputShape[i]) {
          return false;
        }
      }
      return true;
    }`,mp=(e,t,r,a,n,s)=>{let[u,l,o,c]=r.length===2?[-1,0,1,-1]:a[1]===1?[0,2,3,1]:[0,1,2,3],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${f} {
      var inputIndices: ${e.type.indices};
      inputIndices[${l}] = max(0, min(row, ${r[l]} - 1));
      inputIndices[${o}] = max(0, min(col, ${r[o]} - 1));
      if (${r.length} > 2) {
        inputIndices[${c}] = channel;
        inputIndices[${u}] = batch;
      };
      return input[${e.indicesToOffset("inputIndices")}];
    }

    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);
      var row:${f} = originalIndices[${l}];
      var col:${f} = originalIndices[${o}];
      if (${n} && (row < 0 || row > (${r[l]} - 1) || col < 0 || col > ${r[o]} - 1)) {
        return ${s};
      }
      row = max(0, min(row, ${r[l]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = 0;
      var batch: u32 = 0;
      if (${r.length>2}) {
        channel = u32(originalIndices[${c}]);
        batch = u32(originalIndices[${u}]);
      }
      var x11: ${f} = getInputValue(batch, channel, row1, col1);
      var x12: ${f} = getInputValue(batch, channel, row1, col2);
      var x21: ${f} = getInputValue(batch, channel, row2, col1);
      var x22: ${f} = getInputValue(batch, channel, row2, col2);
      var dx1: ${f} = row - ${f}(row1);
      var dx2: ${f} = ${f}(row2) - row;
      var dy1 = col - ${f}(col1);
      var dy2 = ${f}(col2) - col;
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},hp=(e,t,r,a,n,s,u,l,o,c)=>{let[f,y]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],m=e.type.value,b=w=>{let $=w===f?"row":"col";return`
      fn ${$}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${m} {
        var outputIndex = ${a.length===1?"outputIndices":`outputIndices[${w}]`};
        var originalIdx: ${m} = getOriginalCoordinateFromResizedCoordinate(${m}(outputIndex), ${n[w]},
        ${m}(${a[w]}), ${m}(${r[w]}), ${s[w]}, ${s[w]} + ${r.length});
        var fractOriginalIdx: ${m} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[w]} - 1))) {
          return ${o};
        }
        var data: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${$}: ${m} = originalIdx + ${m}(i);
          if (${$} < 0 || ${$} >= ${r[w]}) {
            if (${c}) {
              coefs[i + 1] = 0.0;
              continue;
            } else if (${l}) {
              return ${o};
            } else {
              ${$} = max(0, min(${$}, ${r[w]} - 1));
            }
          }
          var inputIndicesCopy: ${e.type.indices} = inputIndices;
          inputIndicesCopy[${w}] = u32(${$});
          data[i + 1] = ${w===f?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`
                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${b(f)};
    ${b(y)};
  fn getCubicInterpolationCoefs(s: ${m}) -> array<${m}, 4> {
    var absS = abs(s);
    var coeffs: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${m} = 1.0 - absS;
    var twoMinusAbsS: ${m} = 2.0 - absS;
    var onePlusAbsS: ${m} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${m}, 4>, coefs: array<${m}, 4>) -> ${m} {
    var coefsSum: ${m} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${m} {
    var inputIndices: ${e.type.indices} = outputIndices;
    return colCubicInterpolation(inputIndices, outputIndices);
  }
    `},gp=(e,t,r,a,n,s)=>{let u=e.dims,l=up(s,t.axes,u.length),o=lp(u,a,n,t.axes),c=a.slice();a.length===0&&(c=u.map((_,x)=>_===0?1:o[x]/_),t.keepAspectRatioPolicy!=="stretch"&&(o=dp(u,c,t)));let f=K("output",e.dataType,o),y=N("input",e.dataType,u),m=W.size(o),b=u.length===o.length&&u.every((_,x)=>_===o[x]),w=t.coordinateTransformMode==="tf_crop_and_resize",$=y.type.value,I=_=>`
      ${b?"":`
      ${ip(t.coordinateTransformMode,$)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${fp(y,u)};
              ${sp(t.nearestMode,r,$)};
              ${pp(y,f,u,o,c,l,w)};
              `;case"linear":return`
              ${cp(f,u,o,c,l)};
              ${mp(y,f,u,c,w,t.extrapolationValue)};
              `;case"cubic":return`
            ${hp(y,f,u,o,c,l,t.cubicCoeffA,w,t.extrapolationValue,t.excludeOutside)};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${_.declareVariables(y,f)}
      ${_.mainStart()}
        ${_.guardAgainstOutOfBoundsWorkgroupSizes(m)}
        ${b?"output[global_idx] = input[global_idx];":`
        let outputIndices = ${f.offsetToIndices("global_idx")};
        var inputIndices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);
                if (checkInputIndices(inputIndices)) {
                  output[global_idx] = input[${y.indicesToOffset("inputIndices")}];
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
        `}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${c.length>0?c:""}|${n.length>0?n:""}|${b}`},getShaderSource:I,getRunData:()=>({outputs:[{dims:o,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(m/64)}})}},yp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Du=(e,t)=>{let r=[],a=[],n=[],s=yp(e);op(e.inputs,t,s,r,a,n),e.compute(gp(e.inputs[0],t,s,r,a,n),{inputs:[0]})},zu=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,o=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return te({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:l,mode:o,nearestMode:c})}});var bp,wp,Vu,Nu,Uu=j(()=>{"use strict";Ve();Ie();Pe();$e();bp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},wp=(e,t,r,a)=>{let n=e[0].dims,s=W.size(n),u=n,l=s,o=n.slice(-1)[0],c=a?n.slice(0,-1).concat(1):[],f=e.length>3,y=e.length>4,m=a&&r>1,b=a&&r>2,w=r>3,$=Qe(o),I=[N("x",e[0].dataType,e[0].dims,$),N("skip",e[1].dataType,e[1].dims,$),N("gamma",e[2].dataType,e[2].dims,$)];f&&I.push(N("beta",e[3].dataType,e[3].dims,$)),y&&I.push(N("bias",e[4].dataType,e[4].dims,$)),I.push(K("output",e[0].dataType,u,$)),m&&I.push(K("meanOutput",1,c)),b&&I.push(K("invStdOutput",1,c)),w&&I.push(K("inputSkipBiasSum",e[0].dataType,u,$));let _=Ae(e[0].dataType),x=A=>`
      const hiddenSize: f32 = ${o};
      const hiddenSizeVectorized: u32 = ${o/$};
      const epsilon: f32 = ${t.epsilon};

      ${A.declareVariables(...I)}

      ${A.mainStart()}
        ${A.guardAgainstOutOfBoundsWorkgroupSizes(l/o)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${je("f32",$)};
        var squareSum = ${je("f32",$)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${y?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${w?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${nt(_,$,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${at("sum",$)} / hiddenSize;
        let variance = sqrt(${at("squareSum",$)} / hiddenSize - mean * mean + epsilon);
        ${m?"meanOutput[global_idx] = mean;":""}
        ${b?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${_}(mean)) / ${_}(variance) * gamma[i]
           + ${f?"beta[i]":"0.0"};
        }
      }`,P=[{dims:u,dataType:e[0].dataType}];return r>1&&P.push({dims:c,dataType:1}),r>2&&P.push({dims:c,dataType:1}),r>3&&P.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:x,getRunData:()=>({outputs:P,dispatchGroup:{x:Math.ceil(l/o/64)}})}},Vu=(e,t)=>{bp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(wp(e.inputs,t,e.outputCount,!1),{outputs:a})},Nu=e=>{let t=e.epsilon;return te({epsilon:t})}});var vp,bn,$p,Hu,Sp,xp,Lu,Gu,Fu=j(()=>{"use strict";Ve();Ie();Pe();$e();vp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},bn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},$p=(e,t)=>{if(e.length>1){let r=bn(e,1),a=bn(e,2),n=bn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),te({starts:r,ends:a,axes:n})}else return t},Hu=(e,t,r,a,n)=>{let s=e;return e<0&&(s+=r[a[t]]),n[t]<0?Math.max(0,Math.min(s,r[a[t]]-1)):Math.max(0,Math.min(s,r[a[t]]))},Sp=(e,t,r,a,n)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {
          var inputIndices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${n?`uniforms.input_shape${r.length>1?"[i]":""}`:"inputShape[i]"};
            let steps_i  = ${n?`uniforms.steps${r.length>1?"[i]":""}`:"steps[i]"};
            let signs_i  = ${n?`uniforms.signs${r.length>1?"[i]":""}`:"signs[i]"};
            let starts_i  = ${n?`uniforms.starts${r.length>1?"[i]":""}`:"starts[i]"};
            var outputIndex = ${a.length===1?"outputIndices":"outputIndices[i]"};
            var inputIndex = outputIndex * steps_i + starts_i + carry;
            carry = inputIndex / input_shape_i;
            inputIndex = inputIndex % input_shape_i;
            if (signs_i < 0) {
              inputIndex = input_shape_i - inputIndex - 1u + starts_i;
            }
            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;
          }
          return inputIndices;
      }`,xp=(e,t)=>{let r=e[0].dims,a=W.size(r),n=t.axes.length>0?W.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=bn(e,4);s.forEach(A=>A!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((A,B)=>Hu(A,B,r,n,s)),l=t.ends.map((A,B)=>Hu(A,B,r,n,s));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let A=0;A<r.length;++A)n.includes(A)||(u.splice(A,0,0),l.splice(A,0,r[A]),s.splice(A,0,1));let o=s.map(A=>Math.sign(A));s.forEach((A,B,O)=>{if(A<0){let V=(l[B]-u[B])/A,z=u[B],q=z+V*s[B];u[B]=q,l[B]=z,O[B]=-A}});let c=Oe(e[0].dims.length),f=c?e[0].dims.length:e[0].dims,y=r.slice(0);n.forEach((A,B)=>{y[A]=Math.ceil((l[A]-u[A])/s[A])});let m=c?y.length:y,b={dims:y,dataType:e[0].dataType},w=K("output",e[0].dataType,m),$=N("input",e[0].dataType,f),I=W.size(y),_=[],x=[];c&&(x.push({name:"starts",type:u.length>1?`vec${u.length}<u32>`:"u32"}),x.push({name:"signs",type:o.length>1?`vec${o.length}<i32>`:"i32"}),x.push({name:"steps",type:s.length>1?`vec${s.length}<u32>`:"u32"}),_.push({type:"uint32",data:u}),_.push({type:"int32",data:o}),_.push({type:"uint32",data:s})),x.push({name:"outputSize",type:"u32"}),_.push({type:"uint32",data:I}),c&&(_.push(...fe(e[0].dims)),_.push(...fe(y)));let P=A=>`
      ${A.registerUniforms(x).declareVariables($,w)}
        ${c?"":[`const signs = array<i32, ${o.length}>(${o.map(B=>`${B}i`).join(",")});`,`const starts = array<u32, ${u.length}>(${u.map(B=>`${B}u`).join(",")});`,`const steps = array<u32, ${s.length}>(${s.map(B=>`${B}u`).join(",")});`,`const inputShape = array<u32, ${r.length}>(${r.map(B=>`${B}u`).join(",")});`].join(`
`)}

        ${Sp($,w,r,y,c)}
        ${A.mainStart()}
          ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let outputIndices = ${w.offsetToIndices("global_idx")};
          let inputIndices = calculateInputIndices(outputIndices);
          ${w.setByOffset("global_idx",$.getByIndices("inputIndices"))}
      }`;return{name:"Slice",shaderCache:{hint:c?`${o.length}_${u.length}_${s.length}`:`${t.cacheKey} | ${e[4]?.dims??""}`,inputDependencies:[c?"rank":"dims"]},getShaderSource:P,getRunData:()=>({outputs:[b],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:_})}},Lu=(e,t)=>{vp(e.inputs,t);let r=$p(e.inputs,t);e.compute(xp(e.inputs,r),{inputs:[0]})},Gu=e=>{let t=e.starts,r=e.ends,a=e.axes;return te({starts:t,ends:r,axes:a})}});var Ip,Cp,ju,qu,Ku=j(()=>{"use strict";Ie();Pe();$e();Ip=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Cp=(e,t)=>{let r=e.dims,a=W.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],l=a/u,o=Qe(u),c=u/o,f=(I,_)=>_===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:_===2?`max(${I}.x, ${I}.y)`:_===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,y=N("x",e.dataType,e.dims,o),m=K("result",e.dataType,e.dims,o),b=y.type.value,w=Ae(e.dataType)==="f32"?`var threadMax = ${b}(-3.402823e+38f);`:`var threadMax = ${b}(-65504.0h);`,$=I=>`
      var<workgroup> rowMaxShared : ${b};
      var<workgroup> rowSumShared : ${b};
      var<workgroup> threadShared : array<${b}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${b} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${b}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${I.registerUniform("packedCols","i32").declareVariables(y,m)}
      ${I.mainStart()}
        let gindex = i32(global_id.x);
        let lindex = i32(local_id.x);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${w}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${b}(${f("threadShared[0]",o)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${b}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${b}(${at("threadShared[0]",o)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${o}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:c}]}),getShaderSource:$}},ju=(e,t)=>{Ip(e.inputs),e.compute(Cp(e.inputs[0],t))},qu=e=>te({axis:e.axis})});var _p,Ap,Ep,Tp,Op,Yu,Zu,Qu=j(()=>{"use strict";Ie();Pe();$e();_p=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Ap=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),te({numOutputs:a,axis:t.axis,splitSizes:r})},Ep=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < sizeInConcatAxis[i]) {
        return i;
    }
    }
    return ${e}u;
}`,Tp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (outputNumber == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${a}) { ${n} }`)}return`
      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Op=(e,t)=>{let r=e[0].dims,a=W.size(r),n=e[0].dataType,s=r.length,u=t.axis,l=u<0?r.length+u:u,o=new Array(t.numOutputs),c=N("input",n,r),f=new Array(t.numOutputs),y=[],m=[],b=0;for(let I=0;I<t.numOutputs;I++){b+=t.splitSizes[I],f[I]=b;let _=r.slice();_[t.axis]=t.splitSizes[I],m.push(_),o[I]=K(`output${I}`,n,m[I]),y.push({dims:m[I],dataType:e[0].dataType})}let w=s<2?"indices":`indices[${l}]`,$=I=>`
  ${I.declareVariables(c,...o)}
  const sizeInConcatAxis = array<u32, ${f.length}>(${f.map(_=>`${_}u`).join(",")});
  ${Ep(f.length)}
  ${Tp(o)}

  ${I.mainStart()}
    ${I.guardAgainstOutOfBoundsWorkgroupSizes(a)}

    var indices = ${c.offsetToIndices("global_idx")};
    let outputNumber = calculateOutputIndex(${w});
    if (outputNumber != 0) {
        ${w} -= sizeInConcatAxis[outputNumber - 1u];
    }
    writeBufferData(outputNumber, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:$,getRunData:()=>({outputs:y,dispatchGroup:{x:Math.ceil(a/64)}})}},Yu=(e,t)=>{_p(e.inputs);let r=e.inputs.length===1?t:Ap(e.inputs,t);e.compute(Op(e.inputs,r),{inputs:[0]})},Zu=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return te({axis:t,numOutputs:a,splitSizes:r})}});var Xu,kp,Rp,Pp,Ju,el=j(()=>{"use strict";Ve();Ie();$e();Xu=e=>Array.from(e.getBigInt64Array(),Number),kp=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Xu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Rp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Pp=e=>{let t=e[0].dims,r=Xu(e[1]),a=Rp(t,r),n=W.size(a),s=e[0].dataType,u=N("input",s,t),l=K("output",s,a),o=c=>`
      const inputShape = ${u.indices(...t)};
      ${c.declareVariables(u,l)}
      ${c.mainStart()}
      ${c.guardAgainstOutOfBoundsWorkgroupSizes(n)}
      let outputIndices = ${l.offsetToIndices("global_idx")};
      var inputIndices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let inputDimValue = ${l.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};

        ${u.indicesSet("inputIndices","i","inputDimValue")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("inputIndices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:o}},Ju=e=>{kp(e.inputs),e.compute(Pp(e.inputs),{inputs:[0]})}});var Bp,Mp,tl,rl=j(()=>{"use strict";Ve();Ie();$e();Bp=(e,t,r,a,n)=>{let s=W.size(r),u=Math.ceil(s/4),l=K("outputData",n,r,4),o=N("aData",t[1].dataType,t[1].dims,4),c=N("bData",t[2].dataType,t[2].dims,4),f=N("cData",t[0].dataType,t[0].dims,4),y,m=(b,w,$)=>`select(${w}, ${b}, ${$})`;if(!a)y=l.setByOffset("global_idx",m(o.getByOffset("global_idx"),c.getByOffset("global_idx"),f.getByOffset("global_idx")));else{let b=(w,$,I="")=>{let _=`aData[indexA${$}][componentA${$}]`,x=`bData[indexB${$}][componentB${$}]`,P=`bool(cData[indexC${$}] & ${4278190080>>>(3-$)*8}u)`;return`
            let outputIndices${$} = ${l.offsetToIndices(`global_idx * 4u + ${$}u`)};
            let offsetA${$} = ${o.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let offsetB${$} = ${c.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let offsetC${$} = ${f.broadcastedIndicesToOffset(`outputIndices${$}`,l)};
            let indexA${$} = offsetA${$} / 4u;
            let indexB${$} = offsetB${$} / 4u;
            let indexC${$} = offsetC${$} / 4u;
            let componentA${$} = offsetA${$} % 4u;
            let componentB${$} = offsetB${$} % 4u;
            ${w}[${$}] = ${I}(${m(_,x,P)});
          `};n===9?y=`
            var data = vec4<u32>(0);
            ${b("data",0,"u32")}
            ${b("data",1,"u32")}
            ${b("data",2,"u32")}
            ${b("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:y=`
            ${b("outputData[global_idx]",0)}
            ${b("outputData[global_idx]",1)}
            ${b("outputData[global_idx]",2)}
            ${b("outputData[global_idx]",3)}
          `}return`
        ${e.declareVariables(f,o,c,l)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}
        ${y}
      }`},Mp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,s=!(W.areEqual(t,r)&&W.areEqual(r,a)),u=t,l=W.size(t);if(s){let o=dt.calcShape(dt.calcShape(t,r,!1),a,!1);if(!o)throw new Error("Can't perform where op on the given tensors");u=o,l=W.size(u)}return{name:"Where",getShaderSource:o=>Bp(o,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)}})}},tl=e=>{e.compute(Mp(e.inputs))}});var nl,al=j(()=>{"use strict";Ei();ea();Ri();Bi();fs();Is();As();sa();Hs();qs();Zs();Js();ru();ou();uu();cu();aa();hu();bu();Pu();Mu();on();Wu();Uu();Fu();Ku();Qu();el();Qt();ta();rl();nl=new Map([["Abs",[Mi]],["Acos",[Di]],["Acosh",[zi]],["Add",[ms]],["ArgMax",[Ai,Jn]],["ArgMin",[_i,Jn]],["Asin",[Wi]],["Asinh",[Vi]],["Atan",[Ni]],["Atanh",[Ui]],["Attention",[Oi,Ti]],["AveragePool",[Iu,xu]],["BatchNormalization",[ki]],["BiasAdd",[Pi]],["BiasSplitGelu",[ps]],["Cast",[Li,Hi]],["Ceil",[Fi]],["Clip",[Gi]],["Concat",[Cs,_s]],["Conv",[la,ua]],["ConvTranspose",[Us,Ns]],["Cos",[ji]],["Cosh",[qi]],["Div",[hs]],["Einsum",[Fs,js]],["Elu",[Ki,ln]],["Equal",[gs]],["Erf",[Yi]],["Exp",[Zi]],["Expand",[Ys]],["Floor",[Qi]],["FusedConv",[la,ua]],["Gather",[Xs,Qs]],["GatherElements",[tu,eu]],["Gelu",[Xi]],["Gemm",[nu,au]],["GlobalAveragePool",[Au,_u]],["GlobalMaxPool",[Ru,ku]],["Greater",[vs]],["GreaterOrEqual",[Ss]],["InstanceNormalization",[su,iu]],["LayerNormalization",[du,lu]],["LeakyRelu",[Ji,ln]],["Less",[$s]],["LessOrEqual",[xs]],["Log",[cs]],["MatMul",[Rs]],["MaxPool",[Tu,Ou]],["Mul",[ys]],["MultiHeadAttention",[mu,fu]],["Neg",[ts]],["Not",[es]],["Pad",[gu,yu]],["Pow",[bs]],["Range",[Bu]],["Reciprocal",[rs]],["ReduceMin",[vi,it]],["ReduceMean",[hi,it]],["ReduceMax",[wi,it]],["ReduceSum",[Si,it]],["ReduceProd",[$i,it]],["ReduceL1",[gi,it]],["ReduceL2",[yi,it]],["ReduceLogSum",[Ii,it]],["ReduceLogSumExp",[bi,it]],["ReduceSumSquare",[xi,it]],["Relu",[ns]],["Resize",[Du,zu]],["Sigmoid",[as]],["Sin",[os]],["Sinh",[is]],["Slice",[Lu,Gu]],["SkipLayerNormalization",[Vu,Nu]],["Split",[Yu,Zu]],["Sqrt",[ss]],["Softmax",[ju,qu]],["Sub",[ws]],["Tan",[us]],["Tanh",[ls]],["ThresholdedRelu",[ds,ln]],["Tile",[Ju]],["Transpose",[ri,ni]],["Where",[tl]]])});var wn,ol=j(()=>{"use strict";Ve();Et();$e();wn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,s,u,l){let o=this.backend.device,c=this.backend.getComputePassEncoder();c.setPipeline(t.computePipeline);let f=[];for(let m of n)f.push({binding:f.length,resource:{buffer:m.buffer}});for(let m of s)f.push({binding:f.length,resource:{buffer:m.buffer}});l&&f.push({binding:f.length,resource:l});let y=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:f,label:t.programInfo.name});if(c.setBindGroup(0,y),c.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let m=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,m.buffer,0,this.backend.querySetCount*8),this.backend.flush();let b=this.backend.currentKernelId,w=this.backend.kernels.get(b),$=`[${w[0]}] ${w[1]}`;m.buffer.mapAsync(GPUMapMode.READ).then(()=>{let I=new BigUint64Array(m.buffer.getMappedRange()),_=I[0],x=I[1];m.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=_);let P=Number(_-this.backend.queryTimeBase),A=Number(x-this.backend.queryTimeBase);if(!Number.isSafeInteger(P)||!Number.isSafeInteger(A))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(m.id);let B="";r.forEach((V,z)=>{B+=`input[${z}]: [${V.dims}] | ${yr(V.dataType)}, `});let O="";a.forEach((V,z)=>{O+=`output[${z}]: [${V.dims}] | ${yr(V.dataType)}, `}),console.log(`[profiling] kernel "${b}|${$}|${t.programInfo.name}" ${B}${O}execution time: ${A-P} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let s=ei(r),u=t.getShaderSource(s),l=`${n.join(`
`)}
${s.additionalImplementations}
${u}`,o=a.createShaderModule({code:l,label:t.name});Re("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let c=a.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:c}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&a<=s&&n<=s)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>s){if(l=Math.ceil(Math.cbrt(u)),l>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Dp,zp,vn,il=j(()=>{"use strict";Et();qo();Qo();al();ol();Dp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[a].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[a].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},zp=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Dp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},vn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Zo(this),this.programManager=new wn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Fo(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,s){let u=[];for(let x=0;x<r.length;++x){let P=this.gpuDataManager.get(r[x].data);if(!P)throw new Error(`no GPU data for input: ${r[x].data}`);u[x]=P}let{outputs:l,dispatchGroup:o,programUniforms:c}=t.getRunData(r),f=a.length===0?l.map((x,P)=>P):a;if(f.length!==l.length)throw new Error(`Output size ${f.length} must be equal to ${l.length}.`);let y=[],m=[];for(let x=0;x<l.length;++x){if(!Number.isInteger(f[x])||f[x]<-3||f[x]>=l.length)throw new Error(`Invalid output index: ${f[x]}`);if(f[x]===-3)continue;let P=f[x]===-1,A=f[x]===-2,B=P||A?s(l[x].dataType,l[x].dims):n(f[x],l[x].dataType,l[x].dims),O=this.gpuDataManager.get(B.data);if(!O)throw new Error(`no GPU data for output: ${B.data}`);if(P&&this.temporaryData.push(O),A){let V=this.kernelPersistentData.get(this.currentKernelId);V||(V=[],this.kernelPersistentData.set(this.currentKernelId,V)),V.push(O)}y.push(B),m.push(O)}let b;if(c){let x=0,P=0,A=[],B=1;c.forEach(z=>{let q=typeof z.data=="number"?[z.data]:z.data;if(q.length===0)return;let Z;switch(q.length){case 1:Z=4;break;case 2:Z=8;break;case 3:Z=16;break;case 4:Z=16;break;case 5:Z=16;break;case 6:Z=16;break;default:throw new Error(`unsupported data length: ${q.length}`)}(P===5||P===6)&&(Z=16),Z>B&&(B=Z),x=Math.ceil(x/Z)*Z,P=q.length,A.push(x),x+=q.length*4}),x=Math.ceil(x/B)*B;let O=new ArrayBuffer(x);c.forEach((z,q)=>{let Z=A[q],M=typeof z.data=="number"?[z.data]:z.data;z.type==="int32"?new Int32Array(O,Z,M.length).set(M):z.type==="uint32"?new Uint32Array(O,Z,M.length).set(M):new Float32Array(O,Z,M.length).set(M)});let V=this.gpuDataManager.create(x,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(V.buffer,0,O,0,x),this.gpuDataManager.release(V.id),b={offset:0,size:x,buffer:V.buffer}}let w=this.programManager.normalizeDispatchGroupSize(o),$=w[1]===1&&w[2]===1,I=zp(t,r,$),_=this.programManager.getArtifact(I);return _||(_=this.programManager.build(t,w),this.programManager.setArtifact(I,_),Re("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Re("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${w[0]}x${w[1]}x${w[2]}`),this.programManager.run(_,r,y,u,m,w,b),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let s=nl.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,l,o]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Re("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),l(r,o[1]),0}catch(f){return a.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${f}`)),1}finally{c&&a.push(this.device.popErrorScope().then(f=>f?`GPU validation error for kernel "[${s}] ${u}": ${f.message}`:null));for(let f of this.temporaryData)this.gpuDataManager.release(f.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return s.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await qn(this,t,r);return jo(n.buffer,a)}}}});var sl={};Wt(sl,{init:()=>Wp});var xr,ha,Wp,ul=j(()=>{"use strict";Ve();il();Et();Ie();xr=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=W.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(W.size(t)!==W.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},ha=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=a>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let l=[];for(let o=0;o<u;o++){let c=n[s++],f=n[s++],y=n[s++],m=[];for(let b=0;b<y;b++)m.push(n[s++]);l.push(new xr(t,c,f,m))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],s=(l,o,c)=>new xr(this.module,o,this.output(l,c),c),u=(l,o)=>{let c=br(l);if(!c)throw new Error(`Unsupported data type: ${l}`);let f=c*W.size(o);return new xr(this.module,l,this.backend.gpuDataManager.create(f).id,o)};return this.backend.run(t,a,n,s,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Wp=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let a=new vn;await a.initialize(t),r(a,n=>a.alloc(n),n=>a.free(n),(n,s,u,l=!1)=>{if(l)Re("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),a.memcpy(n,s);else{Re("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let o=e.HEAPU8.subarray(n,n+u);a.upload(s,o)}},async(n,s,u)=>{Re("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await a.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>a.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>a.releaseKernel(n),(n,s,u,l)=>{Re("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let o=new ha(e,a,s);return a.computeKernel(n,o,l)})}}});var dl,Vp,Np,cl,Ir,pl,ga,ya,fl,ml,ll,hl,gl,yl,bl=j(()=>{"use strict";No();Ho();Ve();Yt();Qr();dl=!1,Vp=e=>{let t=De(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&ke("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Np=(e,t)=>{De()._OrtInit(e,t)!==0&&ke("Can't initialize onnxruntime.")},cl=async e=>{Np(e.wasm.numThreads,wr(e.logLevel));{let t=(ul(),At(sl)).init;await t(De(),e)}dl=!0},Ir=new Map,pl=()=>dl,ga=e=>{let t=De(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},ya=(e,t)=>{let r=De(),a=0,n=0,s=0,u=[],l=[],o=[];try{[n,u]=Uo(t),a=r._OrtCreateSession(e[0],e[1],n),a===0&&ke("Can't create a session.");let[c,f]=Vp(a),y=[],m=[],b=[];for(let $=0;$<c;$++){let I=r._OrtGetInputName(a,$);I===0&&ke("Can't get an input name."),l.push(I),y.push(r.UTF8ToString(I))}for(let $=0;$<f;$++){let I=r._OrtGetOutputName(a,$);I===0&&ke("Can't get an output name."),o.push(I);let _=r.UTF8ToString(I);m.push(_);{let x=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[_]??"cpu";if(x!=="cpu"&&x!=="cpu-pinned"&&x!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${x}.`);b.push(x)}}let w=null;return b.some($=>$==="gpu-buffer")&&(s=r._OrtCreateBinding(a),s===0&&ke("Can't create IO binding."),w={handle:s,outputPreferredLocations:b,outputPreferredLocationsEncoded:b.map($=>Fn($))}),Ir.set(a,[a,l,o,w]),[a,y,m]}catch(c){throw l.forEach(f=>r._OrtFree(f)),o.forEach(f=>r._OrtFree(f)),s!==0&&r._OrtReleaseBinding(s),a!==0&&r._OrtReleaseSession(a),c}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(c=>r._free(c))}},fl=(e,t)=>{let r=ga(e);return ya(r,t)},ml=e=>{let t=De(),r=Ir.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),s.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),Ir.delete(e)},ll=(e,t,r,a,n)=>{if(!e){t.push(0);return}let s=De(),u=e[0],l=e[1],o=e[3],c,f;if(u==="string"&&o==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(o==="gpu-buffer"){let b=e[2].gpuBuffer,w=br(Gn(u));f=l.reduce(($,I)=>$*I,1)*w,c=s.jsepRegisterBuffer(a,n,b,f)}else{let b=e[2];if(Array.isArray(b)){f=4*b.length,c=s._malloc(f),r.push(c);let w=c/4;for(let $=0;$<b.length;$++){if(typeof b[$]!="string")throw new TypeError(`tensor data at index ${$} is not a string`);s.HEAPU32[w++]=We(b[$],r)}}else f=b.byteLength,c=s._malloc(f),r.push(c),s.HEAPU8.set(new Uint8Array(b.buffer,b.byteOffset,f),c)}let y=s.stackSave(),m=s.stackAlloc(4*l.length);try{let b=m/4;l.forEach($=>s.HEAP32[b++]=$);let w=s._OrtCreateTensor(Gn(u),c,f,m,l.length,Fn(o));w===0&&ke(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(w)}finally{s.stackRestore(y)}},hl=async(e,t,r,a,n,s)=>{let u=De(),l=Ir.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[o,c,f,y]=l,m=t.length,b=a.length,w=0,$=[],I=[],_=[],x=[],P=u.stackSave(),A=u.stackAlloc(m*4),B=u.stackAlloc(m*4),O=u.stackAlloc(b*4),V=u.stackAlloc(b*4);try{[w,$]=Vo(s);for(let X=0;X<m;X++)ll(r[X],I,x,e,t[X]);for(let X=0;X<b;X++)ll(n[X],_,x,e,m+a[X]);let z=A/4,q=B/4,Z=O/4,M=V/4;for(let X=0;X<m;X++)u.HEAPU32[z++]=I[X],u.HEAPU32[q++]=c[t[X]];for(let X=0;X<b;X++)u.HEAPU32[Z++]=_[X],u.HEAPU32[M++]=f[a[X]];if(y){let{handle:X,outputPreferredLocations:we,outputPreferredLocationsEncoded:F}=y;if(c.length!==m)throw new Error(`input count from feeds (${m}) is expected to be always equal to model's input count (${c.length}).`);for(let le=0;le<m;le++){let pe=t[le];await u._OrtBindInput(X,c[pe],I[le])!==0&&ke(`Can't bind input[${le}] for session=${e}.`)}for(let le=0;le<b;le++){let pe=a[le];n[le]?.[3]?u._OrtBindOutput(X,f[pe],_[le],0)!==0&&ke(`Can't bind pre-allocated output[${le}] for session=${e}.`):u._OrtBindOutput(X,f[pe],0,F[pe])!==0&&ke(`Can't bind output[${le}] to ${we[le]} for session=${e}.`)}}let Y;y?Y=await u._OrtRunWithBinding(o,y.handle,b,O,w):Y=await u._OrtRun(o,B,A,m,V,b,O,w),Y!==0&&ke("failed to call OrtRun().");let me=[];for(let X=0;X<b;X++){let we=u.HEAPU32[O/4+X];if(we===_[X]){me.push(n[X]);continue}let F=u.stackSave(),le=u.stackAlloc(4*4),pe=!1,ye,he=0;try{u._OrtGetTensorData(we,le,le+4,le+8,le+12)!==0&&ke(`Can't access output tensor data on index ${X}.`);let Be=le/4,Ne=u.HEAPU32[Be++];he=u.HEAPU32[Be++];let G=u.HEAPU32[Be++],de=u.HEAPU32[Be++],be=[];for(let Me=0;Me<de;Me++)be.push(u.HEAPU32[G/4+Me]);u._OrtFree(G);let Le=be.reduce((Me,Ue)=>Me*Ue,1);ye=yr(Ne);let Ze=y?.outputPreferredLocations[a[X]];if(ye==="string"){if(Ze==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Me=[],Ue=he/4;for(let Ke=0;Ke<Le;Ke++){let st=u.HEAPU32[Ue++],Je=Ke===Le-1?void 0:u.HEAPU32[Ue]-st;Me.push(u.UTF8ToString(st,Je))}me.push([ye,be,Me,"cpu"])}else if(Ze==="gpu-buffer"&&Le>0){let Me=u.jsepGetBuffer(he),Ue=br(Ne);if(Ue===void 0||!Jr(ye))throw new Error(`Unsupported data type: ${ye}`);pe=!0,me.push([ye,be,{gpuBuffer:Me,download:u.jsepCreateDownloader(Me,Le*Ue,ye),dispose:()=>{u._OrtReleaseTensor(we)}},"gpu-buffer"])}else{let Me=Xr(ye),Ue=new Me(Le);new Uint8Array(Ue.buffer,Ue.byteOffset,Ue.byteLength).set(u.HEAPU8.subarray(he,he+Ue.byteLength)),me.push([ye,be,Ue,"cpu"])}}finally{u.stackRestore(F),ye==="string"&&he&&u._free(he),pe||u._OrtReleaseTensor(we)}}return y&&u._OrtClearBoundOutputs(y.handle),me}finally{u.stackRestore(P),I.forEach(z=>u._OrtReleaseTensor(z)),_.forEach(z=>u._OrtReleaseTensor(z)),x.forEach(z=>u._free(z)),w!==0&&u._OrtReleaseRunOptions(w),$.forEach(z=>u._free(z))}},gl=e=>{let t=De(),r=Ir.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&ke("Can't get an profile file name."),t._OrtFree(n)},yl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var wl=Kt((jb,Hp)=>{Hp.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var dn=Object.defineProperty;var Du=Object.getOwnPropertyDescriptor;var zu=Object.getOwnPropertyNames;var Vu=Object.prototype.hasOwnProperty;var q=(e,t)=>()=>(e&&(t=e(e=0)),t);var nr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Or=(e,t)=>{for(var r in t)dn(e,r,{get:t[r],enumerable:!0})},Wu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of zu(t))!Vu.call(e,n)&&n!==r&&dn(e,n,{get:()=>t[n],enumerable:!(o=Du(t,n))||o.enumerable});return e};var zt=e=>Wu(dn({},"__esModule",{value:!0}),e);var cn={};Or(cn,{readFile:()=>Nu});var Nu,pn=q(()=>{Nu=void 0});var mn={};Or(mn,{join:()=>Uu});var Uu,fn=q(()=>{Uu=void 0});var yo=nr((go,hn)=>{"use strict";var ho=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((l,m)=>{o=l,n=m}),r.jsepInit=(l,m,y,x,E,G,H,ue)=>{r.Za=l,r.Oa=m,r.Qa=y,r.Ja=x,r.Pa=E,r.ra=G,r.Ra=H,r.Sa=ue,m=(X,ne,J)=>(...ge)=>{let Se=Ze,k=ne?.();ge=X(...ge);let ae=ne?.();return k!==ae&&(X=ae,J(k),ne=J=null),Ze!=Se?vr():ge},y=X=>async(...ne)=>{try{if(r.Da)throw Error("Session already started");let J=r.Da={Ta:ne[0],errors:[]},ge=await X(...ne);if(r.Da!==J)throw Error("Session mismatch");l.flush();let Se=J.errors;if(0<Se.length){let k=await Promise.all(Se);if(k=k.filter(ae=>ae),0<k.length)throw Error(k.join(`\n`))}return ge}finally{r.Da=null}},r._OrtRun=y(m(r._OrtRun,()=>r._OrtRun,X=>r._OrtRun=X)),r._OrtRunWithBinding=y(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,X=>r._OrtRunWithBinding=X)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,X=>r._OrtBindInput=X),r.jsepRegisterBuffer=(X,ne,J,ge)=>l.registerBuffer(X,ne,J,ge),r.jsepUnregisterBuffers=X=>{l.unregisterBuffers(X)},r.jsepGetBuffer=X=>l.getBuffer(X),r.jsepCreateDownloader=(X,ne,J)=>l.createDownloader(X,ne,J)};var s=Object.assign({},r),u="./this.program",d=(l,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",v="",g,w,b;if(h){var $=(pn(),zt(cn)),C=(fn(),zt(mn));v=p?C.dirname(v)+"/":__dirname+"/",g=(l,m)=>(l=l.startsWith("file://")?new URL(l):C.normalize(l),$.readFileSync(l,m?void 0:"utf8")),b=l=>(l=g(l,!0),l.buffer||(l=new Uint8Array(l)),l),w=(l,m,y,x=!0)=>{l=l.startsWith("file://")?new URL(l):C.normalize(l),$.readFile(l,x?void 0:"utf8",(E,G)=>{E?y(E):m(x?G.buffer:G)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,m)=>{throw process.exitCode=l,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?v=self.location.href:typeof document<"u"&&document.currentScript&&(v=document.currentScript.src),e&&(v=e),v.indexOf("blob:")!==0?v=v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):v="",g=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},p&&(b=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),w=(l,m,y)=>{var x=new XMLHttpRequest;x.open("GET",l,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?m(x.response):y()},x.onerror=y,x.send(null)});var A=r.print||console.log.bind(console),I=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var M;r.wasmBinary&&(M=r.wasmBinary);var _=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Ve("no native wasm support detected");var B,O,W=!1,z,j,Z,R,Y,fe,Q;function we(){var l=B.buffer;r.HEAP8=j=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=R=new Int32Array(l),r.HEAPU8=Z=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=Y=new Uint32Array(l),r.HEAPF32=fe=new Float32Array(l),r.HEAPF64=Q=new Float64Array(l)}var F=[],le=[],pe=[];function ye(){var l=r.preRun.shift();F.unshift(l)}var he=0,Fe=null,Re=null;function Ve(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",I(l),W=!0,z=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function L(l){return l.startsWith("data:application/octet-stream;base64,")}var de;if(de="ort-wasm-simd.wasm",!L(de)){var be=de;de=r.locateFile?r.locateFile(be,v):v+be}function He(l){if(l==de&&M)return new Uint8Array(M);if(b)return b(l);throw"both async and sync fetching of the wasm failed"}function qe(l){if(!M&&(a||p)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>He(l));if(w)return new Promise((m,y)=>{w(l,x=>m(new Uint8Array(x)),y)})}return Promise.resolve().then(()=>He(l))}function Be(l,m,y){return qe(l).then(x=>WebAssembly.instantiate(x,m)).then(x=>x).then(y,x=>{I("failed to asynchronously prepare wasm: "+x),Ve(x)})}function We(l,m){var y=de;return M||typeof WebAssembly.instantiateStreaming!="function"||L(y)||y.startsWith("file://")||h||typeof fetch!="function"?Be(y,l,m):fetch(y,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,l).then(m,function(E){return I("wasm streaming compile failed: "+E),I("falling back to ArrayBuffer instantiation"),Be(y,l,m)}))}var je,nt={1425272:l=>{r.ra("Abs",l,void 0)},1425323:l=>{r.ra("Neg",l,void 0)},1425374:l=>{r.ra("Floor",l,void 0)},1425427:l=>{r.ra("Ceil",l,void 0)},1425479:l=>{r.ra("Reciprocal",l,void 0)},1425537:l=>{r.ra("Sqrt",l,void 0)},1425589:l=>{r.ra("Exp",l,void 0)},1425640:l=>{r.ra("Erf",l,void 0)},1425691:l=>{r.ra("Sigmoid",l,void 0)},1425746:l=>{r.ra("Log",l,void 0)},1425797:l=>{r.ra("Sin",l,void 0)},1425848:l=>{r.ra("Cos",l,void 0)},1425899:l=>{r.ra("Tan",l,void 0)},1425950:l=>{r.ra("Asin",l,void 0)},1426002:l=>{r.ra("Acos",l,void 0)},1426054:l=>{r.ra("Atan",l,void 0)},1426106:l=>{r.ra("Sinh",l,void 0)},1426158:l=>{r.ra("Cosh",l,void 0)},1426210:l=>{r.ra("Asinh",l,void 0)},1426263:l=>{r.ra("Acosh",l,void 0)},1426316:l=>{r.ra("Atanh",l,void 0)},1426369:l=>{r.ra("Tanh",l,void 0)},1426421:l=>{r.ra("Not",l,void 0)},1426472:(l,m,y)=>{r.ra("Clip",l,{min:m,max:y})},1426541:l=>{r.ra("Clip",l,void 0)},1426593:(l,m)=>{r.ra("Elu",l,{alpha:m})},1426651:l=>{r.ra("Relu",l,void 0)},1426703:(l,m)=>{r.ra("LeakyRelu",l,{alpha:m})},1426767:(l,m)=>{r.ra("ThresholdedRelu",l,{alpha:m})},1426837:l=>{r.Ra(l)},1426871:(l,m)=>r.Sa(l,m,r.Da.Ta,r.Da.errors),1426983:(l,m)=>{r.ra("Cast",l,{to:m})},1427041:l=>{r.ra("Add",l,void 0)},1427092:l=>{r.ra("Sub",l,void 0)},1427143:l=>{r.ra("Mul",l,void 0)},1427194:l=>{r.ra("Div",l,void 0)},1427245:l=>{r.ra("Pow",l,void 0)},1427296:l=>{r.ra("Equal",l,void 0)},1427349:l=>{r.ra("Greater",l,void 0)},1427404:l=>{r.ra("GreaterOrEqual",l,void 0)},1427466:l=>{r.ra("Less",l,void 0)},1427518:l=>{r.ra("LessOrEqual",l,void 0)},1427577:(l,m,y,x,E)=>{r.ra("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1427741:(l,m,y,x,E)=>{r.ra("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1427904:(l,m,y,x,E)=>{r.ra("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1428067:(l,m,y,x,E)=>{r.ra("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1428231:(l,m,y,x,E)=>{r.ra("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1428394:(l,m,y,x,E)=>{r.ra("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1428556:(l,m,y,x,E)=>{r.ra("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1428718:(l,m,y,x,E)=>{r.ra("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1428884:(l,m,y,x,E)=>{r.ra("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1429053:(l,m,y,x,E)=>{r.ra("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!y,axes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1429222:l=>{r.ra("Where",l,void 0)},1429275:(l,m,y)=>{r.ra("Transpose",l,{perm:m?Array.from(R.subarray(y>>>0,y+m>>>0)):[]})},1429388:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se)=>{r.ra("Conv",l,{format:X?"NHWC":"NCHW",auto_pad:m,dilations:[y],group:x,kernel_shape:[E],pads:G?Array.from(R.subarray(H>>>0,H+G>>>0)):[],strides:[ue],w_is_const:()=>!!j[ne>>>0],activation:De(J),activation_params:ge?Array.from(fe.subarray(Se>>>0,Se+ge>>>0)):[]})},1429769:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae,ve)=>{r.ra("Conv",l,{format:ge?"NHWC":"NCHW",auto_pad:m,dilations:[y,x],group:E,kernel_shape:[G,H],pads:ue?Array.from(R.subarray(X>>>0,X+ue>>>0)):[],strides:[ne,J],w_is_const:()=>!!j[Se>>>0],activation:De(k),activation_params:ae?Array.from(fe.subarray(ve>>>0,ve+ae>>>0)):[]})},1430171:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae)=>{r.ra("ConvTranspose",l,{format:X?"NHWC":"NCHW",autoPad:m,dilations:[y],group:x,kernel_shape:[E],pads:[G,H],strides:[ue],wIsConst:()=>!!j[ne>>>0],outputPadding:J?Array.from(R.subarray(ge>>>0,ge+J>>>0)):[],outputShape:Se?Array.from(R.subarray(k>>>0,k+Se>>>0)):[],activation:De(ae)})},1430585:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k)=>{r.ra("ConvTranspose",l,{format:ue?"NHWC":"NCHW",autoPad:m,dilations:Array.from(R.subarray(y>>>0,y+2>>>0)),group:x,kernelShape:Array.from(R.subarray(E>>>0,E+2>>>0)),pads:Array.from(R.subarray(G>>>0,G+4>>>0)),strides:Array.from(R.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!j[X>>>0],outputPadding:0<ne?Array.from(R.subarray(J>>>0,J+ne>>>0)):[],outputShape:0<ge?Array.from(R.subarray(Se>>>0,Se+ge>>>0)):[],activation:De(k)})},1431142:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae)=>{r.ra("ConvTranspose",l,{format:X?"NHWC":"NCHW",autoPad:m,dilations:[y],group:x,kernel_shape:[E],pads:[G,H],strides:[ue],wIsConst:()=>!!j[ne>>>0],outputPadding:J?Array.from(R.subarray(ge>>>0,ge+J>>>0)):[],outputShape:Se?Array.from(R.subarray(k>>>0,k+Se>>>0)):[],activation:De(ae)})},1431556:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k)=>{r.ra("ConvTranspose",l,{format:ue?"NHWC":"NCHW",autoPad:m,dilations:Array.from(R.subarray(y>>>0,y+2>>>0)),group:x,kernelShape:Array.from(R.subarray(E>>>0,E+2>>>0)),pads:Array.from(R.subarray(G>>>0,G+4>>>0)),strides:Array.from(R.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!j[X>>>0],outputPadding:0<ne?Array.from(R.subarray(J>>>0,J+ne>>>0)):[],outputShape:0<ge?Array.from(R.subarray(Se>>>0,Se+ge>>>0)):[],activation:De(k)})},1432113:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},1432204:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae,ve)=>{r.ra("AveragePool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[ue,X],pads:[ne,J,ge,Se],strides:[k,ae]})},1432488:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},1432579:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae,ve)=>{r.ra("AveragePool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[ue,X],pads:[ne,J,ge,Se],strides:[k,ae]})},1432863:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},1432950:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae,ve)=>{r.ra("MaxPool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[ue,X],pads:[ne,J,ge,Se],strides:[k,ae]})},1433230:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},1433317:(l,m,y,x,E,G,H,ue,X,ne,J,ge,Se,k,ae,ve)=>{r.ra("MaxPool",l,{format:ve?"NHWC":"NCHW",auto_pad:m,ceil_mode:y,count_include_pad:x,storage_order:E,dilations:[G,H],kernel_shape:[ue,X],pads:[ne,J,ge,Se],strides:[k,ae]})},1433597:(l,m,y,x,E)=>{r.ra("Gemm",l,{alpha:m,beta:y,transA:x,transB:E})},1433701:l=>{r.ra("MatMul",l,void 0)},1433755:(l,m,y,x)=>{r.ra("ArgMax",l,{keepDims:!!m,selectLastIndex:!!y,axis:x})},1433863:(l,m,y,x)=>{r.ra("ArgMin",l,{keepDims:!!m,selectLastIndex:!!y,axis:x})},1433971:(l,m)=>{r.ra("Softmax",l,{axis:m})},1434034:(l,m)=>{r.ra("Concat",l,{axis:m})},1434094:(l,m,y,x,E)=>{r.ra("Split",l,{axis:m,numOutputs:y,splitSizes:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1434239:l=>{r.ra("Expand",l,void 0)},1434293:(l,m)=>{r.ra("Gather",l,{axis:Number(m)})},1434364:(l,m)=>{r.ra("GatherElements",l,{axis:Number(m)})},1434443:(l,m,y,x,E,G,H,ue,X,ne,J)=>{r.ra("Resize",l,{antialias:m,axes:y?Array.from(R.subarray(x>>>0,x+y>>>0)):[],coordinateTransformMode:De(E),cubicCoeffA:G,excludeOutside:H,extrapolationValue:ue,keepAspectRatioPolicy:De(X),mode:De(ne),nearestMode:De(J)})},1434794:(l,m,y,x,E,G,H)=>{r.ra("Slice",l,{starts:m?Array.from(R.subarray(y>>>0,y+m>>>0)):[],ends:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[],axes:G?Array.from(R.subarray(H>>>0,H+G>>>0)):[]})},1435025:l=>{r.ra("Tile",l,void 0)},1435077:(l,m,y)=>{r.ra("LayerNormalization",l,{axis:Number(m),epsilon:Number(y)})},1435184:(l,m,y)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:y?"NHWC":"NCHW"})},1435298:(l,m,y)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:y?"NHWC":"NCHW"})},1435412:l=>{r.ra("Range",l,void 0)},1435465:(l,m)=>{r.ra("Einsum",l,{equation:De(m)})},1435546:(l,m,y,x,E)=>{r.ra("Pad",l,{mode:m,value:y,pads:x?Array.from(R.subarray(E>>>0,E+x>>>0)):[]})},1435678:(l,m,y,x,E,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:y,spatial:!!E,trainingMode:!!x,format:G?"NHWC":"NCHW"})},1435847:(l,m,y,x,E,G)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:y,spatial:!!E,trainingMode:!!x,format:G?"NHWC":"NCHW"})},1436016:(l,m,y,x,E,G,H,ue,X)=>{r.ra("Attention",l,{numHeads:m,isUnidirectional:y,maskFilterValue:x,scale:E,doRotary:G,qkvHiddenSizes:H?Array.from(R.subarray(Number(ue)>>>0,Number(ue)+H>>>0)):[],pastPresentShareBuffer:!!X})},1436288:l=>{r.ra("Gelu",l,void 0)},1436340:(l,m,y,x,E,G)=>{r.ra("MultiHeadAttention",l,{numHeads:m,isUnidirectional:y,maskFilterValue:x,scale:E,doRotary:G})},1436499:l=>{r.ra("BiasAdd",l,void 0)},1436554:l=>{r.ra("BiasSplitGelu",l,void 0)},1436615:(l,m)=>{r.ra("SkipLayerNormalization",l,{epsilon:m})},1436696:l=>r.Oa(l),1436729:l=>r.Qa(l),1436761:(l,m,y)=>{r.Ja(l,m,y,!0)},1436800:(l,m,y)=>{r.Ja(l,m,y)}};function Ye(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var St=l=>{for(;0<l.length;)l.shift()(r)};function xt(l){this.Ha=l-24,this.Ma=function(m){Y[this.Ha+4>>2>>>0]=m},this.La=function(m){Y[this.Ha+8>>2>>>0]=m},this.Ya=function(m,y){this.Ka(),this.Ma(m),this.La(y)},this.Ka=function(){Y[this.Ha+16>>2>>>0]=0}}var Nt=0,mr=0,Qe=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ut=(l,m,y)=>{m>>>=0;var x=m+y;for(y=m;l[y]&&!(y>=x);)++y;if(16<y-m&&l.buffer&&Qe)return Qe.decode(l.subarray(m,y));for(x="";m<y;){var E=l[m++];if(E&128){var G=l[m++]&63;if((E&224)==192)x+=String.fromCharCode((E&31)<<6|G);else{var H=l[m++]&63;E=(E&240)==224?(E&15)<<12|G<<6|H:(E&7)<<18|G<<12|H<<6|l[m++]&63,65536>E?x+=String.fromCharCode(E):(E-=65536,x+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else x+=String.fromCharCode(E)}return x},De=(l,m)=>(l>>>=0)?Ut(Z,l,m):"",Ot=l=>{for(var m=0,y=0;y<l.length;++y){var x=l.charCodeAt(y);127>=x?m++:2047>=x?m+=2:55296<=x&&57343>=x?(m+=4,++y):m+=3}return m},Ht=(l,m,y,x)=>{if(y>>>=0,!(0<x))return 0;var E=y;x=y+x-1;for(var G=0;G<l.length;++G){var H=l.charCodeAt(G);if(55296<=H&&57343>=H){var ue=l.charCodeAt(++G);H=65536+((H&1023)<<10)|ue&1023}if(127>=H){if(y>=x)break;m[y++>>>0]=H}else{if(2047>=H){if(y+1>=x)break;m[y++>>>0]=192|H>>6}else{if(65535>=H){if(y+2>=x)break;m[y++>>>0]=224|H>>12}else{if(y+3>=x)break;m[y++>>>0]=240|H>>18,m[y++>>>0]=128|H>>12&63}m[y++>>>0]=128|H>>6&63}m[y++>>>0]=128|H&63}}return m[y>>>0]=0,y-E},mt=l=>l%4===0&&(l%100!==0||l%400===0),fr=[0,31,60,91,121,152,182,213,244,274,305,335],ft=[0,31,59,90,120,151,181,212,243,273,304,334],kt=l=>{var m=Ot(l)+1,y=Mt(m);return y&&Ht(l,Z,y,m),y},yt=[],Pt=(l,m)=>{yt.length=0;var y;for(m>>=2;y=Z[l++>>>0];)m+=y!=105&m,yt.push(y==105?R[m>>>0]:Q[m++>>>1]),++m;return yt},Rt={},Gt=()=>{if(!Bt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Rt)Rt[m]===void 0?delete l[m]:l[m]=Rt[m];var y=[];for(m in l)y.push(`${m}=${l[m]}`);Bt=y}return Bt},Bt,hr=[null,[],[]],Ge=[31,29,31,30,31,30,31,31,30,31,30,31],Lt=[31,28,31,30,31,30,31,31,30,31,30,31];function Ft(l){var m=Array(Ot(l)+1);return Ht(l,m,0,m.length),m}function se(l,m,y,x){function E(k,ae,ve){for(k=typeof k=="number"?k.toString():k||"";k.length<ae;)k=ve[0]+k;return k}function G(k,ae){return E(k,ae,"0")}function H(k,ae){function ve(rr){return 0>rr?-1:0<rr?1:0}var gt;return(gt=ve(k.getFullYear()-ae.getFullYear()))===0&&(gt=ve(k.getMonth()-ae.getMonth()))===0&&(gt=ve(k.getDate()-ae.getDate())),gt}function ue(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function X(k){var ae=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<ae;){var ve=k.getMonth(),gt=(mt(k.getFullYear())?Ge:Lt)[ve];if(ae>gt-k.getDate())ae-=gt-k.getDate()+1,k.setDate(1),11>ve?k.setMonth(ve+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ae);break}}return ve=new Date(k.getFullYear()+1,0,4),ae=ue(new Date(k.getFullYear(),0,4)),ve=ue(ve),0>=H(ae,k)?0>=H(ve,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}l>>>=0,m>>>=0,y>>>=0,x>>>=0;var ne=R[x+40>>2>>>0];x={Wa:R[x>>2>>>0],Va:R[x+4>>2>>>0],Ea:R[x+8>>2>>>0],Ia:R[x+12>>2>>>0],Fa:R[x+16>>2>>>0],Ca:R[x+20>>2>>>0],wa:R[x+24>>2>>>0],Ba:R[x+28>>2>>>0],$a:R[x+32>>2>>>0],Ua:R[x+36>>2>>>0],Xa:ne?De(ne):""},y=De(y),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var J in ne)y=y.replace(new RegExp(J,"g"),ne[J]);var ge="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Se="January February March April May June July August September October November December".split(" ");ne={"%a":k=>ge[k.wa].substring(0,3),"%A":k=>ge[k.wa],"%b":k=>Se[k.Fa].substring(0,3),"%B":k=>Se[k.Fa],"%C":k=>G((k.Ca+1900)/100|0,2),"%d":k=>G(k.Ia,2),"%e":k=>E(k.Ia,2," "),"%g":k=>X(k).toString().substring(2),"%G":k=>X(k),"%H":k=>G(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),G(k,2)),"%j":k=>{for(var ae=0,ve=0;ve<=k.Fa-1;ae+=(mt(k.Ca+1900)?Ge:Lt)[ve++]);return G(k.Ia+ae,3)},"%m":k=>G(k.Fa+1,2),"%M":k=>G(k.Va,2),"%n":()=>`\n`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>G(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>G(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var ae=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&ae++,ae)ae==53&&(ve=(k.wa+371-k.Ba)%7,ve==4||ve==3&&mt(k.Ca)||(ae=1));else{ae=52;var ve=(k.wa+7-k.Ba-1)%7;(ve==4||ve==5&&mt(k.Ca%400-1))&&ae++}return G(ae,2)},"%w":k=>k.wa,"%W":k=>G(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var ae=0<=k;return k=Math.abs(k)/60,(ae?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},y=y.replace(/%%/g,"\\0\\0");for(J in ne)y.includes(J)&&(y=y.replace(new RegExp(J,"g"),ne[J](x)));return y=y.replace(/\\0\\0/g,"%"),J=Ft(y),J.length>m?0:(j.set(J,l>>>0),J.length-1)}function ht(l){try{l()}catch(m){Ve(m)}}function gr(l){var m={},y;for(y in l)(function(x){var E=l[x];m[x]=typeof E=="function"?function(){It.push(x);try{return E.apply(null,arguments)}finally{W||(It.pop()===x||Ve(),Ze&&ot===1&&It.length===0&&(ot=0,ht(er),typeof Fibers<"u"&&Fibers.ab()))}}:E})(y);return m}var ot=0,Ze=null,yr=0,It=[],jt={},qt={},br=0,Ct=null,wr=[];function vr(){return new Promise((l,m)=>{Ct={resolve:l,reject:m}})}function $r(){var l=Mt(65548),m=l+12;Y[l>>2>>>0]=m,Y[l+4>>2>>>0]=m+65536,m=It[0];var y=jt[m];return y===void 0&&(y=br++,jt[m]=y,qt[y]=m),R[l+8>>2>>>0]=y,l}function Sr(l){if(!W){if(ot===0){var m=!1,y=!1;l((x=0)=>{if(!W&&(yr=x,m=!0,y)){ot=2,ht(()=>Dt(Ze)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),x=!1;try{var E=(0,O[qt[R[Ze+8>>2>>>0]]])()}catch(ue){E=ue,x=!0}var G=!1;if(!Ze){var H=Ct;H&&(Ct=null,(x?H.reject:H.resolve)(E),G=!0)}if(x&&!G)throw E}}),y=!0,m||(ot=1,Ze=$r(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),ht(()=>Jt(Ze)))}else ot===2?(ot=0,ht(At),Kt(Ze),Ze=null,wr.forEach(x=>{if(!W)try{if(x(),!_)try{z=z=x=z,_||(r.onExit&&r.onExit(x),W=!0),d(x,new Ye(x))}catch(E){E instanceof Ye||E=="unwind"||d(1,E)}}catch(E){E instanceof Ye||E=="unwind"||d(1,E)}})):Ve(`invalid state: ${ot}`);return yr}}function xr(l){return Sr(m=>{l().then(m)})}var Ir={n:function(l,m,y){return xr(async()=>{await r.Pa(l,m,y)})},a:function(l,m,y){throw l>>>=0,new xt(l).Ya(m>>>0,y>>>0),Nt=l,mr++,Nt},d:function(){return 0},L:function(){},A:function(){},C:function(){},u:function(){return 0},J:function(){},E:function(){},I:function(){},l:function(){},B:function(){},y:function(){},K:function(){},z:function(){},m:()=>!0,q:function(l,m,y){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,y>>>=0,l=new Date(1e3*l),R[y>>2>>>0]=l.getUTCSeconds(),R[y+4>>2>>>0]=l.getUTCMinutes(),R[y+8>>2>>>0]=l.getUTCHours(),R[y+12>>2>>>0]=l.getUTCDate(),R[y+16>>2>>>0]=l.getUTCMonth(),R[y+20>>2>>>0]=l.getUTCFullYear()-1900,R[y+24>>2>>>0]=l.getUTCDay(),R[y+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,m,y){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,y>>>=0,l=new Date(1e3*l),R[y>>2>>>0]=l.getSeconds(),R[y+4>>2>>>0]=l.getMinutes(),R[y+8>>2>>>0]=l.getHours(),R[y+12>>2>>>0]=l.getDate(),R[y+16>>2>>>0]=l.getMonth(),R[y+20>>2>>>0]=l.getFullYear()-1900,R[y+24>>2>>>0]=l.getDay(),R[y+28>>2>>>0]=(mt(l.getFullYear())?fr:ft)[l.getMonth()]+l.getDate()-1|0,R[y+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var x=new Date(l.getFullYear(),0,1).getTimezoneOffset();R[y+32>>2>>>0]=(m!=x&&l.getTimezoneOffset()==Math.min(x,m))|0},s:function(l){l>>>=0;var m=new Date(R[l+20>>2>>>0]+1900,R[l+16>>2>>>0],R[l+12>>2>>>0],R[l+8>>2>>>0],R[l+4>>2>>>0],R[l>>2>>>0],0),y=R[l+32>>2>>>0],x=m.getTimezoneOffset(),E=new Date(m.getFullYear(),6,1).getTimezoneOffset(),G=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(G,E);return 0>y?R[l+32>>2>>>0]=+(E!=G&&H==x):0<y!=(H==x)&&(E=Math.max(G,E),m.setTime(m.getTime()+6e4*((0<y?H:E)-x))),R[l+24>>2>>>0]=m.getDay(),R[l+28>>2>>>0]=(mt(m.getFullYear())?fr:ft)[m.getMonth()]+m.getDate()-1|0,R[l>>2>>>0]=m.getSeconds(),R[l+4>>2>>>0]=m.getMinutes(),R[l+8>>2>>>0]=m.getHours(),R[l+12>>2>>>0]=m.getDate(),R[l+16>>2>>>0]=m.getMonth(),R[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,Yt((je=l,1<=+Math.abs(je)?0<je?+Math.floor(je/4294967296)>>>0:~~+Math.ceil((je-+(~~je>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},w:function(l,m,y){function x(X){return(X=X.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?X[1]:"GMT"}y>>>=0;var E=new Date().getFullYear(),G=new Date(E,0,1),H=new Date(E,6,1);E=G.getTimezoneOffset();var ue=H.getTimezoneOffset();Y[l>>>0>>2>>>0]=60*Math.max(E,ue),R[m>>>0>>2>>>0]=+(E!=ue),l=x(G),m=x(H),l=kt(l),m=kt(m),ue<E?(Y[y>>2>>>0]=l,Y[y+4>>2>>>0]=m):(Y[y>>2>>>0]=m,Y[y+4>>2>>>0]=l)},e:()=>{Ve("")},b:function(l,m,y){return l>>>=0,m=Pt(m>>>0,y>>>0),nt[l].apply(null,m)},j:function(l,m,y){return l>>>=0,m=Pt(m>>>0,y>>>0),nt[l].apply(null,m)},i:function(){return Date.now()},x:function(){return 4294901760},f:()=>performance.now(),H:function(l,m,y){return m>>>=0,Z.copyWithin(l>>>0>>>0,m>>>0,m+(y>>>0)>>>0)},v:function(l){l>>>=0;var m=Z.length;if(4294901760<l)return!1;for(var y=1;4>=y;y*=2){var x=m*(1+.2/y);x=Math.min(x,l+100663296);var E=Math;x=Math.max(l,x);e:{E=E.min.call(E,4294901760,x+(65536-x%65536)%65536)-B.buffer.byteLength+65535>>>16;try{B.grow(E),we();var G=1;break e}catch{}G=void 0}if(G)return!0}return!1},F:function(l,m){l>>>=0,m>>>=0;var y=0;return Gt().forEach(function(x,E){var G=m+y;for(E=Y[l+4*E>>2>>>0]=G,G=0;G<x.length;++G)j[E++>>0>>>0]=x.charCodeAt(G);j[E>>0>>>0]=0,y+=x.length+1}),0},G:function(l,m){l>>>=0,m>>>=0;var y=Gt();Y[l>>2>>>0]=y.length;var x=0;return y.forEach(function(E){x+=E.length+1}),Y[m>>2>>>0]=x,0},g:()=>52,k:function(){return 52},t:function(){return 70},h:function(l,m,y,x){m>>>=0,y>>>=0,x>>>=0;for(var E=0,G=0;G<y;G++){var H=Y[m>>2>>>0],ue=Y[m+4>>2>>>0];m+=8;for(var X=0;X<ue;X++){var ne=Z[H+X>>>0],J=hr[l];ne===0||ne===10?((l===1?A:I)(Ut(J,0)),J.length=0):J.push(ne)}E+=ue}return Y[x>>2>>>0]=E,0},D:se,c:function(l,m,y,x){return se(l>>>0,m>>>0,y>>>0,x>>>0)}};(function(){function l(y){if(y=y.exports,y=gr(y),O=y=bt(y),B=O.M,we(),le.unshift(O.N),he--,r.monitorRunDependencies&&r.monitorRunDependencies(he),he==0&&(Fe!==null&&(clearInterval(Fe),Fe=null),Re)){var x=Re;Re=null,x()}return y}var m={a:Ir};if(he++,r.monitorRunDependencies&&r.monitorRunDependencies(he),r.instantiateWasm)try{return r.instantiateWasm(m,l)}catch(y){I("Module.instantiateWasm callback failed with error: "+y),n(y)}return We(m,function(y){l(y.instance)}).catch(n),{}})(),r._OrtInit=(l,m)=>(r._OrtInit=O.O)(l,m),r._OrtGetLastError=(l,m)=>(r._OrtGetLastError=O.P)(l,m),r._OrtCreateSessionOptions=(l,m,y,x,E,G,H,ue,X,ne)=>(r._OrtCreateSessionOptions=O.Q)(l,m,y,x,E,G,H,ue,X,ne),r._OrtAppendExecutionProvider=(l,m)=>(r._OrtAppendExecutionProvider=O.R)(l,m),r._OrtAddFreeDimensionOverride=(l,m,y)=>(r._OrtAddFreeDimensionOverride=O.S)(l,m,y),r._OrtAddSessionConfigEntry=(l,m,y)=>(r._OrtAddSessionConfigEntry=O.T)(l,m,y),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=O.U)(l),r._OrtCreateSession=(l,m,y)=>(r._OrtCreateSession=O.V)(l,m,y),r._OrtReleaseSession=l=>(r._OrtReleaseSession=O.W)(l),r._OrtGetInputOutputCount=(l,m,y)=>(r._OrtGetInputOutputCount=O.X)(l,m,y),r._OrtGetInputName=(l,m)=>(r._OrtGetInputName=O.Y)(l,m),r._OrtGetOutputName=(l,m)=>(r._OrtGetOutputName=O.Z)(l,m),r._OrtFree=l=>(r._OrtFree=O._)(l),r._OrtCreateTensor=(l,m,y,x,E,G)=>(r._OrtCreateTensor=O.$)(l,m,y,x,E,G),r._OrtGetTensorData=(l,m,y,x,E)=>(r._OrtGetTensorData=O.aa)(l,m,y,x,E),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=O.ba)(l),r._OrtCreateRunOptions=(l,m,y,x)=>(r._OrtCreateRunOptions=O.ca)(l,m,y,x),r._OrtAddRunConfigEntry=(l,m,y)=>(r._OrtAddRunConfigEntry=O.da)(l,m,y),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=O.ea)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=O.fa)(l),r._OrtBindInput=(l,m,y)=>(r._OrtBindInput=O.ga)(l,m,y),r._OrtBindOutput=(l,m,y,x)=>(r._OrtBindOutput=O.ha)(l,m,y,x),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=O.ia)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=O.ja)(l),r._OrtRunWithBinding=(l,m,y,x,E)=>(r._OrtRunWithBinding=O.ka)(l,m,y,x,E),r._OrtRun=(l,m,y,x,E,G,H,ue)=>(r._OrtRun=O.la)(l,m,y,x,E,G,H,ue),r._OrtEndProfiling=l=>(r._OrtEndProfiling=O.ma)(l),r._JsepOutput=(l,m,y)=>(r._JsepOutput=O.na)(l,m,y),r._JsepGetNodeName=l=>(r._JsepGetNodeName=O.oa)(l);var Mt=r._malloc=l=>(Mt=r._malloc=O.pa)(l),Kt=r._free=l=>(Kt=r._free=O.qa)(l),Yt=l=>(Yt=O.sa)(l),Zt=()=>(Zt=O.ta)(),Xt=l=>(Xt=O.ua)(l),Qt=l=>(Qt=O.va)(l),Jt=l=>(Jt=O.xa)(l),er=()=>(er=O.ya)(),Dt=l=>(Dt=O.za)(l),At=()=>(At=O.Aa)();r.___start_em_js=1436833,r.___stop_em_js=1436994;function bt(l){l=Object.assign({},l);var m=x=>()=>x()>>>0,y=x=>E=>x(E)>>>0;return l.__errno_location=m(l.__errno_location),l.malloc=y(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=y(l.stackAlloc),l}r.stackAlloc=Qt,r.stackSave=Zt,r.stackRestore=Xt,r.UTF8ToString=De,r.stringToUTF8=(l,m,y)=>Ht(l,Z,m,y),r.lengthBytesUTF8=Ot;var _t;Re=function l(){_t||tr(),_t||(Re=l)};function tr(){function l(){if(!_t&&(_t=!0,r.calledRun=!0,!W)){if(St(le),o(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();pe.unshift(m)}St(pe)}}if(!(0<he)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)ye();St(F),0<he||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return tr(),t.ready}})();typeof go=="object"&&typeof hn=="object"?hn.exports=ho:typeof define=="function"&&define.amd&&define([],()=>ho)});var bo=nr(()=>{});var wo=nr(()=>{});var vo={};Or(vo,{cpus:()=>Hu});var Hu,$o=q(()=>{Hu=void 0});var Io=nr((xo,gn)=>{"use strict";var So=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return we.buffer!=he.buffer&&be(),he}function o(){return we.buffer!=he.buffer&&be(),Fe}function n(){return we.buffer!=he.buffer&&be(),Re}function s(){return we.buffer!=he.buffer&&be(),Ve}function u(){return we.buffer!=he.buffer&&be(),L}function d(){return we.buffer!=he.buffer&&be(),de}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.jsepInit=(i,c,f,S,T,D,U,oe)=>{a.Qb=i,a.wb=c,a.yb=f,a.jb=S,a.xb=T,a.Ea=D,a.zb=U,a.Ab=oe,c=(ee,re,ie)=>(...xe)=>{let Ae=at,P=re?.();xe=ee(...xe);let ce=re?.();return P!==ce&&(ee=ce,ie(P),re=ie=null),at!=Ae?Tu():xe},f=ee=>async(...re)=>{try{if(a.bb)throw Error("Session already started");let ie=a.bb={Fb:re[0],errors:[]},xe=await ee(...re);if(a.bb!==ie)throw Error("Session mismatch");i.flush();let Ae=ie.errors;if(0<Ae.length){let P=await Promise.all(Ae);if(P=P.filter(ce=>ce),0<P.length)throw Error(P.join(`\n`))}return xe}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,ee=>a._OrtRun=ee)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,ee=>a._OrtRunWithBinding=ee)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,ee=>a._OrtBindInput=ee),a.jsepRegisterBuffer=(ee,re,ie,xe)=>i.registerBuffer(ee,re,ie,xe),a.jsepUnregisterBuffers=ee=>{i.unregisterBuffers(ee)},a.jsepGetBuffer=ee=>i.getBuffer(ee),a.jsepCreateDownloader=(ee,re,ie)=>i.createDownloader(ee,re,ie)};var v=Object.assign({},a),g="./this.program",w=(i,c)=>{throw c},b=typeof window=="object",$=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=a.ENVIRONMENT_IS_PTHREAD||!1,I="";function M(i){return a.locateFile?a.locateFile(i,I):I+i}var _,B,O;if(C){var W=(pn(),zt(cn)),z=(fn(),zt(mn));I=$?z.dirname(I)+"/":__dirname+"/",_=(c,f)=>(c=c.startsWith("file://")?new URL(c):z.normalize(c),W.readFileSync(c,f?void 0:"utf8")),O=c=>(c=_(c,!0),c.buffer||(c=new Uint8Array(c)),c),B=(c,f,S,T=!0)=>{c=c.startsWith("file://")?new URL(c):z.normalize(c),W.readFile(c,T?void 0:"utf8",(D,U)=>{D?S(D):f(T?U.buffer:U)})},!a.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),w=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=bo()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(b||$)&&($?I=self.location.href:typeof document<"u"&&document.currentScript&&(I=document.currentScript.src),typeof e<"u"&&e&&(I=e),I.indexOf("blob:")!==0?I=I.substr(0,I.replace(/[?#].*/,"").lastIndexOf("/")+1):I="",C||(_=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},$&&(O=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),B=(i,c,f)=>{var S=new XMLHttpRequest;S.open("GET",i,!0),S.responseType="arraybuffer",S.onload=()=>{S.status==200||S.status==0&&S.response?c(S.response):f()},S.onerror=f,S.send(null)}));C&&typeof performance>"u"&&(global.performance=wo().performance);var j=console.log.bind(console),Z=console.error.bind(console);C&&(j=(...i)=>W.writeSync(1,i.join(" ")+`\n`),Z=(...i)=>W.writeSync(2,i.join(" ")+`\n`));var R=a.print||j,Y=a.printErr||Z;Object.assign(a,v),v=null,a.thisProgram&&(g=a.thisProgram),a.quit&&(w=a.quit);var fe;a.wasmBinary&&(fe=a.wasmBinary);var Q=a.noExitRuntime||!0;typeof WebAssembly!="object"&&Qe("no native wasm support detected");var we,F,le,pe=!1,ye,he,Fe,Re,Ve,L,de;function be(){var i=we.buffer;a.HEAP8=he=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAP32=Re=new Int32Array(i),a.HEAPU8=Fe=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAPU32=Ve=new Uint32Array(i),a.HEAPF32=L=new Float32Array(i),a.HEAPF64=de=new Float64Array(i)}var He=a.INITIAL_MEMORY||16777216;if(5242880<=He||Qe("INITIAL_MEMORY should be larger than STACK_SIZE, was "+He+"! (STACK_SIZE=5242880)"),A)we=a.wasmMemory;else if(a.wasmMemory)we=a.wasmMemory;else if(we=new WebAssembly.Memory({initial:He/65536,maximum:65536,shared:!0}),!(we.buffer instanceof SharedArrayBuffer))throw Y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&Y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");be(),He=we.buffer.byteLength;var qe=[],Be=[],We=[],je=0;function nt(){return Q||0<je}var Ye=0,St=null,xt=null;function Nt(){Ye++,a.monitorRunDependencies&&a.monitorRunDependencies(Ye)}function mr(){if(Ye--,a.monitorRunDependencies&&a.monitorRunDependencies(Ye),Ye==0&&(St!==null&&(clearInterval(St),St=null),xt)){var i=xt;xt=null,i()}}function Qe(i){throw a.onAbort&&a.onAbort(i),i="Aborted("+i+")",Y(i),pe=!0,ye=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}function Ut(i){return i.startsWith("data:application/octet-stream;base64,")}var De;De="ort-wasm-simd-threaded.wasm",Ut(De)||(De=M(De));function Ot(i){if(i==De&&fe)return new Uint8Array(fe);if(O)return O(i);throw"both async and sync fetching of the wasm failed"}function Ht(i){if(!fe&&(b||$)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>Ot(i));if(B)return new Promise((c,f)=>{B(i,S=>c(new Uint8Array(S)),f)})}return Promise.resolve().then(()=>Ot(i))}function mt(i,c,f){return Ht(i).then(S=>WebAssembly.instantiate(S,c)).then(S=>S).then(f,S=>{Y("failed to asynchronously prepare wasm: "+S),Qe(S)})}function fr(i,c){var f=De;return fe||typeof WebAssembly.instantiateStreaming!="function"||Ut(f)||f.startsWith("file://")||C||typeof fetch!="function"?mt(f,i,c):fetch(f,{credentials:"same-origin"}).then(S=>WebAssembly.instantiateStreaming(S,i).then(c,function(T){return Y("wasm streaming compile failed: "+T),Y("falling back to ArrayBuffer instantiation"),mt(f,i,c)}))}var ft,kt={913548:i=>{a.Ea("Abs",i,void 0)},913599:i=>{a.Ea("Neg",i,void 0)},913650:i=>{a.Ea("Floor",i,void 0)},913703:i=>{a.Ea("Ceil",i,void 0)},913755:i=>{a.Ea("Reciprocal",i,void 0)},913813:i=>{a.Ea("Sqrt",i,void 0)},913865:i=>{a.Ea("Exp",i,void 0)},913916:i=>{a.Ea("Erf",i,void 0)},913967:i=>{a.Ea("Sigmoid",i,void 0)},914022:i=>{a.Ea("Log",i,void 0)},914073:i=>{a.Ea("Sin",i,void 0)},914124:i=>{a.Ea("Cos",i,void 0)},914175:i=>{a.Ea("Tan",i,void 0)},914226:i=>{a.Ea("Asin",i,void 0)},914278:i=>{a.Ea("Acos",i,void 0)},914330:i=>{a.Ea("Atan",i,void 0)},914382:i=>{a.Ea("Sinh",i,void 0)},914434:i=>{a.Ea("Cosh",i,void 0)},914486:i=>{a.Ea("Asinh",i,void 0)},914539:i=>{a.Ea("Acosh",i,void 0)},914592:i=>{a.Ea("Atanh",i,void 0)},914645:i=>{a.Ea("Tanh",i,void 0)},914697:i=>{a.Ea("Not",i,void 0)},914748:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},914817:i=>{a.Ea("Clip",i,void 0)},914869:(i,c)=>{a.Ea("Elu",i,{alpha:c})},914927:i=>{a.Ea("Relu",i,void 0)},914979:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},915043:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},915113:(i,c)=>{a.Ea("Cast",i,{to:c})},915171:i=>{a.Ea("Add",i,void 0)},915222:i=>{a.Ea("Sub",i,void 0)},915273:i=>{a.Ea("Mul",i,void 0)},915324:i=>{a.Ea("Div",i,void 0)},915375:i=>{a.Ea("Pow",i,void 0)},915426:i=>{a.Ea("Equal",i,void 0)},915479:i=>{a.Ea("Greater",i,void 0)},915534:i=>{a.Ea("GreaterOrEqual",i,void 0)},915596:i=>{a.Ea("Less",i,void 0)},915648:i=>{a.Ea("LessOrEqual",i,void 0)},915707:(i,c,f,S,T)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},915871:(i,c,f,S,T)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},916034:(i,c,f,S,T)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},916197:(i,c,f,S,T)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},916361:(i,c,f,S,T)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},916524:(i,c,f,S,T)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},916686:(i,c,f,S,T)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},916848:(i,c,f,S,T)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},917014:(i,c,f,S,T)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},917183:(i,c,f,S,T)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},917352:i=>{a.Ea("Where",i,void 0)},917405:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},917518:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce)=>{a.Ea("ConvTranspose",i,{format:ee?"NHWC":"NCHW",autoPad:c,dilations:[f],group:S,kernel_shape:[T],pads:[D,U],strides:[oe],wIsConst:()=>!!r()[re>>>0],outputPadding:ie?Array.from(n().subarray(xe>>>0,xe+ie>>>0)):[],outputShape:Ae?Array.from(n().subarray(P>>>0,P+Ae>>>0)):[],activation:Ge(ce)})},917932:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P)=>{a.Ea("ConvTranspose",i,{format:oe?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:S,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(ie>>>0,ie+re>>>0)):[],outputShape:0<xe?Array.from(n().subarray(Ae>>>0,Ae+xe>>>0)):[],activation:Ge(P)})},918489:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce)=>{a.Ea("ConvTranspose",i,{format:ee?"NHWC":"NCHW",autoPad:c,dilations:[f],group:S,kernel_shape:[T],pads:[D,U],strides:[oe],wIsConst:()=>!!r()[re>>>0],outputPadding:ie?Array.from(n().subarray(xe>>>0,xe+ie>>>0)):[],outputShape:Ae?Array.from(n().subarray(P>>>0,P+Ae>>>0)):[],activation:Ge(ce)})},918903:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P)=>{a.Ea("ConvTranspose",i,{format:oe?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:S,kernelShape:Array.from(n().subarray(T>>>0,T+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(U>>>0,U+2>>>0)),wIsConst:()=>!!r()[ee>>>0],outputPadding:0<re?Array.from(n().subarray(ie>>>0,ie+re>>>0)):[],outputShape:0<xe?Array.from(n().subarray(Ae>>>0,Ae+xe>>>0)):[],activation:Ge(P)})},919460:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},919551:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce,Ce)=>{a.Ea("AveragePool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[D,U],kernel_shape:[oe,ee],pads:[re,ie,xe,Ae],strides:[P,ce]})},919835:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},919926:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce,Ce)=>{a.Ea("AveragePool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[D,U],kernel_shape:[oe,ee],pads:[re,ie,xe,Ae],strides:[P,ce]})},920210:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},920297:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce,Ce)=>{a.Ea("MaxPool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[D,U],kernel_shape:[oe,ee],pads:[re,ie,xe,Ae],strides:[P,ce]})},920577:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},920664:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce,Ce)=>{a.Ea("MaxPool",i,{format:Ce?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:S,storage_order:T,dilations:[D,U],kernel_shape:[oe,ee],pads:[re,ie,xe,Ae],strides:[P,ce]})},920944:(i,c,f,S,T)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:S,transB:T})},921048:i=>{a.Ea("MatMul",i,void 0)},921102:(i,c,f,S)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:S})},921210:(i,c,f,S)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:S})},921318:(i,c)=>{a.Ea("Softmax",i,{axis:c})},921381:(i,c)=>{a.Ea("Concat",i,{axis:c})},921441:(i,c,f,S,T)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},921586:i=>{a.Ea("Expand",i,void 0)},921640:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},921711:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},921790:(i,c,f,S,T,D,U,oe,ee,re,ie)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray(S>>>0,S+f>>>0)):[],coordinateTransformMode:Ge(T),cubicCoeffA:D,excludeOutside:U,extrapolationValue:oe,keepAspectRatioPolicy:Ge(ee),mode:Ge(re),nearestMode:Ge(ie)})},922141:(i,c,f,S,T,D,U)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[],axes:D?Array.from(n().subarray(U>>>0,U+D>>>0)):[]})},922372:i=>{a.Ea("Tile",i,void 0)},922424:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},922531:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},922645:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},922759:i=>{a.Ea("Range",i,void 0)},922812:(i,c)=>{a.Ea("Einsum",i,{equation:Ge(c)})},922893:(i,c,f,S,T)=>{a.Ea("Pad",i,{mode:c,value:f,pads:S?Array.from(n().subarray(T>>>0,T+S>>>0)):[]})},923025:(i,c,f,S,T,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!S,format:D?"NHWC":"NCHW"})},923194:(i,c,f,S,T,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!T,trainingMode:!!S,format:D?"NHWC":"NCHW"})},923363:(i,c,f,S,T,D,U,oe,ee)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:S,scale:T,doRotary:D,qkvHiddenSizes:U?Array.from(n().subarray(Number(oe)>>>0,Number(oe)+U>>>0)):[],pastPresentShareBuffer:!!ee})},923635:i=>{a.Ea("Gelu",i,void 0)},923687:(i,c,f,S,T,D)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:S,scale:T,doRotary:D})},923846:i=>{a.Ea("BiasAdd",i,void 0)},923901:i=>{a.Ea("BiasSplitGelu",i,void 0)},923962:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},924043:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae)=>{a.Ea("Conv",i,{format:ee?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:S,kernel_shape:[T],pads:D?Array.from(n().subarray(U>>>0,U+D>>>0)):[],strides:[oe],w_is_const:()=>!!r()[re>>>0],activation:Ge(ie),activation_params:xe?Array.from(u().subarray(Ae>>>0,Ae+xe>>>0)):[]})},924424:(i,c,f,S,T,D,U,oe,ee,re,ie,xe,Ae,P,ce,Ce)=>{a.Ea("Conv",i,{format:xe?"NHWC":"NCHW",auto_pad:c,dilations:[f,S],group:T,kernel_shape:[D,U],pads:oe?Array.from(n().subarray(ee>>>0,ee+oe>>>0)):[],strides:[re,ie],w_is_const:()=>!!r()[Ae>>>0],activation:Ge(P),activation_params:ce?Array.from(u().subarray(Ce>>>0,Ce+ce>>>0)):[]})},924826:i=>{a.zb(i)},924860:(i,c)=>a.Ab(i,c,a.bb.Fb,a.bb.errors),924972:i=>a.wb(i),925005:i=>a.yb(i),925037:(i,c,f)=>{a.jb(i,c,f,!0)},925076:(i,c,f)=>{a.jb(i,c,f)}};function yt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Pt(i){i.terminate(),i.onmessage=()=>{}}function Rt(i){(i=se.Qa[i])||Qe(),se.Eb(i)}function Gt(i){var c=se.tb();if(!c)return 6;se.Ya.push(c),se.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.rb,pthread_ptr:i.Xa};return C&&c.unref(),c.postMessage(f,i.Mb),0}var Bt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,hr=(i,c,f)=>{c>>>=0;var S=c+f;for(f=c;i[f]&&!(f>=S);)++f;if(16<f-c&&i.buffer&&Bt)return Bt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for(S="";c<f;){var T=i[c++];if(T&128){var D=i[c++]&63;if((T&224)==192)S+=String.fromCharCode((T&31)<<6|D);else{var U=i[c++]&63;T=(T&240)==224?(T&15)<<12|D<<6|U:(T&7)<<18|D<<12|U<<6|i[c++]&63,65536>T?S+=String.fromCharCode(T):(T-=65536,S+=String.fromCharCode(55296|T>>10,56320|T&1023))}}else S+=String.fromCharCode(T)}return S},Ge=(i,c)=>(i>>>=0)?hr(o(),i,c):"";function Lt(i){if(A)return H(1,1,i);ye=i,nt()||(se.Hb(),a.onExit&&a.onExit(i),pe=!0),w(i,new yt(i))}var Ft=i=>{if(ye=i,A)throw gr(i),"unwind";Lt(i)},se={ab:[],Ya:[],mb:[],Qa:{},gb:function(){A?se.vb():se.ub()},ub:function(){qe.unshift(()=>{Nt(),se.Bb(()=>mr())})},vb:function(){se.receiveObjectTransfer=se.Db,se.threadInitTLS=se.lb,se.setExitStatus=se.kb,Q=!1},kb:function(i){ye=i},Sb:["$terminateWorker"],Hb:function(){for(var i of se.Ya)Pt(i);for(i of se.ab)Pt(i);se.ab=[],se.Ya=[],se.Qa=[]},Eb:function(i){var c=i.Xa;delete se.Qa[c],se.ab.push(i),se.Ya.splice(se.Ya.indexOf(i),1),i.Xa=0,an(c)},Db:function(){},lb:function(){se.mb.forEach(i=>i())},Cb:i=>new Promise(c=>{i.onmessage=D=>{D=D.data;var U=D.cmd;if(D.targetThread&&D.targetThread!=_r()){var oe=se.Qa[D.Rb];oe?oe.postMessage(D,D.transferList):Y(\'Internal error! Worker sent a message "\'+U+\'" to target pthread \'+D.targetThread+", but that thread no longer exists!")}else U==="checkMailbox"?At():U==="spawnThread"?Gt(D):U==="cleanupThread"?Rt(D.thread):U==="killThread"?(D=D.thread,U=se.Qa[D],delete se.Qa[D],Pt(U),an(D),se.Ya.splice(se.Ya.indexOf(U),1),U.Xa=0):U==="cancelThread"?se.Qa[D.thread].postMessage({cmd:"cancel"}):U==="loaded"?(i.loaded=!0,c(i)):U==="alert"?alert("Thread "+D.threadId+": "+D.text):D.target==="setimmediate"?i.postMessage(D):U==="callHandler"?a[D.handler](...D.args):U&&Y("worker sent an unknown command "+U)},i.onerror=D=>{throw Y("worker sent an error! "+D.filename+":"+D.lineno+": "+D.message),D},C&&(i.on("message",function(D){i.onmessage({data:D})}),i.on("error",function(D){i.onerror(D)}));var f=[],S=["onExit","onAbort","print","printErr"],T;for(T of S)a.hasOwnProperty(T)&&f.push(T);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:we,wasmModule:le})}),Bb:function(i){i()},qb:function(){var i=M("ort-wasm-simd-threaded.worker.js");i=new Worker(i),se.ab.push(i)},tb:function(){return se.ab.length==0&&(se.qb(),se.Cb(se.ab[0])),se.ab.pop()}};a.PThread=se;var ht=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=function(){var i=_r(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],io(c,c-i),Tr(c)};function gr(i){if(A)return H(2,0,i);Ft(i)}a.invokeEntryPoint=function(i,c){i=so.apply(null,[i,c]),nt()?se.kb(i):sn(i)};function ot(i){this.fb=i-24,this.pb=function(c){s()[this.fb+4>>2>>>0]=c},this.ob=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.nb(),this.pb(c),this.ob(f)},this.nb=function(){s()[this.fb+16>>2>>>0]=0}}var Ze=0,yr=0;function It(i,c,f,S){return A?H(3,1,i,c,f,S):jt(i,c,f,S)}function jt(i,c,f,S){if(i>>>=0,c>>>=0,f>>>=0,S>>>=0,typeof SharedArrayBuffer>"u")return Y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var T=[];return A&&T.length===0?It(i,c,f,S):(i={Gb:f,Xa:i,rb:S,Mb:T},A?(i.Ob="spawnThread",postMessage(i,T),0):Gt(i))}function qt(i,c,f){return A?H(4,1,i,c,f):0}function br(i,c){if(A)return H(5,1,i,c)}var Ct=i=>{for(var c=0,f=0;f<i.length;++f){var S=i.charCodeAt(f);127>=S?c++:2047>=S?c+=2:55296<=S&&57343>=S?(c+=4,++f):c+=3}return c},wr=(i,c,f,S)=>{if(f>>>=0,!(0<S))return 0;var T=f;S=f+S-1;for(var D=0;D<i.length;++D){var U=i.charCodeAt(D);if(55296<=U&&57343>=U){var oe=i.charCodeAt(++D);U=65536+((U&1023)<<10)|oe&1023}if(127>=U){if(f>=S)break;c[f++>>>0]=U}else{if(2047>=U){if(f+1>=S)break;c[f++>>>0]=192|U>>6}else{if(65535>=U){if(f+2>=S)break;c[f++>>>0]=224|U>>12}else{if(f+3>=S)break;c[f++>>>0]=240|U>>18,c[f++>>>0]=128|U>>12&63}c[f++>>>0]=128|U>>6&63}c[f++>>>0]=128|U&63}}return c[f>>>0]=0,f-T},vr=(i,c,f)=>wr(i,o(),c,f);function $r(i,c){if(A)return H(6,1,i,c)}function Sr(i,c,f){if(A)return H(7,1,i,c,f)}function xr(i,c,f){return A?H(8,1,i,c,f):0}function Ir(i,c){if(A)return H(9,1,i,c)}function Mt(i,c,f){if(A)return H(10,1,i,c,f)}function Kt(i,c,f,S){if(A)return H(11,1,i,c,f,S)}function Yt(i,c,f,S){if(A)return H(12,1,i,c,f,S)}function Zt(i,c,f,S){if(A)return H(13,1,i,c,f,S)}function Xt(i){if(A)return H(14,1,i)}function Qt(i,c){if(A)return H(15,1,i,c)}function Jt(i,c,f){if(A)return H(16,1,i,c,f)}var er=i=>{if(!pe)try{if(i(),!nt())try{A?sn(ye):Ft(ye)}catch(c){c instanceof yt||c=="unwind"||w(1,c)}}catch(c){c instanceof yt||c=="unwind"||w(1,c)}};function Dt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(At),i+=128,Atomics.store(n(),i>>2,1))}a.__emscripten_thread_mailbox_await=Dt;function At(){var i=_r();i&&(Dt(i),er(()=>oo()))}a.checkMailbox=At;var bt=i=>i%4===0&&(i%100!==0||i%400===0),_t=[0,31,60,91,121,152,182,213,244,274,305,335],tr=[0,31,59,90,120,151,181,212,243,273,304,334];function l(i,c,f,S,T,D,U,oe){return A?H(17,1,i,c,f,S,T,D,U,oe):-52}function m(i,c,f,S,T,D,U){if(A)return H(18,1,i,c,f,S,T,D,U)}var y=i=>{var c=Ct(i)+1,f=on(c);return f&&vr(i,f,c),f},x=[],E=(i,c)=>{x.length=0;var f;for(c>>=2;f=o()[i++>>>0];)c+=f!=105&c,x.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return x},G=i=>{var c=un();return i=i(),Tr(c),i};function H(i,c){var f=arguments.length-2,S=arguments;return G(()=>{for(var T=ln(8*f),D=T>>3,U=0;U<f;U++){var oe=S[2+U];d()[D+U>>>0]=oe}return no(i,f,T,c)})}var ue=[],X={},ne=()=>{if(!J){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:g||"./this.program"},c;for(c in X)X[c]===void 0?delete i[c]:i[c]=X[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);J=f}return J},J;function ge(i,c){if(A)return H(19,1,i,c);i>>>=0,c>>>=0;var f=0;return ne().forEach(function(S,T){var D=c+f;for(T=s()[i+4*T>>2>>>0]=D,D=0;D<S.length;++D)r()[T++>>0>>>0]=S.charCodeAt(D);r()[T>>0>>>0]=0,f+=S.length+1}),0}function Se(i,c){if(A)return H(20,1,i,c);i>>>=0,c>>>=0;var f=ne();s()[i>>2>>>0]=f.length;var S=0;return f.forEach(function(T){S+=T.length+1}),s()[c>>2>>>0]=S,0}function k(i){return A?H(21,1,i):52}function ae(i,c,f,S){return A?H(22,1,i,c,f,S):52}function ve(i,c,f,S,T){return A?H(23,1,i,c,f,S,T):70}var gt=[null,[],[]];function rr(i,c,f,S){if(A)return H(24,1,i,c,f,S);c>>>=0,f>>>=0,S>>>=0;for(var T=0,D=0;D<f;D++){var U=s()[c>>2>>>0],oe=s()[c+4>>2>>>0];c+=8;for(var ee=0;ee<oe;ee++){var re=o()[U+ee>>>0],ie=gt[i];re===0||re===10?((i===1?R:Y)(hr(ie,0)),ie.length=0):ie.push(re)}T+=oe}return s()[S>>2>>>0]=T,0}var Yn=[31,29,31,30,31,30,31,31,30,31,30,31],Zn=[31,28,31,30,31,30,31,31,30,31,30,31];function xu(i){var c=Array(Ct(i)+1);return wr(i,c,0,c.length),c}var Iu=(i,c)=>{r().set(i,c>>>0)};function Xn(i,c,f,S){function T(P,ce,Ce){for(P=typeof P=="number"?P.toString():P||"";P.length<ce;)P=Ce[0]+P;return P}function D(P,ce){return T(P,ce,"0")}function U(P,ce){function Ce(fo){return 0>fo?-1:0<fo?1:0}var Tt;return(Tt=Ce(P.getFullYear()-ce.getFullYear()))===0&&(Tt=Ce(P.getMonth()-ce.getMonth()))===0&&(Tt=Ce(P.getDate()-ce.getDate())),Tt}function oe(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function ee(P){var ce=P.Za;for(P=new Date(new Date(P.$a+1900,0,1).getTime());0<ce;){var Ce=P.getMonth(),Tt=(bt(P.getFullYear())?Yn:Zn)[Ce];if(ce>Tt-P.getDate())ce-=Tt-P.getDate()+1,P.setDate(1),11>Ce?P.setMonth(Ce+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+ce);break}}return Ce=new Date(P.getFullYear()+1,0,4),ce=oe(new Date(P.getFullYear(),0,4)),Ce=oe(Ce),0>=U(ce,P)?0>=U(Ce,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,S>>>=0;var re=n()[S+40>>2>>>0];S={Kb:n()[S>>2>>>0],Jb:n()[S+4>>2>>>0],cb:n()[S+8>>2>>>0],ib:n()[S+12>>2>>>0],eb:n()[S+16>>2>>>0],$a:n()[S+20>>2>>>0],Wa:n()[S+24>>2>>>0],Za:n()[S+28>>2>>>0],Tb:n()[S+32>>2>>>0],Ib:n()[S+36>>2>>>0],Lb:re?Ge(re):""},f=Ge(f),re={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ie in re)f=f.replace(new RegExp(ie,"g"),re[ie]);var xe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ae="January February March April May June July August September October November December".split(" ");re={"%a":P=>xe[P.Wa].substring(0,3),"%A":P=>xe[P.Wa],"%b":P=>Ae[P.eb].substring(0,3),"%B":P=>Ae[P.eb],"%C":P=>D((P.$a+1900)/100|0,2),"%d":P=>D(P.ib,2),"%e":P=>T(P.ib,2," "),"%g":P=>ee(P).toString().substring(2),"%G":P=>ee(P),"%H":P=>D(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),D(P,2)),"%j":P=>{for(var ce=0,Ce=0;Ce<=P.eb-1;ce+=(bt(P.$a+1900)?Yn:Zn)[Ce++]);return D(P.ib+ce,3)},"%m":P=>D(P.eb+1,2),"%M":P=>D(P.Jb,2),"%n":()=>`\n`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>D(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>D(Math.floor((P.Za+7-P.Wa)/7),2),"%V":P=>{var ce=Math.floor((P.Za+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.Za-2)%7&&ce++,ce)ce==53&&(Ce=(P.Wa+371-P.Za)%7,Ce==4||Ce==3&&bt(P.$a)||(ce=1));else{ce=52;var Ce=(P.Wa+7-P.Za-1)%7;(Ce==4||Ce==5&&bt(P.$a%400-1))&&ce++}return D(ce,2)},"%w":P=>P.Wa,"%W":P=>D(Math.floor((P.Za+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.$a+1900).toString().substring(2),"%Y":P=>P.$a+1900,"%z":P=>{P=P.Ib;var ce=0<=P;return P=Math.abs(P)/60,(ce?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(ie in re)f.includes(ie)&&(f=f.replace(new RegExp(ie,"g"),re[ie](S)));return f=f.replace(/\\0\\0/g,"%"),ie=xu(f),ie.length>c?0:(Iu(ie,i),ie.length-1)}function Cr(i){try{i()}catch(c){Qe(c)}}function Cu(i){var c={},f;for(f in i)(function(S){var T=i[S];c[S]=typeof T=="function"?function(){Ar.push(S);try{return T.apply(null,arguments)}finally{pe||(Ar.pop()===S||Qe(),at&&wt===1&&Ar.length===0&&(wt=0,je+=1,Cr(lo),typeof Fibers<"u"&&Fibers.Ub()))}}:T})(f);return c}var wt=0,at=null,Qn=0,Ar=[],Jn={},eo={},Au=0,nn=null,_u=[];function Tu(){return new Promise((i,c)=>{nn={resolve:i,reject:c}})}function Eu(){var i=on(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=Ar[0];var f=Jn[c];return f===void 0&&(f=Au++,Jn[c]=f,eo[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function Ou(){var i=n()[at+8>>2>>>0];return i=F[eo[i]],--je,i()}function ku(i){if(!pe){if(wt===0){var c=!1,f=!1;i((S=0)=>{if(!pe&&(Qn=S,c=!0,f)){wt=2,Cr(()=>co(at)),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.resume(),S=!1;try{var T=Ou()}catch(oe){T=oe,S=!0}var D=!1;if(!at){var U=nn;U&&(nn=null,(S?U.reject:U.resolve)(T),D=!0)}if(S&&!D)throw T}}),f=!0,c||(wt=1,at=Eu(),typeof Browser<"u"&&Browser.hb.sb&&Browser.hb.pause(),Cr(()=>uo(at)))}else wt===2?(wt=0,Cr(po),to(at),at=null,_u.forEach(S=>er(S))):Qe(`invalid state: ${wt}`);return Qn}}function Pu(i){return ku(c=>{i().then(c)})}se.gb();var Ru=[null,Lt,gr,It,qt,br,$r,Sr,xr,Ir,Mt,Kt,Yt,Zt,Xt,Qt,Jt,l,m,ge,Se,k,ae,ve,rr],Bu={r:function(i,c,f){return Pu(async()=>{await a.xb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new ot(i).gb(c>>>0,f>>>0),Ze=i,yr++,Ze},O:function(i){ro(i>>>0,!$,1,!b,131072,!1),se.lb()},l:function(i){i>>>=0,A?postMessage({cmd:"cleanupThread",thread:i}):Rt(i)},I:jt,i:qt,U:br,E:$r,G:Sr,V:xr,S:Ir,K:Mt,R:Kt,p:Yt,F:Zt,C:Xt,T:Qt,D:Jt,q:()=>!0,A:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>At()):A?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=se.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:Dt,X:function(i){C&&se.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(bt(i.getFullYear())?_t:tr)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var S=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=S&&i.getTimezoneOffset()==Math.min(S,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],S=c.getTimezoneOffset(),T=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(D,T);return 0>f?n()[i+32>>2>>>0]=+(T!=D&&U==S):0<f!=(U==S)&&(T=Math.max(D,T),c.setTime(c.getTime()+6e4*((0<f?U:T)-S))),n()[i+24>>2>>>0]=c.getDay(),f=(bt(c.getFullYear())?_t:tr)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,ao((ft=i,1<=+Math.abs(ft)?0<ft?+Math.floor(ft/4294967296)>>>0:~~+Math.ceil((ft-+(~~ft>>>0))/4294967296)>>>0:0)),i>>>0},s:l,t:m,z:function(i,c,f){function S(re){return(re=re.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?re[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var T=new Date().getFullYear(),D=new Date(T,0,1),U=new Date(T,6,1);T=D.getTimezoneOffset();var oe=U.getTimezoneOffset(),ee=Math.max(T,oe);s()[i>>2>>>0]=60*ee,n()[c>>2>>>0]=+(T!=oe),i=S(D),c=S(U),i=y(i),c=y(c),oe<T?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},d:()=>{Qe("")},c:function(i,c,f){return i>>>=0,c=E(c>>>0,f>>>0),kt[i].apply(null,c)},k:function(i,c,f){return i>>>=0,c=E(c>>>0,f>>>0),kt[i].apply(null,c)},m:function(){},j:function(){return Date.now()},W:()=>{throw je+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return C?($o(),zt(vo)).cpus().length:navigator.hardwareConcurrency},L:function(i,c,f,S){for(se.Pb=c>>>0,ue.length=f,c=S>>>0>>3,S=0;S<f;S++)ue[S]=d()[c+S>>>0];return(0>i?kt[-i-1]:Ru[i]).apply(null,ue)},y:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var S=c*(1+.2/f);S=Math.min(S,i+100663296);var T=Math;S=Math.max(i,S);e:{T=T.min.call(T,4294901760,S+(65536-S%65536)%65536)-we.buffer.byteLength+65535>>>16;try{we.grow(T),be();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},P:ge,Q:Se,H:Ft,h:k,o:ae,x:ve,n:rr,a:we||a.wasmMemory,J:Xn,e:function(i,c,f,S){return Xn(i>>>0,c>>>0,f>>>0,S>>>0)}};(function(){function i(f,S){return f=f.exports,f=Cu(f),F=f=Mu(f),se.mb.push(F.Da),Be.unshift(F.Y),le=S,mr(),f}var c={a:Bu};if(Nt(),a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){Y("Module.instantiateWasm callback failed with error: "+f),h(f)}return fr(c,function(f){i(f.instance,f.module)}).catch(h),{}})(),a._OrtInit=(i,c)=>(a._OrtInit=F.Z)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=F._)(i,c),a._OrtCreateSessionOptions=(i,c,f,S,T,D,U,oe,ee,re)=>(a._OrtCreateSessionOptions=F.$)(i,c,f,S,T,D,U,oe,ee,re),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=F.aa)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=F.ba)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=F.ca)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=F.da)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=F.ea)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=F.fa)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=F.ga)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=F.ha)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=F.ia)(i,c),a._OrtFree=i=>(a._OrtFree=F.ja)(i),a._OrtCreateTensor=(i,c,f,S,T,D)=>(a._OrtCreateTensor=F.ka)(i,c,f,S,T,D),a._OrtGetTensorData=(i,c,f,S,T)=>(a._OrtGetTensorData=F.la)(i,c,f,S,T),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=F.ma)(i),a._OrtCreateRunOptions=(i,c,f,S)=>(a._OrtCreateRunOptions=F.na)(i,c,f,S),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=F.oa)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=F.pa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=F.qa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=F.ra)(i,c,f),a._OrtBindOutput=(i,c,f,S)=>(a._OrtBindOutput=F.sa)(i,c,f,S),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=F.ta)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=F.ua)(i),a._OrtRunWithBinding=(i,c,f,S,T)=>(a._OrtRunWithBinding=F.va)(i,c,f,S,T),a._OrtRun=(i,c,f,S,T,D,U,oe)=>(a._OrtRun=F.wa)(i,c,f,S,T,D,U,oe),a._OrtEndProfiling=i=>(a._OrtEndProfiling=F.xa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=F.ya)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=F.za)(i);var _r=a._pthread_self=()=>(_r=a._pthread_self=F.Aa)(),on=a._malloc=i=>(on=a._malloc=F.Ba)(i),to=a._free=i=>(to=a._free=F.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=F.Da)();var ro=a.__emscripten_thread_init=(i,c,f,S,T,D)=>(ro=a.__emscripten_thread_init=F.Fa)(i,c,f,S,T,D);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=F.Ga)();var no=(i,c,f,S)=>(no=F.Ha)(i,c,f,S),an=i=>(an=F.Ia)(i),sn=a.__emscripten_thread_exit=i=>(sn=a.__emscripten_thread_exit=F.Ja)(i),oo=a.__emscripten_check_mailbox=()=>(oo=a.__emscripten_check_mailbox=F.Ka)(),ao=i=>(ao=F.La)(i),io=(i,c)=>(io=F.Ma)(i,c),un=()=>(un=F.Na)(),Tr=i=>(Tr=F.Oa)(i),ln=i=>(ln=F.Pa)(i),so=a.dynCall_ii=(i,c)=>(so=a.dynCall_ii=F.Ra)(i,c),uo=i=>(uo=F.Sa)(i),lo=()=>(lo=F.Ta)(),co=i=>(co=F.Ua)(i),po=()=>(po=F.Va)();a.___start_em_js=925109,a.___stop_em_js=925270;function Mu(i){i=Object.assign({},i);var c=S=>()=>S()>>>0,f=S=>T=>S(T)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}a.keepRuntimeAlive=nt,a.wasmMemory=we,a.stackAlloc=ln,a.stackSave=un,a.stackRestore=Tr,a.UTF8ToString=Ge,a.stringToUTF8=vr,a.lengthBytesUTF8=Ct,a.ExitStatus=yt,a.PThread=se;var Er;xt=function i(){Er||mo(),Er||(xt=i)};function mo(){function i(){if(!Er&&(Er=!0,a.calledRun=!0,!pe)&&(A||ht(Be),p(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!A)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var c=a.postRun.shift();We.unshift(c)}ht(We)}}if(!(0<Ye))if(A)p(a),A||ht(Be),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)qe.unshift(a.preRun.shift());ht(qe),0<Ye||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),i()},1)):i())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return mo(),t.ready}})();typeof xo=="object"&&typeof gn=="object"?gn.exports=So:typeof define=="function"&&define.amd&&define([],()=>So)});var Co=nr((zc,Gu)=>{Gu.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err("worker.js received unknown command "+e.data.cmd),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var wn,ar,ir,Pr,sr,ko,vn,Ne=q(()=>{"use strict";wn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},ar=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},ir=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Pr=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},sr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},ko=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",vn=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Qu,Ju,Po,Ro,Bo,el,ke,vt=q(()=>{"use strict";Ne();Qu=["V","I","W","E","F"],Ju=(e,t)=>{console.log(`[${Qu[e]},${new Date().toISOString()}]${t}`)},Bo=(e,t)=>{Po=e,Ro=t},el=(e,t)=>{let r=sr(e),o=sr(Po);r>=o&&Ju(r,typeof t=="function"?t():t)},ke=(...e)=>{Ro&&el(...e)}});var Mo,Do=q(()=>{"use strict";Ne();Mo=(e,t)=>new(Pr(t))(e)});var Rr=q(()=>{"use strict"});var Br,tl,zo,Sn,$n,Wo,No=q(()=>{"use strict";vt();Rr();Br=e=>Math.ceil(e/16)*16,tl=1,zo=()=>tl++,Sn=async(e,t,r,o)=>{let n=Br(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(d,0,r)),a}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},$n=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Br(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,d.gpuData.buffer,0,u),ke("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Br(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return ke("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=zo();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),ke("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),ke("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Br(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let d={id:zo(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),ke("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return ke("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await Sn(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Wo=(...e)=>new $n(...e)});var xn,te,Pe=q(()=>{"use strict";xn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},te=e=>new xn(e)});var In,it,V,Et,Mr,Dr,zr,Ie=q(()=>{"use strict";In=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},it=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(o){if(n<2||s<2)return;let a=In.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[d[u-2],d[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;d[u-a]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},V=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},Et=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=o.length?o.push(r[d+2]):o[d]=r[d+2];for(let d=0;d<o.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<o.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<o.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<o.length;d++){if(o[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=o[d]||u[d+o.length]>=o[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,d)}}static computePoolOutputShape(t,r,o,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,d),a}static computeConvOutputShape(t,r,o,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,d),a}static computeShapeHelper(t,r,o,n,s,u,d,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,d,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let v=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(v+1)/2:v/2),s[d]=v-s[u],Math.floor((t+v-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},Mr=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,d,a;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==d)throw new Error("dimension mismatch");if(u<=0||a<=0||d<=0)throw new Error("invalid shape specified");if(s&&!it.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,d]}},Dr=-34028234663852886e22,zr=34028234663852886e22});var rl,Uo,_e,me,Ke,Le,Je,et,An,N,K,Ho,Cn,Go,Vt,Ee,$e=q(()=>{"use strict";Ne();Ie();rl=64,Uo=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},_e=(e,t=1)=>{let r=Uo(e,t);return typeof r=="string"?r:r[0]},me=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:V.computeStrides(e)}],Ke=e=>e%4===0?4:e%2===0?2:1,Le=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Je=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,et=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,An=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Uo(t,n),h=typeof p=="string"?p:p[1],v=typeof p=="string"?p:p[0],g={indices:a,value:h,storage:v,tensor:t},w=L=>typeof L=="string"?L:`${L}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},$=s?"uniforms.":"",C=`${$}${e}_shape`,A=`${$}${e}_strides`,I="";for(let L=0;L<u-1;L++)I+=`\n    let dim${L} = current / ${A}[${L}];\n    let rest${L} = current % ${A}[${L}];\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;I+=`indices[${u-1}] = current;`;let M=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${g.indices} {\n    var indices: ${g.indices};\n    var current = offset;\n    ${I}\n    return indices;\n  }`,_=L=>(b.offsetToIndices=!0,u<2?L:`o2i_${e}(${L})`),B=[];if(u>=2)for(let L=u-1;L>=0;L--)B.push(`${A}[${L}] * (indices[${L}])`);let O=u<2?"":`\n  fn i2o_${e}(indices: ${g.indices}) -> u32 {\n    return ${B.join("+")};\n  }`,W=L=>(b.indicesToOffset=!0,u<2?L:`i2o_${e}(${L})`),z=(...L)=>u===0?"0u":`${g.indices}(${L.map(w).join(",")})`,j=(L,de)=>u<2?`${L}`:`${L}[${de}]`,Z=(L,de,be)=>u<2?`${L}=${be};`:`${L}[${de}]=${be};`,R={},Y=(L,de)=>{b.broadcastedIndicesToOffset=!0;let be=`${de.name}broadcastedIndicesTo${e}Offset`;if(be in R)return`${be}(${L})`;let He=[];for(let qe=u-1;qe>=0;qe--){let Be=de.indicesGet("outputIndices",qe+de.rank-u);He.push(`${j(A,qe)} * (${Be} % ${j(C,qe)})`)}return R[be]=`fn ${be}(outputIndices: ${de.type.indices}) -> u32 {\n             return ${He.length>0?He.join("+"):"0u"};\n           }`,`${be}(${L})`},fe=(L,de)=>(()=>{if(g.storage===g.value)return`${e}[${L}]=${de};`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${de}), select(0u, 0xFFFFFFFFu, ${de} < 0));`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${de}), 0u);`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${de}));`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),Q=L=>(()=>{if(g.storage===g.value)return`${e}[${L}]`;if(g.storage==="vec2<u32>"&&g.value==="i32")return`i32(${e}[${L}].x)`;if(g.storage==="vec2<u32>"&&g.value==="u32")return`u32(${e}[${L}].x)`;if(g.storage==="u32"&&g.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${g.storage} and value type ${g.value} yet`)})(),we=u<2?"":`\n  fn get_${e}ByIndices(indices: ${g.indices}) -> ${h} {\n    return ${Q(`i2o_${e}(indices)`)};\n  }`,F=u<2?"":(()=>{let L=d.map(be=>`d${be}: u32`).join(", "),de=d.map(be=>`d${be}`).join(", ");return`\n  fn get_${e}(${L}) -> ${h} {\n    return get_${e}ByIndices(${z(de)});\n  }`})(),le=(...L)=>{if(L.length!==u)throw new Error(`indices length must be ${u}`);let de=L.map(w).join(",");return u===0?Q("0u"):u===1?Q(de[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${de})`)},pe=L=>u<2?Q(L):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${L})`),ye=u<2?"":`\n  fn set_${e}ByIndices(indices: ${g.indices}, value: ${h}) {\n    ${fe(`i2o_${e}(indices)`,"value")}\n  }`,he=u<2?"":(()=>{let L=d.map(be=>`d${be}: u32`).join(", "),de=d.map(be=>`d${be}`).join(", ");return`\n  fn set_${e}(${L}, value: ${h}) {\n    set_${e}ByIndices(${z(de)}, value);\n  }`})();return{impl:()=>{let L=[];return s||(L.push(`const ${C} = ${g.indices}(${r.join(",")});`),L.push(`const ${A} = ${g.indices}(${V.computeStrides(r).join(",")});`)),b.offsetToIndices&&L.push(M),b.indicesToOffset&&L.push(O),b.broadcastedIndicesToOffset&&Object.values(R).forEach(de=>L.push(de)),b.set&&L.push(he),b.setByIndices&&L.push(ye),b.get&&L.push(F),b.getByIndices&&L.push(we),L.join(`\n`)},type:g,offsetToIndices:_,indicesToOffset:W,broadcastedIndicesToOffset:Y,indices:z,indicesGet:j,indicesSet:Z,set:(...L)=>{if(L.length!==u+1)throw new Error(`indices length must be ${u}`);let de=L[u];if(typeof de!="string")throw new Error("value must be string");let be=L.slice(0,u).map(w).join(",");return u===0?fe("0u",de):u===1?fe(be[0],de):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${be}, ${de})`)},setByOffset:fe,setByIndices:(L,de)=>u<2?fe(L,de):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${de});`),get:le,getByOffset:Q,getByIndices:pe,usage:o,name:e,strides:A,shape:C,rank:u}},N=(e,t,r,o=1)=>An(e,t,r,"input",o),K=(e,t,r,o=1)=>An(e,t,r,"output",o),Ho=(e,t,r,o=1)=>An(e,t,r,"internal",o),Cn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=rl){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_index;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:t.type.indices}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:t.type.indices}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r){return this.uniforms.push({name:t,type:r}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o}of this.uniforms)t.push(`${r}:${o}`);return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},Go=e=>new Cn(e),Vt=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},Ee=e=>e<=4});var nl,Lo,ol,al,tt,Fo,jo,Wt=q(()=>{"use strict";Ie();Pe();$e();nl=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Lo=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,ol=(e,t)=>V.sortBasedOnPerm(e,Lo(e.length,t)),al=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},tt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=Lo(o,t),s=Ee(o),u=ol(e.dims,n),d=s?u.length:u,a=s?o:e.dims,p=K("output",r,d),h=N("a",r,a),v=g=>`\n  ${g.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${al(n,o,h,p)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:g=>{let w=V.size(u);return{outputs:[{dims:u,dataType:g[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:s?[{type:"uint32",data:w},...me(g[0].dims),...me(u)]:[{type:"uint32",data:w}]}},getShaderSource:v}},Fo=(e,t)=>{nl(e.inputs),e.compute(tt(e.inputs[0],t.perm))},jo=e=>te({perm:e.perm})});var il,sl,ul,ll,dl,cl,pl,ml,fl,hl,st,qo,Ko,Yo,Zo,Xo,Qo,Jo,ea,ta,ra,na=q(()=>{"use strict";Ie();$e();Vr();Wt();il={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},sl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},ul={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},ll={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},dl=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},cl=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},pl=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},ml=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},fl=(e,t)=>{let r=[];if(!ml(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},hl=(e,t,r,o,n,s,u)=>{let d=r[0].dims,a=V.size(s),p=V.size(u),h=N("_A",r[0].dataType,d),v=K("output",n,s),g=32,w=`\n          var<workgroup> aBestValues : array<${v.type.storage}, ${g}>;\n       `;return{name:e,shaderCache:t,getShaderSource:$=>`\n        ${$.registerUniform("reduceSize","u32").declareVariables(h,v)}\n        ${w}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${$.mainStart(g)}\n          let local_idx = local_id.x;\n\n          let outputIndex = global_idx / ${g};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${v.type.storage}(${ul[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${g}) {\n           let candidate = ${v.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${il[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${g}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${sl[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${v.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${v.type.storage}(uniforms.reduceSize)`:`${ll[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},st=(e,t,r,o)=>{let n=e.inputs.length===1?r:_n(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,b)=>b));let u=V.normalizeAxes(s,e.inputs[0].dims.length),d=u,a=e.inputs[0],p=fl(d,e.inputs[0].dims.length);p.length>0&&(a=e.compute(tt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=dl(d.length,a.dims.length));let[h,v]=cl(a.dims,d),g=h;n.keepDims&&(g=pl(h,u)),e.compute(hl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,g,v),{inputs:[a]})},qo=(e,t)=>{st(e,"ReduceMeanShared",t,"mean")},Ko=(e,t)=>{st(e,"ReduceL1Shared",t,"l1")},Yo=(e,t)=>{st(e,"ReduceL2Shared",t,"l2")},Zo=(e,t)=>{st(e,"ReduceLogSumExpShared",t,"logSumExp")},Xo=(e,t)=>{st(e,"ReduceMaxShared",t,"max")},Qo=(e,t)=>{st(e,"ReduceMinShared",t,"min")},Jo=(e,t)=>{st(e,"ReduceProdShared",t,"prod")},ea=(e,t)=>{st(e,"ReduceSumShared",t,"sum")},ta=(e,t)=>{st(e,"ReduceSumSquareShared",t,"sumSquare")},ra=(e,t)=>{st(e,"ReduceLogSumShared",t,"logSum")}});var ut,gl,Wr,_n,lt,yl,bl,wl,vl,$l,Sl,xl,Il,Cl,Al,dt,oa,aa,ia,sa,ua,la,da,ca,pa,ma,rt,Vr=q(()=>{"use strict";Ie();Pe();$e();na();ut=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},gl=e=>["","",`var value = ${e.getByOffset("inputOffset")};`,""],Wr=(e,t,r,o,n,s,u=!1,d=!1)=>{let a=[],p=r[0].dims,h=V.normalizeAxes(n,r[0].dims.length),v=!d&&h.length===0;p.forEach((W,z)=>{v||h.indexOf(z)>=0?u&&a.push(1):a.push(W)});let g=[],w=N("_A",r[0].dataType,p),b=K("output",s,a),$=o(w,b,h),C=`inputOffset = ${w.indicesToOffset("inputIndices")};`,A=`let ${C};`,I=`var ${C};`,M=$[1]===""?"":I,_=($[1]===""?A:C)+`\n`+$[2];for(let W=0,z=0;W<r[0].dims.length;W++)v||h.indexOf(W)>=0?(u&&z++,_=`for(var j${W}: u32 = 0; j${W} < ${r[0].dims[W]}; j${W}++) {\n                ${$[2].includes("lastIndex")?`let lastIndex = j${W};`:""}\n                ${w.indicesSet("inputIndices",W,`j${W}`)}\n                ${_}\n              }`):(g.push(`${w.indicesSet("inputIndices",W,b.indicesGet("outputIndices",z))};`),z++);let B=V.size(a);return{name:e,shaderCache:t,getShaderSource:W=>`\n        ${W.declareVariables(w,b)}\n\n        ${W.mainStart()}\n          ${W.guardAgainstOutOfBoundsWorkgroupSizes(B)}\n          var inputIndices: ${w.type.indices};\n          let outputIndices = ${b.offsetToIndices("global_idx")};\n\n          ${g.join(`\n`)}\n          ${$[0]}       // init ops for reduce max/min\n          ${M}\n          ${$[1]}\n          ${_}\n          ${$[3]}\n          ${$.length===4?b.setByOffset("global_idx","value"):$.slice(4).join(`\n`)}\n        }`,getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(B/64)}})}},_n=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),te({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},lt=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:_n(n,r);e.compute(Wr(t,{hint:s.cacheKey},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?gl:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},yl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,"value = log(value);"])},bl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByOffset("inputOffset")});`,""])},wl=(e,t)=>{ut(e.inputs),lt(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += (t * t);`,"value = sqrt(value);"])},vl=(e,t)=>{ut(e.inputs),lt(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByOffset("inputOffset")});`,"value = log(value);"])},$l=(e,t)=>{ut(e.inputs),lt(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(o.indicesSet("inputIndices",d,0));return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = max(value, ${o.getByOffset("inputOffset")});`,""]})},Sl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${o.getByOffset("inputOffset")});`,`let value = ${n.type.value}(sum / ${u});`]})},xl=(e,t)=>{ut(e.inputs),lt(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};`,`value = min(value, ${o.getByOffset("inputOffset")});`,""]})},Il=(e,t)=>{ut(e.inputs),lt(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByOffset("inputOffset")};`,""])},Cl=(e,t)=>{ut(e.inputs),lt(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByOffset("inputOffset")};`,""])},Al=(e,t)=>{ut(e.inputs),lt(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByOffset("inputOffset")}; value += t * t;`,""])},dt=(e,t,r)=>{if(t.length===0)return!!r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},oa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sl(e,t):qo(e,t)},aa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bl(e,t):Ko(e,t)},ia=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wl(e,t):Yo(e,t)},sa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vl(e,t):Zo(e,t)},ua=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$l(e,t):Xo(e,t)},la=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xl(e,t):Qo(e,t)},da=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Il(e,t):Jo(e,t)},ca=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cl(e,t):ea(e,t)},pa=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Al(e,t):ta(e,t)},ma=(e,t)=>{dt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yl(e,t):ra(e,t)},rt=e=>te(e)});var fa,ha,ga,Tn,ya=q(()=>{"use strict";Ne();Pe();Vr();fa=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},ha=(e,t)=>{fa(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Wr("ArgMin",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},ga=(e,t)=>{fa(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`inputIndices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByOffset("inputOffset")};\nvar bestIndex : i32 = 0;`,`if (${o.getByOffset("inputOffset")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByOffset("inputOffset")};\n         bestIndex = i32(lastIndex);\n       }`,"",n.setByOffset("global_idx","bestIndex")]};e.compute(Wr("argMax",{hint:t.cacheKey},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Tn=e=>te(e)});var _l,ba,Tl,El,Ol,Nr,kl,wa,En=q(()=>{"use strict";Pe();Rr();$e();_l=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let v=n.dims[0]/3,g=v,w=g;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let M of t.qkvHiddenSizes)if(M%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");v=t.qkvHiddenSizes[0],g=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let b=p;if(v!==g)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==v+g+w)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let $=0;if(u){if(g!==w)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==g/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||($=u.dims[3])}let C=b+$,A=-1,I=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:$,kvSequenceLength:b,totalSequenceLength:C,maxSequenceLength:A,inputHiddenSize:h,hiddenSize:v,vHiddenSize:w,headSize:Math.floor(v/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:I,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},ba=e=>te({...e}),Tl=(e,t,r,o)=>{let n=Ke(o),s=K("x",t.dataType,t.dims,n),u="threadMaxVector";n===2?u="max(threadMaxVector.x, threadMaxVector.y)":n===4&&(u="max(max(threadMaxVector.x, threadMaxVector.y), max(threadMaxVector.z, threadMaxVector.w))");let d=_e(t.dataType),a=64,p=o/n;p<a?a=1:p/8<64&&(a=Math.ceil(p/8));let h=Math.ceil(o/n/a),v=g=>`\n  const dInv: ${d} = 1 / ${o};\n  const dComp = ${o/n};\n  var<workgroup> wgMax: array<f32, ${a}>;\n  var<workgroup> wgSum: array<f32, ${a}>;\n\n  ${g.declareVariables(s)}\n  @compute @workgroup_size(${a}, 1, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_index) local_index : u32) {\n    let localOffset = local_index * ${h};\n    let offset: u32 = workgroup_id.x * dComp + localOffset;\n\n    var threadMaxVector = ${Le("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      threadMaxVector = max(${Je(d,n,"x[offset + i]")}, threadMaxVector);\n    }\n    wgMax[local_index] = ${u};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${a}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Le("f32",n,"0")};\n    for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n      sumVector += exp(${Je(d,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_index] = ${et("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${a}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        x[offset + i] = ${Le(d,n,"dInv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < ${h} && i + localOffset < dComp; i++) {\n        let f32input = ${Je(d,n,"x[offset + i]")};\n        x[offset + i] = ${s.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`;e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o}`},getShaderSource:v,getRunData:()=>({outputs:[],dispatchGroup:{x:r}})},{inputs:[t],outputs:[]})},El=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=_e(t.dataType),p=Ke(n.headSize),h=N("q",t.dataType,t.dims,p),v=N("key",r.dataType,r.dims,p),g=K("output",t.dataType,u),w=n.headSize/p,b=n.sequenceLength,$=n.totalSequenceLength,C=w,A=12,I={x:Math.ceil(n.totalSequenceLength/A),y:Math.ceil(n.sequenceLength/A),z:n.batchSize*n.numHeads},M=[t,r],_=O=>`\n  const M: u32 = ${b}u;\n  const N: u32 = ${$}u;\n  const K: u32 = ${C}u;\n  const alpha: ${a} = ${d};\n  const beta: ${a} = 1.0;\n  const TILE_SIZE = ${A}u;\n\n  var<workgroup> tileQ: array<${h.type.storage}, ${A*A}>;\n  var<workgroup> tileK: array<${h.type.storage}, ${A*A}>;\n\n  ${O.declareVariables(h,v,g)}\n\n  @compute @workgroup_size(${A}, ${A}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${I.x*I.y}u +\n          workgroup_id.y * ${I.x}u + workgroup_id.x) * ${A*A}u + local_index;\n\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = ${n.sequenceLength*w} * headIdx + m * K;\n    let kOffset = ${n.kvSequenceLength*w} * headIdx + n * K;\n\n    var value = ${Le(a,p)};\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m + local_id.y < M && w + local_id.x < K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * K + w + local_id.x];\n      }\n      if (n + local_id.y < N && w + local_id.x < K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * M * N;\n    if (lm < M && ln < N) {\n      let outputIdx = headOffset + lm * N + ln;\n      output[outputIdx] = ${et("value",p)} * alpha;\n    }\n  }`,B=e.compute({name:"AttentionProbs",shaderCache:{hint:JSON.stringify(n)},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:I}),getShaderSource:_},{inputs:M,outputs:[-1]})[0];return Tl(e,B,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),B},Ol=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=N("probs",t.dataType,t.dims),u=N("v",r.dataType,r.dims),d=K("output",t.dataType,n),a=_e(t.dataType),p=12,h={x:Math.ceil(o.vHeadSize/p),y:Math.ceil(o.sequenceLength/p),z:o.batchSize*o.numHeads},v=g=>`\n  const M: u32 = ${o.sequenceLength}u;\n  const N: u32 = ${o.vHeadSize}u;\n  const K: u32 = ${o.totalSequenceLength}u;\n  const numHeads: u32 = ${o.numHeads}u;\n  const TILE_SIZE = ${p}u;\n\n  var<workgroup> tileQ: array<${s.type.storage}, ${p*p}>;\n  var<workgroup> tileK: array<${s.type.storage}, ${p*p}>;\n\n  ${g.declareVariables(s,u,d)}\n\n  @compute @workgroup_size(${p}, ${p}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${h.x*h.y}u +\n          workgroup_id.y * ${h.x}u + workgroup_id.x) * ${p*p}u + local_index;\n\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (M * K) + m * K;\n   let offsetB = headIdx * (N * K) + n;\n\n   var value = ${a}(0);\n   for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n     if (m < M && w + local_id.x < K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < N && w + local_id.y < K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / ${o.numHeads};\n   let currentBatchHeadNumber = workgroup_id.z % ${o.numHeads};\n   let headOffset = (batchIdx * M * ${o.numHeads} + currentBatchHeadNumber) * ${o.vHeadSize};\n   if (m < M && n < N) {\n     let outputIdx = batchIdx * ${o.sequenceLength*o.vHiddenSize} + m * ${o.vHiddenSize}\n       + currentBatchHeadNumber * ${o.vHeadSize} + n;\n     output[outputIdx] = value;\n   }\n  }`;return e.compute({name:"AttentionScore",shaderCache:{hint:JSON.stringify(o)},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:h}),getShaderSource:v},{inputs:[t,r],outputs:[0]})[0]},Nr=(e,t,r,o,n,s,u,d,a,p,h)=>{let v=El(e,t,r,a,p,h);Ol(e,v,o,p)},kl=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=_e(e.inputs[0].dataType),n=t.sequenceLength,s=t.inputHiddenSize,u=t.headSize,d=12,a={x:Math.ceil(t.headSize/d),y:Math.ceil(t.sequenceLength/d),z:t.batchSize*t.numHeads},p=()=>`\n  const M: u32 = ${n}u;\n  const K: u32 = ${s}u;\n  const N: u32 = ${u}u;\n  const numHeads: u32 = ${t.numHeads};\n  const ldb = ${t.hiddenSize+t.hiddenSize+t.vHiddenSize}u;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileInput: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightQ: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightK: array<${o}, ${d*d}>;\n  var<workgroup> tileWeightV: array<${o}, ${d*d}>;\n\n  @group(0) @binding(0) var<storage, read> input: array<${o}>;\n  @group(0) @binding(1) var<storage, read> weight: array<${o}>;\n  @group(0) @binding(2) var<storage, read> bias: array<${o}>;\n  @group(0) @binding(3) var<storage, read_write> outputQ: array<${o}>;\n  @group(0) @binding(4) var<storage, read_write> outputK: array<${o}>;\n  @group(0) @binding(5) var<storage, read_write> outputV: array<${o}>;\n\n  @compute @workgroup_size(${d}, ${d}, 1)\n  fn main(@builtin(workgroup_id) workgroup_id : vec3<u32>,\n   @builtin(local_invocation_id) local_id : vec3<u32>, @builtin(local_invocation_index) local_index : u32) {\n   let global_idx = (workgroup_id.z * ${a.x*a.y}u +\n          workgroup_id.y * ${a.x}u + workgroup_id.x) * ${d*d}u + local_index;\n\n    let batchIndex = workgroup_id.z / ${t.numHeads};\n    let headNumber = workgroup_id.z % ${t.numHeads};\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (M * K) + m * K;\n    let biasOffsetQ = headNumber * ${t.headSize};\n    let biasOffsetK = ${t.hiddenSize} + biasOffsetQ;\n    let biasOffsetV = ${t.hiddenSize} + biasOffsetK;\n\n    var valueQ = ${o}(0);\n    var valueK = ${o}(0);\n    var valueV = ${o}(0);\n    for (var w: u32 = 0u; w < K; w += TILE_SIZE) {\n      if (m < M && w + local_id.x < K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < N && w + local_id.y < K) {\n        let offset = n + (w + local_id.y) * ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * N + n) % ${t.headSize};\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * M * N;\n    if (m < M && n < N) {\n      let outputIdx = offset + m * N + n;\n      outputQ[outputIdx] = valueQ;\n      outputK[outputIdx] = valueK;\n      outputV[outputIdx] = valueV;\n    }\n  }`,h=[e.inputs[0],e.inputs[1],e.inputs[2]];return e.compute({name:"AttentionPrepare",shaderCache:{hint:JSON.stringify(t)},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a}),getShaderSource:p},{inputs:h,outputs:[-1,-1,-1]})},wa=(e,t)=>{let r=_l(e.inputs,t),[o,n,s]=kl(e,r);return Nr(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Ur=q(()=>{"use strict"});var va=q(()=>{"use strict";Ur()});var $a,Sa=q(()=>{"use strict";$a="1.17.0"});var xa,On,Ia=q(()=>{"use strict";Sa();xa="warning",On={wasm:{},webgl:{},webgpu:{},versions:{common:$a},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);xa=e}},get logLevel(){return xa}};Object.defineProperty(On,"logLevel",{enumerable:!0})});var Hr,Ca=q(()=>{"use strict";Ia();Hr=On});var Aa=q(()=>{"use strict"});var _a=q(()=>{"use strict";Gr()});var Ea=q(()=>{"use strict"});var Oa=q(()=>{"use strict";Gr()});var Gr=q(()=>{"use strict";Aa();_a();Ea();Oa()});var Lr=q(()=>{"use strict";Gr()});var ka=q(()=>{"use strict";Ur();Lr()});var Pa=q(()=>{"use strict";ka()});var Ra=q(()=>{"use strict"});var Ba=q(()=>{"use strict";Ur();Lr()});var Ma=q(()=>{"use strict";Ba()});var kn=q(()=>{"use strict";va();Ca();Pa();Lr();Ra();Ma()});var Bl,Ml,Dl,Da,za=q(()=>{"use strict";kn();Ie();Pe();$e();Bl=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,a)=>{if(d!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Ml=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?Ke(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,a=V.size(s)/u,p=Ee(s.length)&&o,h=p?s.length:s,v=N("x",e[0].dataType,e[0].dims,u),g=N("scale",e[1].dataType,e[1].dims,d),w=N("bias",e[2].dataType,e[2].dims,d),b=N("inputMean",e[3].dataType,e[3].dims,d),$=N("inputVar",e[4].dataType,e[4].dims,d),C=K("y",e[0].dataType,h,u),A=()=>{let M="";if(o)M=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")M=`\n            ${C.indicesSet("outputIndices","0","0")}\n            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{M=`var cIndices = ${g.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let _=1;_<g.rank;_++)M+=`cIndices[${_}] = outputIndices[${_}];`;M+=`let cOffset = ${g.indicesToOffset("cIndices")};`}return M},I=M=>`\n  const epsilon = ${r};\n  ${M.registerUniform("outputSize","u32").declareVariables(v,g,w,b,$,C)}\n  ${M.mainStart()}\n  ${M.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${C.offsetToIndices(`global_idx * ${u}`)};\n    ${A()}\n    let scale = ${g.getByOffset("cOffset")};\n    let bias = ${w.getByOffset("cOffset")};\n    let inputMean = ${b.getByOffset("cOffset")};\n    let inputVar = ${$.getByOffset("cOffset")};\n    let x = ${v.getByOffset("global_idx")};\n    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;\n    ${C.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:I,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...me(s)]:[{type:"uint32",data:a}]})}},Dl=e=>te(e),Da=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Dl({...t,outputCount:o});if(Hr.webgpu.validateInputContent&&Bl(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Ml(r,n))}});var zl,Vl,Va,Wa=q(()=>{"use strict";Ie();$e();zl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Vl=e=>{let t=e[0].dims,r=e[0].dims[2],o=V.size(t)/4,n=e[0].dataType,s=N("input",n,t,4),u=N("bias",n,[r],4),d=N("residual",n,t,4),a=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,d,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},Va=e=>{zl(e.inputs),e.compute(Vl(e.inputs))}});var Wl,Te,Na,Ua,Ha,Ga,La,Fa,ja,qa,Ka,Nl,Ya,Za,Xa,Qa,Fr,Ja,jr,ei,ti,ri,ni,oi,ai,ii,si,ui,li,di,ci,pi,mi,fi,hi,gi,Pn=q(()=>{"use strict";Ne();Ie();Pe();$e();Wl=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let a=N("inputData",r,[u],4),p=K("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",d)}\n  }`},Te=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Wl(u,V.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(V.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(V.size(e.dims)/4)}]})}),Na=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Ua=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Ha=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},Ga=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},La=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},Fa=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},ja=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},qa=e=>te(e),Ka=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Nl=e=>{let t=e.length>=2?e[1].getFloat32Array()[0]:Dr,r=e.length>=3?e[2].getFloat32Array()[0]:zr;return te({min:t,max:r})},Ya=(e,t)=>{let r=e.inputs.length===1?t:Nl(e.inputs),o=_e(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Za=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},Xa=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},Qa=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},Fr=e=>te(e),Ja=(e,t)=>{e.compute(Te(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`\n  const elu_alpha_: f32 = f32(${t.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},jr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,ei=e=>{let t=_e(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,jr(`vec4<${t}>`,t)))},ti=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},ri=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},ni=e=>{let t=_e(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,jr(`vec4<${t}>`,t)))},oi=(e,t)=>{e.compute(Te(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<f32>(0.0))`,`const leaky_relu_alpha_: f32 = f32(${t.alpha});`,t.cacheKey))},ai=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},ii=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},si=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ui=e=>{e.compute(Te(e.inputs[0],"Relu",t=>`select(vec4<f32>(0.0), ${t}, ${t} > vec4<f32>(0.0))`))},li=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},di=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},ci=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},pi=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},mi=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},fi=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},hi=(e,t)=>(e.compute(Te(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<f32>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${t.alpha});`,t.cacheKey)),0),gi=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var Hl,Gl,yi,bi=q(()=>{"use strict";Ie();$e();Pn();Hl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Gl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=N("input",e[0].dataType,e[0].dims,4),o=N("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),s=V.size(t)/4,u=_e(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${jr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},yi=e=>{Hl(e.inputs),e.compute(Gl(e.inputs))}});var Ll,Fl,ct,wi,vi,$i,Si,xi,Ii,Ci,Ai,_i,Ti,Ei=q(()=>{"use strict";Ne();Ie();$e();Ll=(e,t,r,o,n,s,u,d,a,p,h,v,g)=>{let w,b;typeof d=="string"?w=b=(O,W)=>`${d}((${O}),(${W}))`:typeof d=="function"?w=b=d:(w=d.scalar,b=d.vector);let $=v?t.length:t,C=v?r.length:r,A=v?o.length:o,I=K("outputData",h,A,4),M=N("aData",a,$,4),_=N("bData",p,C,4),B;if(n)if(s){let O=V.size(t)===1,W=V.size(r)===1,z=t.length>0&&t[t.length-1]%4===0,j=r.length>0&&r[r.length-1]%4===0;O||W?B=I.setByOffset("global_idx",b(O?`${M.type.value}(${M.getByOffset("0")}.x)`:M.getByOffset("global_idx"),W?`${_.type.value}(${_.getByOffset("0")}.x)`:_.getByOffset("global_idx"))):B=`\n            let outputIndices = ${I.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${M.broadcastedIndicesToOffset("outputIndices",I)};\n            let offsetB = ${_.broadcastedIndicesToOffset("outputIndices",I)};\n            ${I.setByOffset("global_idx",b(u||z?M.getByOffset("offsetA / 4u"):`${M.type.value}(${M.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||j?_.getByOffset("offsetB / 4u"):`${_.type.value}(${_.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else B=I.setByOffset("global_idx",b(M.getByOffset("global_idx"),_.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let O=(W,z,j="")=>{let Z=`aData[indexA${z}][componentA${z}]`,R=`bData[indexB${z}][componentB${z}]`;return`\n            let outputIndices${z} = ${I.offsetToIndices(`global_idx * 4u + ${z}u`)};\n            let offsetA${z} = ${M.broadcastedIndicesToOffset(`outputIndices${z}`,I)};\n            let offsetB${z} = ${_.broadcastedIndicesToOffset(`outputIndices${z}`,I)};\n            let indexA${z} = offsetA${z} / 4u;\n            let indexB${z} = offsetB${z} / 4u;\n            let componentA${z} = offsetA${z} % 4u;\n            let componentB${z} = offsetB${z} % 4u;\n            ${W}[${z}] = ${j}(${w(Z,R)});\n          `};h===9?B=`\n            var data = vec4<u32>(0);\n            ${O("data",0,"u32")}\n            ${O("data",1,"u32")}\n            ${O("data",2,"u32")}\n            ${O("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`\n            ${O("outputData[global_idx]",0)}\n            ${O("outputData[global_idx]",1)}\n            ${O("outputData[global_idx]",2)}\n            ${O("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(M,_,I)}\n\n        ${g??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${B}\n      }`},Fl=(e,t,r,o,n,s,u=r.dataType)=>{let d=!V.areEqual(r.dims,o.dims),a=r.dims,p=V.size(r.dims),h=!1,v=!1,g=[d];if(d){let b=it.calcShape(r.dims,o.dims,!1);if(!b)throw new Error("Can\'t perform binary op on the given tensors");a=b,p=V.size(a);let $=V.size(r.dims)===1,C=V.size(o.dims)===1,A=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,I=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;g.push($),g.push(C),g.push(A),g.push(I);let M=1;for(let _=1;_<a.length;_++){let B=r.dims[r.dims.length-_]??1,O=o.dims[o.dims.length-_]??1;if(B===O)M*=B;else break}M%4===0?(v=!0,h=!0):($||C||A||I)&&(h=!0)}else h=!0;g.push(h);let w=Ee(r.dims.length)&&Ee(o.dims.length)&&Ee(a.length);return{name:e,shaderCache:{hint:t+g.map(b=>b.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:b=>Ll(b,r.dims,o.dims,a,h,d,v,n,r.dataType,o.dataType,u,w,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(V.size(a)/4)},...me(r.dims),...me(o.dims),...me(a)]:[{type:"uint32",data:Math.ceil(V.size(a)/4)}]})}},ct=(e,t,r,o,n,s)=>{e.compute(Fl(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},wi=e=>{ct(e,"Add",(t,r)=>`${t}+${r}`)},vi=e=>{ct(e,"Div",(t,r)=>`${t}/${r}`)},$i=e=>{ct(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Si=e=>{ct(e,"Mul",(t,r)=>`${t}*${r}`)},xi=e=>{let t=N("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ct(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Ii=e=>{ct(e,"Sub",(t,r)=>`${t}-${r}`)},Ci=e=>{ct(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ai=e=>{ct(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},_i=e=>{ct(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Ti=e=>{ct(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var ql,Kl,Yl,Zl,Oi,ki,Pi=q(()=>{"use strict";Ie();Pe();$e();ql=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Kl=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,Yl=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},Zl=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let _=1;_<e.length;_++){let B=e[_].dims.slice();for(let O=0;O<r.length;O++)if(O===o)n[o]+=B[O];else if(r[O]!==B[O])throw new Error("non concat dimensions must match")}let s=V.size(n),u=new Array(e.length),d=new Array(e.length),a=e[0].dataType,p=0,h=[],v=[],g=[],w=[{type:"uint32",data:s}];for(let _=0;_<e.length;++_)p+=e[_].dims[o],u[_]=p,g.push(Ee(e[_].dims.length)),v.push(g[_]?e[_].dims.length:e[_].dims),d[_]=N(`input${_}`,a,v[_]),h.push(g[_]?"rank":"dims"),w.push({type:"uint32",data:u[_]});for(let _=0;_<e.length;++_)g[_]&&w.push(...me(e[_].dims));let b=Ee(n.length);b&&w.push(...me(n));let $=b?n.length:n,C=K("output",a,$),A=C.indicesGet("indices",o),I=Array.from(Array(u.length).keys()).map(_=>`uniforms.sizeInConcatAxis${_}`).join(","),M=_=>`\n\n  ${(()=>{_.registerUniform("outputSize","u32");for(let B=0;B<e.length;B++)_.registerUniform(`sizeInConcatAxis${B}`,"u32");return _.declareVariables(...d,C)})()}\n\n  ${Kl(u.length,I)}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${C.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${A});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${I});\n      ${A} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${Yl(d,C)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:M}},Oi=(e,t)=>{ql(e.inputs),e.compute(Zl(e.inputs,t.axis))},ki=e=>te({axis:e.axis})});var pt,qr,$t=q(()=>{"use strict";Ie();pt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},qr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Dr,zr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var Ue,Kr,Yr=q(()=>{"use strict";Ue=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Kr=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Zr,Rn=q(()=>{"use strict";Zr=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var Xl,Ql,ur,Ri,Jl,lr,ed,Xr,dr=q(()=>{"use strict";Ie();$e();$t();Yr();Xl=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Ql=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,ur=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,v=n?s:a,g=h/t[0],w=s/t[1];if(!((n&&g===4&&e[1]===4||!n&&(g===3||g===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${g} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${g} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${g}<${r}>, ${h/g}>, ${v}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${g};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${w};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Xl(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${g===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Ql(n,g)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Ri=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Jl=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",lr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],v=n?p:s,g=n?s:p;if(!(g%t[1]===0&&v%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${g} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${v} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=g/t[1],b=v/t[0],$=s/t[1],C=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${g}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${v}; inputCol = inputCol + ${t[0]}) {\n          ${Ri(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${w};\nlet tileColA = i32(localId.x) * ${b};\nlet tileRowB = i32(localId.y) * ${$};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Ri(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${$}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Jl(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${v}>, ${g}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${C}\n  }\n`},ed=(e,t,r,o,n,s=!1)=>{let[u,d,a]=n,[p,h,v,g]=o,w=Vt(u,a),b=Vt(d,a),$=_e(o[0].type.tensor),C=()=>{let M=h.rank,_=p.rank,B=`var aIndices: ${h.type.indices};`;for(let O=M-2-1,W=_-1;O>=0;O--,W--)B+=`\naIndices[${O}] = ${_>1?`batchIndices[${W}]`:"batchIndices"};`;return w.forEach(O=>{B+=`\naIndices[${O}] = 0;`}),B+=`\naIndices[${M-2}] = u32(row);\n                   aIndices[${M-1}] = u32(colIn);`,B},A=()=>{let M=v.rank,_=p.rank,B=`var bIndices: ${v.type.indices};`;for(let O=M-2-1,W=_-1;O>=0;O--,W--)B+=`\nbIndices[${O}] = ${_>1?`batchIndices[${W}]`:"batchIndices"};`;return b.forEach(O=>{B+=`\nbIndices[${O}] = 0;`}),B+=`\nbIndices[${M-2}] = u32(row);\n                   bIndices[${M-1}] = u32(colIn);`,B};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ue(e,$)} {\n      var value = ${Ue(e,$)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${C()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ue(e,$)} {\n      var value = ${Ue(e,$)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${A()}\n        value = ${v.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ue(e,$)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${Ue(e,$)}(bias[row])`};`:""}\n        ${r}\n        ${g.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Xr=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=Ee(p.length),v=h?p.length:p,g=Ho("batchDims",e[0].dataType,v,1),w=V.size(p),b=s[s.length-2],$=s[s.length-1],C=u[u.length-1],A=$%4===0&&C%4===0,I=b<=8?[4,1,1]:[4,4,1],M=[8,8,1],_=[Math.ceil(C/M[0]/I[0]),Math.ceil(b/M[1]/I[1]),Math.ceil(w/M[2]/I[2])],B=_e(e[0].dataType),O=A?4:1,W=[...d,b,$/O],z=Ee(W.length),j=z?W.length:W,Z=[...a,$,C/O],R=Ee(Z.length),Y=R?Z.length:Z,fe=[w,b,C/O],Q=N("a",e[0].dataType,j,O),we=N("b",e[1].dataType,Y,O),F=K("result",e[0].dataType,fe.length,O),le=[Q,we],pe=[{type:"int32",data:b},{type:"int32",data:C},{type:"int32",data:$}];h&&pe.push(...me(p)),z&&pe.push(...me(W)),R&&pe.push(...me(Z));let ye=[];ye.push(z?"rank":"dims"),ye.push(R?"rank":"dims");let he=e.length>2,{activationFunction:Fe,applyActivation:Re}=pt(t,F.type.value),Ve=ed(O,he,Re,[g,Q,we,F],[d,a,p],n);if(he){let de=n?O:1;le.push(N("bias",e[2].dataType,e[2].dims.length,de)),pe.push(...me(e[2].dims)),ye.push("rank")}pe.push(...me(fe));let L=de=>`\n  ${de.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(g).declareVariables(...le,F)}\n  ${Fe}\n  ${Ve}\n  ${A?ur(I,M,B,g):lr(I,M,B,g)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${I}${t.activation}${t.clipMax}${t.clipMin}${A}${he}${n}`,inputDependencies:ye},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:_[0],y:_[1],z:_[2]},programUniforms:pe}),getShaderSource:L}}});var td,Bi,Mi=q(()=>{"use strict";vt();$e();$t();Yr();Rn();dr();td=(e,t,r,o,n=!1,s,u=4,d=4,a=4,p="f32")=>{let h=R=>{switch(R){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${R} is not supported.`)}},v=R=>{switch(R){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${R} is not supported.`)}},g=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,w=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",$=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",A=e?"col":"row",I=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${C} / outWidth;\n    let outCol = ${C} % outWidth;\n\n    let WRow = ${A} / (filterDims[1] * inChannels);\n    let WCol = ${A} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${A} % inChannels;\n    var resData = ${Ue(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${$}) {\n      ${g}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,M=e?t&&o?`\n    let col = colIn * ${u};\n    ${I}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${I}\n    }\n    return ${Ue(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${I}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${I}\n    }\n    return ${Ue(u,p)}(0.0);`,_=`${v(d)}`,B=Ue(a,p),O=e?Ue(u,p):Ue(d,p),W=e?Ue(d,p):Ue(u,p),{activationFunction:z,applyActivation:j}=pt(s,B);return`\n    ${z}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${O} {\n      ${e?M:_}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${W} {\n      ${e?_:M}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${B}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${w}\n      ${Kr(n)}\n      ${j}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Bi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],v=a?r[2]:r[3],g=a?r[1]:r[2],w=a?r[3]:r[1],b=a&&(p%4===0||p%3===0)&&w%4===0,$=a?w:v*g,C=a?v*g:w,A=[8,8,1],I=o<=8?[4,1,1]:[4,4,1],M=[Math.ceil($/A[0]/I[0]),Math.ceil(C/A[1]/I[1]),Math.ceil(h/A[2]/I[2])];ke("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${M}`);let _=b?a&&p%4!==0?3:4:1,B=A[1]*I[1],O=A[0]*I[0],W=Math.max(A[0]*_,A[1]),z=o%B===0,j=n%O===0,Z=s%W===0,R=b?[_,4,4]:[1,1,1],Y=_e(e[0].dataType),fe=b?4:1,Q=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],we=N("x",e[0].dataType,e[0].dims.length,_===3?1:_),F=N("w",e[1].dataType,e[1].dims.length,fe),le=[we,F];Q.push(...me(e[0].dims)),Q.push(...me(e[1].dims));let pe=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${Y}>`:Y}) {\n        result[flatIndex] = ${b?`vec4<${Y}>`:Y}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${Y}>`:Y}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);\n      }`;if(u){let he=N("bias",e[2].dataType,e[2].dims.length,fe);le.push(he),Q.push(...me(e[2].dims)),pe+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${Y}>`:Y} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}let ye=K("result",e[0].dataType,r.length,fe);return Q.push(...me(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:M[0],y:M[1],z:M[2]},programUniforms:Q}),getShaderSource:he=>`\n        ${Zr("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${he.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...le,ye)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${pe}\n        ${td(a,z,j,Z,u,t,R[0],R[1],R[2],Y)}\n            ${b?ur(I,A,Y,void 0,!a,W):lr(I,A,Y,void 0,!a,W,!1,void 0,d)}`}}});var Bn,Di,rd,zi,Mn=q(()=>{"use strict";dr();Ie();$e();$t();Bn=e=>e%4===0?4:e%2===0?2:1,Di=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s[s.length-2],a=u[u.length-1],p=s[s.length-1],h=o?o.slice(0,-2):r.slice(0,-2),v=V.size(h),g=Bn(a),w=Bn(p),b=Bn(d),$=V.size(r)/g/b,C=N("a",e[0].dataType,s,w),A=N("b",e[1].dataType,u,g),I=K("output",e[0].dataType,[v,d,a],g),{activationFunction:M,applyActivation:_}=pt(t,I.type.value),B=[C,A],O=e.length>2,W="";if(O){let F=n?g:1;B.push(N("bias",e[2].dataType,e[2].dims,F)),W=`${n?`value += bias[col / ${F}];`:`value += ${I.type.value}(bias[row + i]);`}`}let z=s.slice(0,-2),j=u.slice(0,-2),Z=N("batchDims",e[0].dataType,h),R=Vt(z,h),Y=Vt(j,h),fe=(F,le)=>{let pe=F.rank,ye=F.name;if(pe===2)return`var ${ye}Indices = ${F.type.indices}(0u, 0u);`;let he=Z.rank,Fe=`var ${ye}Indices: ${F.type.indices};`;for(let Re=pe-2-1,Ve=he-1;Re>=0;Re--,Ve--)Fe+=`\n${ye}Indices[${Re}] = ${he>1?`batchIndices[${Ve}]`:"batchIndices"};`;return le.forEach(Re=>{Fe+=`\n${ye}Indices[${Re}] = 0;`}),Fe+=`${ye}Indices[${pe-2}] = 0u;\n                   ${ye}Indices[${pe-1}] = 0u;`,Fe},Q=()=>{let F=`var aData: ${C.type.value};`;for(let le=0;le<w;le++)F+=`\n            let bData${le} = b[(offsetB + (k + ${le}) * N + col) / ${g}];`;for(let le=0;le<b;le++){F+=`aData = a[(offsetA + (row + ${le}) * K + k) / ${w}];`;for(let pe=0;pe<w;pe++)F+=`\n          values[${le}] = fma(${A.type.value}(aData${w===1?"":`[${pe}]`}), bData${pe}, values[${le}]);\n`}return F},we=F=>`\n  const M: u32 = ${d}u;\n  const N: u32 = ${a}u;\n  const K: u32 = ${p}u;\n  ${F.declareVariables(...B,I)}\n  ${M}\n  ${F.mainStart()}\n    ${F.guardAgainstOutOfBoundsWorkgroupSizes($)}\n    let col = (global_idx % ${a/g}u) * ${g}u;\n    var index1 = global_idx / ${a/g}u;\n    let stride1 = ${d/b}u;\n    let row = (index1 % stride1) * ${b}u;\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batchIndices = ${Z.offsetToIndices("batch")};`}\n    ${fe(C,R)}\n    let offsetA = ${C.indicesToOffset("aIndices")};\n    ${fe(A,Y)}\n    let offsetB = ${A.indicesToOffset("bIndices")};\n    var values: array<${I.type.value}, ${b}>;\n    for (var k: u32 = 0u; k < K; k = k + ${w}) {\n      ${Q()}\n    }\n    for (var i = 0u; i < ${b}u; i++) {\n      var value = values[i];\n      ${W}\n      ${_}\n      let curIndices = ${I.type.indices}(batch, row + i, col);\n      let offset = ${I.indicesToOffset("curIndices")};\n      ${I.setByOffset(`offset / ${g}`,"value")};\n    }\n  }\n  ${Z.impl()}\n  `;return{name:"MatMulNaive",shaderCache:{hint:t.activationCacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil($/64)}}),getShaderSource:we}},rd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},zi=e=>{rd(e.inputs);let t=it.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");e.compute(Xr(e.inputs,{activation:"",activationCacheKey:""},t))}});var Dn,Vi=q(()=>{"use strict";Ie();$e();Vn();$t();Dn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,a=t.format==="NHWC",p=zn(s,u,t.dilations,t.pads,t.strides,a),h=V.size(p),v=K("output",e[0].dataType,p),{activationFunction:g,applyActivation:w}=pt(t,v.type.value),b=N("x",e[0].dataType,s),$=N("w",e[1].dataType,u),C=[b,$];o&&C.push(N("b",e[2].dataType,e[2].dims));let A=I=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${I.declareVariables(...C,v)}\n\n  ${g}\n\n  ${I.mainStart()}\n    ${I.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${v.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${v.type.value} = ${v.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${$.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${w}\n    ${v.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:A}}});var zn,Wi,nd,Ni,Wn,od,ad,Nn,Vn=q(()=>{"use strict";Ie();Pe();Mi();dr();Mn();Vi();$t();Wt();zn=(e,t,r,o,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),a=d.length,p=t[0],v=t.slice(2).map((b,$)=>b+(b-1)*(r[$]-1)),w=d.map((b,$)=>b+o[$]+o[$+a]).map((b,$)=>Math.floor((b-v[$]+n[$])/n[$]));return w.splice(0,0,u),w.splice(s?3:1,0,p),w},Wi=[2,3,1,0],nd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Ni=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();Et.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},Wn=e=>{let t=qr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,a=e.strides,p=e.w_is_const();return te({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:a,wIsConst:p,...t})},od=(e,t,r)=>{let o=Ni(r,t);if(r.group!==1){e.compute(Dn(t,o));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],v=zn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),g=v[n?1:2],w=v[n?2:3],b=v[n?3:1],$=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if($||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let O=v[0],W,z,j,Z=[];if(n){let R=e.kernelCustomData.wT??e.compute(tt(t[1],Wi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=R),$){let Y=u*d*a;W=t[0].reshape([1,O,Y]),z=R.reshape([1,Y,b]),j=[1,O,b]}else W=t[0].reshape([O,u*d,a]),z=R.reshape([1,a,b]),j=[O,g*w,b];Z.push(W),Z.push(z)}else W=t[0].reshape([O,a,u*d]),z=t[1].reshape([1,b,a]),j=[O,b,g*w],Z.push(z),Z.push(W);s&&Z.push(t[2]),a===3&&b===3?e.compute(Di(Z,o,v,j,n),{inputs:Z}):e.compute(Xr(Z,o,v,j,n),{inputs:Z});return}let C=!0,A=e.kernelCustomData.wT??e.compute(tt(t[1],Wi),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let I=[t[0],A];s&&I.push(t[2]);let M=n?g*w:b,_=n?b:g*w,B=p*h*a;e.compute(Bi(I,o,v,M,_,B,s,C),{inputs:I})},ad=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),a=Ni({...t,pads:n,strides:s,dilations:u,kernelShape:d},o);e.compute(Dn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},Nn=(e,t)=>{nd(e.inputs,t),e.inputs[0].dims.length===3?ad(e,t):od(e,e.inputs,t)}});var id,Ui,Hi=q(()=>{"use strict";vt();$e();$t();Yr();Rn();dr();id=(e,t=!1,r,o=4)=>{let n=Ue(o,"f32"),s=I=>{switch(I){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${I} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,d=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",v=e?"col":"row",g=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${v} / (filterDims[1] * inChannels);\n      let WCol = ${v} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${v} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,w=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${g}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${g}\n      }\n      return ${n}(0.0);`,b=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:$,applyActivation:C}=pt(r,n);return`\n      ${$}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?w:b}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?b:w}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${d}\n      ${Kr(t)}\n      ${C}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Ui=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],v=a?r[2]:r[3],g=a?r[1]:r[2],w=a?r[3]:r[1],b=a?p%4===0&&w%4===0:v%4===0&&w%4===0,$=a?w:v*g,C=a?v*g:w,A=b?[8,8,1]:[$<=4||C<=4?4:16,$>4&&C<=4?4:16,1],I=b?[4,4,1]:[$<=4?1:4,$>4&&C<=4?1:4,1],M=[Math.ceil($/A[0]/I[0]),Math.ceil(C/A[1]/I[1]),Math.ceil(h/A[2]/I[2])];ke("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${M}`);let _=b?4:1,B=Math.max(A[0]*_,A[1]),O=b?4:1,W=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],z=N("x",e[0].dataType,e[0].dims.length,O),j=N("w",e[1].dataType,e[1].dims.length,1),Z=K("result",e[0].dataType,r.length,O),R=[z,j];W.push(...me(e[0].dims)),W.push(...me(e[1].dims));let Y="";if(u){let fe=N("bias",e[2].dataType,e[2].dims.length,O);R.push(fe),W.push(...me(e[2].dims)),Y+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}return W.push(...me(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:M[0],y:M[1],z:M[2]},programUniforms:W}),getShaderSource:fe=>`\n        ${Zr("uniforms.result_strides")}\n        ${fe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...R,Z)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${Y}\n        ${id(a,u,t,_)}\n        ${b?ur(I,A,"f32",void 0,!a,B):lr(I,A,"f32",void 0,!a,B,!1,void 0,d)}`}}});var sd,Un,Gi=q(()=>{"use strict";vt();Ie();$e();sd=(e,t,r,o,n,s,u=!1,d)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,v=a?3:1,g=V.size(o),w=u?2:1,b=r.group,$=t[1].dims,C=$[0]/b,A=$[1],I=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(I+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let M=u?4:1,_=N("W",t[1].dataType,t[1].dims,M),B=N("Dy",t[0].dataType,t[0].dims,M),O=[B,_];n&&O.push(N("bias",t[2].dataType,[o[v]],M));let W=K("result",t[0].dataType,o,M),z=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${B.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${v}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${_.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${B.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":"0.0"};\n          ${W.set("batch","r","c + i","d1","value")};\n        }\n      }`,j=`\n          let outputIndices = ${W.offsetToIndices("global_idx")};\n          let batch = ${W.indicesGet("outputIndices",0)};\n          let d1 = ${W.indicesGet("outputIndices",v)};\n          let r = ${W.indicesGet("outputIndices",p)};\n          let c = ${W.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${A};\n          let wOutChannel = d1 - groupId * ${A};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${C};\n              for (var d2: u32 = 0; d2 < ${C}; d2 = d2 + 1) {\n                let xValue = ${a?B.get("batch","idyR","idyC","inputChannel"):B.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${_.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":"0.0"};\n          ${W.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...O,W)}\n  ${I}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)};\n  ${u?z:j}}`},Un=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=V.size(n),u=[Math.ceil(s/64),1,1];ke("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=_e(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>sd(a,e,t,n,o,u[1]===1&&u[2]===1,!1,d)}}});var ud,ld,dd,Li,Fi,cd,pd,md,fd,ji,qi=q(()=>{"use strict";Pe();Hi();Gi();$t();Wt();ud=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,ld=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},dd=(e,t,r,o,n,s,u,d,a,p)=>{let h=e.length-2,v=p.length===0;if(a.length===0)for(let b=0;b<h;++b)a.push(0);let g=e[0],w=t[d?3:1]*n;for(let b=0,$=e.length-h-(d?1:0);b<h;++b,++$){let C=e[$],A=v?C*u[b]:p[b],I=ud(C,u[b],s[b],t[$],r[b],A);ld(I,o,s,b,b+h),v&&p.push(u[b]*(C-1)+a[b]+(t[$]-1)*r[b]+1-s[b]-s[b+h])}p.splice(0,0,g),p.splice(d?3:1,0,w)},Li=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((g,w)=>g*w,1)===0){r.length=0;for(let g=2;g<t[1].dims.length;++g)r.push(t[1].dims[g])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,a=e.dilations.slice();if(a.reduce((g,w)=>g+w,0)===0){let g=t[0].dims.length-2;a=new Array(g).fill(1)}let p=e.strides.slice();if(p.reduce((g,w)=>g+w,0)===0){let g=t[0].dims.length-2;p=new Array(g).fill(1)}dd(d,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),v=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:v}),h},Fi=e=>{let t=qr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,v=e.outputShape;return te({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:v,pads:d,strides:a,wIsConst:p,...t})},cd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,v)=>h+v,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,v)=>h+v,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,v)=>h+v,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,v)=>h+v,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},pd=[2,3,1,0],md=(e,t,r)=>{let o=Li(r,t),n=r.format==="NHWC",s=t.length===3;if(o.group!==1||o.group===1){e.compute(Un(t,o));return}let u=o.outputShape,d=u[n?1:2],a=u[n?2:3],p=u[n?3:1],h=t[1].dims[2],v=t[1].dims[3],g=t[0].dims[n?3:1],w=n?d*a:p,b=n?p:d*a,$=h*v*g,C=!0,A=e.kernelCustomData.wT??e.compute(tt(t[1],pd),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let I=[t[0],A];s&&(!n&&t[2].dims.length===1?I.push(t[2].reshape([t[2].dims[0],1,1])):I.push(t[2])),e.compute(Ui(I,o,u,w,b,$,s,C),{inputs:I})},fd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=Li({...t,pads:d,strides:u,dilations:s,kernelShape:n},o);e.compute(Un(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},ji=(e,t)=>{cd(e.inputs,t),e.inputs[0].dims.length===3?fd(e,t):md(e,e.inputs,t)}});var Hn,Qr,Ki,hd,gd,Gn,Ln,Yi,yd,Zi,Xi,Qi=q(()=>{"use strict";Ie();Pe();$e();Hn="[a-zA-Z]|\\\\.\\\\.\\\\.",Qr="("+Hn+")+",Ki="^"+Qr+"$",hd="("+Qr+",)*"+Qr,gd="^"+hd+"$",Gn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Ln=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(gd)))throw new Error("Invalid LHS term");if(o.split(",").forEach((d,a)=>{let p=t[a].dims.slice();if(!d.match(RegExp(Ki)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,a])=>a.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(Qr)))throw new Error("Invalid RHS");n.match(RegExp(Hn,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(d);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,d=[],a=0;if(!t.match(RegExp(Ki))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Hn,"g")),h=new Gn(n);return p?.forEach((v,g)=>{if(v==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-p.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(d=o.slice(a,a+w),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<d.length;b++){let $=String.fromCharCode("0".charCodeAt(0)+b);h.addSymbol($,g+b),this.addSymbol($,o[a++],n)}}else h.addSymbol(v,g+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(v,o[a++],n)}),h}},Yi=e=>e+"_max",yd=(e,t,r,o,n)=>{let u=t.map((w,b)=>e[b]?w.length:w).map((w,b)=>N(`input${b}`,r,w)),d=V.size(n),a=Ee(n.length),p=a?n.length:n,h=K("output",r,p),v=[...o.symbolToInfo.keys()].filter(w=>!o.rhs.symbolToIndices.has(w)),g=w=>{let b=[],$="var prod = 1.0;",C="var sum = 0.0;",A="sum += prod;",I=[],M=[],_=[],B=[],O=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((z,j)=>{if(o.rhs.symbolToIndices.has(j)){let Z=o.rhs.symbolToIndices.get(j)?.[0];Z!==void 0&&o.lhs.forEach((R,Y)=>{if(z.inputIndices.includes(Y)){let fe=R.symbolToIndices.get(j);if(fe===void 0)throw new Error("Invalid symbol error");fe.forEach(Q=>{b.push(`${u[Y].indicesSet(`input${Y}Indices`,Q,h.indicesGet("outputIndices",Z))}`)})}})}else o.lhs.forEach((Z,R)=>{if(z.inputIndices.includes(R)){let Y=Z.symbolToIndices.get(j);if(Y===void 0)throw new Error("Invalid symbol error");Y.forEach(fe=>{I.push(`${u[R].indicesSet(`input${R}Indices`,fe,`${j}`)}`)}),B.push(`prod *= ${u[R].getByIndices(`input${R}Indices`)};`)}}),M.push(`for(var ${j}: u32 = 0; ${j} < uniforms.${Yi(j)}; ${j}++) {`),_.push("}")});let W=O?[...b,`let sum = ${u.map((z,j)=>z.getByIndices(`input${j}Indices`)).join(" * ")};`]:[...b,C,...M,...I,$,...B,A,..._];return`\n            ${w.registerUniforms(v.map(z=>({name:`${Yi(z)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,h)}\n\n            ${w.mainStart()}\n            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${h.offsetToIndices("global_idx")};\n            ${u.map((z,j)=>`var input${j}Indices: ${u[j].type.indices};`).join(`\n`)}\n            ${W.join(`\n`)};\n            ${h.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=v.filter($=>o.symbolToInfo.has($)).map($=>({type:"uint32",data:o.symbolToInfo.get($)?.dimValue||0}));w.push({type:"uint32",data:d});let b=t.filter(($,C)=>e[C]).map(($,C)=>[...me($)]).reduce(($,C)=>$.concat(C),w);return a&&b.push(...me(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:b}},getShaderSource:g}},Zi=(e,t)=>{let r=new Ln(e.inputs,t.equation),o=e.inputs.map((u,d)=>Ee(u.dims.length)),n=r.outputDims,s=e.inputs.map((u,d)=>u.dims);e.compute(yd(o,s,e.inputs[0].dataType,r,n))},Xi=e=>{let t=e.equation.replace(/\\s+/g,"");return te({equation:t})}});var bd,Ji,wd,vd,es,ts=q(()=>{"use strict";Ie();$e();bd=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},Ji=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},wd=(e,t)=>e.length>t.length?Ji(e,t):Ji(t,e),vd=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=wd(t,r),n=V.size(o),s=e[0].dataType,u=Ee(t.length),d=u?t.length:t,a=N("input",s,d),p=Ee(o.length),h=p?o.length:o,v=K("output",s,h),g=b=>`\n  const inputShape = ${a.indices(...t)};\n  ${b.registerUniform("vec_size","u32").declareVariables(a,v)}\n  ${b.mainStart()}\n  ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    let outputIndices = ${v.offsetToIndices("global_idx")};\n    var inputIndices: ${a.type.indices};\n    for (var i = 0; i < ${t.length}; i++) {\n      if (${a.indicesGet("inputShape","i")} == 1) {\n        ${a.indicesSet("inputIndices","i",0)}\n      } else {\n        ${a.indicesSet("inputIndices","i",v.indicesGet("outputIndices",`i + ${o.length-t.length}`))}\n      }\n    }\n    ${v.setByOffset("global_idx",a.getByIndices("inputIndices"))}\n  }`,w=[{type:"uint32",data:n}];return u&&w.push(...me(t)),p&&w.push(...me(o)),{name:"Expand",shaderCache:{hint:`${o}`,inputDependencies:[u?"rank":"dims"]},getShaderSource:g,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:w})}},es=e=>{bd(e.inputs),e.compute(vd(e.inputs),{inputs:[0]})}});var $d,Sd,rs,ns,os=q(()=>{"use strict";Ie();Pe();$e();$d=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Sd=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=V.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let d=r[s],a=V.size(u),p=Ee(e[0].dims.length),h=p?e[0].dims.length:e[0].dims,v=Ee(e[1].dims.length),g=v?e[1].dims.length:e[1].dims,w=Ee(u.length),b=w?u.length:u,$=N("data",e[0].dataType,h),C=N("inputIndices",e[1].dataType,g),A=K("output",e[0].dataType,b),I=[{type:"uint32",data:a},{type:"int32",data:d},{type:"uint32",data:s}];p&&I.push(...me(e[0].dims)),v&&I.push(...me(e[1].dims)),w&&I.push(...me(u));let M=[];M.push(p?"rank":"dims"),M.push(v?"rank":"dims");let _=()=>{let O=o.length,W=`var indicesIndices  = ${C.type.indices}(0);`;for(let z=0;z<O;z++)W+=`${O>1?`indicesIndices[${z}]`:"indicesIndices"} = ${u.length>1?`outputIndices[uniforms.axis + ${z}]`:"outputIndices"};`;W+=`\n        var idx = ${C.getByIndices("indicesIndices")};\n        if (idx < 0) {\n          idx = idx + uniforms.axisDimLimit;\n        }\n        var dataIndices = ${$.type.indices}(0);\n      `;for(let z=0,j=0;z<n;z++)z===s?(W+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = u32(idx);`,j+=O):(W+=`${n>1?`dataIndices[${z}]`:"dataIndices"} = ${u.length>1?`outputIndices[${j}]`:"outputIndices"};`,j++);return W},B=O=>`\n      ${O.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables($,C,A)}\n      ${O.mainStart()}\n        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        let outputIndices = ${A.offsetToIndices("global_idx")};\n        ${_()};\n        let value = ${$.getByIndices("dataIndices")};\n        ${A.setByOffset("global_idx","value")};\n      }`;return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:M},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:I}),getShaderSource:B}},rs=e=>te({axis:e.axis}),ns=(e,t)=>{let r=e.inputs;$d(r),e.compute(Sd(e.inputs,t))}});var xd,Id,as,is,ss=q(()=>{"use strict";Ie();Pe();$e();xd=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Id=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=V.computeStrides(r),u=V.size(r),d=e[1].dims,a=e[1].dataType,p=V.size(d),h=V.normalizeAxis(t.axis,n),v=r[h],g=d.slice(0),w=V.size(g),b=N("input",o,r),$=N("indices",a,[p]),C=K("output",o,g),A=I=>`\n      const inputStrides = array<u32, ${s.length}>(${s.map(M=>`${M}u`).join(",")});\n      ${I.declareVariables(b,$,C)}\n      ${I.mainStart()}\n      ${I.guardAgainstOutOfBoundsWorkgroupSizes(w)}\n\n      let outputIndices = ${C.offsetToIndices("global_idx")};\n\n      var idx = ${$.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + ${v};\n      }\n\n      var srcOffset = u32(0);\n\n      for (var i = 0; i < ${r.length}; i++) {\n        if (i == ${h}) {\n          srcOffset +=  u32(idx) * inputStrides[i];\n        } else {\n          srcOffset += ${C.indicesGet("outputIndices","i")} * inputStrides[i];\n        }\n      }\n\n      // Should never hit this with valid values in indices\n      // This is a guard against malicious data in the indices input\n      if (srcOffset < 0 || srcOffset >= ${u}) {\n        return;\n      }\n\n      output[global_idx] = input[srcOffset];\n  }`;return{name:"GatherElements",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:g,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)}}),getShaderSource:A}},as=e=>te({axis:e.axis}),is=(e,t)=>{let r=e.inputs;xd(r),e.compute(Id(e.inputs,t))}});var Cd,Ad,_d,us,ls,ds=q(()=>{"use strict";Ie();Pe();$e();Cd=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ad=(e,t,r)=>{if(r.length===0)return"0u";let o=r.length===1&&e!==1||r.length===2&&r[0]!==e,n=r[r.length-1]!==t,s="0u";return o||(s+=`+ m * ${r[r.length-1]}u`),n||(s+="+n"),s},_d=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Mr.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let a=V.size(d),p="";t.transA&&t.transB?p="value += a[k * M + m] * b[n * K + k];":t.transA&&!t.transB?p="value += a[k * M + m] * b[k * N + n];":!t.transA&&t.transB?p="value += a[m * K + k] * b[n * K + k];":!t.transA&&!t.transB&&(p="value += a[m * K + k] * b[k * N + n];");let h=_e(e[0].dataType),v=t.alpha===1?"":"value *= alpha;",g=e.length===3?`value += beta * c[${Ad(n,s,e[2].dims)}];`:"",w=[`@group(0) @binding(0) var<storage, read> a : array<${h}>;`,`@group(0) @binding(1) var<storage, read> b : array<${h}>;`];e.length===3&&w.push(`@group(0) @binding(2) var<storage, read> c : array<${h}>;`);let b=$=>`\n  const M: u32 = ${n}u;\n  const N: u32 = ${s}u;\n  const K: u32 = ${u}u;\n  const alpha = ${h}(${t.alpha});\n  const beta = ${h}(${t.beta});\n\n  ${w.join(`\n`)}\n  @group(0) @binding(${e.length}) var<storage, read_write> output : array<${h}>;\n\n  ${$.mainStart()}\n    ${$.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${h}(0);\n    for (var k: u32 = 0u; k<${u}u; k++) {\n      ${p}\n    }\n\n    ${v}\n    ${g}\n    output[global_id.x] = value;\n\n  }`;return{name:"Gemm",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:b}},us=(e,t)=>{Cd(e.inputs),e.compute(_d(e.inputs,t))},ls=e=>te(e)});var Td,Ed,Od,kd,cs,ps,ms=q(()=>{"use strict";Ne();Ie();Pe();$e();Td={name:"InstanceNormalization"},Ed=(e,t)=>{let r=e[0].dims,o=r,n=2,s=V.sizeToDimension(r,n),u=V.sizeFromDimension(r,n),d=r[1],a=N("x",e[0].dataType,[r[0],r[1],u]),p=N("scale",e[1].dataType,e[1].dims),h=N("bias",e[2].dataType,e[2].dims),v=K("output",e[0].dataType,[r[0],r[1],u]),g=[a,p,h,v],w=a.type.value,b=64,$=C=>`\n\n  const C: u32 = ${d};\n  const normSize: u32 = ${u};\n  const epsilon: f32 = ${t.epsilon};\n  var<workgroup> meanShared : ${w};\n  var<workgroup> squaredNormShared : ${w};\n  var<workgroup> workgroupShared : array<${w}, ${b}>;\n  const workgroupSize = ${b}u;\n  ${C.declareVariables(...g)}\n  ${C.mainStart(b)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${w} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${a.get("batch","channel","h")};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${w}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${a.get("batch","channel","h")} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${w}(normSize) + epsilon);\n    let channelScale = invStdDev * ${p.getByOffset("channel")};\n    let channelShift = ${h.getByOffset("channel")} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${a.get("batch","channel","h")} * channelScale + channelShift;\n      ${v.set("batch","channel","h","value")};\n    }\n  }`;return{...Td,shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s}}),getShaderSource:$}},Od=(e,t,r,o,n,s,u,d)=>{let a=Ke(u),p=N("input",t.dataType,t.dims,a),h=N("scale",r.dataType,r.dims,a),v=N("bias",o.dataType,o.dims,a),g=64,w=a===1?"vec2f":`mat2x${a}f`,b=a===1?"f32":`vec${a}f`,$=(B,O)=>`${w}(${B}, ${O})`,C=n*u/a,A=Math.ceil(s/g),I=B=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${s*u/a};\n\n  ${B.declareVariables(p)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${w}>;\n\n  ${B.mainStart(g)}\n    let currentImageNumber = global_idx / ${g} / C;\n    let currentChannelNumber = (global_idx / ${g}) % C;\n    let wgId = global_idx % ${g};\n    let wgOffset = wgId * ${A};\n    if (wgOffset >= H) {\n        return;\n    }\n    let wgMax = min(wgOffset + ${A}, H);\n\n    let offset = currentImageNumber * imageSize + currentChannelNumber;\n    var sum = ${Le("f32",a)};\n    var squaredSum = ${Le("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${b}(input[offset + i * C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${$("sum","squaredSum")};\n  }`,M=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u})},getRunData:()=>({outputs:[{dims:[n,u,g,2],dataType:1}],dispatchGroup:{x:n*u/a}}),getShaderSource:I},{inputs:[t],outputs:[-1]})[0],_=B=>`\n  const H: u32 = ${s};\n  const C: u32 = ${u/a};\n  const imageSize: u32 = ${g*u/a};\n  const epsilon: f32 = ${d};\n\n  @group(0) @binding(0) var<storage, read> input : array<${w}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${h.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${v.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${w}>;\n\n  ${B.mainStart()}\n    ${B.guardAgainstOutOfBoundsWorkgroupSizes(C)}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    let offset = currentImageNumber * imageSize;\n    var sum = ${Le("f32",a)};\n    var squaredSum = ${Le("f32",a)};\n    for (var i: u32 = 0; i < ${g}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${g}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(H);\n    squaredSum = squaredSum / f32(H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + epsilon);\n    let channelScale = invStdDev * ${b}(scale[currentChannelNumber]);\n    let channelShift = ${b}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${$("channelScale","channelShift")};\n  }`;return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:JSON.stringify({components:a,n,h:s,c:u,epsilon:d})},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(C/64)}}),getShaderSource:_},{inputs:[M,r,o],outputs:[-1]})[0]},kd=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],d=V.sizeFromDimension(o,1)/u,a=Ke(u),p=V.size(n)/a,h=N("input",t[0].dataType,t[0].dims,a),v=K("output",t[0].dataType,n,a),g=_e(t[0].dataType),w=a===1?"vec2f":`mat2x${a}f`,b=a===1?g:`vec${a}<${g}>`,$=Od(e,t[0],t[1],t[2],s,d,u,r.epsilon),C=A=>`\n  const H: u32 = ${d};\n  const C: u32 = ${u/a};\n\n  @group(0) @binding(0) var<storage, read> input : array<${h.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${w}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${v.type.storage}>;\n\n  ${A.mainStart()}\n    let currentImageNumber = global_idx / (C * H);\n    let currentChannelNumber = global_idx % C;\n\n    let scaleOffset = currentImageNumber * C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${b}(scale[0]), ${b}(scale[1]));\n  }`;e.compute({name:"InstanceNormalization",shaderCache:{hint:`${r.cacheKey}`},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)}}),getShaderSource:C},{inputs:[t[0],$]})},cs=e=>te({epsilon:e.epsilon,format:e.format}),ps=(e,t)=>{t.format==="NHWC"?kd(e,e.inputs,t):e.compute(Ed(e.inputs,t))}});var Pd,Rd,fs,hs,gs=q(()=>{"use strict";Ne();Ie();Pe();$e();Pd=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Rd=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,d=V.normalizeAxis(t.axis,o.length),a=V.sizeToDimension(o,d),p=V.sizeFromDimension(o,d),h=V.size(n.dims),v=s?V.size(s.dims):0;if(h!==p||s&&v!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${v}`);let g=[];for(let _=0;_<o.length;++_)_<d?g.push(o[_]):g.push(1);let w=Ke(p),b=_e(e[0].dataType),$=[N("x",e[0].dataType,e[0].dims,w),N("scale",n.dataType,n.dims,w)];s&&$.push(N("bias",s.dataType,s.dims,w)),$.push(K("output",e[0].dataType,u,w));let C=r>1,A=r>2;C&&$.push(K("meanDataOutput",1,g)),A&&$.push(K("invStdOutput",1,g));let I=_=>`\n  const normSize: f32 = ${p};\n  const normSizeVectorized: u32 = ${p/w};\n  const epsilon: f32 = ${t.epsilon};\n\n  ${_.declareVariables(...$)}\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let offset = global_idx * normSizeVectorized;\n    var meanVector = ${Le("f32",w)};\n    var meanSquareVector = ${Le("f32",w)};\n\n    for (var h: u32 = 0u; h < normSizeVectorized; h++) {\n      let value = ${Je(b,w,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${et("meanVector",w)} / normSize;\n    let meanSquare = sqrt(${et("meanSquareVector",w)} \n      / normSize - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSizeVectorized; j++) {\n      let f32input = ${Je(b,w,"x[j + offset]")};\n      let f32scale = ${Je(b,w,"scale[j]")};\n      output[j + offset] = ${$[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${Je(b,w,"bias[j]")}`:""}\n      );\n    }\n\n    ${C?"meanDataOutput[global_idx] = mean":""};\n    ${A?"invStdOutput[global_idx] = 1 / meanSquare":""};\n  }`,M=[{dims:u,dataType:e[0].dataType}];return C&&M.push({dims:g,dataType:1}),A&&M.push({dims:g,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${t.cacheKey}|${r}|${e.length}`},getRunData:()=>({outputs:M,dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:I}},fs=e=>te({axis:e.axis,epsilon:e.epsilon}),hs=(e,t)=>{Pd(e.inputs),e.compute(Rd(e.inputs,t,e.outputCount))}});var Bd,bs,ys,Md,Fn,ws,vs=q(()=>{"use strict";Ie();Pe();Rr();En();$e();Wt();Bd=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,v=r.dims[0],g=r.dims[1],w=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=g,$=0,C=0,A=Math.floor(w/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');$=a.dims[2],C=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let I;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');I=2,b=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==A)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');I=5,b=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==A)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');I=0,b=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');I=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let M=0;if(u){M=8;let z=u.dims;throw z.length===1?z[0]===v?M=1:z[0]===3*v+2&&(M=3):z.length===2&&z[0]===v&&z[1]===b&&(M=5),M===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let _=!1,B=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(b!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');B=n.dims[2]}else{if(b!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');B=n.dims[1]*n.dims[3],_=!0}}let O=$+b,W=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:v,sequenceLength:g,pastSequenceLength:$,kvSequenceLength:b,totalSequenceLength:O,maxSequenceLength:C,inputHiddenSize:0,hiddenSize:w,vHiddenSize:B,headSize:A,vHeadSize:Math.floor(B/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:M,scale:t.scale,broadcastResPosBias:W,passPastInKv:_,qkvFormat:I}},bs=e=>te({...e}),ys=te({perm:[0,2,1,3]}),Md=(e,t,r,o,n,s,u)=>{let d=[o,n,s],a=V.size(d),p=_e(t.dataType),h=v=>`\n  const biasOffset = ${u}u;\n  const hiddenSize = ${s}u;\n\n  @group(0) @binding(0) var<storage, read> qkv: array<${p}>;\n  @group(0) @binding(1) var<storage, read> bias: array<${p}>;\n  @group(0) @binding(2) var<storage, read_write> qkv_with_bias: array<${p}>;\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes(a)}\n    let biasOffsetIdx = (global_idx % hiddenSize) + biasOffset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[biasOffsetIdx];\n  }`;return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{hint:JSON.stringify({batchSize:o,sequenceLength:n,hiddenSize:s,biasOffset:u})},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Fn=(e,t,r,o,n,s,u,d)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Md(e,s,u,t,o,r*n,d),a=a.reshape([t,o,r,n]),e.compute(tt(a,ys.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(tt(a,ys.perm),{inputs:[a],outputs:[-1]})[0]},ws=(e,t)=>{let r=Bd(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Fn(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Nr(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Fn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Fn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Nr(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Dd,zd,Vd,Wd,Nd,Ud,Hd,Gd,Ld,$s,Ss,xs=q(()=>{"use strict";Ne();Ie();Pe();$e();Dd=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},zd=(e,t,r,o,n,s)=>{let u=t.length,d="";for(let a=u-1;a>=0;--a)d+=`\n            k = i32(${e.indicesGet("indices",a)}) - ${o[a]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${t[a]}) {\n              break;\n            }\n            offset += k * ${r[a]};\n        `;return`\n          value = ${n}(${s});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${d}\n            value = x[offset];\n          }\n      `},Vd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2*(t[u]-1)};\n                  k = k % _2n_1;\n                  if(k >= ${t[u]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Wd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${t[u]}) {\n                  k = ${t[u]-1};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Nd=(e,t,r,o)=>{let n=t.length,s="";for(let u=n-1;u>=0;--u)s+=`\n                k = i32(${e.indicesGet("indices",u)}) - ${o[u]};\n                if (k < 0)  {\n                  k += ${t[u]};\n                }\n                if (k >= ${t[u]}) {\n                  k -= ${t[u]};\n                }\n                offset += k * ${r[u]};\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${s}\n              value = x[offset];\n          `},Ud=(e,t,r,o,n)=>{switch(o.mode){case 0:return zd(e,t,r,o.pads,n,o.value);case 1:return Vd(e,t,r,o.pads);case 2:return Wd(e,t,r,o.pads);case 3:return Nd(e,t,r,o.pads);default:throw new Error("Invalid mode")}},Hd=(e,t,r,o)=>{let n=t[0].dims,s=V.padShape(n.slice(),r.pads),u=V.size(s),d=V.computeStrides(n),a=K("output",t[0].dataType,s),p=N("x",t[0].dataType,n),h=Ud(a,n,d,r,o);return`\n              ${e.declareVariables(p,a)}\n              ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n\n              let indices = ${a.offsetToIndices("global_idx")};\n\n              var value = ${o}(0);\n              ${h}\n              output[global_idx] = value;\n          }`},Gd=(e,t)=>{let r=V.padShape(e[0].dims.slice(),t.pads);return{name:"Pad",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(V.size(r)/64)}}),getShaderSource:o=>Hd(o,e,t,"f32")}},Ld=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let a=0;a<d.length;a++)s[Number(d[a])]=Number(r[a]),s[Number(d[a])+n]=Number(r[a+d.length])}else r.forEach((d,a)=>s[Number(a)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),te({mode:t.mode,value:o,pads:u})}else return t},$s=(e,t)=>{Dd(e.inputs);let r=Ld(e.inputs,t);e.compute(Gd(e.inputs,r),{inputs:[0]})},Ss=e=>{let t=e.mode,r=e.value,o=e.pads;return te({mode:t,value:r,pads:o})}});var Jr,Is,Cs,As,_s,Ts,Es,Os,ks,Ps,Rs,Bs,Ms,Ds,zs,Vs=q(()=>{"use strict";Ie();Pe();$e();Jr=e=>{if(!e||e.length!==1)throw new Error("Pool ops requires 1 input.");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("Pool ops supports 1-D or 2-D inputs only for now.")},Is=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();Et.adjustPoolAttributes(r,n,u,d,a,p);let h=Et.computePoolOutputShape(r,n,d,a,u,p,t.autoPad),v=Object.assign({},t);s?Object.assign(v,{kernelShape:u,strides:d,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign(v,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let g=h.slice();return g.push(g.splice(1,1)[0]),[v,o?g:h]},Cs=(e,t,r,o,n,s,u,d)=>{let a=n.format==="NHWC",p=r,h=t.type.value,v=p.length,g=V.size(o),w=K("output",t.type.tensor,o);if(n.kernelShape.length<=2){let b=n.kernelShape[n.kernelShape.length-1],$=n.strides[n.strides.length-1],C=n.pads[n.pads.length/2-1],A=n.pads[n.pads.length-1],I=v-(a?2:1),M="",_="",B="";if(C+A!==0?M=`\n                for (var i: u32 = 0u; i < ${b}u; i++) {\n                  xIndices[${I}] = indices[${I}] * ${$} - ${C} + i;\n                  if (xIndices[${I}] < 0 || xIndices[${I}] >= ${p[I]}) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:M=`\n                for (var i: u32 = 0u; i < ${b}u; i++) {\n                  xIndices[${I}] = indices[${I}] * ${$} - ${C} + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let W=n.kernelShape[n.kernelShape.length-2],z=n.strides[n.strides.length-2],j=n.pads[n.pads.length/2-2],Z=n.pads[n.pads.length-2],R=v-(a?3:2),Y=p[R];j+Z!==0?_=`\n                for (var j: u32 = 0u; j < ${W}u; j++) {\n                  xIndices[${R}] = indices[${R}] * ${z} - ${j} + j;\n                  if (xIndices[${R}] < 0 || xIndices[${R}] >= ${Y}) {\n                    pad+= ${b};\n                    continue;\n                  }\n              `:_=`\n                for (var j: u32 = 0u; j < ${W}u; j++) {\n                  xIndices[${R}] = indices[${R}] * ${z} - ${j} + j;\n                `,B=`\n              }\n            `}return`\n            ${e.declareVariables(t,w)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n\n              let indices = ${w.offsetToIndices("global_idx")};\n              var xIndices = ${w.offsetToIndices("global_idx")};\n\n              var value: ${h} = ${h}(${d});\n              var pad = 0;\n              ${_}\n              ${M}\n              ${B}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(a)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let b=V.size(n.kernelShape),$=V.computeStrides(n.kernelShape),C=$.length,A=n.pads.length,I=n.pads.reduce((B,O)=>B+O),M="";return I?M=`\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:M=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.declareVariables(t,w)}\n\n            const pads = array<u32, ${A}>(${n.pads.map(B=>`${B}u`).join(",")});\n            const inputDims = array<u32, ${v}>(${p.map(B=>`${B}u`).join(",")});\n            const kernelStrides = array<u32, ${C}>(${$.map(B=>`${B}u`).join(",")});\n            const strides = array<u32, ${C}>(${n.strides.map(B=>`${B}u`).join(",")});\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n\n              let indices = ${w.offsetToIndices("global_idx")};\n              let xIndices = ${w.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${C}>;\n\n              var value = ${w.type.value}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${b}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${C-1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${C-1}] = offset;\n\n                isPad = false;\n                for (var j = ${v-C}u; j < ${v}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${v-C}u]\n                    + offsets[j - ${v-C}u] - pads[j - 2u];\n                  ${M}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},As=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),_s=(e,t,r,o)=>{let[n,s]=Is(t,o,r),u=V.size(n.kernelShape),d=N("x",t.dataType,t.dims),a=d.type.value,p="value += x_val;",h="";return n.countIncludePad?h+=`value /= ${a}(${u});`:h+=`value /= ${a}(${u} - pad);`,{name:e,shaderCache:{hint:o.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(s)/64)}}),getShaderSource:v=>Cs(v,d,t.dims,s,n,p,h,"0.0")}},Ts=e=>{let t=e.count_include_pad!==0,r=As(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");return te({countIncludePad:t,...r})},Es=(e,t)=>{Jr(e.inputs),e.compute(_s("AveragePool",e.inputs[0],!1,t))},Os={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:""},ks=e=>{let t=e.format;return{format:t,...Os,cacheKey:t}},Ps=(e,t)=>{Jr(e.inputs),e.compute(_s("GlobalAveragePool",e.inputs[0],!0,t))},Rs=(e,t,r,o)=>{let[n,s]=Is(t,o,r),u=`\n      value = max(x_val, value);\n    `,d="",a=N("x",t.dataType,t.dims);return{name:e,shaderCache:{hint:o.cacheKey},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(s)/64)}}),getShaderSource:p=>Cs(p,a,t.dims,s,n,u,d,"-1e5")}},Bs=(e,t)=>{Jr(e.inputs),e.compute(Rs("MaxPool",e.inputs[0],!1,t))},Ms=e=>{let t=e.storage_order,r=e.dilations,o=As(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");return te({storageOrder:t,dilations:r,...o})},Ds=e=>{let t=e.format;return{format:t,...Os,cacheKey:t}},zs=(e,t)=>{Jr(e.inputs),e.compute(Rs("GlobalMaxPool",e.inputs[0],!0,t))}});var jd,qd,Ws,Ns=q(()=>{"use strict";kn();Ne();$e();jd=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},qd=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=K("output",o,s),a=d.type.storage,p=h=>`\n        ${h.declareVariables(d)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        output[global_idx] = ${a}(${e}) + ${a}(global_idx) * ${a}(${r});\n      }`;return{name:"Range",shaderCache:{hint:[e,t,r].map(h=>h.toString()).join("_")},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)}})}},Ws=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Hr.webgpu.validateInputContent&&jd(t,r,o),e.compute(qd(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Kd,Yd,Zd,Xd,Qd,Jd,ec,tc,rc,nc,oc,ac,ic,sc,uc,Us,Hs,Gs=q(()=>{"use strict";Ie();Pe();$e();Kd=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for linear mode")}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Yd=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},Zd=(e,t,r,o,n,s)=>{let[u,d,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Kd(o,t),t.axes.length>0&&Yd(o,t.axes,p).forEach((h,v)=>o[v]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},Xd=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: ${t}, xScale: ${t}, lengthResized: ${t},\n     lengthOriginal: ${t}, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return"return xResized / xScale;";case"pytorch_half_pixel":return"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }";case"tf_half_pixel_for_nn":return"return (xResized + 0.5) / xScale;";case"align_corners":return"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }";case"tf_crop_and_resize":return`if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);                   }`;case"half_pixel_symmetric":return["const outputWidth = xScale * lengthResized;","const adjustment = lengthResized / outputWidth;","const center = lengthOriginal / 2;","const offset = center * (1 - adjustment);","return offset + ((xResized + 0.5) / xScale) - 0.5;"].join(`\n`);case"half_pixel":return"return ((xResized + 0.5) / xScale) - 0.5;";default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Qd=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Jd=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},ec=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},tc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},rc=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      const inputShape = array<u32, ${t.length}>(${t.map(s=>`${s}u`).join(",")});\n      const outputShape = array<u32, ${r.length}>(${r.map(s=>`${s}u`).join(",")});\n      const scales = array<${e.type.value}, ${o.length}>(${o.map(s=>`${s}f`).join(",")});\n      const roi = array<${e.type.value}, ${n.length}>(${n.map(s=>`${s}f`).join(",")});\n      var originalIndices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var outputIndex = ${r.length===1?"outputIndices":"outputIndices[i]"};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = ${e.type.value}(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${t.length}]);\n        }\n      }\n      return originalIndices;\n    }`,nc=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n        const inputShape = array<u32, ${r.length}>(${r.map(d=>`${d}u`).join(",")});\n        const outputShape = array<u32, ${o.length}>(${o.map(d=>`${d}u`).join(",")});\n        const scales = array<${e.type.value}, ${n.length}>(${n.map(d=>`${d}`).join(",")});\n        const roi = array<${e.type.value}, ${s.length}>(${s.map(d=>`${d}`).join(",")});\n        var inputIndices: ${e.type.indices};\n        for (var i:u32 = 0; i < ${o.length}; i++) {\n          var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(${e.type.value}(outputIndex), scales[i],\n                    ${e.type.value}(outputShape[i]), ${e.type.value}(inputShape[i]), roi[i], roi[i + ${r.length}]);\n            if (!${u} || (original_idx >= 0 && original_idx < ${e.type.value}(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (${e.type.value}(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${e.indicesSet("inputIndices","i","inputIndex")}\n        }\n        return inputIndices;\n    }`,oc=(e,t)=>`\n    fn checkInputIndices(inputIndices: ${e.type.indices}) -> bool {\n      const inputShape = array<u32, ${t.length}>(${t.map(r=>`${r}u`).join(",")});\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var inputIndex = ${t.length===1?"inputIndices":"inputIndices[i]"};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`,ac=(e,t,r,o,n,s)=>{let[u,d,a,p]=r.length===2?[-1,0,1,-1]:o[1]===1?[0,2,3,1]:[0,1,2,3],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var inputIndices: ${e.type.indices};\n      inputIndices[${d}] = max(0, min(row, ${r[d]} - 1));\n      inputIndices[${a}] = max(0, min(col, ${r[a]} - 1));\n      if (${r.length} > 2) {\n        inputIndices[${p}] = channel;\n        inputIndices[${u}] = batch;\n      };\n      return input[${e.indicesToOffset("inputIndices")}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:${h} = originalIndices[${d}];\n      var col:${h} = originalIndices[${a}];\n      if (${n} && (row < 0 || row > (${r[d]} - 1) || col < 0 || col > ${r[a]} - 1)) {\n        return ${s};\n      }\n      row = max(0, min(row, ${r[d]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${r.length>2}) {\n        channel = u32(originalIndices[${p}]);\n        batch = u32(originalIndices[${u}]);\n      }\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = row - ${h}(row1);\n      var dx2: ${h} = ${h}(row2) - row;\n      var dy1 = col - ${h}(col1);\n      var dy2 = ${h}(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},ic=(e,t,r,o,n,s,u,d,a,p)=>{let[h,v]=r.length===2?[0,1]:n[1]===1?[2,3]:[1,2],g=e.type.value,w=b=>{let $=b===h?"row":"col";return`\n      fn ${$}CubicInterpolation(inputIndices: ${e.type.indices}, outputIndices: ${t.type.indices}) -> ${g} {\n        var outputIndex = ${o.length===1?"outputIndices":`outputIndices[${b}]`};\n        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(${g}(outputIndex), ${n[b]},\n        ${g}(${o[b]}), ${g}(${r[b]}), ${s[b]}, ${s[b]} + ${r.length});\n        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[b]} - 1))) {\n          return ${a};\n        }\n        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${$}: ${g} = originalIdx + ${g}(i);\n          if (${$} < 0 || ${$} >= ${r[b]}) {\n            if (${p}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${d}) {\n              return ${a};\n            } else {\n              ${$} = max(0, min(${$}, ${r[b]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${e.type.indices} = inputIndices;\n          inputIndicesCopy[${b}] = u32(${$});\n          data[i + 1] = ${b===h?`input[${e.indicesToOffset("inputIndicesCopy")}];`:`\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${w(h)};\n    ${w(v)};\n  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${g} = 1.0 - absS;\n    var twoMinusAbsS: ${g} = 2.0 - absS;\n    var onePlusAbsS: ${g} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {\n    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${t.type.indices}) -> ${g} {\n    var inputIndices: ${e.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `},sc=(e,t,r,o,n,s)=>{let u=e.dims,d=Jd(s,t.axes,u.length),a=ec(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((A,I)=>A===0?1:a[I]/A),t.keepAspectRatioPolicy!=="stretch"&&(a=tc(u,p,t)));let h=K("output",e.dataType,a),v=N("input",e.dataType,u),g=V.size(a),w=u.length===a.length&&u.every((A,I)=>A===a[I]),b=t.coordinateTransformMode==="tf_crop_and_resize",$=v.type.value,C=A=>`\n      ${w?"":`\n      ${Xd(t.coordinateTransformMode,$)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${oc(v,u)};\n              ${Qd(t.nearestMode,r,$)};\n              ${nc(v,h,u,a,p,d,b)};\n              `;case"linear":return`\n              ${rc(h,u,a,p,d)};\n              ${ac(v,h,u,p,b,t.extrapolationValue)};\n              `;case"cubic":return`\n            ${ic(v,h,u,a,p,d,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${A.declareVariables(v,h)}\n      ${A.mainStart()}\n        ${A.guardAgainstOutOfBoundsWorkgroupSizes(g)}\n        ${w?"output[global_idx] = input[global_idx];":`\n        let outputIndices = ${h.offsetToIndices("global_idx")};\n        var inputIndices: ${v.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                if (checkInputIndices(inputIndices)) {\n                  output[global_idx] = input[${v.indicesToOffset("inputIndices")}];\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return"output[global_idx] = bilinearInterpolation(outputIndices);";case"cubic":return"output[global_idx] = bicubicInterpolation(outputIndices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n        `}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${w}`},getShaderSource:C,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(g/64)}})}},uc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Us=(e,t)=>{let r=[],o=[],n=[],s=uc(e);Zd(e.inputs,t,s,r,o,n),e.compute(sc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},Hs=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return te({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:a,nearestMode:p})}});var lc,dc,Ls,Fs,js=q(()=>{"use strict";Ne();Ie();Pe();$e();lc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},dc=(e,t,r,o)=>{let n=e[0].dims,s=V.size(n),u=n,d=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,v=e.length>4,g=o&&r>1,w=o&&r>2,b=r>3,$=Ke(a),C=[N("x",e[0].dataType,e[0].dims,$),N("skip",e[1].dataType,e[1].dims,$),N("gamma",e[2].dataType,e[2].dims,$)];h&&C.push(N("beta",e[3].dataType,e[3].dims,$)),v&&C.push(N("bias",e[4].dataType,e[4].dims,$)),C.push(K("output",e[0].dataType,u,$)),g&&C.push(K("meanOutput",1,p)),w&&C.push(K("invStdOutput",1,p)),b&&C.push(K("inputSkipBiasSum",e[0].dataType,u,$));let A=_e(e[0].dataType),I=_=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/$};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${_.declareVariables(...C)}\n\n      ${_.mainStart()}\n        ${_.guardAgainstOutOfBoundsWorkgroupSizes(d/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${Le("f32",$)};\n        var squareSum = ${Le("f32",$)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${v?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${b?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${Je(A,$,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${et("sum",$)} / hiddenSize;\n        let variance = sqrt(${et("squareSum",$)} / hiddenSize - mean * mean + epsilon);\n        ${g?"meanOutput[global_idx] = mean;":""}\n        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${A}(mean)) / ${A}(variance) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,M=[{dims:u,dataType:e[0].dataType}];return r>1&&M.push({dims:p,dataType:1}),r>2&&M.push({dims:p,dataType:1}),r>3&&M.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:I,getRunData:()=>({outputs:M,dispatchGroup:{x:Math.ceil(d/a/64)}})}},Ls=(e,t)=>{lc(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(dc(e.inputs,t,e.outputCount,!1),{outputs:o})},Fs=e=>{let t=e.epsilon;return te({epsilon:t})}});var cc,en,pc,qs,mc,fc,Ks,Ys,Zs=q(()=>{"use strict";Ne();Ie();Pe();$e();cc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},en=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},pc=(e,t)=>{if(e.length>1){let r=en(e,1),o=en(e,2),n=en(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),te({starts:r,ends:o,axes:n})}else return t},qs=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},mc=(e,t,r,o,n)=>`fn calculateInputIndices(outputIndices: ${t.type.indices}) -> ${e.type.indices} {\n          var inputIndices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${n?`uniforms.input_shape${r.length>1?"[i]":""}`:"inputShape[i]"};\n            let steps_i  = ${n?`uniforms.steps${r.length>1?"[i]":""}`:"steps[i]"};\n            let signs_i  = ${n?`uniforms.signs${r.length>1?"[i]":""}`:"signs[i]"};\n            let starts_i  = ${n?`uniforms.starts${r.length>1?"[i]":""}`:"starts[i]"};\n            var outputIndex = ${o.length===1?"outputIndices":"outputIndices[i]"};\n            var inputIndex = outputIndex * steps_i + starts_i + carry;\n            carry = inputIndex / input_shape_i;\n            inputIndex = inputIndex % input_shape_i;\n            if (signs_i < 0) {\n              inputIndex = input_shape_i - inputIndex - 1u + starts_i;\n            }\n            ${r.length===1?"inputIndices":"inputIndices[i]"} = inputIndex;\n          }\n          return inputIndices;\n      }`,fc=(e,t)=>{let r=e[0].dims,o=V.size(r),n=t.axes.length>0?V.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=en(e,4);s.forEach(_=>_!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((_,B)=>qs(_,B,r,n,s)),d=t.ends.map((_,B)=>qs(_,B,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let _=0;_<r.length;++_)n.includes(_)||(u.splice(_,0,0),d.splice(_,0,r[_]),s.splice(_,0,1));let a=s.map(_=>Math.sign(_));s.forEach((_,B,O)=>{if(_<0){let W=(d[B]-u[B])/_,z=u[B],j=z+W*s[B];u[B]=j,d[B]=z,O[B]=-_}});let p=Ee(e[0].dims.length),h=p?e[0].dims.length:e[0].dims,v=r.slice(0);n.forEach((_,B)=>{v[_]=Math.ceil((d[_]-u[_])/s[_])});let g=p?v.length:v,w={dims:v,dataType:e[0].dataType},b=K("output",e[0].dataType,g),$=N("input",e[0].dataType,h),C=V.size(v),A=[],I=[];p&&(I.push({name:"starts",type:u.length>1?`vec${u.length}<u32>`:"u32"}),I.push({name:"signs",type:a.length>1?`vec${a.length}<i32>`:"i32"}),I.push({name:"steps",type:s.length>1?`vec${s.length}<u32>`:"u32"}),A.push({type:"uint32",data:u}),A.push({type:"int32",data:a}),A.push({type:"uint32",data:s})),I.push({name:"outputSize",type:"u32"}),A.push({type:"uint32",data:C}),p&&(A.push(...me(e[0].dims)),A.push(...me(v)));let M=_=>`\n      ${_.registerUniforms(I).declareVariables($,b)}\n        ${p?"":[`const signs = array<i32, ${a.length}>(${a.map(B=>`${B}i`).join(",")});`,`const starts = array<u32, ${u.length}>(${u.map(B=>`${B}u`).join(",")});`,`const steps = array<u32, ${s.length}>(${s.map(B=>`${B}u`).join(",")});`,`const inputShape = array<u32, ${r.length}>(${r.map(B=>`${B}u`).join(",")});`].join(`\n`)}\n\n        ${mc($,b,r,v,p)}\n        ${_.mainStart()}\n          ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let outputIndices = ${b.offsetToIndices("global_idx")};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${b.setByOffset("global_idx",$.getByIndices("inputIndices"))}\n      }`;return{name:"Slice",shaderCache:{hint:p?`${a.length}_${u.length}_${s.length}`:`${t.cacheKey} | ${e[4]?.dims??""}`,inputDependencies:[p?"rank":"dims"]},getShaderSource:M,getRunData:()=>({outputs:[w],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:A})}},Ks=(e,t)=>{cc(e.inputs,t);let r=pc(e.inputs,t);e.compute(fc(e.inputs,r),{inputs:[0]})},Ys=e=>{let t=e.starts,r=e.ends,o=e.axes;return te({starts:t,ends:r,axes:o})}});var hc,gc,Xs,Qs,Js=q(()=>{"use strict";Ie();Pe();$e();hc=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},gc=(e,t)=>{let r=e.dims,o=V.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=o/u,a=Ke(u),p=u/a,h=(C,A)=>A===4?`max(max(${C}.x, ${C}.y), max(${C}.z, ${C}.w))`:A===2?`max(${C}.x, ${C}.y)`:A===3?`max(max(${C}.x, ${C}.y), ${C}.z)`:C,v=N("x",e.dataType,e.dims,a),g=K("result",e.dataType,e.dims,a),w=v.type.value,b=_e(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,$=C=>`\n      var<workgroup> rowMaxShared : ${w};\n      var<workgroup> rowSumShared : ${w};\n      var<workgroup> threadShared : array<${w}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${C.registerUniform("packedCols","i32").declareVariables(v,g)}\n      ${C.mainStart()}\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${w}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${w}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${w}(${et("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:$}},Xs=(e,t)=>{hc(e.inputs),e.compute(gc(e.inputs[0],t))},Qs=e=>te({axis:e.axis})});var yc,bc,wc,vc,$c,eu,tu,ru=q(()=>{"use strict";Ie();Pe();$e();yc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},bc=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),te({numOutputs:o,axis:t.axis,splitSizes:r})},wc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,vc=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (outputNumber == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (outputNumber == ${o}) { ${n} }`)}return`\n      fn writeBufferData(outputNumber: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},$c=(e,t)=>{let r=e[0].dims,o=V.size(r),n=e[0].dataType,s=r.length,u=t.axis,d=u<0?r.length+u:u,a=new Array(t.numOutputs),p=N("input",n,r),h=new Array(t.numOutputs),v=[],g=[],w=0;for(let C=0;C<t.numOutputs;C++){w+=t.splitSizes[C],h[C]=w;let A=r.slice();A[t.axis]=t.splitSizes[C],g.push(A),a[C]=K(`output${C}`,n,g[C]),v.push({dims:g[C],dataType:e[0].dataType})}let b=s<2?"indices":`indices[${d}]`,$=C=>`\n  ${C.declareVariables(p,...a)}\n  const sizeInConcatAxis = array<u32, ${h.length}>(${h.map(A=>`${A}u`).join(",")});\n  ${wc(h.length)}\n  ${vc(a)}\n\n  ${C.mainStart()}\n    ${C.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n\n    var indices = ${p.offsetToIndices("global_idx")};\n    let outputNumber = calculateOutputIndex(${b});\n    if (outputNumber != 0) {\n        ${b} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey},getShaderSource:$,getRunData:()=>({outputs:v,dispatchGroup:{x:Math.ceil(o/64)}})}},eu=(e,t)=>{yc(e.inputs);let r=e.inputs.length===1?t:bc(e.inputs,t);e.compute($c(e.inputs,r),{inputs:[0]})},tu=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return te({axis:t,numOutputs:o,splitSizes:r})}});var nu,Sc,xc,Ic,ou,au=q(()=>{"use strict";Ne();Ie();$e();nu=e=>Array.from(e.getBigInt64Array(),Number),Sc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(nu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},xc=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},Ic=e=>{let t=e[0].dims,r=nu(e[1]),o=xc(t,r),n=V.size(o),s=e[0].dataType,u=N("input",s,t),d=K("output",s,o),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.declareVariables(u,d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      var inputIndices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let inputDimValue = ${d.indicesGet("outputIndices","i")}  % ${u.indicesGet("inputShape","i")};\n\n        ${u.indicesSet("inputIndices","i","inputDimValue")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("inputIndices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:a}},ou=e=>{Sc(e.inputs),e.compute(Ic(e.inputs),{inputs:[0]})}});var Cc,Ac,iu,su=q(()=>{"use strict";Ne();Ie();$e();Cc=(e,t,r,o,n)=>{let s=V.size(r),u=Math.ceil(s/4),d=K("outputData",n,r,4),a=N("aData",t[1].dataType,t[1].dims,4),p=N("bData",t[2].dataType,t[2].dims,4),h=N("cData",t[0].dataType,t[0].dims,4),v,g=(w,b,$)=>`select(${b}, ${w}, ${$})`;if(!o)v=d.setByOffset("global_idx",g(a.getByOffset("global_idx"),p.getByOffset("global_idx"),h.getByOffset("global_idx")));else{let w=(b,$,C="")=>{let A=`aData[indexA${$}][componentA${$}]`,I=`bData[indexB${$}][componentB${$}]`,M=`bool(cData[indexC${$}] & ${4278190080>>>(3-$)*8}u)`;return`\n            let outputIndices${$} = ${d.offsetToIndices(`global_idx * 4u + ${$}u`)};\n            let offsetA${$} = ${a.broadcastedIndicesToOffset(`outputIndices${$}`,d)};\n            let offsetB${$} = ${p.broadcastedIndicesToOffset(`outputIndices${$}`,d)};\n            let offsetC${$} = ${h.broadcastedIndicesToOffset(`outputIndices${$}`,d)};\n            let indexA${$} = offsetA${$} / 4u;\n            let indexB${$} = offsetB${$} / 4u;\n            let indexC${$} = offsetC${$} / 4u;\n            let componentA${$} = offsetA${$} % 4u;\n            let componentB${$} = offsetB${$} % 4u;\n            ${b}[${$}] = ${C}(${g(A,I,M)});\n          `};n===9?v=`\n            var data = vec4<u32>(0);\n            ${w("data",0,"u32")}\n            ${w("data",1,"u32")}\n            ${w("data",2,"u32")}\n            ${w("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:v=`\n            ${w("outputData[global_idx]",0)}\n            ${w("outputData[global_idx]",1)}\n            ${w("outputData[global_idx]",2)}\n            ${w("outputData[global_idx]",3)}\n          `}return`\n        ${e.declareVariables(h,a,p,d)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n        ${v}\n      }`},Ac=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(V.areEqual(t,r)&&V.areEqual(r,o)),u=t,d=V.size(t);if(s){let a=it.calcShape(it.calcShape(t,r,!1),o,!1);if(!a)throw new Error("Can\'t perform where op on the given tensors");u=a,d=V.size(u)}return{name:"Where",getShaderSource:a=>Cc(a,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)}})}},iu=e=>{e.compute(Ac(e.inputs))}});var uu,lu=q(()=>{"use strict";ya();En();za();Wa();bi();Ei();Pi();Vn();qi();Qi();ts();os();ss();ds();ms();gs();Mn();vs();xs();Vs();Ns();Vr();Gs();js();Zs();Js();ru();au();Wt();Pn();su();uu=new Map([["Abs",[Na]],["Acos",[Ua]],["Acosh",[Ha]],["Add",[wi]],["ArgMax",[ga,Tn]],["ArgMin",[ha,Tn]],["Asin",[Ga]],["Asinh",[La]],["Atan",[Fa]],["Atanh",[ja]],["Attention",[wa,ba]],["AveragePool",[Es,Ts]],["BatchNormalization",[Da]],["BiasAdd",[Va]],["BiasSplitGelu",[yi]],["Cast",[Ka,qa]],["Ceil",[Za]],["Clip",[Ya]],["Concat",[Oi,ki]],["Conv",[Nn,Wn]],["ConvTranspose",[ji,Fi]],["Cos",[Xa]],["Cosh",[Qa]],["Div",[vi]],["Einsum",[Zi,Xi]],["Elu",[Ja,Fr]],["Equal",[$i]],["Erf",[ei]],["Exp",[ti]],["Expand",[es]],["Floor",[ri]],["FusedConv",[Nn,Wn]],["Gather",[ns,rs]],["GatherElements",[is,as]],["Gelu",[ni]],["Gemm",[us,ls]],["GlobalAveragePool",[Ps,ks]],["GlobalMaxPool",[zs,Ds]],["Greater",[Ci]],["GreaterOrEqual",[_i]],["InstanceNormalization",[ps,cs]],["LayerNormalization",[hs,fs]],["LeakyRelu",[oi,Fr]],["Less",[Ai]],["LessOrEqual",[Ti]],["Log",[gi]],["MatMul",[zi]],["MaxPool",[Bs,Ms]],["Mul",[Si]],["MultiHeadAttention",[ws,bs]],["Neg",[ii]],["Not",[ai]],["Pad",[$s,Ss]],["Pow",[xi]],["Range",[Ws]],["Reciprocal",[si]],["ReduceMin",[la,rt]],["ReduceMean",[oa,rt]],["ReduceMax",[ua,rt]],["ReduceSum",[ca,rt]],["ReduceProd",[da,rt]],["ReduceL1",[aa,rt]],["ReduceL2",[ia,rt]],["ReduceLogSum",[ma,rt]],["ReduceLogSumExp",[sa,rt]],["ReduceSumSquare",[pa,rt]],["Relu",[ui]],["Resize",[Us,Hs]],["Sigmoid",[li]],["Sin",[di]],["Sinh",[ci]],["Slice",[Ks,Ys]],["SkipLayerNormalization",[Ls,Fs]],["Split",[eu,tu]],["Sqrt",[pi]],["Softmax",[Xs,Qs]],["Sub",[Ii]],["Tan",[mi]],["Tanh",[fi]],["ThresholdedRelu",[hi,Fr]],["Tile",[ou]],["Transpose",[Fo,jo]],["Where",[iu]]])});var tn,du=q(()=>{"use strict";Ne();vt();$e();tn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s,u,d){let a=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let h=[];for(let g of n)h.push({binding:h.length,resource:{buffer:g.buffer}});for(let g of s)h.push({binding:h.length,resource:{buffer:g.buffer}});d&&h.push({binding:h.length,resource:d});let v=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:h,label:t.programInfo.name});if(p.setBindGroup(0,v),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let g=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,g.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,b=this.backend.kernels.get(w),$=`[${b[0]}] ${b[1]}`;g.buffer.mapAsync(GPUMapMode.READ).then(()=>{let C=new BigUint64Array(g.buffer.getMappedRange()),A=C[0],I=C[1];g.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=A);let M=Number(A-this.backend.queryTimeBase),_=Number(I-this.backend.queryTimeBase);if(!Number.isSafeInteger(M)||!Number.isSafeInteger(_))throw new RangeError("incorrect timestamp range");this.backend.gpuDataManager.release(g.id);let B="";r.forEach((W,z)=>{B+=`input[${z}]: [${W.dims}] | ${ar(W.dataType)}, `});let O="";o.forEach((W,z)=>{O+=`output[${z}]: [${W.dims}] | ${ar(W.dataType)}, `}),console.log(`[profiling] kernel "${w}|${$}|${t.programInfo.name}" ${B}${O}execution time: ${_-M} ns`)})}this.backend.pendingDispatchNumber>=16&&this.backend.flush()}dispose(){}build(t,r){let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=Go(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:d,label:t.name});ke("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var _c,Tc,rn,cu=q(()=>{"use strict";vt();Do();No();lu();du();_c=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Tc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${_c(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},rn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t){if(!navigator.gpu)throw new Error("WebGpuBackend: WebGPU is not available.");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error("WebGpuBackend: Failed to get GPU adapter.");this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Wo(this),this.programManager=new tn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Bo(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return!!(this.device.features.has("timestamp-query")&&this.env.webgpu.profilingMode==="default")}run(t,r,o,n,s){let u=[];for(let I=0;I<r.length;++I){let M=this.gpuDataManager.get(r[I].data);if(!M)throw new Error(`no GPU data for input: ${r[I].data}`);u[I]=M}let{outputs:d,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?d.map((I,M)=>M):o;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let v=[],g=[];for(let I=0;I<d.length;++I){if(!Number.isInteger(h[I])||h[I]<-3||h[I]>=d.length)throw new Error(`Invalid output index: ${h[I]}`);if(h[I]===-3)continue;let M=h[I]===-1,_=h[I]===-2,B=M||_?s(d[I].dataType,d[I].dims):n(h[I],d[I].dataType,d[I].dims),O=this.gpuDataManager.get(B.data);if(!O)throw new Error(`no GPU data for output: ${B.data}`);if(M&&this.temporaryData.push(O),_){let W=this.kernelPersistentData.get(this.currentKernelId);W||(W=[],this.kernelPersistentData.set(this.currentKernelId,W)),W.push(O)}v.push(B),g.push(O)}let w;if(p){let I=0,M=0,_=[],B=1;p.forEach(z=>{let j=typeof z.data=="number"?[z.data]:z.data;if(j.length===0)return;let Z;switch(j.length){case 1:Z=4;break;case 2:Z=8;break;case 3:Z=16;break;case 4:Z=16;break;case 5:Z=16;break;case 6:Z=16;break;default:throw new Error(`unsupported data length: ${j.length}`)}(M===5||M===6)&&(Z=16),Z>B&&(B=Z),I=Math.ceil(I/Z)*Z,M=j.length,_.push(I),I+=j.length*4}),I=Math.ceil(I/B)*B;let O=new ArrayBuffer(I);p.forEach((z,j)=>{let Z=_[j],R=typeof z.data=="number"?[z.data]:z.data;z.type==="int32"?new Int32Array(O,Z,R.length).set(R):z.type==="uint32"?new Uint32Array(O,Z,R.length).set(R):new Float32Array(O,Z,R.length).set(R)});let W=this.gpuDataManager.create(I,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(W.buffer,0,O,0,I),this.gpuDataManager.release(W.id),w={offset:0,size:I,buffer:W.buffer}}let b=this.programManager.normalizeDispatchGroupSize(a),$=b[1]===1&&b[2]===1,C=Tc(t,r,$),A=this.programManager.getArtifact(C);return A||(A=this.programManager.build(t,b),this.programManager.setArtifact(C,A),ke("info",()=>`[artifact] key: ${C}, programName: ${t.name}`)),ke("info",()=>`[ProgramManager] run "${t.name}" (key=${C}) with ${b[0]}x${b[1]}x${b[2]}`),this.programManager.run(A,r,v,u,g,b,w),v}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=uu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],o]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,a]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),ke("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[d,o]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await Sn(this,t,r);return Mo(n.buffer,o)}}}});var pu={};Or(pu,{init:()=>Ec});var cr,jn,Ec,mu=q(()=>{"use strict";Ne();cu();vt();Ie();cr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(V.size(t)!==V.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},jn=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],v=n[s++],g=[];for(let w=0;w<v;w++)g.push(n[s++]);d.push(new cr(t,p,h,g))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,a,p)=>new cr(this.module,a,this.output(d,p),p),u=(d,a)=>{let p=ir(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*V.size(a);return new cr(this.module,d,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Ec=async(e,t)=>{let r=e.jsepInit;if(r&&navigator.gpu){if(!t.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP");let o=new rn;await o.initialize(t),r(o,n=>o.alloc(n),n=>o.free(n),(n,s,u,d=!1)=>{if(d)ke("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${s}, size=${u}`),o.memcpy(n,s);else{ke("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${s}, size=${u}`);let a=e.HEAPU8.subarray(n,n+u);o.upload(s,a)}},async(n,s,u)=>{ke("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${s}, size=${u}`),await o.download(n,()=>e.HEAPU8.subarray(s,s+u))},(n,s,u)=>o.createKernel(n,s,u,t.debug||t.webgpu.profilingMode==="default"?e.UTF8ToString(e._JsepGetNodeName(s)):`${s}`),n=>o.releaseKernel(n),(n,s,u,d)=>{ke("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${n}, contextDataOffset=${s}`);let a=new jn(e,o,s);return o.computeKernel(n,a,d)})}}});var _o;_o=yo();var Lu=Io(),yn,bn=!1,kr=!1,Ao=!1,Fu=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},ju=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},qu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",To=async e=>{if(bn)return Promise.resolve();if(kr)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Ao)throw new Error("previous call to \'initializeWebAssembly()\' failed.");kr=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=r>1&&Fu(),s=o&&ju(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,a=qu(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,v=[];if(t>0&&v.push(new Promise(g=>{setTimeout(()=>{h=!0,g()},t)})),v.push(new Promise((g,w)=>{let b=n?Lu:_o,$={locateFile:(C,A)=>{if(n&&C.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Co()],{type:"text/javascript"}));if(C.endsWith(".wasm")){if(p)return p;let I=d??A;return a==="ort-wasm-simd.wasm"?I+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?I+"ort-wasm-simd-threaded.jsep.wasm":I+a}return A+C}};if(n)if(typeof Blob>"u")$.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let C=`var ortWasmThreaded=${b.toString()};`;$.mainScriptUrlOrBlob=new Blob([C],{type:"text/javascript"})}b($).then(C=>{kr=!1,bn=!0,yn=C,g()},C=>{kr=!1,Ao=!0,w(C)})})),await Promise.race(v),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Me=()=>{if(bn&&yn)return yn;throw new Error("WebAssembly is not initialized yet.")};var ze=(e,t)=>{let r=Me(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},or=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")or(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Oe=e=>{let t=Me(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Eo=e=>{let t=Me(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=ze(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Oe("Can\'t create run options."),e?.extra!==void 0&&or(e.extra,"",new WeakSet,(u,d)=>{let a=ze(u,o),p=ze(d,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&Oe(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Ku=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Yu=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Zu=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Xu=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let d=ze("deviceType",r),a=ze(u.deviceType,r);Me()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let a=ze("numThreads",r),p=ze(d.toString(),r);Me()._OrtAddSessionConfigEntry(e,a,p)!==0&&Oe(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let d=ze("powerPreference",r),a=ze(u.powerPreference,r);Me()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=ze("preferredLayout",r),a=ze(u.preferredLayout,r);Me()._OrtAddSessionConfigEntry(e,d,a)!==0&&Oe(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=ze(n,r);Me()._OrtAppendExecutionProvider(e,s)!==0&&Oe(`Can\'t append execution provider: ${n}.`)}},Oo=e=>{let t=Me(),r=0,o=[],n=e||{};Zu(n);try{let s=Ku(n.graphOptimizationLevel??"all"),u=Yu(n.executionMode??"sequential"),d=typeof n.logId=="string"?ze(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?ze(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,a,p,h),r===0&&Oe("Can\'t create session options."),n.executionProviders&&Xu(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[v,g]of Object.entries(n.freeDimensionOverrides)){if(typeof v!="string")throw new Error(`free dimension override name must be a string: ${v}`);if(typeof g!="number"||!Number.isInteger(g)||g<0)throw new Error(`free dimension override value must be a non-negative integer: ${g}`);let w=ze(v,o);t._OrtAddFreeDimensionOverride(r,w,g)!==0&&Oe(`Can\'t set a free dimension override: ${v} - ${g}.`)}return n.extra!==void 0&&or(n.extra,"",new WeakSet,(v,g)=>{let w=ze(v,o),b=ze(g,o);t._OrtAddSessionConfigEntry(r,w,b)!==0&&Oe(`Can\'t set a session config entry: ${v} - ${g}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};Ne();var hu=!1,Oc=e=>{let t=Me(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Oe("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},kc=(e,t)=>{Me()._OrtInit(e,t)!==0&&Oe("Can\'t initialize onnxruntime.")},gu=async e=>{kc(e.wasm.numThreads,sr(e.logLevel));{let t=(mu(),zt(pu)).init;await t(Me(),e)}hu=!0},pr=new Map,yu=()=>hu,qn=e=>{let t=Me(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Kn=(e,t)=>{let r=Me(),o=0,n=0,s=0,u=[],d=[],a=[];try{[n,u]=Oo(t),o=r._OrtCreateSession(e[0],e[1],n),o===0&&Oe("Can\'t create a session.");let[p,h]=Oc(o),v=[],g=[],w=[];for(let $=0;$<p;$++){let C=r._OrtGetInputName(o,$);C===0&&Oe("Can\'t get an input name."),d.push(C),v.push(r.UTF8ToString(C))}for(let $=0;$<h;$++){let C=r._OrtGetOutputName(o,$);C===0&&Oe("Can\'t get an output name."),a.push(C);let A=r.UTF8ToString(C);g.push(A);{let I=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[A]??"cpu";if(I!=="cpu"&&I!=="cpu-pinned"&&I!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${I}.`);w.push(I)}}let b=null;return w.some($=>$==="gpu-buffer")&&(s=r._OrtCreateBinding(o),s===0&&Oe("Can\'t create IO binding."),b={handle:s,outputPreferredLocations:w,outputPreferredLocationsEncoded:w.map($=>vn($))}),pr.set(o,[o,d,a,b]),[o,v,g]}catch(p){throw d.forEach(h=>r._OrtFree(h)),a.forEach(h=>r._OrtFree(h)),s!==0&&r._OrtReleaseBinding(s),o!==0&&r._OrtReleaseSession(o),p}finally{r._free(e[0]),n!==0&&r._OrtReleaseSessionOptions(n),u.forEach(p=>r._free(p))}},bu=(e,t)=>{let r=qn(e);return Kn(r,t)},wu=e=>{let t=Me(),r=pr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(o),pr.delete(e)},fu=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Me(),u=e[0],d=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let w=e[2].gpuBuffer,b=ir(wn(u));h=d.reduce(($,C)=>$*C,1)*b,p=s.jsepRegisterBuffer(o,n,w,h)}else{let w=e[2];if(Array.isArray(w)){h=4*w.length,p=s._malloc(h),r.push(p);let b=p/4;for(let $=0;$<w.length;$++){if(typeof w[$]!="string")throw new TypeError(`tensor data at index ${$} is not a string`);s.HEAPU32[b++]=ze(w[$],r)}}else h=w.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,h),p)}let v=s.stackSave(),g=s.stackAlloc(4*d.length);try{let w=g/4;d.forEach($=>s.HEAP32[w++]=$);let b=s._OrtCreateTensor(wn(u),p,h,g,d.length,vn(a));b===0&&Oe(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(b)}finally{s.stackRestore(v)}},vu=async(e,t,r,o,n,s)=>{let u=Me(),d=pr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,v]=d,g=t.length,w=o.length,b=0,$=[],C=[],A=[],I=[],M=u.stackSave(),_=u.stackAlloc(g*4),B=u.stackAlloc(g*4),O=u.stackAlloc(w*4),W=u.stackAlloc(w*4);try{[b,$]=Eo(s);for(let Q=0;Q<g;Q++)fu(r[Q],C,I,e,t[Q]);for(let Q=0;Q<w;Q++)fu(n[Q],A,I,e,g+o[Q]);let z=_/4,j=B/4,Z=O/4,R=W/4;for(let Q=0;Q<g;Q++)u.HEAPU32[z++]=C[Q],u.HEAPU32[j++]=p[t[Q]];for(let Q=0;Q<w;Q++)u.HEAPU32[Z++]=A[Q],u.HEAPU32[R++]=h[o[Q]];if(v){let{handle:Q,outputPreferredLocations:we,outputPreferredLocationsEncoded:F}=v;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model\'s input count (${p.length}).`);for(let le=0;le<g;le++){let pe=t[le];await u._OrtBindInput(Q,p[pe],C[le])!==0&&Oe(`Can\'t bind input[${le}] for session=${e}.`)}for(let le=0;le<w;le++){let pe=o[le];n[le]?.[3]?u._OrtBindOutput(Q,h[pe],A[le],0)!==0&&Oe(`Can\'t bind pre-allocated output[${le}] for session=${e}.`):u._OrtBindOutput(Q,h[pe],0,F[pe])!==0&&Oe(`Can\'t bind output[${le}] to ${we[le]} for session=${e}.`)}}let Y;v?Y=await u._OrtRunWithBinding(a,v.handle,w,O,b):Y=await u._OrtRun(a,B,_,g,W,w,O,b),Y!==0&&Oe("failed to call OrtRun().");let fe=[];for(let Q=0;Q<w;Q++){let we=u.HEAPU32[O/4+Q];if(we===A[Q]){fe.push(n[Q]);continue}let F=u.stackSave(),le=u.stackAlloc(4*4),pe=!1,ye,he=0;try{u._OrtGetTensorData(we,le,le+4,le+8,le+12)!==0&&Oe(`Can\'t access output tensor data on index ${Q}.`);let Re=le/4,Ve=u.HEAPU32[Re++];he=u.HEAPU32[Re++];let L=u.HEAPU32[Re++],de=u.HEAPU32[Re++],be=[];for(let Be=0;Be<de;Be++)be.push(u.HEAPU32[L/4+Be]);u._OrtFree(L);let He=be.reduce((Be,We)=>Be*We,1);ye=ar(Ve);let qe=v?.outputPreferredLocations[o[Q]];if(ye==="string"){if(qe==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Be=[],We=he/4;for(let je=0;je<He;je++){let nt=u.HEAPU32[We++],Ye=je===He-1?void 0:u.HEAPU32[We]-nt;Be.push(u.UTF8ToString(nt,Ye))}fe.push([ye,be,Be,"cpu"])}else if(qe==="gpu-buffer"&&He>0){let Be=u.jsepGetBuffer(he),We=ir(Ve);if(We===void 0||!ko(ye))throw new Error(`Unsupported data type: ${ye}`);pe=!0,fe.push([ye,be,{gpuBuffer:Be,download:u.jsepCreateDownloader(Be,He*We,ye),dispose:()=>{u._OrtReleaseTensor(we)}},"gpu-buffer"])}else{let Be=Pr(ye),We=new Be(He);new Uint8Array(We.buffer,We.byteOffset,We.byteLength).set(u.HEAPU8.subarray(he,he+We.byteLength)),fe.push([ye,be,We,"cpu"])}}finally{u.stackRestore(F),ye==="string"&&he&&u._free(he),pe||u._OrtReleaseTensor(we)}}return v&&u._OrtClearBoundOutputs(v.handle),fe}finally{u.stackRestore(M),C.forEach(z=>u._OrtReleaseTensor(z)),A.forEach(z=>u._OrtReleaseTensor(z)),I.forEach(z=>u._free(z)),b!==0&&u._OrtReleaseRunOptions(b),$.forEach(z=>u._free(z))}},$u=e=>{let t=Me(),r=pr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Oe("Can\'t get an profile file name."),t._OrtFree(n)},Su=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{switch(e.data.type){case"init-wasm":try{To(e.data.in).then(()=>postMessage({type:"init-wasm"}),t=>postMessage({type:"init-wasm",err:t}))}catch(t){postMessage({type:"init-wasm",err:t})}break;case"init-ort":try{gu(e.data.in).then(()=>postMessage({type:"init-ort"}),t=>postMessage({type:"init-ort",err:t}))}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{let{model:t}=e.data.in,r=qn(t);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{let{modeldata:t,options:r}=e.data.in,o=Kn(t,r);postMessage({type:"create_finalize",out:o})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{let{model:t,options:r}=e.data.in,o=bu(t,r);postMessage({type:"create",out:o})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{wu(e.data.in),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{let{sessionId:t,inputIndices:r,inputs:o,outputIndices:n,options:s}=e.data.in;vu(t,r,o,n,new Array(n.length).fill(null),s).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:"run",err:"Proxy does not support non-cpu tensor location."}):postMessage({type:"run",out:u},Su(u))},u=>{postMessage({type:"run",err:u})})}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{let t=e.data.in;$u(t),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}break;case"is-ort-env-initialized":try{let t=yu();postMessage({type:"is-ort-env-initialized",out:t})}catch(t){postMessage({type:"is-ort-env-initialized",err:t})}break;default:}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var xt,Xe,Sn,Aa,Ea,ba,wa,va,$a,Sa,xa,Ia,Ca,_a,Ot,Lp,$n,vl,$l,Sl,xl,Ta,Il,Cl,_l,Al,Oa=j(()=>{"use strict";St();bl();Yt();xt=()=>!!Te.wasm.proxy&&typeof document<"u",Sn=!1,Aa=!1,Ea=!1,va=[],$a=[],Sa=[],xa=[],Ia=[],Ca=[],_a=[],Ot=()=>{if(Sn||!Aa||Ea||!Xe)throw new Error("worker not ready")},Lp=e=>{switch(e.data.type){case"init-wasm":Sn=!1,e.data.err?(Ea=!0,ba[1](e.data.err)):(Aa=!0,ba[0]());break;case"init-ort":e.data.err?wa[1](e.data.err):wa[0]();break;case"create_allocate":e.data.err?va.shift()[1](e.data.err):va.shift()[0](e.data.out);break;case"create_finalize":e.data.err?$a.shift()[1](e.data.err):$a.shift()[0](e.data.out);break;case"create":e.data.err?Sa.shift()[1](e.data.err):Sa.shift()[0](e.data.out);break;case"release":e.data.err?xa.shift()[1](e.data.err):xa.shift()[0]();break;case"run":e.data.err?Ia.shift()[1](e.data.err):Ia.shift()[0](e.data.out);break;case"end-profiling":e.data.err?Ca.shift()[1](e.data.err):Ca.shift()[0]();break;case"is-ort-env-initialized":e.data.err?_a.shift()[1](e.data.err):_a.shift()[0](e.data.out);break;default:}},$n=typeof document<"u"?document?.currentScript?.src:void 0,vl=async()=>{if(xt()){if(Aa)return;if(Sn)throw new Error("multiple calls to 'initWasm()' detected.");if(Ea)throw new Error("previous call to 'initWasm()' failed.");return Sn=!0,Te.wasm.wasmPaths===void 0&&$n&&$n.indexOf("blob:")!==0&&(Te.wasm.wasmPaths=$n.substr(0,+$n.lastIndexOf("/")+1)),new Promise((e,t)=>{Xe?.terminate();let r=URL.createObjectURL(new Blob([wl()],{type:"text/javascript"}));Xe=new Worker(r,{name:"ort-wasm-proxy-worker"}),Xe.onerror=n=>t(n),Xe.onmessage=Lp,URL.revokeObjectURL(r),ba=[e,t];let a={type:"init-wasm",in:Te.wasm};Xe.postMessage(a)})}else return Wo(Te.wasm)},$l=async e=>{if(xt())return Ot(),new Promise((t,r)=>{wa=[t,r];let a={type:"init-ort",in:e};Xe.postMessage(a)});await cl(e)},Sl=async e=>xt()?(Ot(),new Promise((t,r)=>{va.push([t,r]);let a={type:"create_allocate",in:{model:e}};Xe.postMessage(a,[e.buffer])})):ga(e),xl=async(e,t)=>xt()?(Ot(),new Promise((r,a)=>{$a.push([r,a]);let n={type:"create_finalize",in:{modeldata:e,options:t}};Xe.postMessage(n)})):ya(e,t),Ta=async(e,t)=>{if(xt()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Ot(),new Promise((r,a)=>{Sa.push([r,a]);let n={type:"create",in:{model:e,options:t}};Xe.postMessage(n,[e.buffer])})}else return fl(e,t)},Il=async e=>{if(xt())return Ot(),new Promise((t,r)=>{xa.push([t,r]);let a={type:"release",in:e};Xe.postMessage(a)});ml(e)},Cl=async(e,t,r,a,n,s)=>{if(xt()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return Ot(),new Promise((u,l)=>{Ia.push([u,l]);let o=r,c={type:"run",in:{sessionId:e,inputIndices:t,inputs:o,outputIndices:a,options:s}};Xe.postMessage(c,yl(o))})}else return hl(e,t,r,a,n,s)},_l=async e=>{if(xt())return Ot(),new Promise((t,r)=>{Ca.push([t,r]);let a={type:"end-profiling",in:e};Xe.postMessage(a)});gl(e)},Al=async()=>xt()?(Ot(),new Promise((e,t)=>{_a.push([e,t]);let r={type:"is-ort-env-initialized"};Xe.postMessage(r)})):pl()});var xn,El,Gp,In,Tl=j(()=>{"use strict";St();Oa();Ve();El=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Gp=e=>{switch(e[3]){case"cpu":return new Fe(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Jr(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Fe.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},In=class{async createSessionAllocate(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return Sl(new Uint8Array(a))}async loadModel(t,r){if(await Al()||(xn||(xn=$l(Te)),await xn,xn=void 0),typeof t=="string")if(typeof process<"u"&&process.versions&&process.versions.node){let a=await(void 0)(t);[this.sessionId,this.inputNames,this.outputNames]=await Ta(a,r)}else{let a=await this.createSessionAllocate(t);[this.sessionId,this.inputNames,this.outputNames]=await xl(a,r)}else[this.sessionId,this.inputNames,this.outputNames]=await Ta(t,r)}async dispose(){return Il(this.sessionId)}async run(t,r,a){let n=[],s=[];Object.entries(t).forEach(m=>{let b=m[0],w=m[1],$=this.inputNames.indexOf(b);if($===-1)throw new Error(`invalid input '${b}'`);n.push(w),s.push($)});let u=[],l=[];Object.entries(r).forEach(m=>{let b=m[0],w=m[1],$=this.outputNames.indexOf(b);if($===-1)throw new Error(`invalid output '${b}'`);u.push(w),l.push($)});let o=n.map((m,b)=>El(m,()=>`input "${this.inputNames[s[b]]}"`)),c=u.map((m,b)=>m?El(m,()=>`output "${this.outputNames[l[b]]}"`):null),f=await Cl(this.sessionId,s,o,l,c,a),y={};for(let m=0;m<f.length;m++)y[this.outputNames[l[m]]]=u[m]??Gp(f[m]);return y}startProfiling(){}endProfiling(){_l(this.sessionId)}}});var Fp,Cn,Ol=j(()=>{"use strict";St();Oa();Tl();Fp=()=>{if((typeof Te.wasm.initTimeout!="number"||Te.wasm.initTimeout<0)&&(Te.wasm.initTimeout=0),typeof Te.wasm.simd!="boolean"&&(Te.wasm.simd=!0),typeof Te.wasm.proxy!="boolean"&&(Te.wasm.proxy=!1),typeof Te.wasm.numThreads!="number"||!Number.isInteger(Te.wasm.numThreads)||Te.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Te.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Cn=class{async init(){Fp(),await vl()}async createInferenceSessionHandler(t,r){let a=new In;return await a.loadModel(t,r),Promise.resolve(a)}}});var kl={};Wt(kl,{wasmBackend:()=>jp});var jp,Rl=j(()=>{"use strict";Ol();jp=new Cn});var Kp={};Wt(Kp,{InferenceSession:()=>bo,Tensor:()=>Fe,TrainingSession:()=>So,default:()=>qp,env:()=>Te,registerBackend:()=>$t});St();St();St();var Io="1.17.0";var qp=Mn;{let e=(Rl(),At(kl)).wasmBackend;typeof navigator<"u"&&navigator.gpu&&$t("webgpu",e,5),$t("cpu",e,10),$t("wasm",e,10),$t("xnnpack",e,9),$t("webnn",e,9)}Object.defineProperty(Te.versions,"web",{value:Io,enumerable:!0});return At(Kp);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
